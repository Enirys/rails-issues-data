number,title,user,labels,created_at,updated_at,closed_at,body
50411,`find_by` is broken when passing an instance that uses composite primary keys,claracodes,"activerecord, attached PR, With reproduction steps",2023-12-20T22:27:50Z,2023-12-21T08:36:20Z,,"Big thanks for adding support for composite primary keys. We’ve implemented them and seen big performance gains - we’re using them on partitioned tables! 
However, `find_by` seems to be broken when trying to pass in an instance that uses composite primary keys.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""activerecord"", ""7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, primary_key: [:id, :company_id], force: true do |t|
    t.integer :id
    t.integer :company_id
  end

  create_table :profiles, primary_key: :id, force: true do |t|
    t.integer :user_id
    t.integer :company_id
  end
end

class User < ActiveRecord::Base
  has_one :profile
end

class Profile < ActiveRecord::Base
  belongs_to :user, query_constraints: [:user_id, :company_id]
end

class BugTest < Minitest::Test
  def test_find_by
    user = User.create!(id: [1, 1])
    profile = Profile.create(id: 1, user_id: 1, company_id: 1)

    assert_equal profile, Profile.find_by(user: user)
  end
end
```"
50399,async_count returns a Integer instead of a Promise,guillaumebriday,"activerecord, attached PR",2023-12-19T16:00:51Z,2023-12-22T05:42:06Z,2023-12-22T05:42:06Z,"### Steps to reproduce

When being cached, sometime the `#async_count` method returns an Integer instead of a Promise


```ruby
projects = policy_scope(Project)
projects.async_count
#  CACHE Project Count (0.1ms)  SELECT COUNT(*) FROM ""projects"" WHERE ""projects"".""team_id"" = $1

#=> 792 
```

I found a workaround adding useless a `where`
```ruby
projects = policy_scope(Project.where('1=1')
projects.async_count
#=> #<ActiveRecord::Promise status=pending>
```

### Expected behavior
In my views, I call it with `.value` and it raises an error because it's an Integer and not a `#<ActiveRecord::Promise status=pending>`


### System configuration
**Rails version**: Latest

**Ruby version**: 3.2.2
"
50398,"API only, multi DB. Undefined method `id' for {}:Hash",maxrosecollins,more-information-needed,2023-12-19T14:56:31Z,2023-12-22T13:23:55Z,,"I am upgrading to 7.1.2 from 7.0.7.
It is api_only.
I am using multi db.

I am pretty sure it is related to adding session management back into an api only app and using multi db but I don't know the root cause.

After upgrading, to 7.1.2 I get errors on all request specs.


```
undefined method `id' for {}:Hash

> To access an interactive console with this error, point your browser to: /__better_errors


spec/requests/domains_spec.rb, line 298
---------------------------------------

ruby
  293     end
  294
  295     # Test suite for GET /v1/domains
  296     describe 'GET /v1/domains' do
  297       before do
> 298         get '/v1/domains',
  299             headers: {'ACCEPT'        => 'application/json',
  300                       'Authorization' => ""Bearer #{token}""}
  301       end
  302
  303       context 'when domain exists' do


App backtrace
-------------

 - spec/requests/domains_spec.rb:298:in `block (3 levels) in <top (required)>'
 - spec/rails_helper.rb:103:in `block (3 levels) in <top (required)>'
 - spec/rails_helper.rb:102:in `block (2 levels) in <top (required)>'

Full backtrace
--------------

 - rack (2.2.8) lib/rack/session/abstract/id.rb:329:in `current_session_id'
 - rack (2.2.8) lib/rack/session/abstract/id.rb:335:in `session_exists?'
 - actionpack (7.1.2) lib/action_dispatch/request/session.rb:230:in `exists?'
 - actionpack (7.1.2) lib/action_dispatch/request/session.rb:270:in `load!'
 - actionpack (7.1.2) lib/action_dispatch/request/session.rb:258:in `load_for_write!'
 - actionpack (7.1.2) lib/action_dispatch/request/session.rb:185:in `update'
 - actionpack (7.1.2) lib/action_dispatch/request/session.rb:20:in `create'
 - actionpack (7.1.2) lib/action_dispatch/middleware/session/abstract_store.rb:76:in `prepare_session'
 - rack (2.2.8) lib/rack/session/abstract/id.rb:265:in `context'
 - rack (2.2.8) lib/rack/session/abstract/id.rb:260:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/cookies.rb:689:in `call'
 - rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
 - activerecord (7.1.2) lib/active_record/middleware/database_selector.rb:67:in `block in call'
 - activesupport (7.1.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
 - activerecord (7.1.2) lib/active_record/middleware/database_selector/resolver.rb:58:in `block in read_from_primary'
 - activerecord (7.1.2) lib/active_record/connection_handling.rb:361:in `with_role_and_shard'
 - activerecord (7.1.2) lib/active_record/connection_handling.rb:147:in `connected_to'
 - activerecord (7.1.2) lib/active_record/middleware/database_selector/resolver.rb:57:in `read_from_primary'
 - activerecord (7.1.2) lib/active_record/middleware/database_selector/resolver.rb:37:in `read'
 - activerecord (7.1.2) lib/active_record/middleware/database_selector.rb:77:in `select_database'
 - activerecord (7.1.2) lib/active_record/middleware/database_selector.rb:66:in `call'
 - rack (2.2.8) lib/rack/etag.rb:27:in `call'
 - rack (2.2.8) lib/rack/conditional_get.rb:27:in `call'
 - rack (2.2.8) lib/rack/head.rb:12:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
 - activesupport (7.1.2) lib/active_support/callbacks.rb:101:in `run_callbacks'
 - actionpack (7.1.2) lib/action_dispatch/middleware/callbacks.rb:28:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/executor.rb:14:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/actionable_exceptions.rb:16:in `call'
 - appsignal (3.4.10) lib/appsignal/rack/rails_instrumentation.rb:32:in `call_with_appsignal_monitoring'
 - appsignal (3.4.10) lib/appsignal/rack/rails_instrumentation.rb:17:in `call'
 - better_errors (2.10.1) lib/better_errors/middleware.rb:87:in `protected_app_call'
 - better_errors (2.10.1) lib/better_errors/middleware.rb:82:in `better_errors_call'
 - better_errors (2.10.1) lib/better_errors/middleware.rb:60:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/debug_exceptions.rb:29:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'
 - railties (7.1.2) lib/rails/rack/logger.rb:37:in `call_app'
 - railties (7.1.2) lib/rails/rack/logger.rb:24:in `block in call'
 - activesupport (7.1.2) lib/active_support/tagged_logging.rb:135:in `block in tagged'
 - activesupport (7.1.2) lib/active_support/tagged_logging.rb:39:in `tagged'
 - activesupport (7.1.2) lib/active_support/tagged_logging.rb:135:in `tagged'
 - activesupport (7.1.2) lib/active_support/broadcast_logger.rb:240:in `method_missing'
 - railties (7.1.2) lib/rails/rack/logger.rb:24:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/remote_ip.rb:92:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/request_id.rb:28:in `call'
 - rack (2.2.8) lib/rack/runtime.rb:22:in `call'
 - activesupport (7.1.2) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/executor.rb:14:in `call'
 - actionpack (7.1.2) lib/action_dispatch/middleware/static.rb:25:in `call'
 - rack (2.2.8) lib/rack/sendfile.rb:110:in `call'
 - rack-cors (2.0.1) lib/rack/cors.rb:102:in `call'
 - railties (7.1.2) lib/rails/engine.rb:529:in `call'
 - rack-test (2.1.0) lib/rack/test.rb:360:in `process_request'
 - rack-test (2.1.0) lib/rack/test.rb:153:in `request'
 - actionpack (7.1.2) lib/action_dispatch/testing/integration.rb:288:in `process'
 - actionpack (7.1.2) lib/action_dispatch/testing/integration.rb:16:in `get'
 - actionpack (7.1.2) lib/action_dispatch/testing/integration.rb:379:in `get'
 - spec/requests/domains_spec.rb:298:in `block (3 levels) in <top (required)>'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:457:in `instance_exec'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:365:in `run'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:529:in `block in run_owned_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:528:in `run_owned_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:615:in `block in run_example_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:614:in `run_example_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:484:in `run'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:505:in `run_before_example'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:261:in `block in run'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:511:in `block in with_around_and_singleton_context_hooks'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:468:in `block in with_around_example_hooks'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:486:in `block in run'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:626:in `block in run_around_example_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:352:in `call'
 - rspec-rails (6.1.0) lib/rspec/rails/adapters.rb:75:in `block (2 levels) in <module:MinitestLifecycleAdapter>'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:457:in `instance_exec'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:390:in `execute_with'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:628:in `block (2 levels) in run_around_example_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:352:in `call'
 - spec/rails_helper.rb:103:in `block (3 levels) in <top (required)>'
 - database_cleaner-core (2.0.1) lib/database_cleaner/strategy.rb:30:in `cleaning'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/3.2.0/forwardable.rb:240:in `cleaning'
 - database_cleaner-core (2.0.1) lib/database_cleaner/cleaners.rb:34:in `block (2 levels) in cleaning'
 - database_cleaner-core (2.0.1) lib/database_cleaner/cleaners.rb:35:in `cleaning'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/3.2.0/forwardable.rb:240:in `cleaning'
 - spec/rails_helper.rb:102:in `block (2 levels) in <top (required)>'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:457:in `instance_exec'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:390:in `execute_with'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:628:in `block (2 levels) in run_around_example_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:352:in `call'
 - webmock (3.18.1) lib/webmock/rspec.rb:37:in `block (2 levels) in <top (required)>'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:457:in `instance_exec'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:390:in `execute_with'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:628:in `block (2 levels) in run_around_example_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:352:in `call'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:629:in `run_around_example_hooks_for'
 - rspec-core (3.12.2) lib/rspec/core/hooks.rb:486:in `run'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:468:in `with_around_example_hooks'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:511:in `with_around_and_singleton_context_hooks'
 - rspec-core (3.12.2) lib/rspec/core/example.rb:259:in `run'
 - rspec-core (3.12.2) lib/rspec/core/example_group.rb:646:in `block in run_examples'
 - rspec-core (3.12.2) lib/rspec/core/example_group.rb:642:in `run_examples'
 - rspec-core (3.12.2) lib/rspec/core/example_group.rb:607:in `run'
 - rspec-core (3.12.2) lib/rspec/core/example_group.rb:608:in `block in run'
 - rspec-core (3.12.2) lib/rspec/core/example_group.rb:608:in `run'
 - rspec-core (3.12.2) lib/rspec/core/example_group.rb:608:in `block in run'
 - rspec-core (3.12.2) lib/rspec/core/example_group.rb:608:in `run'
 - rspec-core (3.12.2) lib/rspec/core/runner.rb:121:in `block (3 levels) in run_specs'
 - rspec-core (3.12.2) lib/rspec/core/runner.rb:121:in `block (2 levels) in run_specs'
 - rspec-core (3.12.2) lib/rspec/core/configuration.rb:2070:in `with_suite_hooks'
 - rspec-core (3.12.2) lib/rspec/core/runner.rb:116:in `block in run_specs'
 - rspec-core (3.12.2) lib/rspec/core/reporter.rb:74:in `report'
 - rspec-core (3.12.2) lib/rspec/core/runner.rb:115:in `run_specs'
 - rspec-core (3.12.2) lib/rspec/core/runner.rb:89:in `run'
 - rspec-core (3.12.2) lib/rspec/core/runner.rb:71:in `run'
 - rspec-core (3.12.2) lib/rspec/core/runner.rb:45:in `invoke'
 - rspec-core (3.12.2) exe/rspec:4:in `<top (required)>'
 - /Users/max/.rbenv/versions/3.2.2/bin/rspec:25:in `<top (required)>'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/cli/exec.rb:58:in `kernel_load'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/cli/exec.rb:23:in `run'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/cli.rb:492:in `exec'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/vendor/thor/lib/thor/command.rb:27:in `run'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/vendor/thor/lib/thor/invocation.rb:127:in `invoke_command'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/vendor/thor/lib/thor.rb:392:in `dispatch'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/cli.rb:34:in `dispatch'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/vendor/thor/lib/thor/base.rb:485:in `start'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/cli.rb:28:in `start'
 - bundler (2.4.19) exe/bundle:37:in `block in <top (required)>'
 - /Users/max/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/bundler/friendly_errors.rb:117:in `with_friendly_errors'
 - bundler (2.4.19) exe/bundle:29:in `<top (required)>'
 - /Users/max/.rbenv/versions/3.2.2/bin/bundle:25:in `<main>'
```"
50380,"active_record_migrations.rb raises `Unknown migration version ""7.2""; expected one of ""4.2"", ""5.0"", ""5.1"", ""5.2"", ""6.0"", ""6.1"", ""7.0"", ""7.1"" (ArgumentError)`",yahonda,ci issues,2023-12-17T08:34:03Z,2023-12-17T14:10:21Z,2023-12-17T14:10:21Z,"There is a CI failure at https://buildkite.com/rails/rails/builds/102815#018c7671-f43c-4e7a-a654-03893ab28d0f/1384-1395

### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails/guides/bug_report_templates
ruby active_record_migrations.rb
```

### Expected behavior
It should pass.

### Actual behavior
It raises `Unknown migration version ""7.2""; expected one of ""4.2"", ""5.0"", ""5.1"", ""5.2"", ""6.0"", ""6.1"", ""7.0"", ""7.1"" (ArgumentError)`.

```ruby
$ ruby active_record_migrations.rb
Fetching gem metadata from https://rubygems.org/...........
Resolving dependencies....
Using rake 13.1.0
Using base64 0.2.0
Using timeout 0.4.1
Using mini_mime 1.1.5
Using date 3.3.4
Using bundler 2.3.22
Using io-console 0.7.1
Using stringio 3.1.0
Using webrick 1.8.1
Using thor 1.3.0
Using sqlite3 1.6.9 (x86_64-linux)
Using net-protocol 0.2.2
Using psych 5.1.1.1
Using reline 0.4.1
Using connection_pool 2.4.1
Using ruby2_keywords 0.0.5
Using minitest 5.20.0
Using mutex_m 0.2.0
Using builder 3.2.4
Using erubi 1.12.0
Using racc 1.7.3
Using crass 1.0.6
Using rack 3.0.8
Using drb 2.2.0
Using nokogiri 1.15.5 (x86_64-linux)
Using net-imap 0.4.8
Using net-pop 0.1.2
Using net-smtp 0.4.0
Using rdoc 6.6.2
Using websocket-extensions 0.1.5
Using bigdecimal 3.1.5
Using marcel 1.0.2
Using concurrent-ruby 1.2.2
Using nio4r 2.7.0
Using loofah 2.22.0
Using rack-session 2.0.0
Using rack-test 2.1.0
Using websocket-driver 0.7.6
Using mail 2.8.1
Using irb 1.10.1
Using rackup 2.1.0
Using zeitwerk 2.6.12
Using i18n 1.14.1
Using rails-html-sanitizer 1.6.0
Using tzinfo 2.0.6
Using activesupport 7.1.2
Using rails-dom-testing 2.2.0
Using globalid 1.2.1
Using activemodel 7.1.2
Using actionview 7.1.2
Using activejob 7.1.2
Using activerecord 7.1.2
Using actionpack 7.1.2
Using activestorage 7.1.2
Using actionmailer 7.1.2
Using actionmailbox 7.1.2
Using actioncable 7.1.2
Using actiontext 7.1.2
Using railties 7.1.2
Using rails 7.1.2
-- create_table(:payments, {:force=>true})
D, [2023-12-17T17:32:35.577211 #823527] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""payments""
D, [2023-12-17T17:32:35.577532 #823527] DEBUG -- :    (0.1ms)  CREATE TABLE ""payments"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""amount"" decimal(10,0) DEFAULT 0 NOT NULL)
   -> 0.0078s
D, [2023-12-17T17:32:35.578502 #823527] DEBUG -- :    (0.1ms)  CREATE TABLE ""schema_migrations"" (""version"" varchar NOT NULL PRIMARY KEY)
D, [2023-12-17T17:32:35.579533 #823527] DEBUG -- :    (0.1ms)  CREATE TABLE ""ar_internal_metadata"" (""key"" varchar NOT NULL PRIMARY KEY, ""value"" varchar, ""created_at"" datetime(6) NOT NULL, ""updated_at"" datetime(6) NOT NULL)
D, [2023-12-17T17:32:35.592536 #823527] DEBUG -- :   ActiveRecord::InternalMetadata Load (1.1ms)  SELECT * FROM ""ar_internal_metadata"" WHERE ""ar_internal_metadata"".""key"" = ? ORDER BY ""ar_internal_metadata"".""key"" ASC LIMIT 1  [[nil, ""environment""]]
D, [2023-12-17T17:32:35.592848 #823527] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.1ms)  INSERT INTO ""ar_internal_metadata"" (""key"", ""value"", ""created_at"", ""updated_at"") VALUES ('environment', 'development', '2023-12-17 08:32:35.592603', '2023-12-17 08:32:35.592607') RETURNING ""key""
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.2/lib/active_record/migration/compatibility.rb:11:in `find': Unknown migration version ""7.2""; expected one of ""4.2"", ""5.0"", ""5.1"", ""5.2"", ""6.0"", ""6.1"", ""7.0"", ""7.1"" (ArgumentError)

          raise ArgumentError, ""Unknown migration version #{version.inspect}; expected one of #{versions.sort.join(', ')}""
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	from /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.2/lib/active_record/migration.rb:613:in `[]'
	from active_record_migrations.rb:34:in `<main>'
yahonda@myryzen:~/src/github.com/rails/rails/guides/bug_report_templates$
yahonda@myryzen:~/src/github.com/rails/rails/guides/bug_report_templates$
yahonda@myryzen:~/src/github.com/rails/rails/guides/bug_report_templates$
yahonda@myryzen:~/src/github.com/rails/rails/guides/bug_report_templates$
yahonda@myryzen:~/src/github.com/rails/rails/guides/bug_report_templates$ ruby active_record_migrations.rb
Fetching gem metadata from https://rubygems.org/...........
Resolving dependencies....
Using rake 13.1.0
Using base64 0.2.0
Using bigdecimal 3.1.5
Using concurrent-ruby 1.2.2
Using connection_pool 2.4.1
Using ruby2_keywords 0.0.5
Using minitest 5.20.0
Using mutex_m 0.2.0
Using builder 3.2.4
Using erubi 1.12.0
Using racc 1.7.3
Using crass 1.0.6
Using rack 3.0.8
Using nio4r 2.7.0
Using websocket-extensions 0.1.5
Using zeitwerk 2.6.12
Using timeout 0.4.1
Using marcel 1.0.2
Using mini_mime 1.1.5
Using date 3.3.4
Using bundler 2.3.22
Using io-console 0.7.1
Using stringio 3.1.0
Using webrick 1.8.1
Using thor 1.3.0
Using sqlite3 1.6.9 (x86_64-linux)
Using drb 2.2.0
Using i18n 1.14.1
Using tzinfo 2.0.6
Using nokogiri 1.15.5 (x86_64-linux)
Using rack-session 2.0.0
Using rack-test 2.1.0
Using websocket-driver 0.7.6
Using net-protocol 0.2.2
Using psych 5.1.1.1
Using reline 0.4.1
Using rackup 2.1.0
Using activesupport 7.1.2
Using loofah 2.22.0
Using net-imap 0.4.8
Using net-pop 0.1.2
Using net-smtp 0.4.0
Using rdoc 6.6.2
Using rails-dom-testing 2.2.0
Using irb 1.10.1
Using globalid 1.2.1
Using activemodel 7.1.2
Using activejob 7.1.2
Using rails-html-sanitizer 1.6.0
Using mail 2.8.1
Using activerecord 7.1.2
Using actionview 7.1.2
Using actionpack 7.1.2
Using actioncable 7.1.2
Using activestorage 7.1.2
Using actionmailer 7.1.2
Using railties 7.1.2
Using actionmailbox 7.1.2
Using actiontext 7.1.2
Using rails 7.1.2
-- create_table(:payments, {:force=>true})
D, [2023-12-17T17:33:01.178868 #823958] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""payments""
D, [2023-12-17T17:33:01.179208 #823958] DEBUG -- :    (0.1ms)  CREATE TABLE ""payments"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""amount"" decimal(10,0) DEFAULT 0 NOT NULL)
   -> 0.0077s
D, [2023-12-17T17:33:01.180190 #823958] DEBUG -- :    (0.1ms)  CREATE TABLE ""schema_migrations"" (""version"" varchar NOT NULL PRIMARY KEY)
D, [2023-12-17T17:33:01.181233 #823958] DEBUG -- :    (0.1ms)  CREATE TABLE ""ar_internal_metadata"" (""key"" varchar NOT NULL PRIMARY KEY, ""value"" varchar, ""created_at"" datetime(6) NOT NULL, ""updated_at"" datetime(6) NOT NULL)
D, [2023-12-17T17:33:01.194049 #823958] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.9ms)  SELECT * FROM ""ar_internal_metadata"" WHERE ""ar_internal_metadata"".""key"" = ? ORDER BY ""ar_internal_metadata"".""key"" ASC LIMIT 1  [[nil, ""environment""]]
D, [2023-12-17T17:33:01.194366 #823958] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.1ms)  INSERT INTO ""ar_internal_metadata"" (""key"", ""value"", ""created_at"", ""updated_at"") VALUES ('environment', 'development', '2023-12-17 08:33:01.194117', '2023-12-17 08:33:01.194121') RETURNING ""key""
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.2/lib/active_record/migration/compatibility.rb:11:in `find': Unknown migration version ""7.2""; expected one of ""4.2"", ""5.0"", ""5.1"", ""5.2"", ""6.0"", ""6.1"", ""7.0"", ""7.1"" (ArgumentError)

          raise ArgumentError, ""Unknown migration version #{version.inspect}; expected one of #{versions.sort.join(', ')}""
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	from /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.2/lib/active_record/migration.rb:613:in `[]'
	from active_record_migrations.rb:34:in `<main>'
$
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
50368,ActiveRecord 7.1 regression in model scoping in callback when created from association,segiddins,"activerecord, With reproduction steps",2023-12-16T04:43:45Z,2023-12-19T16:35:03Z,2023-12-19T10:50:55Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""rubygems""
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :versions, force: true do |t|
    t.references :api_key
    t.references :rubygem
    t.string :number
    t.string :platform
    t.boolean :latest, default: false
    t.boolean :indexed, default: false
  end

  create_table :rubygems, force: true do |t|
  end
  
  create_table :api_keys, force: true do |t|
  end
end

class Version < ActiveRecord::Base
  belongs_to :rubygem
  belongs_to :api_key
  
  after_save :reorder_versions, if: -> { saved_change_to_id? }
  delegate :reorder_versions, to: :rubygem
end

class Rubygem < ActiveRecord::Base
  has_many :versions
  
  def reorder_versions
      logger.info Version.all.to_sql

      versions_of_platforms = versions
        .group_by(&:platform)
        
      versions_of_platforms.each_value do |platforms|
        Version.find(platforms.max.id).update_column(:latest, true)
      end
    end
end

class ApiKey < ActiveRecord::Base
  has_many :versions
end

class BugTest < Minitest::Test
  def test_association_stuff
    gem1 = Rubygem.create!
    api_key = ApiKey.create!
    v1 = Version.create!(rubygem: gem1, platform: ""ruby"", indexed: true)
    v2 = Version.create!(rubygem: gem1, api_key:, platform: ""ruby"", indexed: true)
    
    api_key.versions.create_with(indexed: true).find_or_create_by!(
      rubygem: gem1, number: ""0.1.0"", platform: ""ruby""
    )

    assert_equal 3, gem1.reload.versions.count
  end
end
```

### Expected behavior

On Rails 7.0.x, this test case passes
The logged `Version.all.to_sql` in the callback is `SELECT ""versions"".* FROM ""versions""`

### Actual behavior

On Rails 7.1.2, the test case fails with

```
ActiveRecord::RecordNotFound: Couldn't find Version with 'id'=1 [WHERE ""versions"".""api_key_id"" = ?]
    /Users/segiddins/.gem/ruby/3.2.2/gems/activerecord-7.1.0/lib/active_record/relation/finder_methods.rb:416:in `raise_record_not_found_exception!'
    /Users/segiddins/.gem/ruby/3.2.2/gems/activerecord-7.1.0/lib/active_record/relation/finder_methods.rb:522:in `find_one'
    /Users/segiddins/.gem/ruby/3.2.2/gems/activerecord-7.1.0/lib/active_record/relation/finder_methods.rb:499:in `find_with_ids'
    /Users/segiddins/.gem/ruby/3.2.2/gems/activerecord-7.1.0/lib/active_record/relation/finder_methods.rb:92:in `find'
    /Users/segiddins/.gem/ruby/3.2.2/gems/activerecord-7.1.0/lib/active_record/querying.rb:23:in `find'
    /Users/segiddins/.gem/ruby/3.2.2/gems/activerecord-7.1.0/lib/active_record/core.rb:245:in `find'
    Untitled.rb:59:in `block in reorder_versions'
    Untitled.rb:58:in `each_value'
    Untitled.rb:58:in `reorder_versions'
    Untitled.rb:46:in `reorder_versions'
```

And the logged query is `SELECT ""versions"".* FROM ""versions"" WHERE ""versions"".""api_key_id"" = 1`

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
"
50351,Loading an async null / @none=true relation causes a method not implemented error,walski,"activerecord, With reproduction steps",2023-12-13T22:15:10Z,2023-12-14T11:33:27Z,2023-12-14T11:33:27Z,"### Steps to reproduce

Unfortunately I wasn't able to create an executable test case but if you change [this AR test case](https://github.com/rails/rails/blob/ee65e97829e1d09a00047958273656d3b6488924/activerecord/test/cases/relation/load_async_test.rb#L32-L42) to become:

```ruby
    def test_scheduled?
      deferred_posts = Post.where(author_id: 1).load_async
      if in_memory_db?
        assert_not_predicate deferred_posts, :scheduled?
      else
        assert_predicate deferred_posts, :scheduled?
      end
      assert_predicate deferred_posts, :loaded?
      deferred_posts.to_a
      assert_not_predicate deferred_posts, :scheduled?

      ## ADDED THESE TWO LINES ##
      none_posts = Post.none.load_async.to_a
      assert_not_predicate deferred_posts, :scheduled?
    end
```

And then run `bundle exec ruby -Itest test/cases/relation/load_async_test.rb  -n 'test_scheduled?'`

It hopefully gets close to a standalone test. If somebody can help me get a standalone test that can inherit from `ActiveRecord::TestCase`, I could also put up a real executable test case.

### Expected behavior

No exception is raised.

### Actual behavior

NoMethodError: undefined method `!' for #<ActiveRecord::Promise status=complete>
    /Users/walski/Desktop/rails_bug/rails-main/activerecord/lib/active_record/relation.rb:716:in `scheduled?'

### System configuration
**Rails version**: `main` but also `7.1.2`

**Ruby version**: 3.2.2

### Possible cause

I think for null / `@none = true` relations, [this code](https://github.com/rails/rails/blob/ee65e97829e1d09a00047958273656d3b6488924/activerecord/lib/active_record/relation.rb#L963) causes `@future_result` to be an `ActiveRecord::Promise` which does explicitly not implement `!`. While for normal (`@none = false`) relations `@future_result` is a `ActiveRecord::FutureResult` which DOES implement `!`.
"
50346,Incorrect derived foreign key for models with query constraints,iamradioactive,"activerecord, attached PR, With reproduction steps",2023-12-13T09:50:41Z,2023-12-23T17:01:33Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

When we initialise a model with an associated active record object, the foreign key for the associated record is not being derived correctly when the associated model is a part of query constraints.

This works correctly for without query constraints.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""7.1""
  gem ""sqlite3""
  gem 'pry'
end

require ""active_record""
require ""logger""
require ""minitest/autorun""
require 'pry'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')

ActiveRecord::Schema.define do
  create_table :tenants, force: true do |t|
    t.string :name
  end

  create_table :comments, force: true do |t|
    t.integer :tenant_id
    t.integer :post_id
    t.integer :author_id
    t.string :body
    t.integer :position
  end

  create_table :authors, force: true do |t|
    t.integer :tenant_id
  end
end

class Tenant < ActiveRecord::Base
end

class Author < ActiveRecord::Base
  query_constraints :tenant_id, :id

  belongs_to :tenant
end

class Comment < ActiveRecord::Base
  query_constraints :tenant_id, :id

  belongs_to :tenant
  belongs_to :author
end

class BugTest < Minitest::Test
  def test_assoc
    tenant = Tenant.create!
    comment = Comment.new(body: ""hello"", tenant: tenant, author: Author.new(tenant: tenant))

    assert_equal tenant, comment.tenant
    assert_equal tenant.id, comment.tenant_id
  end
end

# Your reproduction script goes here
```

### Expected behavior
<!-- Tell us what should happen -->

- `comment.tenent_id` should return the value for `tenant.id`

### Actual behavior
<!-- Tell us what happens instead -->
- `comment.tenant_id` returns `nil`

### System configuration
**Rails version**: 7.1

**Ruby version**: 2.7.8
"
50345,Regression in integration tests when providing as: :html,inkstak,attached PR,2023-12-13T08:01:05Z,2023-12-23T17:02:00Z,,"### Steps to reproduce

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.hosts << ""www.example.com""
  routes.draw do
    resources :characters
  end

  config.root   = __dir__
  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger
end

class CharactersController < ActionController::Base
  def create
    render head: :no_content
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < ActionDispatch::IntegrationTest
  def test_params_without_content_type
    post ""/characters"", params: { name: ""Muad'Dib"" }
  end

  def test_params_with_htm_content_type
    post ""/users"", as: :html, params: { name: ""Muad'Dib"" }
  end

  private

  def app
    Rails.application
  end
end
```

### Expected behavior

In Rails 7.0, the second test works.

### Actual behavior

In Rails 7.1, the second test will raise an error :

```
BugTest#test_params_with_htm_content_type:
NoMethodError: undefined method `to_html' for {:name=>""Muad'Dib""}:Hash
    .../actionpack/lib/action_dispatch/testing/request_encoder.rb:39:in `encode_params'
    .../actionpack/lib/action_dispatch/testing/integration.rb:251:in `process'
    .../actionpack/lib/action_dispatch/testing/integration.rb:22:in `post'
    .../actionpack/lib/action_dispatch/testing/integration.rb:379:in `post'
    issue_bug.rb:39:in `test_params_with_htm_content_type'
```

### System configuration

**Rails version**:

Rails 7.1.2 & main

**Ruby version**:

Ruby 3.2.2"
50344,Inaccurate documentation for config.active_support.executor_around_test_case,semaperepelitsa,docs,2023-12-13T07:28:47Z,2023-12-14T22:32:32Z,2023-12-14T07:19:56Z,"The guide says:

> [3.14.17 config.active_support.executor_around_test_case](https://guides.rubyonrails.org/configuring.html#config-active-support-executor-around-test-case)
> Configure the test suite to call `Rails.application.executor.wrap` around test cases.

But the actual implementation calls `executor.perform`

https://github.com/rails/rails/blob/531643244474446efc061b559504ed67acc8cae1/activesupport/lib/active_support/executor/test_helper.rb#L3-L7

I don't know myself what is the actual difference with `wrap` - the method is marked as ""nodoc"".
"
50327,ActiveRecord: none?(...) should behave the same as exists?(...),james-em,"activerecord, With reproduction steps",2023-12-11T15:34:58Z,2023-12-15T18:14:46Z,2023-12-14T16:31:10Z,"### Steps to reproduce
```
OK:
irb(main):022> User.where(discarded_at: nil).none?
  User Exists? (1.4ms)  SELECT 1 AS one FROM ""users"" WHERE ""users"".""discarded_at"" IS NULL LIMIT $1  [[""LIMIT"", 1]]
=> false

OK: 
irb(main):023> User.where(discarded_at: nil).exists?
  User Exists? (1.8ms)  SELECT 1 AS one FROM ""users"" WHERE ""users"".""discarded_at"" IS NULL LIMIT $1  [[""LIMIT"", 1]]
=> true

NOT OK:
irb(main):024> User.none?(discarded_at: nil)
  User Load (1.5ms)  SELECT ""users"".* FROM ""users""
=> true

OK:
irb(main):025> User.exists?(discarded_at: nil)
  User Exists? (1.4ms)  SELECT 1 AS one FROM ""users"" WHERE ""users"".""discarded_at"" IS NULL LIMIT $1  [[""LIMIT"", 1]]
=> true
```
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.datetime :discarded_at
  end
end

class User < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_none_against_exists_a
    User.create!(discarded_at: nil)

    # SUCCESS
    assert_equal User.where(discarded_at: nil).exists?, !User.where(discarded_at: nil).none?
  end

  def test_none_against_exists_b
    User.create!(discarded_at: nil)
    # FAIL
    assert_equal User.exists?(discarded_at: nil), !User.none?(discarded_at: nil)
  end
end
```

### Expected behavior

`exists?` and `none?` should behave the same

### Actual behavior
`none?(...)` completly discard what is being passed in parameters

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
"
50326,Inconsistent results of params.deep_transform_keys,iagopiimenta,"actionpack, With reproduction steps",2023-12-11T15:30:54Z,2023-12-11T21:17:02Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""action_controller/railtie""
require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_stuff
    raw_parameters = { item: { exampleOne: 1 } }
    params = ActionController::Parameters.new(raw_parameters)
    #<ActionController::Parameters {""item""=>{""exampleOne""=>1}} permitted: false>

    expected = { 'item' => { 'example_one' => 1 } }
    assert_equal(expected, params.deep_transform_keys(&:underscore).to_unsafe_h) # true

    params[:item] # just access the item
    params
    #<ActionController::Parameters {""item""=>#<ActionController::Parameters {""exampleOne""=>1} permitted: false>} permitted: false>

    assert_equal(expected, params.deep_transform_keys(&:underscore).to_unsafe_h) # false
  end
end
```

### Expected behavior
`params.deep_transform_keys` should transform the keys of the params, including nested hashes, arrays, and `ActionController::Parameters`.
`params[key]` should not change the params object

### Actual behavior
`params.deep_transform_keys` fails to transform the keys of `ActionController::Parameters` nested inside params.
`params[key]` changes the params object.

### System configuration
**Rails version**: Rails 5+

**Ruby version**: Ruby 2.3+
"
50324,`ActiveSupport::BroadcastLogger` does not respect `config.log_level` in Rails 7.1,ghiculescu,activesupport,2023-12-11T07:30:46Z,2023-12-12T21:06:21Z,,"I am working on upgrading an app from Rails 7 to 7.1 and onto edge. I've come across an issue that I think is a bug, but could also be configuration not being used as intended.

Rails 7 config:

```ruby
# config/application.rb
config.logger = Logist::Logger.new($stdout)
other_logger = AnotherLogger.new

config.logger.extend(ActiveSupport::Logger.broadcast(other_logger))

config.log_level = :info if Rails.env.production?
```

With this config, `Rails.logger.debug` does nothing in production. 🟢 

The Rails 7 config relied on the private API described in https://github.com/rails/rails/pull/48615, so we have to refactor it for 7.1. 7.1/Edge Rails config:

```ruby
# config/application.rb
config.logger = Logist::Logger.new($stdout)
other_logger = AnotherLogger.new

config.logger = ActiveSupport::BroadcastLogger.new(config.logger, other_logger)

config.log_level = :info if Rails.env.production?
```

With this config, `Rails.logger.debug` logs in production. 🔴 

I think the issue comes from https://github.com/rails/rails/pull/49721, since the `log_level` is no longer being assigned to the broadcast loggers. I would expect `config.log_level` to work for whatever you assign `config.logger` too, and if that's changing it seems like a breaking change to me.

Is the expectation that if you use `BroadcastLogger`, you set the `level` manually on loggers?

cc @Edouard-chin @andrewn617  @rafaelfranca 

### System configuration
**Rails version**: `main`

**Ruby version**: 3.2
"
50318,`Where(relation: )` broken for polymorphic records when using composite primary keys,jackozi,"activerecord, attached PR, With reproduction steps",2023-12-10T10:41:36Z,2023-12-11T15:20:09Z,2023-12-11T15:20:09Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

When creating a polymorphic association with composite primary keys where(relation: model) is broken. 

- Create a model with composite primary key (e.g. Post as commentable) 
- Point another model towards it with a polymorphic relation (e.g Comment)
- Comment.where(commentable: post) will raise: `ArgumentError: Expected corresponding value for [""commentable_title"", ""commentable_author""] to be an Array`

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, primary_key: [:title, :author], force: true do |t|
    t.string :title
    t.string :author
  end

  create_table :comments, force: true do |t|
    t.string :commentable_title
    t.string :commentable_author
    t.string :commentable_type
  end
end

class Post < ActiveRecord::Base
  has_many :comments, query_constraints: %i[commentable_title commentable_author], as: :commentable
end

class Comment < ActiveRecord::Base
  belongs_to :commentable, query_constraints: %i[commentable_title commentable_author], polymorphic: true
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(title: ""post"", author: ""author"")
    post.comments << Comment.create!

    assert Comment.where(commentable: post).exists?
  end
end
```

### Expected behavior
Correct collection should be returned. 

### Actual behavior
Error is raised instead 

### System configuration
**Rails version**: edge 

**Ruby version**: 3.2.2
"
50315,Polymorphic association in model with query constraints pointing to incorrect records,iamradioactive,"activerecord, With reproduction steps",2023-12-09T19:04:02Z,2023-12-11T15:12:46Z,2023-12-11T15:12:46Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
While working on #50297 I found another bug related to query constraints for Polymorphic associations. I am looking into this but I created an issue here as I suspect there might be similar issues related to the usage of Query constraints.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'rails', '7.1'
  gem 'sqlite3'
  gem 'pry'
end

require ""active_record""
require ""logger""
require 'minitest/autorun'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')

ActiveRecord::Schema.define do
  create_table :comments, force: true do |t|
    t.integer :tenant_id
    t.references :commentable, polymorphic: true, null: false
    t.string :body
    t.integer :position
  end

  create_table :authors, force: true do |t|
    t.integer :tenant_id
  end
end

class Author < ActiveRecord::Base
  query_constraints :tenant_id, :id

  has_many :comments, as: :commentable
end 

class Comment < ActiveRecord::Base
  query_constraints :tenant_id, :id

  belongs_to :commentable, polymorphic: true
end

class BugTest < Minitest::Test
  # Case when Author with tenant_id exists
  def test_when_id_exists
    author_1 = Author.create!(tenant_id: 1)
    author_2 = Author.create!(tenant_id: 1)
    comment = Comment.create(tenant_id: 1, commentable_id: author_2.id, commentable_type: 'Author')

    # BUG: Makes a query with tenant_id
    assert_equal author_2.id, comment.commentable.id 
  end

  # Case when Author with tenant_id does not exist
  def test_when_id_does_not_exist
    author = Author.create!(tenant_id: 11)
    comment = Comment.create(tenant_id: 11, commentable_id: author.id, commentable_type: 'Author')

    assert_equal author.id, comment.commentable&.id 
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

### Actual behavior
<!-- Tell us what happens instead -->

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 2.7.8
"
50311,Collection Association's empty? method is not working correctly due to counter_cache,ZainIftikhar7vals,"activerecord, attached PR, With reproduction steps",2023-12-09T14:10:52Z,2023-12-10T16:30:16Z,,"### Steps to reproduce
I'm using ActiveRecord 7.1.0 and Ruby 3.2.2 and I'm facing a bug due to counter_cache being negative. If you have a parent-child association like this:

```ruby
class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, counter_cache: true
end
```

Then say you have a Post with no comments
```ruby
first_post = Post.new(name: 'post 1')
```
Now if by any chance Post#comments_count becomes negative

```ruby
first_post.update!(comments_count: -1)
first_post.comments.empty? 
```
this `empty?` returns false due to negative counter_cache. It should return true as the DB query would return true.

Here is a standalone script that reproduces the issue:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.integer :comments_count
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, counter_cache: true
end

class BugTest < Minitest::Test
  def test_comments_association_is_empty 
    post = Post.create!
    post.update(comments_count: -1)
    assert_equal true, post.comments.empty?
  end
end
```
Same issue occurs on older versions of ActiveRecord as well."
50303,alias_attribute gives a deprecation warning for store attributes in Rails 7.1,easydatawarehousing,"activerecord, With reproduction steps",2023-12-08T15:32:44Z,2023-12-12T14:11:40Z,,"When upgrading an app from Rails 7.0 to Rails 7.1 I'm getting these warnings:

    DEPRECATION WARNING: MyModel model aliases `t`, but `t` is not an attribute.
    Starting in Rails 7.2, alias_attribute with non-attribute targets will raise.

The attribute I want to alias is defined in an Active Record Store.
This behavior was introduced in this PR [48972](https://github.com/rails/rails/pull/48972).

### Steps to reproduce

``` ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :my_models, force: true do |t|
    t.string :properties
  end
end

class MyModel < ActiveRecord::Base
  store :properties, accessors: [:t], coder: JSON
  alias_attribute :title, :t
end

class BugTest < Minitest::Test
  def test_alias_attribute
    my_model = MyModel.create!(title: ""My title"")
    assert_equal my_model.title, ""My title""
    assert_equal my_model.t, ""My title""
  end
end
```

### Expected behavior
No warnings are given.

### Actual behavior

```
-- create_table(:my_models, {:force=>true})
Run options: --seed 9361
# Running:

DEPRECATION WARNING: MyModel model aliases `t`, but `t` is not an attribute. Starting in Rails 7.2, alias_attribute with non-attribute targets will raise. Use `alias_method :title, :t` or define the method manually.

Finished in 0.004296s, 232.7610 runs/s, 465.5219 assertions/s.
1 runs, 2 assertions, 0 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2

### Possible solutions

1. Change the test in [ActiveRecord::AttributeMethods::ClassMethods](https://github.com/ipc103/rails/blob/eae26caec3e38c21835f4afd8622aad20c16c713/activerecord/lib/active_record/attribute_methods.rb#L83) to include attributes defined in stores (preferred)
2. Add a method like `alias_store_attribute` which adds getter and setter methods for the aliased name"
50294,Similar naming of relation and enum results in scope with incorrect result,shobee,"activerecord, With reproduction steps",2023-12-07T15:16:05Z,2023-12-08T16:13:02Z,2023-12-08T16:13:01Z,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
  gem 'pry-byebug'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.integer :posts
    t.integer :user_posts
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post

  enum posts: { read: 0, unread: 1 }, _prefix: true
  enum user_posts: { read: 0, unread: 1 }, _prefix: true
end

class BugTest < Minitest::Test
  def test_association_stuff
    byebug

    # See the difference between
    # (byebug) Comment.user_posts_read
    #   => SELECT ""comments"".* FROM ""comments"" WHERE ""comments"".""user_posts"" = ? LIMIT ?  [[""user_posts"", 0], [""LIMIT"", 11]]

    # and

    # (byebug) Comment.posts_read
    #   => SELECT ""comments"".* FROM ""comments"" WHERE ""comments"".""post_id"" = ? LIMIT ?  [[""post_id"", 0], [""LIMIT"", 11]]
end
```

Execute the two different commands above on console and watch the SQL results.

### Expected behavior
`Comment.posts_read`
should execute SQL Query
`SELECT ""comments"".* FROM ""comments"" WHERE ""comments"".""posts"" = ? LIMIT ?  [[""posts"", 0], [""LIMIT"", 11]]`

### Actual behavior
`Comment.posts_read`
results in 
`SELECT ""comments"".* FROM ""comments"" WHERE ""comments"".""post_id"" = ? LIMIT ?  [[""post_id"", 0], [""LIMIT"", 11]]`


### System configuration
**Rails version**: main

**Ruby version**: ruby 3.2.1


Yes, the constellation is really strange but I stumbled upon a similar situation in my clients code. I don't expect this to be fixed but rather a warning or exception about the conflict.

"
50283,ActiveRecord: where.associated and where.missing produce an extra join vs using where / where.not with a check for nil,nickjj,"activerecord, With reproduction steps",2023-12-06T13:55:21Z,2023-12-08T21:49:05Z,2023-12-08T21:41:01Z,"### Steps to reproduce

Here's an example where I have (2) models: `Receipt` and `Affiliate`

- An affiliate `has_many :receipts`
- A receipt `belongs_to :affiliate, optional: true`

#### associated vs where.not

Both of them produce a list of `receipts` that have an `affiliate_id` set:

```rb
Receipt.where.associated(:affiliate)
SELECT ""receipts"".* FROM ""receipts"" INNER JOIN ""affiliates"" ON ""affiliates"".""id"" = ""receipts"".""affiliate_id"" WHERE ""affiliates"".""id"" IS NOT NULL /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]

Receipt.where.not(affiliate: nil)
SELECT ""receipts"".* FROM ""receipts"" WHERE ""receipts"".""affiliate_id"" IS NOT NULL /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]
```

#### missing vs where

Both of them produce a list of `receipts` that don't have an `affiliate_id` set:

```rb
Receipt.where.missing(:affiliate)
SELECT ""receipts"".* FROM ""receipts"" LEFT OUTER JOIN ""affiliates"" ON ""affiliates"".""id"" = ""receipts"".""affiliate_id"" WHERE ""affiliates"".""id"" IS NULL /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]

Receipt.where(affiliate: nil)
SELECT ""receipts"".* FROM ""receipts"" WHERE ""receipts"".""affiliate_id"" IS NULL /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]
```

### Expected behavior

- `Receipt.where.associated(:affiliate)` produces the same query as `Receipt.where.not(affiliate: nil)`
- `Receipt.where.missing(:affiliate)` produces the same query as `Receipt.where(affiliate: nil)`

### Actual behavior

- `Receipt.where.associated(:affiliate)` creates an extra join
- `Receipt.where.missing(:affiliate)` creates an extra join

### System configuration

**Rails version**: 7.1.1

**Ruby version**: 3.2.2

**Database adapter / version**: Postgres 15.4
"
50267,FullStackConsoleTest fails with `irb (1.10.0)`,yahonda,"railties, ci issues",2023-12-05T11:15:37Z,2023-12-05T17:14:13Z,2023-12-05T17:14:13Z,"Managed to reproduce CI failure https://buildkite.com/rails/rails/builds/102508#018c323f-aa3f-4317-a8ff-d56e6c424f74/

### Steps to reproduce

```ruby
git clone https://github.com/rails/rails/
cd rails/railties
bundle update irb --conservative
git diff # to show the irb version changed 
bin/test test/application/console_test.rb
```

### Expected behavior
It should pass.
### Actual behavior
It always fails as follows.

```ruby
$ git diff
diff --git a/Gemfile.lock b/Gemfile.lock
index b20a0a0b9b..fd339f71f6 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -285,7 +285,7 @@ GEM
       activesupport (>= 6.0.0)
       railties (>= 6.0.0)
     io-console (0.6.0)
-    irb (1.8.3)
+    irb (1.10.0)
       rdoc
       reline (>= 0.3.8)
     jbuilder (2.11.5)
$ bin/test test/application/console_test.rb
Run options: --seed 28275

# Running:

.F

Failure:
FullStackConsoleTest#test_sandbox_by_default_with_no_sandbox [/home/yahonda/src/github.com/rails/rails/railties/test/application/console_test.rb:123]:
""> "" expected, but got:


WARNING: terminal is not fully functional
Press RETURN to continue .
Expected ""\r\nWARNING: terminal is not fully functional\r\nPress RETURN to continue "" to include ""> "".


bin/test test/application/console_test.rb:180

F

Failure:
FullStackConsoleTest#test_environment_option_and_irb_option [/home/yahonda/src/github.com/rails/rails/railties/test/application/console_test.rb:123]:
""> "" expected, but got:

a = 1
WARNING: terminal is not fully functional
Press RETURN to continue .
Expected ""a = 1\r\nWARNING: terminal is not fully functional\r\nPress RETURN to continue "" to include ""> "".


bin/test test/application/console_test.rb:204

F

Failure:
FullStackConsoleTest#test_sandbox [/home/yahonda/src/github.com/rails/rails/railties/test/application/console_test.rb:122]:
""=> 0"" expected, but got:


irb(main):001> Pirb(main):001> Poirb(main):001> Posirb(main):001> Postirb(main):001> Post.irb(main):001> Post.cirb(main):001> Post.coirb(main):001> Post.couirb(main):001> Post.counirb(main):001> Post.count   TRANSACTION (0.0ms)  begin transaction
  Post Count (0.1ms)  SELECT COUNT(*) FROM ""posts""
WARNING: terminal is not fully functional
Press RETURN to continue .
Expected ""\r\nirb(main):001> Pirb(main):001> Poirb(main):001> Posirb(main):001> Postirb(main):001> Post.irb(main):001> Post.cirb(main):001> Post.coirb(main):001> Post.couirb(main):001> Post.counirb(main):001> Post.count\e[0m \e[0m  \e[1m\e[36mTRANSACTION (0.0ms)\e[0m  \e[1m\e[36mbegin transaction\e[0m\r\n  \e[1m\e[36mPost Count (0.1ms)\e[0m  \e[1m\e[34mSELECT COUNT(*) FROM \""posts\""\e[0m\r\nWARNING: terminal is not fully functional\r\nPress RETURN to continue "" to include ""=> 0"".


bin/test test/application/console_test.rb:140

F

Failure:
FullStackConsoleTest#test_sandbox_by_default [/home/yahonda/src/github.com/rails/rails/railties/test/application/console_test.rb:123]:
""> "" expected, but got:


WARNING: terminal is not fully functional
Press RETURN to continue .
Expected ""\r\nWARNING: terminal is not fully functional\r\nPress RETURN to continue "" to include ""> "".


bin/test test/application/console_test.rb:168

F

Failure:
FullStackConsoleTest#test_sandbox_by_default_with_development_environment [/home/yahonda/src/github.com/rails/rails/railties/test/application/console_test.rb:123]:
""> "" expected, but got:


WARNING: terminal is not fully functional
Press RETURN to continue .
Expected ""\r\nWARNING: terminal is not fully functional\r\nPress RETURN to continue "" to include ""> "".


bin/test test/application/console_test.rb:192

......

Finished in 76.221321s, 0.1574 runs/s, 0.6953 assertions/s.
12 runs, 53 assertions, 5 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
50260,`#set_callback` does not support `:on` option,joshuay03,"activerecord, attached PR",2023-12-04T12:42:16Z,2023-12-05T04:43:07Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

A (common?) pattern in Rails apps is to skip a callback and reenable it. However, there's no straightforward way to do this when the callback is originally defined with the `:on` option. This option is only supported by the `after_commit` (including the following shortcuts: `after_save_commit`, `after_create_commit`, `after_update_commit`, `after_destroy_commit`) and `after_rollback` callbacks.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
  gem ""net-protocol"", ""0.2.2""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title, null: false
  end
end

class Post < ActiveRecord::Base
  after_update_commit :my_method

  private
    def my_method
      puts ""in my_method""
    end
end

class BugTest < Minitest::Test
  def test_set_callback_with_on
    post = Post.create!(title: ""Created title"") # nothing printed ✅
    post.update!(title: ""Updated title 1"") # prints ""in my_method"" ✅

    Post.skip_callback(:commit, :after, :my_method)

    post.update!(title: ""Updated title 2"") # nothing printed ✅

    Post.set_callback(:commit, :after, :my_method, on: :update) # not supported

    post = Post.create!(title: ""Created title"") # prints ""in my_method"" ❌
    post.update!(title: ""Updated title 1"") # prints ""in my_method"" ✅
  end
end
```

A (not ideal) workaround to solve this currently is to mimic how the conditions are set when the callback is defined.

<details>
<summary>For example, here's how the options are set for `#after_update_commit`</summary>

https://github.com/rails/rails/blob/06d9c3cbe6c92ea2ca8dd6d601a0997821748b5e/activerecord/lib/active_record/transactions.rb#L249-L253

https://github.com/rails/rails/blob/06d9c3cbe6c92ea2ca8dd6d601a0997821748b5e/activerecord/lib/active_record/transactions.rb#L278-L290

https://github.com/rails/rails/blob/06d9c3cbe6c92ea2ca8dd6d601a0997821748b5e/activerecord/lib/active_record/transactions.rb#L444-L455

</details>

We can do the following to simulate the above:

```ruby
Post.set_callback(:commit, :after, :my_method, if: -> { transaction_include_any_action?([:update]) })
```

or

```ruby
Post.set_callback(:commit, :after, :my_method, if: -> { !(@_new_record_before_last_commit || destroyed?) && _trigger_update_callback) })
```

I think a patch for this is tricky since these callback types are defined by `ActiveRecord` but `#set_callback` is defined in `ActiveSupport`. I got [this PR](https://github.com/rails/rails/pull/50261) up as a POC of one possible solution which shouldn't break any existing usage of `#set_callback` while also adding this new functionality.

### Expected behavior
<!-- Tell us what should happen -->

A callback set with `#set_callback` and a `on: :action` option should only run when that action is triggered.

### Actual behavior
<!-- Tell us what happens instead -->

A callback set with `#set_callback` and a `on: :action` option runs independent of that action.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
"
50258,Eager loading bug with inverse_of and the same model in the query twice,pjb3,activerecord,2023-12-03T19:33:46Z,2023-12-19T22:40:26Z,,"I'm using Rails 7.1.2 and Ruby 3.2.2 and I'm seeing a bug with how associated records are loaded when `has_many_inversing` is enabled and `inverse_of` is used in the association and the association is used in the query twice. If you have a parent-child association like this:

```ruby
class User < ActiveRecord::Base
  belongs_to :group, inverse_of: :users
end

class Group < ActiveRecord::Base
  has_many :users, inverse_of: :group
end
```

Then say you have a group with 2 users:

```ruby
group = Group.create!(name: ""Test"")

User.create!(group: group, name: ""John"")
User.create!(group: group, name: ""Jane"")
```

Now let's say you load one of the users and eagerly load the group and the users in the group, like this:

```ruby
User.eager_load(:group => :users).where(""users.id = ?"", 1).first.group.users.map(&:name)
```

I would expect this to return the 2 users, like this:

```ruby
[""John"", ""Jane""]
```

But instead the group is repeated, like this:

```ruby
[""John"", ""John"", ""Jane""]
```

This bug only happens when `has_many_inversing` is set to `true`.

Here is a standalone script that reproduces the issue:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Base.has_many_inversing = true

ActiveRecord::Schema.define do
  create_table ""groups"", force: :cascade do |t|
    t.string ""name""
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end

  create_table ""users"", force: :cascade do |t|
    t.integer ""group_id"", null: false
    t.string ""name""
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
    t.index [""group_id""], name: ""index_users_on_group_id""
  end

  add_foreign_key ""users"", ""groups""
end

class User < ActiveRecord::Base
  belongs_to :group, inverse_of: :users
end

class Group < ActiveRecord::Base
  has_many :users, inverse_of: :group
end

class BugTest < Minitest::Test
  def test_association_loads_correct_number_of_records
    # Create a group
    group = Group.create!(name: ""Test"")

    # Create two users in the group
    john = User.create!(group: group, name: ""John"")
    jane = User.create!(group: group, name: ""Jane"")

    group = Group.find(group.id)
    john = User.find(john.id)
    jane = User.find(jane.id)

    # When you load the use then get the size of the users in the group, you correctly get 2
    assert_equal 2, john.group.users.map(&:name).size

    # But when you eager_load the first user, there are 3 users in the group
    assert_equal 2, User.eager_load(:group => :users).where(""users.id = ?"", 1).first.group.users.map(&:name).size,
      ""expected the first group to have 2 users""
  end
end
```
"
50256,Rails 7.1: query_constraints: causes relation to not be loaded.,yosiat,activerecord,2023-12-03T18:16:43Z,2023-12-16T17:02:52Z,,"While trying to use `query_constraints` (awesome feature 🙏 ) I have seen a case where a relation is `nil` on `after_add` callback.

I reduced my application to this reproduction script and to cause `comment.author` to be nil with `query_constraints` we need to have: Default order in `comments` & `after_initialize` that touches the model.

See the script below to better understand my reproduction.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""pg""
end

require ""active_record""
require ""logger""

ActiveRecord::Base.establish_connection(
  adapter: ""postgresql"",
  database: ""test"",
  encoding: ""unicode"",
  host: ""localhost"",
  port: ""5432"",
  password: ""12345"",
  username: ""test"")

ActiveRecord::Schema.define do
  create_table :comments, force: true do |t|
    t.integer :tenant_id
    t.integer :author_id
    t.string :body
    t.integer :position
  end

  create_table :authors, force: true do |t|
    t.integer :tenant_id
  end
end

class Author < ActiveRecord::Base
  query_constraints :tenant_id, :id

  has_many :comments, -> { order(position: :asc) }, after_add: :on_comment_added

  def on_comment_added(comment)
    puts ""added comment: #{comment.author}""
  end
end

class Comment < ActiveRecord::Base
  query_constraints :tenant_id, :id

  belongs_to :author

  after_initialize :calculate_rating, if: :new_record?

  def calculate_rating
    # In our-case since we access `self.author` in `after_initialize` (which always be empty in this case - valid)
    # this will make `comment.author` to be later (in `on_comment_added`) to be blank.
    #
    # In real-world we call this in `after_initialize` and in other callbacks.
    puts ""author_id: #{self.author}""
  end
end

author = Author.create!(tenant_id: 1)
author.comments << Comment.create(body: ""hello"", tenant_id: 1)
```


### Expected behavior

`comment.author` to be accesible in `on_comment_added`, so if we run the reproduce script without `query_constraints`,
we should get this output:
```
author_id: 
added comment: #<Author:0x00000001312f6a48>
```

<!-- Tell us what should happen -->

### Actual behavior

`comment.author` is nil in `on_comment_added`, so we get this output:
```
author_id: 
added comment: 
```

### System configuration
**Rails version**: 7.1
**Ruby version**: `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]`
"
50246,Global Rails Engines issue using `isolate_namespace` not respecting ActiveRecord table name prefix ,chaadow,"engines, attached PR",2023-12-02T15:01:19Z,2023-12-06T22:37:23Z,2023-12-06T22:37:22Z,"cc @jonathanhefner 

Discovered in https://github.com/rails/rails/pull/50167 while trying to fix https://github.com/rails/rails/issues/35811

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
From: https://github.com/rails/rails/pull/50167#issuecomment-1832448732 


<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""rails/all""

module TestEngine
  class Engine < Rails::Engine
    isolate_namespace TestEngine
  end

  class Record < ActiveRecord::Base
  end
end

class TestApp < Rails::Application
  config.load_defaults Rails::VERSION::STRING.to_f

  config.root = __dir__
  config.hosts << ""example.org""
  config.eager_load = false
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  config.active_record.table_name_prefix = ""abc_""
  config.active_record.table_name_suffix = ""_xyz""
end

ENV[""DATABASE_URL""] = ""sqlite3::memory:""

Rails.application.initialize!

ActiveRecord::Schema.define do
  create_table :test_engine_records do |t|
    t.string :value
  end
end

require ""minitest/autorun""

class EngineTest < Minitest::Test
  def test_record_table_name
    assert_equal ""abc_test_engine_records_xyz"", TestEngine::Record.table_name
  end

  def test_record
    TestEngine::Record.create!(value: ""foo"")
    assert_equal ""foo"", TestEngine::Record.first.value
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
Engine models should respect both ActiveRecord table name prefix and suffix

### Actual behavior
<!-- Tell us what happens instead -->
Engine models only respects the table name suffix but not the prefix. And for internal rails gems/engines like ActiveStorage and ActionText, they do not respect both because of the hard coded table names.

A partial fix to this issue for AS can be found in this commit with a unit test similar to the reproduction script: https://github.com/chaadow/rails/commit/ee2f7df6b174291171aa97411a0485f1552206fe#diff-c7ed83d63aba266c9477a423f458fbd44d0ba4f192331e0b2d6e3f69c8faa8f6R3-R8

### System configuration
**Rails version**:
main / 7.1.x ( but also 7.x and probably older.)
**Ruby version**:
3.2.2"
50238,Rails New Framework Default Documentation is Inadequate,BenSandeen,docs,2023-12-01T20:01:48Z,2023-12-18T19:17:13Z,,"### Steps to reproduce
Go to https://guides.rubyonrails.org/v7.0/configuring.html and try to figure out what each setting does

### Expected behavior
Documentation documents things and explains how they work

### Actual behavior
Documentation restates each new framework default in plain English, typically with little or no additional information

### System configuration
**Rails version**: 7.0

**Ruby version**: 3.0

Sorry for being a bit flippant, but it's _incredibly frustrating_ when trying to turn on these new framework defaults (which are, by definition, very likely to be breaking changes) and the official documentation doesn't explain the before and after states or give examples of the impact the new config might have.  To me, it feels like going to swimming lessons and all the instructor says is, ""Keep your head above the water.""

Sorry if this isn't the right place to report this problem."
50234,"Rails 7.1 attached image raises error because ""Cannot get a signed_id for a new record"" in image_tag",gregorbg,"third party issue, activestorage",2023-12-01T17:59:47Z,2023-12-02T17:34:31Z,,"### Steps to reproduce
Say I have a model with an attached image, like such:

```ruby
class Company < ApplicationRecord
  has_one_attached :logo
  
  validates :name, presence: true
end
```

...and there is also a controller to update it using the route defined by `resources :companies` like such:

```ruby
def update
  @company = Company.find(params[:id])
  company_params = params.require(:company).permit(:name, :logo)

  if @company.update(company_params)
    flash[:success] = ""Successfully updated Company!""
    redirect_to edit_company_path(@company)
  else
    render :edit
  end
end
```

The `edit` form is an HTML form that looks as follows:

```ruby
<%= simple_form_for @company, url: edit_company_path(@company) do |f| %>
  <%= f.input :name %>
  <%= f.input :logo %>
  <% if @company.logo.attached? %>
    <%= image_tag @company.logo.variant(resize: ""200x200"") %>
  <% end %>
<% end %>
```

Now when I pass in an update payload that generates an invalid state (as per my `Company` model's validations) but has a **valid, existing, readable** logo file, the following error occurs:

```
ActionView::Template::Error: Cannot get a signed_id for a new record

Failure/Error: <%= image_tag @company.logo.variant(resize: ""200x200"") %>

     ActionView::Template::Error:
       Cannot get a signed_id for a new record
```

This is because the `@company.update(...)` statement in the controller writes the attributes, but the actual raw _saving_ to the database fails because of validations.

The edit form then tries to display the new, updated **but not persisted** logo in the frontend, which raises the error about `signed_id`.

### Expected behavior
The `edit` form should render, with the form showing errors on the `name` field according to the validators of the `company` model. Uploading a correct, readable logo should not cause the form to throw an error when rendering.

### Actual behavior
The error above is being thrown.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
"
50230,ActiveJob::Serializers::TimeWithZoneSerializer does not preserve the timezone,jakubkosinski,activejob,2023-12-01T16:04:04Z,2023-12-02T15:05:47Z,2023-12-02T15:05:47Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require 'active_job'
require 'active_job/arguments'
require 'active_support/all'

Time.zone = 'Europe/London' #=> ""Europe/London""
time = Time.zone.parse('2023-12-01T14:30:00Z') #=> Fri, 01 Dec 2023 14:30:00.000000000 GMT +00:00
serialized_time = ActiveJob::Serializers::TimeWithZoneSerializer.serialize(time) #=> {""_aj_serialized""=>""ActiveJob::Serializers::TimeWithZoneSerializer"", ""value""=>""2023-12-01T14:30:00.000000000+00:00""}
gmt_deserialized_time = ActiveJob::Serializers::TimeWithZoneSerializer.deserialize(serialized_time) #=> Fri, 01 Dec 2023 14:30:00.000000000 GMT +00:00
Time.zone = 'America/Los_Angeles' #=> ""America/Los_Angeles""
pst_deserialized_time = ActiveJob::Serializers::TimeWithZoneSerializer.deserialize(serialized_time) #=> Fri, 01 Dec 2023 06:30:00.000000000 PST -08:00
Time.zone = nil #=> nil
utc_deserialized_time = ActiveJob::Serializers::TimeWithZoneSerializer.deserialize(serialized_time) #=> 2023-12-01 14:30:00 +0000
```

### Expected behavior
<!-- Tell us what should happen -->
Since `ActiveSupport::TimeWithZone` stores information about the time zone I expect that this information should be preserved when serializing time. Changing the `Time.zone` should not affect objects serialized with a different time zone.

### Actual behavior
<!-- Tell us what happens instead -->
Deserialization of a serialized `TimeWithZone` uses always the current `Time.zone` and not the one that was used to create a `TimeWithZone` object instance.

### System configuration
**Rails version**:
6.1.7.1 but the behaviour is the same in 7.x

**Ruby version**:
3.1.3p185"
50227,FormData Handling Nested Arrays Incorrectly in Rails 7.1.2,makoto-atarashi,"actionpack, more-information-needed",2023-12-01T10:12:04Z,2023-12-12T00:01:05Z,,"### Issue Overview
After upgrading Rails from version 7.0.6 to 7.1.2, FormData that is including nested array sent from frontend is being received differently on backend, causing processing troubles.

### Steps to Reproduce

1. Use the following frontend JavaScript code, which was working correctly with Rails 7.0.6, to send data to backend.

```javascript
let formData = new FormData();

formData.append(""items[][foo]"", ""FOO"");
formData.append(""items[][bar]"", ""BAR"");
formData.append(""items[][baz]"", ""BAZ"");
formData.append(""items[][list][][a]"", ""A"");
formData.append(""items[][list][][b]"", ""B"");

fetch(""/api_url"", {
  method: ""POST"",
  body: formData
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error(error);
  });
```
2. Upgrade to Rails 7.1.2 and use the same frontend code to send data to the backend again.

### Expected Behavior
Expecting the data to be received on Rails 7.1.2 as it was on Rails 7.0.6.

### Actual Behavior
Data received on Rails 7.0.6 was in the following format:

```txt
Parameters: {""items""=>[{""foo""=>""FOO"", ""bar""=>""BAR"", ""baz""=>""BAZ"", ""list""=>[{""a""=>""A"", ""b""=>""B""}]}], ""host""=>""example.com""}
```

However, on Rails 7.1.2, it has changed as follows, and params[:items][:list] is not received as an array as expected:

```txt
Parameters: {""items""=>[{""foo""=>""FOO"", ""bar""=>""BAR"", ""baz""=>""BAZ"", ""list[]a""=>""A"", ""list[]b""=>""B""}], ""host""=>""example.com""}
```

### Environment

Rails Version: 7.0.6 -> 7.1.2
Ruby version: ruby 3.2.2-p53
Front End: JavaScript, Fetch API

### Specific Issue Points

On Rails 7.0.6, params[:items][:list] was correctly received as an array, but on Rails 7.1.2, params[:items][:list] is not received as an array as expected."
50226,Encrypted columns in DB are not backwards compatible between 7.0 and 7.1,Linuus,"activerecord, encryption",2023-12-01T10:07:36Z,2023-12-13T13:46:30Z,,"I'm not sure if this is expected or a bug, but I can't find it in the changelogs. There were changes related to encryption though so maybe it's not a bug.

The issue is that we upgrade from Rails 7.0.8 to 7.1.1 and had to roll back due to some unrelated issues. Now, after the roll back we couldn't decrypt fields that were encrypted while on 7.1.1 anymore (using AR `encrypts(:foo)`). I tested with 7.1.2 and had the same issue.

### Steps to reproduce

1. Generate a new rails app on 7.0.8
2. Add a model with an encrypted field
3. On 7.0.8, create a record in the DB
4. Change gemfile to have rails 7.1.2 and bundle
5. Create another record in the DB. At this point it's possible to decrypt the old record
6. Add the setting `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256` to application.rb
7. Create a third record in the DB
8. Go back to Rails 7.0.8
9. Read the records in the DB. First and second records are fine, but the third will fail with
```
/Users/.../.asdf/installs/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/activerecord-7.0.8/lib/active_record/encryption/encryptor.rb:58:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/.../.asdf/installs/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/activerecord-7.0.8/lib/active_record/encryption/cipher/aes256_gcm.rb:80:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/.../.asdf/installs/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/activerecord-7.0.8/lib/active_record/encryption/cipher/aes256_gcm.rb:76:in `final': OpenSSL::Cipher::CipherError
```

I created a repository to easier reproduce this: https://github.com/Linuus/rails-encryption/

1. Clone the repo
2. `git checkout 8a4a807faed975545b13fb710f7e119501daa261`
3. `bundle`
4. `rails c`
5. `Bar.create!(secret: ""rails708"")`
6. `git checkout e213132e7c85747560b395f0f34f6628b3b202cc` (switch to 7.1.2)
7. `bundle`
8. `rails c`
9. `Bar.create!(secret: ""rails712"")`
10. `git checkout 05f77873a0fb71de34e1fc15c8c786b543ead2b6` (sets `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256`)
11. `rails c`
12. `Bar.create!(secret: ""rails712-2"")`
13. `git checkout 8a4a807faed975545b13fb710f7e119501daa261` (Roll back to 7.0.8)
14. `rails c`
15. `Bar.first.secret #=> rails708`
16. `Bar.second.secret #=> rails712`
17. `Bar.third.secret` crashes with the above decryption error

In 7.0.8 we have this:

```
Loading development environment (Rails 7.0.8)
irb(main):001> Rails.configuration.active_support.key_generator_hash_digest_class
=> OpenSSL::Digest::SHA256
```

In 7.1.2 we haven't set the SHA1 setting (makes no difference as far as I can see. 7.1.2 can still decrypt data from 7.0.8)

```
Loading development environment (Rails 7.1.2)
irb(main):001> Rails.configuration.active_record.encryption.support_sha1_for_non_deterministic_encryption
=> nil
```

So as far as I understand the docs, the encryption shouldn't change?

### Expected behavior

The records should all be decryptable

### Actual behavior

The record created in Rails 7.1.2 and with `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256` fail to decrypt.

### System configuration
**Rails version**: 7.0.8 -> 7.1.2 (or 7.1.1.)

**Ruby version**:  ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin21]"
50220,Cannot define rails tasks that take command line arguments since Rails 7.1 Rails::Command::UnrecognizedCommandError,mildred,railties,2023-11-30T15:27:15Z,2023-12-03T17:29:37Z,,"https://github.com/rails/rails/blob/6b93fff8af32ef5e91f4ec3cfffb081d0553faf0/railties/lib/rails/commands/rake/rake_command.rb#L21-L24

In rails 7.0 it was possible to define a rake task invoked using rails that would take command-line arguments. You just had to read the arguments in `ARGV` and to call `exit` in order to prevent rails from looking up the arguments as if they were rake tasks.

In rails 7.1, before even starting the tasks, rails is looking up all command-line arguments to ensure they are valid rake tasks, and arguments are not, and it produces a Rails::Command::UnrecognizedCommandError

Example task that worked in rails 7.0 and no longer works:

```rb
namespace :import do
  task from_v5: :environment do
    if ARGV.length < 1
      warn 'Usage: rails import:from_v5 FILENAME'
      exit 1
    end
    puts ""importing #{ARGV[0]}...""
    exit 0
  end
end
```"
50219,`ActiveRecord::Relation` object could not store to cache store when use MessagePack serializer,r-plus,"activerecord, activesupport",2023-11-30T10:01:40Z,2023-12-01T06:16:55Z,2023-12-01T06:16:54Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Use MessagePack serializer in config
config.cache_store = :redis_cache_store, { url: '...', serializer: :message_pack }

# write cache code
Rails.cache.fetch('key') { Article.where(id: 1..10) }
```

### Expected behavior
When use `marshal_6_1`, `marshal_7_0` and `marshal_7_1` serializers can store `ActiveRecord::Relation` object to cache.
We expected `message_pack` serializer can do this too.

### Actual behavior
raise the error.
Is this behavior is expected behavior?
Do you have a plan to fallback to marshal serializer like a message serializer?

```
ActiveSupport::MessagePack::UnserializableObjectError at /articles/556656
Unsupported type Article::ActiveRecord_AssociationRelation for object #<ActiveRecord::AssociationRelation []>
```

### System configuration
**Rails version**:
7.1.1
**Ruby version**:
3.2.2"
50216,Changing a record's STI type using nested attributes breaks when classes have different validations,hoffmanilya,activerecord,2023-11-29T23:28:55Z,2023-11-30T17:37:57Z,,"When updating STI record's types using nested attributes the instance of the record doesn't become the new class automatically and therefore validations are run against the old class.

### Steps to reproduce

```ruby
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '7'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :people, force: true

  create_table :animals, force: true do |t|
    t.text :type
    t.text :fav_toy
    t.integer :person_id
  end
end

class Animal < ActiveRecord::Base
  belongs_to :person
end

class Cat < Animal
  validates :fav_toy, inclusion: { in: %w[catnip mouse] }
end

class Dog < Animal
  validates :fav_toy, inclusion: { in: %w[lamb duck] }
end

class Person < ActiveRecord::Base
  has_many :animals
  accepts_nested_attributes_for :animals
end

class BugTest < Minitest::Test
  def test_updating_type
    # Create a `Person` with a `Cat`.
    person = Person.create!(
      animals_attributes: [{ type: 'Cat', fav_toy: 'catnip' }]
    )

    persons_cat = person.animals.first

    # Now try to change the `Cat` to be a `Dog`. This fails
    # because `Cat` validations are still being run.
    person.update!(
      animals_attributes: [{ id: persons_cat.id, type: 'Dog', fav_toy: 'duck' }]
    )

    assert Animal.find(persons_cat.id).is_a?(Dog)
  end

  # What works is to use `assign_attributes`, go through the
  # association records and replace them with the correct
  # instances and then save the parent.
  def test_updating_type_and_changing_instances
    person = Person.create!(
      animals_attributes: [{ type: 'Cat', fav_toy: 'catnip' }]
    )

    persons_cat = person.animals.first

    person.assign_attributes(
      animals_attributes: [{ id: persons_cat.id, type: 'Dog', fav_toy: 'duck' }]
    )

    association = person.association(:animals)

    association.target.each.with_index do |animal, i|
      association.target[i] = animal.becomes!(animal.type.constantize) if animal.type_changed?
    end

    person.save!

    assert Animal.find(persons_cat.id).is_a?(Dog)
  end
end
```

### Expected behavior

The `Cat` becomes a `Dog` and the update succeeds.

### Actual behavior

The update fails with a validation error: `ActiveRecord::RecordInvalid: Validation failed: Animals fav toy is not included in the list`

### System configuration
**Rails version**: 7.0.0

**Ruby version**: 2.7.5
"
50213,Support for non-polymorphic joins on polymorphic belongs_to,lavoiesl,activerecord,2023-11-29T18:07:50Z,2023-12-02T09:47:16Z,,"### Steps to reproduce
I have something like this in my code:
```rb
class Comment < ApplicationRecord
  belongs_to :commentable, polymorphic: true
  validates :commentable_type, inclusion: { in: %w(Post Page) }
end

class Post < ApplicationRecord
  has_many :comments, as: :commentable
end

class Page < ApplicationRecord
  has_many :comments, as: :commentable 
end
```

To count the number of comments on a Page, understand that I can use:
```rb
Page
  .joins(:comments)
  .group(""pages.id"")
  .count
```
But this is a simple example. In my code base, I have a longer chain of relationship and inverting the direction doesn't seem to be possible.


In cases where I start from from the opposite direction and I know that a target is a page, I'd like to do something like this:

```rb
Comment
  .joins(:page)
  .group(""pages.id"")
  .count
```

This _appears_ to be working:
```rb
class Comment < ApplicationRecord
  belongs_to :commentable, polymorphic: true
  validates :commentable_type, inclusion: { in: %w(Post Page) }
  belongs_to :page, class_name: ""Page"", foreign_key: :commentable_id
  belongs_to :post, class_name: ""Post"", foreign_key: :commentable_id
end
```
But it wouldn't check the commentable_type, it would join on any id.

---

I came up with this idea:
```rb
module ActiveRecord
  module Associations
    module ClassMethods
      def belongs_to_polymorphic(name, target:, class_name:, **options)
        reflection = reflections[target.to_s]
        raise ""Association #{target} does not exist"" unless reflection
        raise ""Association #{target} is not polymorphic"" unless reflection.polymorphic?
        raise ""Association #{target} is not a belongs_to"" unless reflection.belongs_to?

        foreign_key = reflection.foreign_key
        foreign_type = reflection.foreign_type
        table_name = self.table_name

        scope = ->() { where({ table_name => { foreign_type => class_name } }) }
        belongs_to(name, scope, class_name: class_name.to_s, foreign_key: foreign_key, **options)

        # Override this method because the default implementation won't check the foreign_type
        # and the `where` condition on the `belongs_to` would not have the table_name available.
        define_method(name) do
          return unless class_name == read_attribute(foreign_type)

          send(target)
        end
      end
    end
  end
end
```

It can be used like:
```rb
class Comment < ApplicationRecord
  belongs_to :commentable, polymorphic: true
  validates :commentable_type, inclusion: { in: %w(Post Page) }
  belongs_to_polymorphic :post, target: :commentable, class_name: ""Post""
  belongs_to_polymorphic :page, target: :commentable, class_name: ""Page""
end

Comment.joins(:page) # Works
Comment.first.page # Fallback on the overridden method.
```

Of course, this is quite hacky, but I wanted to illustrate the point

---

Alternatively, it could be nice to allow polymorphic joins if a `where` clause explicitely specifies the type:

```rb
Comment.joins(:commentable).where(commentable_type: ""Page"")
=> ActiveRecord::EagerLoadPolymorphicError: Cannot eagerly load the polymorphic association :commentable
```


---

https://github.com/rails/rails/issues/45429 seems a bit related, but not exactly the same.


### System configuration
**Rails version**:
6.1.7.6
"
50212,Migrating from Rails 7.0.8 to Rails 7.1.2 without any config breaks encryption,zaratan,"activerecord, encryption",2023-11-29T16:43:20Z,2023-12-01T10:17:44Z,,"### Steps to reproduce

#### Setting up the App

```sh
rails _7.0.8_ new test_rails_enc
cd test_rails_enc
bin/rails db:encryption:init
rails credentials:edit # Copying the keys
rails g model user email:string name:string
```

```ruby
class User < ApplicationRecord
  encrypts :email, deterministic: true
  encrypts :name
end
```

```ruby
User.create(name: ""Zaratan"", email: ""zaratan@hey.com"")
```

#### Migrating to Rails 7.1
In the Gemfile
```ruby
gem ""rails"", ""~> 7.1.2""
```

```sh
rails app:update # Answering Yes to every question
rails db:migrate
```

### Testing
Email:
```ruby
User.pluck(:email).first
```
```
  User Pluck (0.3ms)  SELECT ""users"".""email"" FROM ""users""
/Users/zaratan/.rvm/gems/ruby-3.2.2/gems/activerecord-7.1.2/lib/active_record/encryption/encryptor.rb:58:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/zaratan/.rvm/gems/ruby-3.2.2/gems/activerecord-7.1.2/lib/active_record/encryption/cipher/aes256_gcm.rb:79:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/zaratan/.rvm/gems/ruby-3.2.2/gems/activerecord-7.1.2/lib/active_record/encryption/cipher/aes256_gcm.rb:75:in `final': OpenSSL::Cipher::CipherError
```
Name:
```ruby
User.pluck(:name).first
```
```
  User Pluck (0.1ms)  SELECT ""users"".""name"" FROM ""users""
=> ""igor""
```

#### If Adding : 
```
config.active_record.encryption.support_sha1_for_non_deterministic_encryption = true
```

=> Same behaviour

#### If Changing to Rails 7.1 defaults
```
    config.load_defaults 7.1
```

Reading the name will trigger a cipher error and the email will be read correctly

#### If setting config.active_record.encryption.hash_digest_class to `OpenSSL::Digest::SHA1`

```
config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA1
```

=> Email: Cipher Error, Name: Ok

#### If setting config.active_record.encryption.hash_digest_class to `OpenSSL::Digest::SHA256`

=> Email: Ok, Name: Cipher Error

### Expected behavior
If a user didn't configure anything the upgrade path should exist or be documented in a way. I think I tried every configuration option documented and couldn't make it work.

Production is still on 7.0.8 so I didn't get any terrible damage but what would be an upgrade path for me (and for others)

### Actual behavior
`OpenSSL::Cipher::CipherError`

### System configuration
**Rails version**: 7.0.8 => 7.1.2

**Ruby version**: 3.2.2
"
50209,ActionCable Redis adapter ssl_params like `cert` and `key` are not recognised,tsrivishnu,actioncable,2023-11-29T11:52:20Z,2023-11-29T12:04:12Z,2023-11-29T12:04:12Z,"### Steps to reproduce
* Configure ActionCable Redis adapter with `ssl: true` and `ssl_params` that contain paths to `cert` and `key` files.
   ```yaml
    # config/cable.yml
    development:
      adapter: redis
      url: ""redis://localhost:6379/0""
      ssl: true
      ssl_params:
        ca_file: config/credentials/redis/dev/ca.crt
        cert: config/credentials/redis/dev/client.crt
        key: config/credentials/redis/dev/client.key
      channel_prefix: app_cable_development

   ```
* Open rails console and try to broadcast a message
   ```ruby
    # In rails console
    ActionCable.server.broadcast(""hi"", ""hello world"")
* Fails with error exception
    ```
    => 2023-11-29 11:48:08.317258 D [7:6040 broadcasting.rb:43] ActionCable [ActionCable] Broadcasting to hi: ""hello world""
    /app/.bundle/ruby/3.1.0/gems/redis-client-0.12.1/lib/redis_client/ruby_connection.rb:59:in `initialize': wrong argument type String (expected OpenSSL/X509) (TypeError)
    ```

### Expected behavior
The message is broadcasts without any error,

### Actual behavior
Fails with error:
```
/app/.bundle/ruby/3.1.0/gems/redis-client-0.12.1/lib/redis_client/ruby_connection.rb:59:in `initialize': wrong argument type String (expected OpenSSL/X509) (TypeError)
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.10
"
50203,[Proposal] Deprecate and replace `ActiveSupport::OrderedOptions` and `ActiveSupport::InheritableOptions`,kmcphillips,activesupport,2023-11-28T19:29:00Z,2023-12-13T16:08:15Z,2023-12-13T16:08:15Z,"## Problem

The [`ActiveSupport::OrderedOptions` and `ActiveSupport::InheritableOptions`](https://github.com/rails/rails/blob/ed2bc92b82ddc111150cdf48bb646fd97b3baacb/activesupport/lib/active_support/ordered_options.rb) classes are used throughout rails to provide the `*.config.*` options through the framework railties, as well as some more specific nested configuration options. It is the basis for [`ActiveSupport::Configurable`](https://github.com/rails/rails/blob/ed2bc92b82ddc111150cdf48bb646fd97b3baacb/activesupport/lib/active_support/configurable.rb#L14). They are part of the public API in Active Support.

They are a specialization of `Hash`, and their purpose is ostensibly to provide convenience read/writers as methods, and a few other small features. These classes were [introduced](https://github.com/thedarkone/rails/commit/9f146ea0ac904252b16be1c4017604aed0c383f7) ~15-18 years ago and are now **incorrectly named** and contain bugs as well as **unpredictable and unspecified behaviour** that makes them, in my opinion, dangerous to use reliably. 

I have made some improvements in #50151, but there are many many remaining problems. Such as:


### Incorrectly named and unnecessary hierarchy

The reason it is called `OrderedOptions` is that prior to Ruby 1.9 hash insertion did not promise a stable ordering, which this class provided.

The `InheritableOptions` subclass allows a parent hash to provide defaults, but there is no good reason for this to be a specialized class and can just be initialization options.


### They do not behave hash-like in many cases

Despite being a subclass of `Hash`, the implementation does not behave hash-like in many cases. The reason is that it uses hash default block initialization syntax to carry around the parent hash in the closure, rather than calling `update(parent)` or `merge(parent)` on initialize:
```ruby
  class InheritableOptions < OrderedOptions
    def initialize(parent = nil)
      super() { |h, k| parent[k] }
    end
```

So that parent is passed around by reference. Lookups first check `self` then fall back to `parent`. Any key that is updated is only changed `self` and overshadows the parent. So most hash operations only check _overrides_, but retrievals will fall through to the parent. It also means that changes to the parent hash are reflected in lookups, but any overrides remain local. It's very confusing, and again **unspecified and unpredictable behaviour**. (A detailed example of behaviour listed at the bottom).

This means as Rails calls [`inheritable_copy`](https://github.com/rails/rails/blob/ed2bc92b82ddc111150cdf48bb646fd97b3baacb/activesupport/lib/active_support/ordered_options.rb#L105-L107) on several different levels:
https://github.com/rails/rails/blob/ed2bc92b82ddc111150cdf48bb646fd97b3baacb/actionview/lib/action_view/helpers/controller_helper.rb#L23
https://github.com/rails/rails/blob/ed2bc92b82ddc111150cdf48bb646fd97b3baacb/activesupport/lib/active_support/configurable.rb#L32
https://github.com/rails/rails/blob/ed2bc92b82ddc111150cdf48bb646fd97b3baacb/activesupport/lib/active_support/configurable.rb#L156

The actual value of what is in each copy of the config object depends on what level it was modified, at what time, and if there were any overrides or not.


### Rails depends on this broken entangled behaviour

As linked above, the configs are declared in the root module as `ActiveSupport::Configurable`, but then are copied down. For example `ActionController::Base` is configurable, but that config is copied down to the controller instance, then to the view context. Rails has tests that depend on the pass by reference linking of those copies:
https://github.com/rails/rails/blob/ed2bc92b82ddc111150cdf48bb646fd97b3baacb/actionpack/test/controller/helper_test.rb#L261-L265

But nowhere is this behaviour tested in the unit tests for `InheritableOptions`, nor is it documented. And crucially **this behaviour stops working if it is overridden at any level**. Meaning that if you modify a key in some initialization step before the values are copied down, they stop being linked.

In a few places they are called ""proxy"" which is probably what is desired behaviour here.


## Proposed solution

Fixing all this behaviour in place would mean hard to diagnose internal behaviour breakage. There is no good reason to have `Ordered` in the name as all hashes are ordered. There is no reason to have `InheritableOptions` be a subclass, when it can just be an initializer options.

So I propose:
* Building a new `ActiveSupport::Options` class which fixes the above behaviour and reimplements as a hash, and documents all behaviour.
* Deprecate public use of `ActiveSupport::OrderedOptions` and `ActiveSupport::InheritableOptions` internally and publicly.
* Refactor rails internally to only use `ActiveSupport::Options`. The changes to `ActiveSupport::Configurable` may mean building a proxy wrapper around the config, and that's ok.

Building the new class is trivial, and I have it in a commit https://github.com/kmcphillips/rails/commit/fec85f7141fb6055b9406b2bdb5a7282b48e698a including tests. The new class is just over a hundred lines, including documentation and a `SafeOptions` specialization discussed [here](https://github.com/rails/rails/pull/50140#issuecomment-1823698711) which I think is a great feature to add.

Anyone using these classes outside of Rails just as a feature of Active Support would in most cases just need to update a class name and maybe a `new()` signature.

Internal use should be manageable, because we define the behaviour we want, and would do it over a release cycle.


## Appendix

Here is an example of how unpredictable the behaviour is. This mirrors how Rails copies the config down three levels in the base controller/controller class/view context example:

```
# Given a hash of default values
> defaults = { a: ""a from defaults"", b: ""b from defaults"" }
=> {:a=>""a from defaults"", :b=>""b from defaults""}

# Inheritable options pulls the options from that default
> action_controller_base = ActiveSupport::InheritableOptions.new(defaults)
=> {}

# Assign an override value and a new key value
> action_controller_base.b = ""b from action_controller_base""
> action_controller_base.c = ""c from action_controller_base""

# This works pretty much as expected
> action_controller_base.a
=> ""a from defaults""
> action_controller_base.b = ""b from action_controller_base""
=> ""b from action_controller_base""
> action_controller_base.c = ""c from action_controller_base""
=> ""c from action_controller_base""

# The defaults hash is unchanged
> defaults
=> {:a=>""a from defaults"", :b=>""b from defaults""}

# But if you update the values in the defaults hash
> defaults[:a] = ""a with updated default""
=> ""a with updated default""
> defaults[:b] = ""b with updated default""
=> ""b with updated default""

# Original values are entangled with the copy, updated values are not
irb(main):061> action_controller_base.a
=> ""a with updated default""
irb(main):062> action_controller_base.b
=> ""b from action_controller_base""

# Then we can further make a copy
> controller_instance = action_controller_base.inheritable_copy
> controller_instance.c = ""c from controller_instance""
> controller_instance.d = ""d from controller_instance""

# The values are entangled differently with the two parents
> controller_instance.a
=> ""a with updated default""
> controller_instance.b
=> ""b from action_controller_base""
> controller_instance.c
=> ""c from controller_instance""
> controller_instance.d
=> ""d from controller_instance""

# We make one copy further
> view_context = controller_instance.inheritable_copy
> view_context.d = ""d from view_context""
> view_context.e = ""e from view_context""

# The values are entangled with the three parents
> view_context.a
=> ""a with updated default""
> view_context.b
=> ""b from action_controller_base""
> view_context.c
=> ""c from controller_instance""
> view_context.d
=> ""d from view_context""
> view_context.e
=> ""e from view_context""

# Sometimes changing a parent is reflected all the way down in this copy, sometimes it is not, depending on at what level it was previously modified and at what time
> action_controller_base.a = ""a override action_controller_base""
=> ""a override action_controller_base""
> action_controller_base.b = ""b override action_controller_base""
=> ""b override action_controller_base""
> action_controller_base.c = ""c override action_controller_base""
=> ""c override action_controller_base""
> view_context.a
=> ""a override action_controller_base""
> view_context.b
=> ""b override action_controller_base""
> view_context.c
=> ""c from controller_instance""
> view_context.d
=> ""d from view_context""
```"
50201,Transaction commits before query execution within transaction block.,apmiller108,activerecord,2023-11-28T17:00:24Z,2023-12-03T00:12:14Z,,"### Steps to reproduce

Maybe this is totally expected, but this behavior was found to be surprising.

#### Senario 1
The transaction defined with the following code will commit after the `SET` statement, and before the `Message.all` query.
```ruby
ActiveRecord::Base.transaction do
  ActiveRecord::Base.connection.execute('SET LOCAL statement_timeout = \'5s\';')
  Message.all
end
```

```
TRANSACTION (0.7ms)  BEGIN
(3.4ms)  SET LOCAL statement_timeout = '5s';
TRANSACTION (0.5ms)  COMMIT
Message Load (0.4ms)  SELECT ""messages"".* FROM ""messages"" /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]
```

#### Senario 2
However, everything appears to run within the transaction when using `execute` for both queries.
```ruby
ActiveRecord::Base.transaction do
  ActiveRecord::Base.connection.execute('SET LOCAL statement_timeout = \'5s\';')
  ActiveRecord::Base.connection.execute(Message.all.to_sql)
end
```

```
TRANSACTION (0.4ms)  BEGIN
(2.4ms)  SET LOCAL statement_timeout = '5s';
(1.2ms)  SELECT ""messages"".* FROM ""messages""
TRANSACTION (0.9ms)  COMMIT
```

### Expected behavior
I expected that in both of the above scenarios, everything in the transaction block would be run within the DB transaction statement, like this:

```
TRANSACTION (0.4ms)  BEGIN
(2.4ms)  SET LOCAL statement_timeout = '5s';
(1.2ms)  SELECT ""messages"".* FROM ""messages""
TRANSACTION (0.9ms)  COMMIT
```

### Actual behavior

But instead, in scenario 1, only the first `execute` statement appears to run within the DB transaction. Maybe that is actually expected (albeit surprising to me). In any event it would be interesting to know why that happens.

```
TRANSACTION (0.7ms)  BEGIN
(3.4ms)  SET LOCAL statement_timeout = '5s';
TRANSACTION (0.5ms)  COMMIT
Message Load (0.4ms)  SELECT ""messages"".* FROM ""messages"" /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]
```

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2
"
50193,`lib/commands/*_command.rb` should load custom Thor commands,bensheldon,railties,2023-11-28T04:30:59Z,2023-11-29T02:41:07Z,,"### Expected behavior

I should be able to create custom Rails Thor commands for my application in a way that is analogous to adding custom Rake tasks:

| Rake Task | Thor Command |
|-----------|--------------|
| `Rails.root/lib/tasks/custom.task` | `Rails.root/lib/commands/custom_command.rb` |  

For example, this should create the custom command `$ bin/rails custom:something` with all of the Thor niceties:

```ruby
# lib/commands/custom_command.rb
module Rails
  module Command
    class CustomCommand < Base
      desc ""something"", ""Perform a custom task""
      method_option :nice, type: :boolean, desc: ""Thor args are nice""
      def something
        puts ""Custom task performed!""
      end
    end
  end
end
```

This behavior already works for Rails Engines (aside: maybe the engine generator should automatically create a `lib/commands` directory in addition to `lib/tasks`). Here's where those lookups happen:

https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command.rb#L163-L169

These are loaded via the `$LOAD_PATH`, for a specific command:

https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command/behavior.rb#L36-L45

... or all commands for `help`:

https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command/behavior.rb#L55-L60

### Actual behavior

The `Rails.root/lib` directory does not get added to the $LOAD_PATH before those lookups happen, so they're never loaded and the commands are not found.

I think the simple solution here is to make sure that `Rails.root/lib` is added to the `$LOAD_PATH` when the `$ rails` command is initially run. That _normally_ happens when the Application is required and there's a custom command method to do that: [`require_application!`](https://github.com/rails/rails/blob/139c5678aa5d9a4209ca06919abea7a9da449b36/railties/lib/rails/command/actions.rb#L13-L16), but I imagine there could be reasons why that's done selectively. Hence opening an issue in case someone has better ideas.

The ""add lib to $LOAD_PATH"" behavior was most recently solidified in https://github.com/rails/rails/pull/48596

### System configuration

**Rails version**: 7.1.1

"
50191,`PostgresqlDeferredConstraintsTest` fails at Rails CI ,yahonda,"activerecord, attached PR, PostgreSQL, ci issues",2023-11-28T00:35:05Z,2023-11-28T19:37:49Z,2023-11-28T19:37:49Z,"Managed to reproduce CI failure at https://buildkite.com/rails/rails/builds/102278#018c120d-b274-4418-8eb2-a1e2eeeae9e7

### Steps to reproduce

```ruby
cd activerecord
ARCONN=postgresql bin/test test/cases/fixtures_test.rb test/cases/adapters/postgresql/deferred_constraints_test.rb -n ""/^(?:FixturesTest#(?:test_bulk_insert_with_a_multi_statement_query_raises_an_exception_when_any_insert_fails)|PostgresqlDeferredConstraintsTest#(?:test_defer_constraints|test_defer_constraints_only_defers_single_fk|test_defer_constraints_with_multiple_fks|test_defer_constraints_with_specific_fk))$/"" --seed 49401
```

### Expected behavior
It should pass.

### Actual behavior

These `PostgresqlDeferredConstraintsTest` tests fail.

```ruby
$ ARCONN=postgresql bin/test test/cases/fixtures_test.rb test/cases/adapters/postgresql/deferred_constraints_test.rb -n ""/^(?:FixturesTest#(?:test_bulk_insert_with_a_multi_statement_query_raises_an_exception_when_any_insert_fails)|PostgresqlDeferredConstraintsTest#(?:test_defer_constraints|test_defer_constraints_only_defers_single_fk|test_defer_constraints_with_multiple_fks|test_defer_constraints_with_specific_fk))$/"" ==seed 49401
Using postgresql
Run options: -n ""/^(?:FixturesTest#(?:test_bulk_insert_with_a_multi_statement_query_raises_an_exception_when_any_insert_fails)|PostgresqlDeferredConstraintsTest#(?:test_defer_constraints|test_defer_constraints_only_defers_single_fk|test_defer_constraints_with_multiple_fks|test_defer_constraints_with_specific_fk))$/"" --seed 24686

# Running:

.F

Failure:
PostgresqlDeferredConstraintsTest#test_defer_constraints_with_specific_fk [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/postgresql/deferred_constraints_test.rb:24]:
ActiveRecord::InvalidForeignKey expected but nothing was raised.


bin/test test/cases/adapters/postgresql/deferred_constraints_test.rb:23

F

Failure:
PostgresqlDeferredConstraintsTest#test_defer_constraints_with_multiple_fks [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/postgresql/deferred_constraints_test.rb:34]:
ActiveRecord::InvalidForeignKey expected but nothing was raised.


bin/test test/cases/adapters/postgresql/deferred_constraints_test.rb:33

F

Failure:
PostgresqlDeferredConstraintsTest#test_defer_constraints [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/postgresql/deferred_constraints_test.rb:14]:
ActiveRecord::InvalidForeignKey expected but nothing was raised.


bin/test test/cases/adapters/postgresql/deferred_constraints_test.rb:13

F

Failure:
PostgresqlDeferredConstraintsTest#test_defer_constraints_only_defers_single_fk [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/postgresql/deferred_constraints_test.rb:45]:
ActiveRecord::InvalidForeignKey expected but nothing was raised.


bin/test test/cases/adapters/postgresql/deferred_constraints_test.rb:43



Finished in 0.187469s, 26.6711 runs/s, 58.6764 assertions/s.
5 runs, 11 assertions, 4 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
50189,Inconsistency in Documentation: Mismatch Between `revert` Code Example and Subsequent Steps,Leo-U,docs,2023-11-27T22:55:28Z,2023-12-08T22:44:16Z,,"There is an apparent error in [this documentation section](https://guides.rubyonrails.org/active_record_migrations.html#reverting-previous-migrations).

The point of confusion is the last part of the section where it says `the same migration could also have been written without using revert but this would have involved a few more steps` and proceeds to list some steps.

To my understanding, the phrase `the same migration` refers to the code example immediately above that text -- that code example demonstrates the use of `revert` to selectively rollback part of a previous migration. The way it works is that you copy and paste part of the code from a previous migration and wrap it in that `revert` block. Then, rails automatically does the opposite of what is included there. So, that part I think I understand.

So now, back to the text at the end. The steps listed are:
```
    1. Reverse the order of create_table and reversible.
    2. Replace create_table with drop_table.
    3. Finally, replace up with down and vice-versa.
```
Here's what I don't get: that second code example in the docs section that demonstrates the use of revert to selectively revert part of a migration does not involve dropping any table. It would make sense to me if that copy-pasted code included a create_table statement, but it doesn't. So, to my understanding, the steps listed with that last statement don't make sense.

For more context, the `ExampleMigration` referred to in that second code example appears to refer to a migration mentioned further up in the docs in another section, [here](https://guides.rubyonrails.org/active_record_migrations.html#using-reversible).

**It has been pointed out to me that the code example did originally have a `create_table` call, as you can see [here](https://github.com/rails/rails/blob/c4c3a44685b4cfb1ffd4c27309ccfbf1bb53d4e5/guides/source/active_record_migrations.md?plain=1#L606C6-L606C6)**. Therefore, it looks to me like the cause of the confusion is that when the section was updated to remove the `create_table` call, it caused the last bit of the wording in that section to become nonsensical.

I am not any kind of Rails expert, so I wouldn't want to try and edit the documentation myself, so I have decided to open this issue here. Thank you!"
50187,ActiveModel::Errors does not document that it has a `clear` method,kwerle,"activemodel, docs, good first issue",2023-11-27T21:09:06Z,2023-11-29T16:12:39Z,2023-11-29T16:12:39Z,"### Steps to reproduce
Check https://api.rubyonrails.org/classes/ActiveModel/Errors.html
No `clear` method.  Bummer.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```
  my_object.errors.attribute_keys.each { |key| my_object.errors.delete(key) } # because errors has no clear method!  I checked the docs.
```

### Expected behavior
I should see docs for methods that exist - even if using them is unusual and part of some maybe dubious code?

### Actual behavior
Try `my_object.errors.clear`.  Oh.  It does have one.
"
50176,ActiveStorage::VariantWithRecord should keep the variant key to store the file,brunto,activestorage,2023-11-26T17:12:50Z,2023-12-14T17:52:35Z,,"### Steps to reproduce
With `config.active_storage.track_variants = false`
```ruby
MyModel.last.photo.variant(resize_to_fit: [200, 100]).key
=> ""variants/xxxxxxx""
```

With `config.active_storage.track_variants = true`
```ruby
MyModel.last.photo.variant(resize_to_fit: [200, 100]).key
=> nil
```

### Expected behavior
With `config.active_storage.track_variants = true` the variant should use [the key method](https://github.com/rails/rails/blob/354d68e8a63b21e47a529105a508411bfe8be869/activestorage/app/models/active_storage/variant.rb#L73) in order to store the variants in the folder ""variants"".

### Actual behavior
It stored the variation_digest in the root ""folder"" instead of the ""variants"" folder.

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
"
50173,Enabling the autosave option disables uniqueness validation,akicho8,"activerecord, With reproduction steps",2023-11-26T05:51:46Z,2023-11-28T15:23:46Z,2023-11-28T11:49:01Z,"Even if you have validation in place to prevent the creation of articles with the same content, the validation becomes invalid if the auto-save option is enabled.

### Steps to reproduce

```ruby
require ""active_record""

RUBY_VERSION                    # => ""3.2.2""
ActiveRecord::VERSION::STRING   # => ""7.1.2""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Migration.verbose = false
ActiveRecord::Schema.define do
  create_table :users do |t|
  end
  create_table :articles do |t|
    t.belongs_to :user
    t.string :name
  end
end

class User < ActiveRecord::Base
  has_many :articles, autosave: true
end

class Article < ActiveRecord::Base
  belongs_to :user
  validates :name, uniqueness: true
end

ActiveRecord::Base.logger = ActiveSupport::Logger.new(STDOUT)
ActiveSupport::LogSubscriber.colorize_logging = false

user = User.create! do |e|
  e.articles.build(name: ""a"")
  e.articles.build(name: ""a"")
end
user                            # => #<User id: 1>
user.articles.count             # => 2
# >>   TRANSACTION (0.0ms)  begin transaction
# >>   Article Exists? (0.1ms)  SELECT 1 AS one FROM ""articles"" WHERE ""articles"".""name"" = ? LIMIT ?  [[""name"", ""a""], [""LIMIT"", 1]]
# >>   Article Exists? (0.0ms)  SELECT 1 AS one FROM ""articles"" WHERE ""articles"".""name"" = ? LIMIT ?  [[""name"", ""a""], [""LIMIT"", 1]]
# >>   User Create (0.0ms)  INSERT INTO ""users"" DEFAULT VALUES RETURNING ""id""
# >>   Article Create (0.0ms)  INSERT INTO ""articles"" (""user_id"", ""name"") VALUES (?, ?) RETURNING ""id""  [[""user_id"", 1], [""name"", ""a""]]
# >>   Article Create (0.0ms)  INSERT INTO ""articles"" (""user_id"", ""name"") VALUES (?, ?) RETURNING ""id""  [[""user_id"", 1], [""name"", ""a""]]
# >>   TRANSACTION (0.0ms)  commit transaction
# >>   Article Count (0.0ms)  SELECT COUNT(*) FROM ""articles"" WHERE ""articles"".""user_id"" = ?  [[""user_id"", 1]]
```

### Expected behavior

Because you are trying to create an Article record with the same name, the uniqueness validation will fail and the creation of the User and Article records will fail.

### Actual behavior

A User record is created despite having a unique validation check, leading to an inconsistent state.

### System configuration

```
RUBY_VERSION                    # => ""3.2.2""
ActiveRecord::VERSION::STRING   # => ""7.1.2""
```

"
50168,Failing tests in shared_generator_tests,fredwillmore,railties,2023-11-25T16:50:03Z,2023-11-25T23:02:15Z,2023-11-25T23:02:15Z,"### Steps to reproduce
I get a number of test failures when I run
`bin/test test/generators/plugin_generator_test.rb`
The failures were all occurring here:
https://github.com/rails/rails/blob/main/railties/test/generators/shared_generator_tests.rb#L416-L417
With the aid of a debugger I went in and found that the test is asserting a match on `@bundle_commands[2]` but there is an actual match on `@bundle_commands[3]`. I made the change locally and now all the tests run clean.
Here is an example of the contents of `@bundle_commands` on line 416:
```
install
lock --add-platform=x86_64-linux
lock --add-platform=aarch64-linux
exec rails plugin new /Users/fredwillmore/OtherDocuments/ruby_projects/rails/railties/test/fixtures/tmp/bukkits/myproject --main
```
It looks like a second `lock` command with `--add-platform=aarch64-linux` is at issue here. This command is added here:
https://github.com/rails/rails/blob/main/railties/lib/rails/generators/app_base.rb#L690-L691
So this is a special case for arm64 macs. (I am using an M2 Pro, running macOS 13.6) The solution I used locally would not be suitable for use on any other platform.

### to reproduce
`bin/test test/generators/plugin_generator_test.rb`

### Expected behavior
tests pass

### Actual behavior
tests on matching bundle commands fail

### System configuration
rails 7.2.0.alpha
ruby 3.2.2
"
50160,ActiveRecord::DangerousAttributeError:        object_id is defined by Active Record,misdoro,"activerecord, attached PR",2023-11-24T17:03:16Z,2023-11-28T14:08:26Z,2023-11-28T14:08:26Z,"With ActiveRecord Before https://github.com/rails/rails/pull/45883/files
it was possible to have a polymorphic relation `object`, 
implicitly defining `object_type` and `object_id` columns.

### Expected behavior
Able to use `object` as a name for a polymorphic relationship

### Actual behavior
An exception 
```
ActiveRecord::DangerousAttributeError:
       object_id is defined by Active Record. Check to make sure that you don't have an attribute or method with the same name.
```
is raised 

### System configuration
**Rails version**:
updating from 7.0 to 7.1

Can the `object_id` column be removed from the dangerous attributes list?

Having the column with that name was not breaking anything for us for many years, and now we are blocked from upgrading to rails 7.1."
50154,RuntimeError: can't add a new key into hash during iteration,vill,"activerecord, attached PR, With reproduction steps",2023-11-24T05:15:42Z,2023-12-01T14:31:27Z,2023-12-01T14:31:27Z,"The `alias_attribute` method does not work after upgrading `Rails` from version `7.0.8` to version `7.1.2`. Perhaps everything went bad after [this request](https://github.com/rails/rails/pull/48533).

### Steps to reproduce
**Rails 7.0.8 - This works**
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.8""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :balance_transactions, force: true do |t|
    t.string :type, null: false
    t.string :old_field
  end
end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BalanceTransaction < ApplicationRecord
  alias_attribute :new_field, :old_field
end

class BalanceTransaction
  class TopUp < BalanceTransaction
    self.abstract_class = true

    # Common validations, etc.
  end
end

class BalanceTransaction
  module Type
    class CashTopUp < BalanceTransaction::TopUp
    end
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    balance_transaction = BalanceTransaction::Type::CashTopUp.create!

    assert_equal 1, BalanceTransaction::Type::CashTopUp.count
  end
end
```
**Rails 7.1.2 - This doesn't work**
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :balance_transactions, force: true do |t|
    t.string :type, null: false
    t.string :old_field
  end
end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BalanceTransaction < ApplicationRecord
  alias_attribute :new_field, :old_field
end

class BalanceTransaction
  class TopUp < BalanceTransaction
    self.abstract_class = true

    # Common validations, etc.
  end
end

class BalanceTransaction
  module Type
    class CashTopUp < BalanceTransaction::TopUp
    end
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    balance_transaction = BalanceTransaction::Type::CashTopUp.create!

    assert_equal 1, BalanceTransaction::Type::CashTopUp.count
  end
end
```
**Rails 7.1.2 - This works**
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :balance_transactions, force: true do |t|
    t.string :type, null: false
    t.string :old_field
  end
end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BalanceTransaction < ApplicationRecord
  alias_attribute :new_field, :old_field
end

class BalanceTransaction
  class TopUp < BalanceTransaction
    self.abstract_class = true

    # Common validations, etc.
  end
end

class BalanceTransaction
  module Type
    class CashTopUp < BalanceTransaction::TopUp
    end
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    BalanceTransaction.new # <---- After this everything starts working

    balance_transaction = BalanceTransaction::Type::CashTopUp.create!

    assert_equal 1, BalanceTransaction::Type::CashTopUp.count
  end
end
```
**Rails 7.1.2 - This works**
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :balance_transactions, force: true do |t|
    t.string :type, null: false
    t.string :old_field
  end
end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BalanceTransaction < ApplicationRecord
end

class BalanceTransaction
  class TopUp < BalanceTransaction
    self.abstract_class = true

    alias_attribute :new_field, :old_field # <--- Alias declaration moved here

    # Common validations, etc.
  end
end

class BalanceTransaction
  module Type
    class CashTopUp < BalanceTransaction::TopUp
    end
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    balance_transaction = BalanceTransaction::Type::CashTopUp.create!

    assert_equal 1, BalanceTransaction::Type::CashTopUp.count
  end
end
```
### Expected behavior
The `alias_attribute` method should create aliases without errors.

### Actual behavior
```
RuntimeError: can't add a new key into hash during iteration
    /usr/local/bundle/gems/activemodel-7.1.2/lib/active_model/attribute_methods.rb:376:in `block in aliases_by_attribute_name'
```
### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
"
50152,Nested associations with `touch: true` cause additional touch on next transaction,tf,activerecord,2023-11-23T19:43:08Z,2023-11-29T14:59:17Z,,"I'm running into an edge case where creating a hierarchy of nested records with associations of the form

```ruby
Comment belongs_to :post, touch: true
Post belongs_to :blog, touch: true
```

within an transaction results in a `blog` object that performs an extra `touch` call before the next commit, overriding a manually passed `updated_at` timestamp:

```ruby
   ActiveRecord::Base.transaction do
      blog = Blog.create
      post = blog.posts.create
      post.comments.create
    end

    blog.update(updated_at: 4.days.ago)
    blog.updated_at.to_date # => today 
```

In my case the transaction was created implicitly via an `after_create` callback on the root model (in this case `Blog`) that scaffolded some nested associations. It was, thus, all the more surprising to obtain a record which did not allow updating its timestamps.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :blogs, force: true do |t|
    t.timestamps
  end

  create_table :posts, force: true do |t|
    t.belongs_to :blog
    t.string :title
    t.timestamps
  end

  create_table :comments, force: true do |t|
    t.belongs_to :post
    t.text :body
    t.timestamps
  end
end

class Blog < ActiveRecord::Base
  has_many :posts

  # Uncommenting the following two lines also makes the test fail with Rails 6.0
  # before_commit do
  # end
end

class Post < ActiveRecord::Base
  belongs_to :blog, touch: true
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, touch: true
end

class BugTest < Minitest::Test
  def test_touching
    blog  = nil

    ActiveRecord::Base.transaction do
      blog = Blog.create
      post = blog.posts.create(title: ""Some title"")
      post.comments.create(body: ""LGTM"")
    end

    timestamp = 4.days.ago
    blog.update(updated_at: timestamp)

    assert_equal timestamp.to_date, blog.updated_at.to_date
  end
end
```

### Expected behavior

Updating the `updated_at` attribute works. 

### Actual behavior

Right before the transaction to update timestamp is committed, `Blog#touch` is invoked again undoing the manual update. 

To me the situation looks as follows: Since #19324, parent touches are batched together at the end of the transaction. Before the transaction that creates the records is committed, `Post#touch` causes `Blog#touch_later` to be invoked (via the [`after_touch` callback defined in `Associations::Builder::BelongsTo`](https://github.com/rails/rails/blob/7-1-stable/activerecord/lib/active_record/associations/builder/belongs_to.rb#L99)). But since the `before_commit` callback is already in progress, this schedules `Blog#touch` for the commit of the next transaction. 

In Rails 6.0 (before #39101), the above test passes since the `before_commit_without_transaction_enrollment` callback is not triggered unless `add_to_transaction` is called. This causes the additional `touch` to be skipped. Once we add a `before_commit` callback to `Blog`, the test also fails for Rails 6.0 since we again enforce enrollment in the transaction on each save. 

I'm wondering whether one might skip propagating touches along `belongs_to` associations (via the `after_touch` callback) during the `before_commit` phase since `touch_later` itself already appears to [handle this explicitly](https://github.com/rails/rails/blob/7-1-stable/activerecord/lib/active_record/touch_later.rb#L27).

### System configuration
**Rails version**: 6.1 - 7.1

**Ruby version**: 3.2
"
50146,Rails 7.1 breaks loading plain text with yaml serializer,robbevp,"activerecord, With reproduction steps",2023-11-23T08:33:59Z,2023-11-25T10:26:30Z,2023-11-25T10:26:30Z,"While upgrading to rails 7.1+ I bumped into an issue with a column that was supposed to contained serialized yaml, but didn't. This only happens if the column's content starts with a special character like `%`.

I think this issue is caused by [these changes](https://github.com/rails/rails/commit/185f2d718d4f971ef4d45c252ec2db3db6fb0f89#diff-935494b14b54c907fc1d206871d2a4797c490b80f2c86d61a7264131dd492e42L49-L57) as this removed some early returns if the yaml doesn't appear to be serialized yaml.

### Steps to reproduce

**Rails 7.0 - this works**
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :content
  end
end

class Post < ActiveRecord::Base
  serialize :content
end

class BugTest < Minitest::Test
  def test_read_unserialized_value
    # Use raw sql to skip rails' serialization when inserting
    ActiveRecord::Base.connection.execute('INSERT INTO ""posts"" (""content"") VALUES (""%{count}"")')

    assert_equal '%{count}', Post.first.content_before_type_cast
    assert_equal '%{count}', Post.first.content
  end
end
```

**Rails 7.1 - This doesn't work**
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :content
  end
end

class Post < ActiveRecord::Base
  serialize :content, coder: YAML
end

class BugTest < Minitest::Test
  def test_read_unserialized_value
   # Use raw sql to skip rails' serialization when inserting
   ActiveRecord::Base.connection.execute('INSERT INTO ""posts"" (""content"") VALUES (""%{count}"")')

   assert_equal '%{count}', Post.first.content_before_type_cast
   
   # This will throw `Psych::SyntaxError: (<unknown>): could not find expected directive name while scanning a directive at line 1 column 1`
   assert_equal '%{count}', Post.first.content
  end
end
```

### Expected behavior
There should be no breaking behaviour here, since there was no deprecation notice. The upgrade guide to rails 7.1 also doesn't mention anything about changes around `serialize`: https://edgeguides.rubyonrails.org/7_1_release_notes.html

### Actual behavior
Trying to read the attribute will throw an error:
```
psych-5.1.1.1/lib/psych/parser.rb:62:in `_native_parse': (<unknown>): could not find expected directive name while scanning a directive at line 1 column 1 (Psych::SyntaxError)
```

### System configuration
**Rails version**: 7.0 -> 7.1

**Ruby version**: 3.2.2
"
50142,After touch removes saved_changes,matiassalles99,activerecord,2023-11-22T18:37:05Z,2023-12-20T03:17:02Z,2023-12-20T03:17:01Z,"### Steps to reproduce

- When calling `record.touch` on any ActiveRecord model, you can access the saved_changes in a after_touch callback
- When calling `saved_changes` in an after_touch callback that runs after an association touches the related record saved_changes is an empty hash, I suspect that might be related to the `clear_attribute_change` in the TouchLater module

<img width=""793"" alt=""Screenshot 2023-11-22 at 15 33 48"" src=""https://github.com/rails/rails/assets/57004457/771a4c3a-d1c4-48e8-8367-2c823a5753a1"">

- To replicate create two ActiveRecord classes

```ruby
class A < ApplicationRecord
  belongs_to :b, touch: true
end

class B < ApplicationRecord
  after_touch :do_sth

  def do_sth
    puts saved_changes
  end
end
```

### Expected behavior
- We should see the updated_at attribute inside the saved_changes hash, which allows calling updated_at_before_last_save to expire cache keys based on the updated_at

### Actual behavior
- saved_changes returns an empty hash, which means there is no way to access the previous updated_at value

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.2
"
50139,`counter_cache` not decrementing with has_many through association,zbokostya,activerecord,2023-11-22T17:56:40Z,2023-11-23T20:25:45Z,,"### Steps to reproduce
```ruby
begin
  require 'bundler/inline'
rescue LoadError => e
  $stderr.puts 'Bundler version 1.10 or later is required. Please update your Bundler'
  raise e
end

gemfile(true) do
  source 'https://rubygems.org'
  gem 'activerecord', '7.1.1'
  # gem 'activerecord', '6.1.7.6'
  # gem 'activerecord', '5.2.8.1'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :books, force: true do |t|
  end

  create_table :parts, force: true do |t|
    t.integer :book_id
    t.integer :series_id
  end

  create_table :series, force: true do |t|
    t.integer :books_count, default: 0
  end
end

class Book < ActiveRecord::Base
  has_many :parts
  has_many :series, through: :parts
end

class Part < ActiveRecord::Base
  belongs_to :book
  belongs_to :series, counter_cache: :books_count
end

class Series < ActiveRecord::Base
  has_many :parts
  has_many :books, through: :parts
end

class BugTest < Minitest::Test

  def test_counter_cache_after_assign_and_clear
    book = Book.create!
    series = Series.create!

    series.books = [book]
    series.books = []
    assert_equal 0, series.books_count
  end

  def test_counter_cache_after_assign_and_clear_with_reload
    book = Book.create!
    series = Series.create!

    series.books = [book]
    series.books = []
    assert_equal 0, series.reload.books_count
  end
end
```

### Expected behavior
`counter_cache` should become to eq 0 after assign has_many field with empty array

### Actual behavior
`counter_cache` not decrementing

### System configuration
**Rails version**:
7.1.1, 6.1.7.6, 5.2.8.1
**Ruby version**:
3.2.2, 2.7.5"
50133,Warn if frameworks are loaded too early,runephilosof-abtion,"attached PR, With reproduction steps",2023-11-22T13:02:04Z,2023-11-25T10:04:37Z,,"If you use a gem that loads the Rails framework too early, you will get various problems.

Examples of issues that are caused by gems loading Rails incorrectly (from https://github.com/rails/rails/pull/46047#issuecomment-1380712992)
- https://github.com/rails/rails/issues/23589 
- https://github.com/rails/rails/issues/27844
- https://github.com/rails/rails/issues/33283
- https://github.com/rails/rails/issues/36322
- https://github.com/rails/rails/issues/37030

Fixes to gems that loaded Rails too early
- https://github.com/ViewComponent/view_component/issues/1507
- https://github.com/collectiveidea/delayed_job_active_record/issues/185

Pull requests that try to make Rails warn about this problem, when your Rails code has been loaded too early
- https://github.com/rails/rails/pull/38024
- https://github.com/rails/rails/pull/46047

This issue is here to track the efforts to fix this issue. It seems both above PRs are stalled.

### Steps to reproduce
```
  # config/initializers/000_some_initializer.rb
  ActiveRecord::Base.configurations # Make use of AR::Base which hasn't been loaded yet

  # config/initializers/new_framework_defaults.rb
  Rails.application.config.active_record.collection_cache_versioning = false
  # Setting this configuration won't do anything since ActiveRecord::Base is already
  # loaded and the `set_configs` initializer has already iterated over application
  # config (see https://github.com/rails/rails/blob/b67785a476cf346b09f5ebc71b4d61aae3ac27b3/activerecord/lib/active_record/railtie.rb#L192)

  puts ActiveRecord::Base.collection_cache_versioning # true
```

### Expected behavior
Rails would warn on stderr about this problem, or raise an error.
Extra points, if it could pinpoint (stacktrace?) what code is doing the wrong loading.

### Actual behavior
Initializer configuration from new_framework_defaults of ActiveRecord is ignored.

### System configuration
**Rails version**:
7.1.2
**Ruby version**:
2.7.7"
50131,Invalid SQL executing distinct.count on a model with a composite primary key,umbertopeserico,activerecord,2023-11-22T09:26:00Z,2023-11-22T16:02:52Z,,"The problem: when running a query `Model.distinct.count` on a model which as a composite primary key, the generated SQL is not valid.

### Steps to reproduce

To reproduce the bug with postgresql (which is the adapter l'm using)
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""= 7.1.2""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""distinct_count_bug"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :composite_pks, primary_key: [:col1, :col2] do |t|
    t.string :col1
    t.string :col2

    t.timestamps
  end
end

class CompositePk < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_distinct_count_invalid_sql_generated
    CompositePk.create(col1: 'example', col2: 'example')
    count = CompositePk.distinct.count

    assert_equal 1, count
  end
end
```

To reproduce the bug with sqlite3 (I tried to understand if this is a database adapter specific bug but sqlite3 generates the same query)
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""= 7.1.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :composite_pks, primary_key: [:col1, :col2] do |t|
    t.string :col1
    t.string :col2

    t.timestamps
  end
end

class CompositePk < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_distinct_count_invalid_sql_generated
    CompositePk.create(col1: 'example', col2: 'example')
    count = CompositePk.distinct.count

    assert_equal 1, count
  end
end
```

### Expected behavior

Running Model.distinct.count:

No exception raised and valid SQL generated

Example of valid SQL
```SQL
SELECT COUNT(DISTINCT (""col1"", ""col2"")) FROM ""composite_pks""
```

### Actual behavior

Running Model.distinct.count:

An exception is raised (with postgresql):
`ActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  syntax error at or near ""[""
LINE 1: SELECT COUNT(DISTINCT [""col1"", ""col2""]) FROM ""composite_pks""`

An exception is raised (with sqlite):
`ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: ""col1"", ""col2""""`

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2

**PostgresSQL**: 15

**SQLite**: 3
"
50126,Engine broken after upgrading from Rails 7.1.1 to Rails 7.1.2,jamesw,engines,2023-11-21T08:47:35Z,2023-12-14T17:47:01Z,2023-12-14T17:47:01Z,"### Expected behavior
The following engine works in all rails 7 versions up to and including rails 7.1.1 with Ruby 3.2.2 prior to the latest 7.1.2 release

Running my test suite causes the following error
```

[1] guard(main)> 
08:41:19 - INFO - Run all
08:41:19 - INFO - Running all specs

An error occurred while loading ./spec/models/ccs_cms/admin_dashboard/administrator_spec.rb.
Failure/Error: require File.expand_path('../test/dummy/config/environment', __dir__)

Zeitwerk::NameError:
  expected file /home/jamie/Development/rails/comtech/r7/ccs_cms/engines/admin_dashboard/app/overrides/add_admin_dashboard_link_to_core_header.rb to define constant AddAdminDashboardLinkToCoreHeader, but didn't
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/callbacks.rb:33:in `on_file_autoloaded'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:31:in `require'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/polyglot-0.3.5/lib/polyglot.rb:65:in `require'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:91:in `block (2 levels) in enumerate_and_load'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:90:in `block in enumerate_and_load'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:85:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:85:in `enumerate_and_load'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:79:in `load_overrides'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:62:in `block in load_all'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:60:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/environment.rb:60:in `load_all'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/deface-1.9.0/lib/deface/railtie.rb:12:in `activate'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:448:in `instance_exec'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:448:in `block in make_lambda'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:202:in `block (2 levels) in halting'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:707:in `block (2 levels) in default_terminator'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:706:in `catch'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:706:in `block in default_terminator'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:203:in `block in halting'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:598:in `block in invoke_before'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:598:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:598:in `invoke_before'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/callbacks.rb:109:in `run_callbacks'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/reloader.rb:96:in `prepare!'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/application/finisher.rb:74:in `block in <module:Finisher>'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:32:in `instance_exec'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:32:in `run'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:61:in `block in run_initializers'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:60:in `run_initializers'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/application.rb:423:in `initialize!'
# ./test/dummy/config/environment.rb:5:in `<top (required)>'
# ./spec/rails_helper.rb:4:in `<top (required)>'
# ./spec/models/ccs_cms/admin_dashboard/administrator_spec.rb:1:in `<top (required)>'`

```
```
An error occurred while loading ./spec/requests/ccs_cms/admin_dashboard/dashboard_spec.rb.
Failure/Error: require File.expand_path('../test/dummy/config/environment', __dir__)

FrozenError:
  can't modify frozen Array: [""/home/jamie/Development/rails/comtech/r7/ccs_cms/engines/admin_dashboard/test/dummy/test/mailers/previews""]
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/actionmailer-7.1.2/lib/action_mailer/railtie.rb:83:in `concat'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/actionmailer-7.1.2/lib/action_mailer/railtie.rb:83:in `block in <class:Railtie>'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:32:in `instance_exec'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:32:in `run'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:61:in `block in run_initializers'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `tsort_each_child'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `tsort_each_child'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `tsort_each_child'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:60:in `run_initializers'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/application.rb:423:in `initialize!'
# ./test/dummy/config/environment.rb:5:in `<top (required)>'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/polyglot-0.3.5/lib/polyglot.rb:65:in `require'
# ./spec/rails_helper.rb:4:in `<top (required)>'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/polyglot-0.3.5/lib/polyglot.rb:65:in `require'
# ./spec/requests/ccs_cms/admin_dashboard/dashboard_spec.rb:1:in `<top (required)>'

An error occurred while loading ./spec/system/ccs_cms/admin_dashboard/ccs_cms_admin_dashboard_administrators_spec.rb.
Failure/Error: require File.expand_path('../test/dummy/config/environment', __dir__)

FrozenError:
  can't modify frozen Array: [""/home/jamie/Development/rails/comtech/r7/ccs_cms/engines/admin_dashboard/test/dummy/test/mailers/previews""]
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/actionmailer-7.1.2/lib/action_mailer/railtie.rb:83:in `concat'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/actionmailer-7.1.2/lib/action_mailer/railtie.rb:83:in `block in <class:Railtie>'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:32:in `instance_exec'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:32:in `run'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:61:in `block in run_initializers'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `tsort_each_child'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `tsort_each_child'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `each'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:50:in `tsort_each_child'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/initializable.rb:60:in `run_initializers'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/application.rb:423:in `initialize!'
# ./test/dummy/config/environment.rb:5:in `<top (required)>'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/polyglot-0.3.5/lib/polyglot.rb:65:in `require'
# ./spec/rails_helper.rb:4:in `<top (required)>'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
# /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/polyglot-0.3.5/lib/polyglot.rb:65:in `require'
# ./spec/system/ccs_cms/admin_dashboard/ccs_cms_admin_dashboard_administrators_spec.rb:1:in `<top (required)>'
No examples found.
```
`
Also running the Rails Puma Server causes the following error

```
`rails s
/home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails.rb:51:in `configuration': undefined method `config' for nil:NilClass (NoMethodError)

      application.config
                 ^^^^^^^
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/factory_bot_rails-6.4.0/lib/factory_bot_rails/railtie.rb:25:in `block in <class:Railtie>'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/lazy_load_hooks.rb:97:in `class_eval'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/lazy_load_hooks.rb:97:in `block in execute_hook'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/lazy_load_hooks.rb:87:in `with_execution_control'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/lazy_load_hooks.rb:92:in `execute_hook'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/lazy_load_hooks.rb:78:in `block in run_load_hooks'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/lazy_load_hooks.rb:77:in `each'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activesupport-7.1.2/lib/active_support/lazy_load_hooks.rb:77:in `run_load_hooks'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activerecord-7.1.2/lib/active_record/base.rb:338:in `<module:ActiveRecord>'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/activerecord-7.1.2/lib/active_record/base.rb:15:in `<top (required)>'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/database_cleaner-active_record-2.1.0/lib/database_cleaner/active_record/truncation.rb:2:in `<top (required)>'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/database_cleaner-active_record-2.1.0/lib/database_cleaner/active_record.rb:4:in `<top (required)>'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/database_cleaner-active_record-2.1.0/lib/database_cleaner-active_record.rb:1:in `<top (required)>'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/bundler-2.4.19/lib/bundler/runtime.rb:60:in `block (2 levels) in require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/bundler-2.4.19/lib/bundler/runtime.rb:55:in `each'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/bundler-2.4.19/lib/bundler/runtime.rb:55:in `block in require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/bundler-2.4.19/lib/bundler/runtime.rb:44:in `each'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/bundler-2.4.19/lib/bundler/runtime.rb:44:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/bundler-2.4.19/lib/bundler.rb:187:in `require'
	from /home/jamie/Development/rails/comtech/r7/ccs_cms/engines/admin_dashboard/test/dummy/config/application.rb:7:in `<top (required)>'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/commands/server/server_command.rb:139:in `block in perform'
	from <internal:kernel>:90:in `tap'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/commands/server/server_command.rb:136:in `perform'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/thor-1.3.0/lib/thor/command.rb:28:in `run'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/thor-1.3.0/lib/thor/invocation.rb:127:in `invoke_command'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/command/base.rb:178:in `invoke_command'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/thor-1.3.0/lib/thor.rb:527:in `dispatch'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/command/base.rb:73:in `perform'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/command.rb:71:in `block in invoke'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/command.rb:149:in `with_argv'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/command.rb:69:in `invoke'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/commands.rb:18:in `<top (required)>'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/railties-7.1.2/lib/rails/engine/commands.rb:9:in `<top (required)>'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from <internal:/home/jamie/.rvm/rubies/ruby-3.2.2/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
	from /home/jamie/.rvm/gems/ruby-3.2.2@cms_admin_dashboard/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:38:in `require'
	from bin/rails:14:in `<main>'
```
`
Please see Stackoverflow question https://stackoverflow.com/questions/77516314/how-to-tell-zeitwerk-to-ignore-overrides-folder-in-a-rails-engine?noredirect=1#comment136665688_77516314 in which Xavier @xfn is helping in comments

I will try generating a new engine from scratch to see what happens rather than updating and post back with steps taken or conclusions I come up with

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
"
50125,Error Message Degradation for Connection-Related Error Especially for Production Environment,aeroastro,"activerecord, attached PR, With reproduction steps",2023-11-21T06:02:52Z,2023-11-29T10:26:17Z,2023-11-28T19:45:14Z,"### Steps to reproduce

#### Gemfile

```ruby
source ""https://rubygems.org""

git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

gem ""rails"", github: ""rails/rails"", branch: ""main""
gem ""mysql2""
```

#### Test Code

```ruby
require ""active_record""
require ""action_controller/railtie""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""mysql2"", host: ""127.0.0.1"", port: ""3306"")

class Post < ActiveRecord::Base
  has_many :comments
end

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    @post = Post.all.to_a
    render plain: ""Home""
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    get ""/""
    assert last_response.ok?
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

There should be informative, accurate, and concise error message.

```
ActiveRecord::ConnectionNotEstablished (Can't connect to MySQL server on '127.0.0.1:3306' (61)):
```

### Actual behavior

The error message has been degraded.

```
ActiveRecord::DatabaseConnectionError (There is an issue connecting with your hostname: 127.0.0.1.

Please check your database configuration and ensure there is a valid connection to your database.
):
```

* `ActiveRecord::ConnectionNotEstablished` is more understandable than `ActiveRecord::DatabaseConnectionError` because the former implies when the connection issue happens.
* For a running production environment, almost all the causes of connection error are not the invalid database configuration, but due to the network error, disorder of a specific database instance (hardware or software), and other temporal failures. The error message of `Please check your database configuration` interferes with troubleshooting incidents on production environment.
* The message has lost port information, which makes it impossible to investigate which database is causing error when hosting multiple databases on different ports.
* The error code `61` has been lost.

### System configuration

**Rails version**: 7.2.0.alpha

**Ruby version**: 3.2.2
"
50118,prepend option is no longer supported for after_commit callbacks in Rails 7.1 defaults,jrochkind,"activerecord, With reproduction steps",2023-11-20T18:17:01Z,2023-11-20T22:49:17Z,,"As a result of #46992 (@tenderlove), with new Rails 7.1 default `run_after_transaction_callbacks_in_order_defined` true, `prepend` option is _no longer supported_ for any transactional callbacks.  (after_commit)

We can see how in the presence of this configugration `prepend:true` is hardcoded, and then passed to `set_options_for_callbacks!` method such that it will over-ride any `prepend` arg otherwise passed in, for all `after_commit` and `after_rollback` ""transactional"" callbacks. 

https://github.com/rails/rails/pull/46992/files#diff-8dd03b7fb9b72a3bd338955c1de75652d60453230c6544f3851c0d0b3746a675R270-R275

The effect of this is that prior to `run_after_transaction_callbacks_in_order_defined`, you could use `prepend:true` to alter callback order when definining new transactional callbacks. 

But after #46992, not only is the default order reversed, but **you can no longer use prepend:true to alter the order**. 

This is not mentioned in the #46992 or any related docs/changenotes.  `prepend: true` is still mentioned as an option for `before_destroy` in [guide](https://github.com/rails/rails/blob/0ad26f789013f3e07d7dc453303a8240a4da0d38/guides/source/active_record_callbacks.md#destroying-an-object) as well as [header docs on ActiveRecord::Callbacks](https://github.com/rails/rails/blob/0ad26f789013f3e07d7dc453303a8240a4da0d38/activerecord/lib/active_record/callbacks.rb#L198-L205)

`prepend:true` is mentioned in passing in the [docs for run_after_transaction_callbacks_in_order_defined](https://github.com/rails/rails/blob/0ad26f789013f3e07d7dc453303a8240a4da0d38/guides/source/configuring.md#configactive_recordrun_after_transaction_callbacks_in_order_defined), but I guess it's not clear if it's meant to apply to `after_commit` there?



1. If it is intended that `prepend` option is removed from after_commit and transactional callbacks when `run_after_transaction_callbacks_in_order_defined` is set,  i guess the docs should mention this?

2. If it is a bug that `prepend:true ` no longer works for after_commit callbacks in Rail 7.1 with default config, then we could fix it in a PR?
"
50117,Rails 7.0.5 and later: form_with no longer accepts single hash argument,ekortright-ewtn,"actionview, With reproduction steps",2023-11-20T17:47:18Z,2023-11-20T21:49:24Z,2023-11-20T21:49:12Z,"My application calls `form_with` by passing to it the hash returned by a method that figures out which parameters need to be set depending on the context.  This used to work until Rails 7.0.4 inclusive.  Starting with Rails 7.0.5, `form_with` accepts key-value pairs passed directly, but throws an error if a hash with the desired parameters is passed to it.

I don't see any mention of form_with changes in the 7.0.5 release notes, so I suspect this may be a bug.

### Steps to reproduce

In Rails console:

```ruby
include ActionView::Helpers::FormHelper
form_with({ url: 'foo' })
```

### Expected behavior
Should return a buffer with a `<form>` tag.  This is what happens if you use key-value pairs directly:
`form_with(url: 'foo')`

### Actual behavior
Throws an exception: `'form_with': wrong number of arguments (given 1, expected 0) (ArgumentError)`

### System configuration
**Rails version**: 7.0.5 and later (have not tested 7.1)

**Ruby version**: 3.2.1
"
50111,ActiveRecord is not cleaning duplicated values on `where(foo: my_array)`,mrcasals,"activerecord, With reproduction steps",2023-11-20T10:21:02Z,2023-11-20T13:48:33Z,2023-11-20T12:25:50Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem 'activerecord', '~> 7.1.0'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    post2 = Post.create!
    collection = Post.where(id: ([post.id, post2.id] * 10))

    sql = collection.to_sql
    sql_ids = sql.split(' IN ').last

    assert_equal 2, collection.count
    assert_equal 2, actual_sql_ids
  end
end
```

### Expected behavior
When calling `Post.where(id: my_ids)`, it's not cleaning up repeated values. Asking for the same value multiple times has not effect to the DB, but we can avoid sending extra bytes and parsing that extra information.

### Actual behavior
ActiveRecord is sending the values as they are, without cleaning duplicated values.

### System configuration
**Rails version**: Can confirm this happens at least since Rails 7.0.6

**Ruby version**: Ruby 3.2.2
"
50099,Rails Generator Tests do not work with `generate` commands,tcannonfodder,"railties, attached PR, With reproduction steps",2023-11-18T23:43:39Z,2023-11-20T09:58:56Z,,"### Steps to reproduce

_Example repository here: https://github.com/practical-computer/generator-test-failure_. Relevant files:
* https://github.com/practical-computer/generator-test-failure/blob/main/lib/generators/example/example_generator.rb
* https://github.com/practical-computer/generator-test-failure/blob/main/test/lib/generators/example_generator_test.rb

When creating a new Generator from a fresh Rails install, the generated test case does not run. Instead, the following error is returned:

```
$ bundle exec rails test                                              
Running 1 tests in a single process (parallelization threshold is 50)
Run options: --seed 42824

# Running:

/.../.rbenv/versions/3.0.2/bin/ruby: No such file or directory -- bin/rails (LoadError)
```

Command run to generate the generator:
```shell
 bundle exec rails generate generator example
      create  lib/generators/example
      create  lib/generators/example/example_generator.rb
      create  lib/generators/example/USAGE
      create  lib/generators/example/templates
      invoke  test_unit
      create    test/lib/generators/example_generator_test.rb
```

The generator body:
```ruby
class ExampleGenerator < Rails::Generators::NamedBase
  source_root File.expand_path(""templates"", __dir__)

  def run_test_generator
    generate ""generator"", ""test""
  end
end
```

### Expected behavior
The generator tests should work

### Actual behavior
The tests error out

### System configuration
**Rails version**: Rails 7.1.2


**Ruby version**: `ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [arm64-darwin21]`

### Research

@garrettdimon has been extremely helpful with debugging this and pulled the following links together:
* The test suites worked back in Rails 6.1.7.6: https://github.com/rails/rails/commit/ad0f0e69800db62a9bb198d427bb531fbd07e027
* https://github.com/rails/rails/commit/ad0f0e69800db62a9bb198d427bb531fbd07e027#diff-a8b5ef8dfdaadc4ed11dae1c4e6762bb26a76f90e53e9fec87c9e92f14a83e0fL343-R343"
50096,[Active Record] Using as_json with include giving undesirable results,maniSHarma7575,"activerecord, With reproduction steps",2023-11-18T15:41:12Z,2023-11-18T17:31:15Z,2023-11-18T17:06:24Z,"### Steps to reproduce
In the script below, I am filtering out the post IDs along with comment IDs.

```
Post.joins(:comments).where(comments: { id: [1, 2] }).as_json(only: :id, include: { comments: { only: :id } })
```
And here, we are filtering out the comments with IDs 1 and 2. So, in the final output, it should only include the comments with IDs 1 and 2. However, post 1 also has comments with IDs 4 and 6, and post 2 also has a comment with ID 5. 

So all the comments are getting include no matter whether there is filtering in comment or not?

Is this the desired behavior?

### Reproduce script

```ruby
# frozen_string_literal: true

require ""bundler/inline""
require ""pry""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.integer :title
    t.text :description
  end

  create_table :comments, force: true do |t|
    t.text :description
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post1 = Post.create!(title: 'Post1', description: 'Post description 1')
    post2 = Post.create!(title: 'Post2', description: 'Post description 2')
    post3 = Post.create!(title: 'Post3', description: 'Post description 3')
    post1.comments << Comment.create!(description: 'Comment 1')
    post2.comments << Comment.create!(description: 'Comment 2')
    post3.comments << Comment.create!(description: 'Comment 3')
    post1.comments << Comment.create!(description: 'Comment 1.1')
    post2.comments << Comment.create!(description: 'Comment 2.1')
    post1.comments << Comment.create!(description: 'Comment 1.2')

    posts = Post.joins(:comments).where(comments: { id: [1, 2] }).as_json(only: :id, include: { comments: { only: :id } })
    assert_equal posts, [{""id""=>1, ""comments""=>[{""id""=>1}]}, {""id""=>2, ""comments""=>[{""id""=>2}]}]
  end
end

```


### Expected behavior
Below test case should pass

### Actual behavior
```
F

Failure:
BugTest#test_association_stuff [as_json.rb:56]:
--- expected
+++ actual
@@ -1 +1 @@
-[{""id""=>1, ""comments""=>[{""id""=>1}, {""id""=>4}, {""id""=>6}]}, {""id""=>2, ""comments""=>[{""id""=>2}, {""id""=>5}]}]
+[{""id""=>1, ""comments""=>[{""id""=>1}]}, {""id""=>2, ""comments""=>[{""id""=>2}]}]



bin/rails test as_json.rb:44



Finished in 0.035173s, 28.4309 runs/s, 28.4309 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**: 7.2.0.alpha

**Ruby version**: 3.2.2
"
50087,No error messages in development after update from 7.0 to 7.1,joshfester,third party issue,2023-11-17T18:45:47Z,2023-11-25T02:40:41Z,2023-11-17T20:32:17Z,"### Steps to reproduce
I was on rails 7.0.8 and updated to 7.1.2. After the update, I no longer see errors in the console. It will just say ""Completed 500 Internal Server Error"" and render the error page you'd normally see in production. 

### Expected behavior
See errors with a stack trace in the console and on the rendered page

### Actual behavior
No errors, looks like it's in production

### System configuration
**Rails version**: 7.1.2

**Ruby version**:

Puma version: 6.4.0
web-console version: 4.2.1

When I start up the dev server, it says ""Rails 7.1.2 application starting in development"", and running Rails.env outputs ""development"". Puma and web-console are both the latest version, same as before the update to 7.1.

I ran `rails app:update` and even tried letting it overwrite my application.rb and development.rb. With the fresh development.rb, I get an error telling me to add my domain to config.hosts. The error shows in the console and I see the development error page. After I add `config.hosts << ""my-domain.com:3000""`, then I stop seeing console errors and start seeing the production error page.

When I revert back to 7.0.8 the issue is gone. I tried a fresh project with `rails new` and added the config.hosts line, and that works as it should on rails 7.1.2. So this must be an issue specific to my codebase.

I can confirm `config.consider_all_requests_local = true`. When I run `request.local?` it always returns false. But it returned false even before this issue started. 

Maybe the wrong place to ask, but what else could cause this? Where else could I look?

Update: I tried curl'ing from localhost. `request.local?` returns true, but the issue persists. I tried removing the config.hosts line and curl'ing, same issue. Also tried: 
- changing the config to `config.hosts.clear`
- explicitly setting `config.log_level = :debug` 
- running `rails db:reset`
- changing to `config.load_defaults 7.0`
"
50085,Passing DATABASE_URL env var breaks loading,andrewyoo,"activerecord, With reproduction steps",2023-11-17T17:45:01Z,2023-11-17T23:51:31Z,2023-11-17T23:25:19Z,"Current rails main doesn't like when DATABASE_URL env is passed in.

### Steps to reproduce
```
rails new test_rails_edge --edge --database=postgresql
rails db:create
# update Gemfile to point to 'main' with `gem 'rails', github: 'rails/rails', branch: 'main'`
bundle
DATABASE_URL=postgres://localhost/test_rails_edge_development bin/rails c
```

results in:
```
.../activerecord/lib/active_record/dynamic_matchers.rb:22:in `method_missing': undefined method `time_zone_aware_types' for ActiveRecord::Base:Class (NoMethodError)
```

### Expected behavior
Should load rails console using DATABASE_URL env for database

### Actual behavior
receives error `undefined method 'time_zone_aware_types' for ActiveRecord::Base:Class (NoMethodError)`

### System configuration
**Rails version**:
rails main b7d9654f981120b3f525533c3e35f544d3d3171e

**Ruby version**:
3.2.2"
50083,`find_by` and `where` should cache association,yoshiyoshiharu,activerecord,2023-11-17T11:27:37Z,2023-11-18T02:51:35Z,2023-11-18T02:38:57Z,"I think fetched model using `find_by` or `where` by associated model should cache their associations.
If there are reasons why they does not cache, please let me know.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
class User < ApplicationRecord
  has_one :user_profile
end

class UserProfile < ApplicationRecord
  belongs_to :user
end
```

```ruby
user = User.first # Run SQL
user_profile = UserProfile.find_by(user: user) # Run SQL
user_profile.user # Run SQL, but I think this SQL should not run.
```

### Expected behavior
<!-- Tell us what should happen -->
`user_profile = UserProfile.find_by(user: user)` should cache `user` association.
`user_profile.user` should not run SQL.
### Actual behavior
<!-- Tell us what happens instead -->
`user_profile = UserProfile.find_by(user: user)` does not cache `user` association.
`user_profile.user` run SQL.

### System configuration
**Rails version**: 3.2.2

**Ruby version**: 7.1.1
"
50078,Arel - MySQL has inconsistent behavour when attempting to use ordering with nulls_first/nulls_last,tttffff,attached PR,2023-11-16T20:52:16Z,2023-12-08T23:44:04Z,2023-12-08T23:44:04Z,"#42245 introduces `.nulls_first()` and `.nulls_last()` for all databases apart from MySQL. The PR states that `.nulls_first()` has been implemented for MySQL and that it works as designed, this is not entirely correct.

Currently:
- When using `.asc.nulls_first()` it does work as designed (due to the rules of the engine)
- When using `.desc.nulls_first()` it orders nulls last without any indication of this.
- When using `.asc.nulls_last()` it raises `StatementInvalid` error.
- When using `.desc.nulls_last()` it raises `StatementInvalid` error.

Suggestions:
1. `.desc.nulls_last()` should also be no-op and work as designed (due to the rules of the engine) but `.desc.nulls_first()` and `.asc.nulls_last()` should both raise either `StatementInvalid` or another error.
2. All four should raise an error, this could be `StatementInvalid`, but something like `NotImplementedError` might be better.
3. Some sort of a fix where we can order nulls first/last for MySQL.

### Steps to reproduce
```sh
rails new anything --database=mysql --minimal && cd anything && \
bin/rails g model something name && bin/rails db:prepare && bin/rails c
```

```ruby
[nil, ""ZZZ"", ""AAA"", nil].each { |name| Something.create(name:) }
name_attribute = Something.arel_table[:name]
Something.order(name_attribute.asc.nulls_first).map(&:name) # => [nil, nil, ""AAA"", ""ZZZ""]
Something.order(name_attribute.desc.nulls_first).map(&:name) # => [""ZZZ"", ""AAA"", nil, nil]
Something.order(name_attribute.asc.nulls_last).map(&:name) # => raises ActiveRecord::StatementInvalid
Something.order(name_attribute.desc.nulls_last).map(&:name) # => raises ActiveRecord::StatementInvalid
```

### Expected behavior
- `Something.order(name_attribute.desc.nulls_first).map(&:name)` should either order nulls first or raise an error
- `Something.order(name_attribute.desc.nulls_last).map(&:name)` should provide no-op nulls_last + desc ordering, this would be consistent with `Something.order(name_attribute.asc.nulls_first).map(&:name)`

### Actual behavior
- `Something.order(name_attribute.desc.nulls_first).map(&:name)` orders nulls last desc
- `Something.order(name_attribute.desc.nulls_last).map(&:name)` raises an error

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.1.3
"
50076,Incorrect serialization of `ActiveSupport::StringInquirer` instances ,viralpraxis,"activejob, With reproduction steps",2023-11-16T20:11:03Z,2023-11-18T00:09:29Z,2023-11-18T00:09:29Z,"### Steps to reproduce

Consider the following MRE:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activejob"", ""~> 7.1.0""
  gem ""sidekiq"", ""~> 7.2.0""
end

require ""minitest/autorun""
require ""active_job""
require ""active_support/core_ext/string/inquiry""

class BuggyJob < ActiveJob::Base
  self.queue_adapter = :sidekiq

  def perform(argument)
    p argument
  end
end

class BuggyJobTest < ActiveJob::TestCase
  def test_stuff
    BuggyJob.perform_later(""paid"".inquiry)
    perform_enqueued_jobs
  end

  def queue_adapter_for_test
    ActiveJob::QueueAdapters::SidekiqAdapter.new
  end
end
```

Basically we pass an instance of `ActiveSupport::StringInquirer` to `.perform_later` (note that queue adapter is set to `sidekiq`), and I expect it to be serialized correctly. In fact, an exception occurs (I believe that's because of [this](https://github.com/sidekiq/sidekiq/issues/5246) sidekiq change.)

It happenes because here

https://github.com/rails/rails/blob/6b93fff8af32ef5e91f4ec3cfffb081d0553faf0/activejob/lib/active_job/arguments.rb#L74-L76

first comparsion (with `PERMITTED_TYPES`) passes because that's equivalent with

```ruby
[String].any? { ""foo"".inquiry.is_a? _1 }
true
```

Unfortunately, it cannot be bypassed ""in place"" (without monkeypatching) with custom AJ serializer (via `Rails.application.config.active_job.custom_serializers << ` API) because checking against String subclass passes, so fallback for custom serializer doesn't happen.


### Expected behavior
I expect an instance of `ActiveSupport::StringInquirer` to be serialized and serialized correctly.

Serialization should be as easy as

```ruby
class StringInquirerSerializer < ObjectSerializer # :nodoc:
  def serialize(argument)
    super(""value"" => argument.to_s)
  end

  def deserialize(argument)
    argument[""value""].inquiry
  end

  private
    def klass
      ActiveSupport::StringInquirer
    end
end
```

so I don't see why this custom serializer (with taking into account the issue I mentioned above) wouldn't work. 

### Actual behavior
```
  1) Error:
BuggyJobTest#test_stuff:
ArgumentError: Job arguments to BuggyJob must be native JSON types, but ""paid"" is a ActiveSupport::StringInquirer.
See https://github.com/sidekiq/sidekiq/wiki/Best-Practices
To disable this error, add `Sidekiq.strict_args!(false)` to your initializer.


.../sidekiq-7.2.0/lib/sidekiq/job_util.rb:33:in `verify_json'
.../sidekiq-7.2.0/lib/sidekiq/client.rb:92:in `push'
.../sidekiq-7.2.0/lib/sidekiq/job.rb:361:in `client_push'
...
```


### System configuration
**Rails version**: 7.0.8, 7.1.2
**Ruby version**: 3.2.2
**Sidekiq version**: 7.2.0
"
50072,association with `query_constraints: []` always returns empty collection when included,doits,activerecord,2023-11-16T12:59:11Z,2023-11-17T14:40:12Z,,"### Steps to reproduce

With `query_constraints: []` one can create a custom query for an association, for example:

```ruby
class BodyPart < ActiveRecord::Base
end

class Human < ActiveRecord::Base
  has_many :body_parts, -> { where(for: 'human') }, query_constraints: []
end
```

This results in the following correct sql:

```ruby
Human.last.body_parts.to_sql
# => SELECT ""body_parts"".* FROM ""body_parts"" WHERE ""body_parts"".""for"" = 'human'
```

So far so good, but it always returns an empty collection when adding an `includes(:body_parts)`:

```ruby
Human.create!
BodyPart.create!(for: 'human')

Human.last.body_parts
# => [<instance of BodyPart>]
# correct

Human.includes(:body_parts).last.body_parts
# => []
# wrong
```

Is this a misuse of `query_constraints`? Should it break on `query_constraints: []`?

Or is this a bug including/eager_loading associations in case there are no query_constraints?

### Background

The idea is to have custom associations *that can be preloaded*. The example above is very simple and doesn't depend on the the attributes at all (so the result is the same for every human), but it could be more complicated with a custom `where` query string etc. that takes into account the attributes of the model.

### Test template

<details><summary>Template</summary>

```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'rails', github: 'rails/rails', branch: 'main'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table :humen, id: :uuid, force: true do |t|
  end

  create_table :body_parts, id: :uuid, force: true do |t|
    t.string :for
  end
end

class BodyPart < ActiveRecord::Base
end

class Human < ActiveRecord::Base
  has_many :body_parts, -> { where(for: 'human') }, query_constraints: []
end

class BugTest < Minitest::Test
  def test_without_include
    Human.delete_all
    BodyPart.delete_all

    body_part_for_human = BodyPart.create!(id: SecureRandom.uuid, for: :human)
    BodyPart.create!(id: SecureRandom.uuid, for: :dog)

    Human.create!(id: SecureRandom.uuid)

    assert Human.all.first.body_parts == [body_part_for_human]
  end

  def test_with_include
    Human.delete_all
    BodyPart.delete_all

    body_part_for_human = BodyPart.create!(id: SecureRandom.uuid, for: :human)
    BodyPart.create!(id: SecureRandom.uuid, for: :dog)

    Human.create!(id: SecureRandom.uuid)

    assert Human.all.includes(:body_parts).first.body_parts == [body_part_for_human]
  end
end
```
</details>

### References

might ref #50068

### System configuration
**Rails version**: main

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) +YJIT [arm64-darwin22]
"
50068,Inconsistency on preload and eager_load of relation with query_constraints or json column type,brunodccarvalho,"activerecord, With reproduction steps",2023-11-15T22:21:50Z,2023-11-18T19:38:40Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :authors, force: true do; end

  create_table :books, force: true do |t|
    # t.string :ref # (S)
    t.json :ref # (J)
  end
end

class Author < ActiveRecord::Base; end

class Book < ActiveRecord::Base
  # foreign key version (F)
  # has_one :author, foreign_key: :id, primary_key: :ref, dependent: nil, inverse_of: false

  # query constraints version (Q)
  has_one :author, query_constraints: %i[id], primary_key: %i[ref], dependent: nil, inverse_of: false
end

class BugTest < Minitest::Test
  def test_pre_eager_lazy_loads
    author = Author.create!(id: 2)
    book1 = Book.create!(id: 1, ref: ""1"")
    book2 = Book.create!(id: 2, ref: ""2"")

    assert_nil book1.author
    assert_equal author, book2.author
    assert_equal [nil, author], Book.eager_load(:author).order(:id).map(&:author) # 3
    assert_equal [nil, author], Book.preload(:author).order(:id).map(&:author) # 4
  end
end
```

### Expected behavior
There are four setups: _FS_, _FJ_, _QS_, _QJ_, with _FS_ being the simplest. I expect the test to yield the same result for all setups. Also assertions 2 and 4 should probably either both fail or both succeed.

### Actual behavior
_FS_ passes, _FJ_ fails assertion 3, _QS_ fails assertion 4, _QJ_ fails assertions 3 and 4.
In all cases because the `.author` association on the second book is loaded but set to nil.

The queries look alright and don't depend on the setup, and the refs are sent unquoted on the preload.

### System configuration
**Ruby version**: 3.2.1 31819e82c8 arm64-darwin22"
50056,Lack of specifics regarding fixture error: RuntimeError: Foreign key violations found in your fixture data. Ensure you aren't referring to labels that don't exist on associations,Juksefantomet,"activerecord, more-information-needed",2023-11-14T11:38:17Z,2023-12-02T22:01:57Z,2023-12-02T22:01:57Z,"### Steps to reproduce

```
bundle exec rails g scaffold company
bundle exec rails g scaffold company_relation
```

edit migrations
```
create_table :companies do |t|
      t.string :name

      t.timestamps
end

create_table :company_relations do |t|
  t.boolean :parent
  t.boolean :child
  t.integer :parent_company_id

  t.references :company, null: true, foreign_key: true
  t.timestamps
end
```

company.rb
```
has_many :company_relations
```
company_relation.rb
```
belongs_to :company
```

create fixtures:



## omit the id specification in companies.yml fixture on purpose
companies.yml
```
company:
  name: 'Lumi Services AS'
```

company_relations.yml
```
company_relation:
  id: 1
  company_id: 1
```

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
bundle exec rails rake:test
```

regardless of any other fixture working as intended ALL tests fail miserably due to the omitted id with:

```
E

Error:
ModelInQuestionControllerTest#test_name:
RuntimeError: Foreign key violations found in your fixture data. Ensure you aren't referring to labels that don't exist on associations.

```

### Expected behavior
A more specific detail regarding what fixture and/or relation is causing the issue.

### Actual behavior
ALL tests fail and has the same general error stating there is something wrong with your fixtures, resulting in a ton of troubleshooting if a third party was setting up new relations and forgot to update unit tests in accordance with new relations.

In this case i had to comment out and load each fixture individually to troubleshoot what was causing it, and everything was seemingly ok but the `id` was missing.

ref: [the-low-down-on-fixtures](https://guides.rubyonrails.org/testing.html#the-low-down-on-fixtures)

in the examples for fixtures, id is not covered, if those fixture tests was executed with relations in place they would never produce a success result.

### System configuration
**Rails version**: (~> 7.0.3, >= 7.0.3.1)

**Ruby version**: 3.2.2
"
50051,Strong Parameters permit Array value in Hash,khoan,"actionpack, attached PR",2023-11-14T01:49:10Z,2023-12-08T01:17:47Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""action_controller/railtie""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_strong_parameters
    hash = {
      'a' => {
        # '0' key can be any integer
        '0' => [{ 'id' => 1, 'body' => [1] }],
        '1' => [{ 'id' => 2, 'body' => [2] }]
      }
    }

    # passes but keys, '0' & '1', needs to be specified, which may not be possible if they're variable, e.g. integer id of some sort
    assert hash.eql?(ActionController::Parameters.new(hash).permit(a: {'0': [:id, body: []], '1': [:id, body: []]}).to_h)

    # fails
    assert hash.eql?(ActionController::Parameters.new(hash).permit(a: [:id, body: []]).to_h)
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

Expected to get a permitted hash of:

```ruby
    {
      'a' => {
        '0' => [{ 'id' => 1, 'body' => [1]}],
        '1' => [{ 'id' => 2, 'body' => [2]}]
      }
    }
```

### Actual behavior
<!-- Tell us what happens instead -->

Got:

```ruby
    {
      'a' => { }
    }
```


### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.0.4p208
"
50048,`alias_attribute` no longer overrides reader method defined in concern,tf,"activerecord, With reproduction steps",2023-11-13T21:17:12Z,2023-11-15T15:38:02Z,,"I realize this is an edge case. Mainly posting the issue to document the change for others. Took me an hour today to understand a failure in our app caused by this change.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end
end

module Displayable
  # This is the a default implementation for classes that do not wish to implement display_name themselves
  def display_name
    ""Default name""
  end
end

class Post < ActiveRecord::Base
  include Displayable

  alias_attribute :display_name, :title
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(title: ""Some title"")

    assert_equal ""Some title"", post.display_name
  end
end
```

### Expected behavior

`alias_attribute` in Post overrides `display_name` reader method defined in `Displayable` module. Test passes.

### Actual behavior

I assume since https://github.com/rails/rails/pull/48533, `alias_attribute` no longer defines the `display_name` reader method on `Post` itself, but on `Post::GeneratedAttributeMethods` which comes after `Displayable` in the ancestor chain:

```
Post.ancestors
# => [Post(id: integer, title: string), Displayable, Post::GeneratedAssociationMethods, Post::GeneratedAttributeMethods, ActiveRecord::Base, ...]
```

Test fails:

```
1) Failure:
BugTest#test_association_stuff [alias_attribute_bug.rb:46]:
Expected: ""Some title""
  Actual: ""Default name""
```

Changing `activerecord` version to 7.0.0 fixes the test.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
"
50047,Not possible to issue a deprecation warning from a template?,jagthedrummer,"activesupport, With reproduction steps",2023-11-13T20:46:24Z,2023-11-14T14:36:22Z,2023-11-14T09:07:22Z,"### Steps to reproduce

I'm working on a gem that provides some partials that apps can use and I'm trying to figure out how to warn users about deprecations in the options they should pass to a partial.

For instance an app might have a template at `app/views/home/index.html.erb` that does this:

```erb
<%= render 'my_gem/a_partial', some_option: true %>
```

Then in the gem partial I'm trying to do this:

```erb
<%
if defined?(some_option)
  ActiveSupport::Deprecation.warn(
    ""`some_option` is deprecated."" +
    ""Please use `new_option` instead.""
  )
  new_option = some_option
end
%>
```

Detecting the deprecated option and reassigning it to the new option works as expected but the deprecation message points to the wrong place.

Here's an app that illustrates the issue: https://github.com/jagthedrummer/rails_deprecation_test

### Expected behavior

I would expect the deprecation warning to point to the template that called the partial that's raising the deprecation.

```
DEPRECATION WARNING: `deprecated_option` is deprecated. Please use `new_option` instead.
  (called from app/views/home/index.html.erb:1)
```

### Actual behavior

Instead it points deep into rail internals:

```
DEPRECATION WARNING: `deprecated_option` is deprecated. Please use `new_option` instead.
  (called from public_send at .../actionview-7.0.8/lib/action_view/base.rb:244)
```

If I inspect `caller` inside the gem partial I can see that the calling template is in the callstack and is one frame ahead of the line in `action_view/base.rb` that ends up being reported.

```
# snip
./app/views/home/index.html.erb:4:in `_app_views_home_index_html_erb___914303725008310334_29160'
.../actionview-7.0.8/lib/action_view/base.rb:244:in `public_send'
# snip
```

It just seems like the template is somehow filtered from the ""deprecation stack"". I've tried calling `Rails.backtrace_cleaner.remove_silencers!` immediately before calling the partial but that doesn't seem to have any effect. It's like the deprecation system just doesn't see `.erb` files.

### System configuration

**Rails version**: 7.0.8

**Ruby version**: 3.2.1"
50040,Nested Delegated Types with `accepts_nested_attributes_for` not updating as expected,mic-kul,activerecord,2023-11-13T16:15:07Z,2023-12-08T03:27:26Z,,"### Steps to reproduce

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", ""~> 7""
  gem ""sqlite3"", platform: :mri
end

require ""active_record""
require ""minitest/autorun""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table ""transformation_pipeline_transformations"", force: :cascade do |t|
    t.bigint ""transformation_pipeline_id"", null: false
    t.bigint ""transformation_id"", null: false

    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end

  create_table ""transformation_pipelines"", force: :cascade do |t|
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
    t.string ""name""
  end

  create_table ""transformations"", force: :cascade do |t|
    t.string ""name""
    t.string ""transformable_type"", null: false
    t.bigint ""transformable_id"", null: false
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
    t.index %w[transformable_type transformable_id], name: ""index_transformations_on_transformable""
  end

  create_table ""transformations_tests"", force: :cascade do |t|
    t.string ""args""
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end
end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class Transformation < ApplicationRecord
  delegated_type :transformable, types: %w[Transformations::Test]
  belongs_to :transformable, polymorphic: true
  delegate :transform!, to: :transformable
  accepts_nested_attributes_for :transformable
end

module Transformations
  def self.table_name_prefix
    ""transformations_""
  end
end

class TransformationPipeline < ApplicationRecord
  has_many :transformation_pipeline_transformations
  has_many :transformations, through: :transformation_pipeline_transformations
  accepts_nested_attributes_for :transformations
end

class TransformationPipelineTransformation < ApplicationRecord
  belongs_to :transformation_pipeline
  belongs_to :transformation
end

class Transformations::Test < ApplicationRecord
  has_one :transformation, as: :transformable, touch: true
end

class BugTest < Minitest::Test
  def test_delegated_type_assignment
    transformation = Transformation.create!(transformable: Transformations::Test.create(args: ""@""), name: ""test"")
    transformation_pipeline = TransformationPipeline.create!(name: ""test pipeline"")
    transformation_pipeline_transformations =
      TransformationPipelineTransformation.create!(
        transformation_pipeline: transformation_pipeline,
        transformation: transformation
      )

    pipeline = TransformationPipeline.first
    new_transformable_args = ""New Args""
    new_transformation_name = ""New Transformation Name""
    pipeline.update(
      name: ""New TransformationPipeline Name"",
      transformations_attributes: [
        {
          id: transformation.id,
          name: new_transformation_name,
          transformable_attributes: {
            id: transformation.transformable.id,
            args: new_transformable_args
          }
        }
      ]
    )
    assert_equal new_transformable_args, Transformation.find(transformation.id).transformable.args
  end
end
``` 

### Expected behavior

Update field args to be new_transformable_args or emit warning or error if it isn't possible. I've checked the [implementation PR](https://github.com/rails/rails/pull/41717/files) and couldn't spot anything I'm doing wrong.

### Actual behavior

All fields except args are updated, transaction is committed, no error is returned:

```
 TRANSACTION (0.0ms)  begin transaction
 Transformation Load (0.1ms)  SELECT ""transformations"".* FROM ""transformations"" INNER JOIN ""transformation_pipeline_transformations"" ON ""transformations"".""id"" = ""transformation_pipeline_transformations"".""transformation_id"" WHERE ""transformation_pipeline_transformations"".""transformation_pipeline_id"" = ? AND ""transformations"".""id"" = ?  [[""transformation_pipeline_id"", 1], [""id"", 1]]
 Transformations::Test Load (0.0ms)  SELECT ""transformations_tests"".* FROM ""transformations_tests"" WHERE ""transformations_tests"".""id"" = ? LIMIT ?  [[""id"", 1], [""LIMIT"", 1]]
 TransformationPipeline Update (0.0ms)  UPDATE ""transformation_pipelines"" SET ""updated_at"" = ?, ""name"" = ? WHERE ""transformation_pipelines"".""id"" = ?  [[""updated_at"", ""2023-11-13 16:02:38.941072""], [""name"", ""New TransformationPipeline Name""], [""id"", 1]]
 Transformation Update (0.0ms)  UPDATE ""transformations"" SET ""name"" = ?, ""updated_at"" = ? WHERE ""transformations"".""id"" = ?  [[""name"", ""New Transformation Name""], [""updated_at"", ""2023-11-13 16:02:38.941457""], [""id"", 1]]
 TRANSACTION (0.0ms)  commit transaction
```

### System configuration
**Rails version**: Rails 7.1.2

**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [arm64-darwin22]

### Edit

From what I found so far it looks like it's correctly assigning attributes to the model.
It's calling ActiveModel::AttributeAssignment#assign_attributes with the updated value:
(It calls `args=` with `New Args` on `Transformations::Test`)

 But delegated type is not marked as one to be saved when transaction finishes. I will keep digging...

It works as expected when I change the hash to not have id under transformable_attributes:

```ruby
pipeline1.update(
      name: ""New TransformationPipeline Name"",
      transformations_attributes: [
        {
          id: transformation.id,
          name: new_transformation_name,
          transformable_type: transformation.transformable_type,
          transformable_id: transformation.transformable_id,
          transformable_attributes: {
            # id: transformation.transformable.id, # Commenting out it here, makes it work
            args: new_transformable_args
          }
        }
      ]
    )
```
"
50038,db:create:all task fails for new app with mysql adapter,tf,"activerecord, With reproduction steps",2023-11-13T13:05:04Z,2023-11-14T16:58:43Z,2023-11-14T16:58:43Z,"### Steps to reproduce

```
rails new foo -d mysql
cd ./foo
edit config/database.yml # Enter root password
bin/rails db:create:all
```

### Expected behavior
Databases are being created.

### Actual behavior
Error:

```
ActiveRecord::NoDatabaseError: We could not find your database: foo_development. Available database configurations can be found in config/database.yml file. (ActiveRecord::NoDatabaseError)

To resolve this error:

- Did you create the database for this app, or delete it? You may need to create your database.
- Has the database name changed? Check your database.yml config has the correct database name.

To create your database, run:

        bin/rails db:create
```

After calling `bin/rails db:create`, `bin/rails db:create:all` works as expected.

I am aware that `db:create` now also creates the test database in the development env. I'm using the `db:create:all` task, though, to automatically create databases for a dummy application of a Rails engine, where `db:create` still only creates the test database when running in CI.

### System configuration
**Rails version**: 7.1.2

**Ruby version**: 3.2.2
"
50027,edgeapi.rubyonrails.org not on latest commit,northeastprince,docs,2023-11-12T18:08:48Z,2023-11-22T14:10:51Z,2023-11-22T14:10:50Z,"#49989 fixes a typo in a comment, and was merged 3 days ago, but the [Edge API Docs](https://edgeapi.rubyonrails.org) don't show the fix. It seems to be hosted on a DigitalOcean server, and I assume it gets manually updated given the problem. Maybe [a script that continuously pulls this repo](https://github.com/basecamp/kamal-skiff/blob/main/lib/skiff/templates/serve) or some other solution to keep it up-to-date would be beneficial?"
50024,Incorrect casting for mysql boolean bound value for JSON queries,the-spectator,"activerecord, attached PR",2023-11-12T10:41:58Z,2023-11-15T19:13:28Z,2023-11-15T19:00:46Z,"Incorrect casting for MySQL boolean bound value for JSON queries. Mysql doesn't treat '0' or '1' as a boolean in the context of the JSON field. Reference: https://bugs.mysql.com/bug.php?id=90469

Previously, rails used to cast boolean values as 'TRUE' or 'FALSE' but after change introduced in 1dc69cab761fbfd46142f70d8ea58a41c6a12c12, this behavior has changed, and boolean casted values are converted into '1' or '0'.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""
  ruby ""3.2.2""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # working version
  # gem ""rails"", ""~> 6.1""
  # not working, broken in 1dc69cab761fbfd46142f70d8ea58a41c6a12c12
  gem ""rails"", git: ""https://github.com/rails/rails"", branch: ""main""
  gem ""trilogy""
  gem ""mysql2""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
# ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.establish_connection(
  adapter: ""mysql2"",
  database: ""rails_dev"",
  username: ""root"",
  password: ""root""
)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :rails_bugs, force: true do |t|
    t.json :metadata
  end
end

class RailsBug < ActiveRecord::Base
  store_accessor :metadata, :is_bug

  scope :by_bug_value, ->(value) { where(""JSON_EXTRACT(metadata, '$.is_bug') = ?"", value) }
end

class BugTest < Minitest::Test
  def test_casting_boolean
    RailsBug.create(is_bug: true)
    RailsBug.create(is_bug: false)
    RailsBug.create(is_bug: true)
    RailsBug.create(is_bug: true)

    assert_equal 3, RailsBug.by_bug_value(true).count
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
Generated SQL
```sql
SELECT COUNT(*) FROM `rails_bugs` WHERE (JSON_EXTRACT(metadata, '$.is_bug') = '1')
```

### Actual behavior
<!-- Tell us what happens instead -->
```
F

Failure:
BugTest#test_casting_boolean [mysql_json_bool_bug.rb:52]:
Expected: 3
  Actual: 0
```

Generated SQL
```sql
SELECT COUNT(*) FROM `rails_bugs` WHERE (JSON_EXTRACT(metadata, '$.is_bug') = TRUE)
```

### System configuration
**Rails version**:
main

**Ruby version**:
3.2.2"
50017,`uninitialized constant ActionCable` after upgrading,luizkowalski,third party issue,2023-11-11T11:55:59Z,2023-11-24T10:19:30Z,2023-11-11T12:00:36Z,"Hey 👋🏻 

I have an app running on 7.1.1. I'm using Turbo but I'm not using ActionCable. After upgrading 7.1.2, I'm seeing this issue:


```shell
❯ bin/rails zeitwerk:check --trace
** Invoke zeitwerk:check (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute zeitwerk:check
Hold on, I am eager loading the application.
bin/rails aborted!
NameError: uninitialized constant ActionCable (NameError)

class Turbo::StreamsChannel < ActionCable::Channel::Base
                                                  ^^^^^^
Did you mean?  Rational
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/turbo-rails-1.5.0/app/channels/turbo/streams_channel.rb:34:in `<top (required)>'
<internal:/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/kernel.rb:30:in `require'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/helpers.rb:135:in `const_get'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/helpers.rb:135:in `cget'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/eager_load.rb:175:in `block in actual_eager_load_dir'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/helpers.rb:40:in `block in ls'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/helpers.rb:25:in `each'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/helpers.rb:25:in `ls'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/eager_load.rb:170:in `actual_eager_load_dir'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/eager_load.rb:17:in `block (2 levels) in eager_load'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/eager_load.rb:16:in `each'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/eager_load.rb:16:in `block in eager_load'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/eager_load.rb:10:in `synchronize'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader/eager_load.rb:10:in `eager_load'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader.rb:379:in `block in eager_load_all'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader.rb:377:in `each'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/zeitwerk-2.6.12/lib/zeitwerk/loader.rb:377:in `eager_load_all'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.1.2/lib/rails/zeitwerk_checker.rb:6:in `check'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.1.2/lib/rails/tasks/zeitwerk.rake:29:in `block (2 levels) in <top (required)>'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rake-13.1.0/lib/rake/task.rb:281:in `block in execute'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rake-13.1.0/lib/rake/task.rb:281:in `each'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rake-13.1.0/lib/rake/task.rb:281:in `execute'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rake-13.1.0/lib/rake/task.rb:219:in `block in invoke_with_call_chain'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rake-13.1.0/lib/rake/task.rb:199:in `synchronize'
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rake-13.1.0/lib/rake/task.rb:199:in `invoke_with_call_chain'
...
<internal:/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
```

My `application.rb` file is as follows:


```ruby
require_relative ""boot""

require ""rails""
# Pick the frameworks you want:
require ""active_model/railtie""
require ""active_job/railtie""
require ""active_record/railtie""
# require ""active_storage/engine""
require ""action_controller/railtie""
# require ""action_mailer/railtie""
# require ""action_mailbox/engine""
# require ""action_text/engine""
require ""action_view/railtie""
# require ""action_cable/engine""
require ""rails/test_unit/railtie""
```

If I require `action_cable/engine` it works. 

I thought it could be something with Turbo but I did not upgrade Turbo (I'm using turbo-rails 1.5.0).

Uncommenting the `require` or downgrading to `7.1.1` will fix the problem, so I think it is Rails-related


### System configuration
**Rails version**: 7.1.2 (Upgraded from 7.1.1)

**Ruby version**: 3.2.2
"
50005,ActiveStorage::TransformJob doesn't accept previewable files,nicowenterodt,"attached PR, With reproduction steps, activestorage",2023-11-10T16:13:00Z,2023-11-11T17:49:12Z,2023-11-11T17:49:12Z,"### Steps to reproduce
When having a predefined variant for an attachment and you're making use of the `preprocessed` option, the `ActiveStorage::TransformJob` will fail for [previewable](https://api.rubyonrails.org/classes/ActiveStorage/Preview.html) files like PDFs with `ActiveStorage::InvariableError`.

To reproduce simply define a variant for an attachment like this:

```
has_one_attached :file do |attachable|
    attachable.variant :thumb, resize_to_limit: [400, 600], preprocessed: true
end
```

After uploading a PDF the `ActiveStorage::TransformJob` will be enqeued. As soon as the job is being processed it fails with `ActiveStorage::InvariableError`.

### Expected behavior
The `ActiveStorage::TransformJob` should accept previewable files as well so preprocessed variants are also possible for PDF documents and other previewable filetypes.

### Actual behavior
The `ActiveStorage::TransformJob` fails when a previewable blob is being processed with `ActiveStorage::InvariableError`

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
50003,`filter_attributes` getting set to nil & `GeneratedAssociationMethods` generated multiple times when using `self.inherited` ,Adrian-Hirt,"activerecord, With reproduction steps",2023-11-10T15:45:42Z,2023-11-10T23:04:06Z,2023-11-10T23:04:05Z,"While updating an app to rails `7.1.1`, I discovered a bug that occurs when using `self.inherited(subclass)` in models. As far as I can tell, this change in behaviour was introduced #47023, where @byroot worked on improving the shape friendliness of Rails.
Please note that the bug happens in a bit of an edgecase, and I'd also be okay with the issue being closed without code changes if you consider the producing code to be too much of an edgecase / bad practice in general.

### Steps to reproduce

Consider the following ruby script that can be run to showcase the bug. It defines two ""parent"" classes, `Vehicle` and `Device` that both define a `belongs_to` relation as well as a `filter_attribute` in their child classes via the `self.inherited` method.

The `device` class defines these *before* calling `super`, the `Vehicle` class definies these *after* calling `super`:

(Again, please note that the code might be nonsensical, it's just to showcase the behaviour).

```ruby
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'activerecord', ENV.fetch('AR_VERSION', '7.0.8')
  gem 'sqlite3'
end

require 'active_record'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')

# Create the tables needed for the examples
ActiveRecord::Schema.define do
  create_table :devices, force: true do |t|
    t.string ""type"", null: false
    t.belongs_to :person
  end

  create_table :vehicles, force: true do |t|
    t.string ""type"", null: false
    t.belongs_to :person
  end

  create_table :people, force: true
end

# If the ENV var `TOGGLER` is set to true, monkey-patch the `inherited` method
# to only set the `@filter_attributes` and `@generated_association_methods`
# variabes to nil if they are not already set to something.
if ENV.fetch('TOGGLER', false) == 'true'
  module ActiveRecord
    module Core
      module ClassMethods
        def generated_association_methods # :nodoc:
          @generated_association_methods ||= begin
            puts ""Creating `GeneratedAssociationMethods` module for class #{self.name}"" # <= CHANGE FOR DEBUGGING HERE

            mod = const_set(:GeneratedAssociationMethods, Module.new)
            private_constant :GeneratedAssociationMethods
            include mod

            mod
          end
        end

        private
          def inherited(subclass)
            super

            # initialize cache at class definition for thread safety
            subclass.initialize_find_by_cache
            unless subclass.base_class?
              klass = self
              until klass.base_class?
                klass.initialize_find_by_cache
                klass = klass.superclass
              end
            end

            subclass.class_eval do
              @arel_table = nil
              @predicate_builder = nil
              @inspection_filter = nil
              @filter_attributes ||= nil              # <= MONKEY PATCH HERE
              @generated_association_methods ||= nil  # <= MONKEY PATCH HERE
            end
          end
      end
    end
  end
else
  module ActiveRecord
    module Core
      module ClassMethods
        def generated_association_methods # :nodoc:
          @generated_association_methods ||= begin
            puts ""Creating `GeneratedAssociationMethods` module for class #{self.name}"" # <= CHANGE FOR DEBUGGING HERE

            mod = const_set(:GeneratedAssociationMethods, Module.new)
            private_constant :GeneratedAssociationMethods
            include mod

            mod
          end
        end
      end
    end
  end
end

# Define an `ApplicationRecord` class
class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

# Create a `Person` class which we'll use for the `belongs_to` calls
# futher below.
class Person < ApplicationRecord
  has_many :devices
  has_many :computers
  has_many :smartphones

  has_many :vehicles
  has_many :cars
  has_many :bikes
end

# Define a parent class for `Computer` and `Smartphone`. Please note that here
# we add the `belongs_to` and `filter_attributes` to the child classes BEFORE
# calling `super`.
class Device < ApplicationRecord
  def self.inherited(subclass)
    subclass.belongs_to :person, inverse_of: subclass.name.tableize.to_sym

    subclass.filter_attributes = [:secret_attribute, :""#{subclass.name.downcase}_key""]

    super
  end
end
class Computer < Device; end
class Smartphone < Device; end

# Define a parent class for `Car` and `Bike`. Please note that here
# we add the `belongs_to` and `filter_attributes` to the child classes AFTER
# calling `super`.
class Vehicle < ApplicationRecord
  def self.inherited(subclass)
    super

    subclass.belongs_to :person, inverse_of: subclass.name.tableize.to_sym

    subclass.filter_attributes = [:secret_attribute, :""#{subclass.name.downcase}_key""]
  end
end
class Car < Vehicle; end
class Bike < Vehicle; end


puts '-' * 30
puts 'filter_attributes output'
puts '-' * 30

puts ""Computer.filter_attributes: #{Computer.filter_attributes}""
puts ""Smartphone.filter_attributes: #{Smartphone.filter_attributes}""
puts ""Car.filter_attributes: #{Car.filter_attributes}""
puts ""Bike.filter_attributes: #{Bike.filter_attributes}""

puts '-' * 30
puts 'associations method output'
puts '-' * 30

puts ""Computer.new.respond_to?(:person=): #{Computer.new.respond_to?(:person=)}""
puts ""Smartphone.new.respond_to?(:person=): #{Smartphone.new.respond_to?(:person=)}""
puts ""Car.new.respond_to?(:person=): #{Car.new.respond_to?(:person=)}""
puts ""Bike.new.respond_to?(:person=): #{Bike.new.respond_to?(:person=)}""

puts ""Person.new.devices: #{Person.new.devices}""
puts ""Person.new.smartphones: #{Person.new.smartphones}""
puts ""Person.new.computers: #{Person.new.computers}""
puts ""Person.new.vehicles: #{Person.new.vehicles}""
puts ""Person.new.cars: #{Person.new.cars}""
puts ""Person.new.bikes: #{Person.new.bikes}""

```

### Observed behavior

If I run the test script with ActiveRecord version `7.0.8` via `ruby script.rb`, the output is the following:

```
<snip>
Using activerecord 7.0.8
<snip>
Creating `GeneratedAssociationMethods` module for class ApplicationRecord
Creating `GeneratedAssociationMethods` module for class Person
Creating `GeneratedAssociationMethods` module for class Device
Creating `GeneratedAssociationMethods` module for class Computer
Creating `GeneratedAssociationMethods` module for class Smartphone
Creating `GeneratedAssociationMethods` module for class Vehicle
Creating `GeneratedAssociationMethods` module for class Car
Creating `GeneratedAssociationMethods` module for class Bike
------------------------------
filter_attributes output
------------------------------
Computer.filter_attributes: [:secret_attribute, :computer_key]
Smartphone.filter_attributes: [:secret_attribute, :smartphone_key]
Car.filter_attributes: [:secret_attribute, :car_key]
Bike.filter_attributes: [:secret_attribute, :bike_key]
------------------------------
associations method output
------------------------------
Computer.new.respond_to?(:person=): true
Smartphone.new.respond_to?(:person=): true
Car.new.respond_to?(:person=): true
Bike.new.respond_to?(:person=): true
Person.new.devices: #<Device::ActiveRecord_Associations_CollectionProxy:0x00007f315d7072a0>
Person.new.smartphones: #<Smartphone::ActiveRecord_Associations_CollectionProxy:0x00007f315d705298>
Person.new.computers: #<Computer::ActiveRecord_Associations_CollectionProxy:0x00007f315d702f70>
Person.new.vehicles: #<Vehicle::ActiveRecord_Associations_CollectionProxy:0x00007f315d701328>
Person.new.cars: #<Car::ActiveRecord_Associations_CollectionProxy:0x00007f315d71f9b8>
Person.new.bikes: #<Bike::ActiveRecord_Associations_CollectionProxy:0x00007f315d71dc58>
```

The `GeneratedAssociationMethods` module is created once per Class (as it is stored in the instance variable after the first call), the `filter_attributes` seem to work fine and the associations methods work as expected.

When running the same script with ActiveRecord `7.1.0` via `AR_VERSION=7.1.0 ruby script.rb`, the output is:

```
<snip>
Using activerecord 7.1.0
<snip>
Creating `GeneratedAssociationMethods` module for classs ApplicationRecord
Creating `GeneratedAssociationMethods` module for class Person
Creating `GeneratedAssociationMethods` module for class Device
Creating `GeneratedAssociationMethods` module for class Computer
Creating `GeneratedAssociationMethods` module for class Computer
script.rb:81: warning: already initialized constant Computer::GeneratedAssociationMethods
script.rb:81: warning: previous definition of GeneratedAssociationMethods was here
Creating `GeneratedAssociationMethods` module for class Smartphone
Creating `GeneratedAssociationMethods` module for class Smartphone
script.rb:81: warning: already initialized constant Smartphone::GeneratedAssociationMethods
script.rb:81: warning: previous definition of GeneratedAssociationMethods was here
Creating `GeneratedAssociationMethods` module for class Vehicle
Creating `GeneratedAssociationMethods` module for class Car
Creating `GeneratedAssociationMethods` module for class Bike
------------------------------
filter_attributes output
------------------------------
Computer.filter_attributes: []
Smartphone.filter_attributes: []
Car.filter_attributes: [:secret_attribute, :car_key]
Bike.filter_attributes: [:secret_attribute, :bike_key]
------------------------------
associations method output
------------------------------
Computer.new.respond_to?(:person=): true
Smartphone.new.respond_to?(:person=): true
Car.new.respond_to?(:person=): true
Bike.new.respond_to?(:person=): true
Person.new.devices: #<Device::ActiveRecord_Associations_CollectionProxy:0x00007f7f27ea1d40>
Person.new.smartphones: #<Smartphone::ActiveRecord_Associations_CollectionProxy:0x00007f7f27ed4358>
Person.new.computers: #<Computer::ActiveRecord_Associations_CollectionProxy:0x00007f7f27f0e8f0>
Person.new.vehicles: #<Vehicle::ActiveRecord_Associations_CollectionProxy:0x00007f7f27f0d180>
Person.new.cars: #<Car::ActiveRecord_Associations_CollectionProxy:0x00007f7f27f0bc40>
Person.new.bikes: #<Bike::ActiveRecord_Associations_CollectionProxy:0x00007f7f27f0a390>
```

As you can see, the `GeneratedAssociationMethods` module is created twice for the `Computer` and `Smartphone` model, which generates the warnings. Also, the `filter_attributes` of the `Computer` and `Smartphone` model classes are both empty. Association methods still work as expected.

Finally, when running with `TOGGLER=true AR_VERSION=7.1.0 ruby script.rb` which adds the monkey-patch to the `inherited` call, the output is the same as for `7.0.8`:

```
<snip>
Using activerecord 7.1.0
<snip>
Creating `GeneratedAssociationMethods` module for class ApplicationRecord
Creating `GeneratedAssociationMethods` module for class Person
Creating `GeneratedAssociationMethods` module for class Device
Creating `GeneratedAssociationMethods` module for class Computer
Creating `GeneratedAssociationMethods` module for class Smartphone
Creating `GeneratedAssociationMethods` module for class Vehicle
Creating `GeneratedAssociationMethods` module for class Car
Creating `GeneratedAssociationMethods` module for class Bike
------------------------------
filter_attributes output
------------------------------
Computer.filter_attributes: [:secret_attribute, :computer_key]
Smartphone.filter_attributes: [:secret_attribute, :smartphone_key]
Car.filter_attributes: [:secret_attribute, :car_key]
Bike.filter_attributes: [:secret_attribute, :bike_key]
------------------------------
associations method output
------------------------------
Computer.new.respond_to?(:person=): true
Smartphone.new.respond_to?(:person=): true
Car.new.respond_to?(:person=): true
Bike.new.respond_to?(:person=): true
Person.new.devices: #<Device::ActiveRecord_Associations_CollectionProxy:0x00007f901d233480>
Person.new.smartphones: #<Smartphone::ActiveRecord_Associations_CollectionProxy:0x00007f901d2659a8>
Person.new.computers: #<Computer::ActiveRecord_Associations_CollectionProxy:0x00007f901d2602c8>
Person.new.vehicles: #<Vehicle::ActiveRecord_Associations_CollectionProxy:0x00007f901d29eb90>
Person.new.cars: #<Car::ActiveRecord_Associations_CollectionProxy:0x00007f901d29d6a0>
Person.new.bikes: #<Bike::ActiveRecord_Associations_CollectionProxy:0x00007f901d29be90>
```

Here, the warning does not appear and the `filter_attributes` still contain all the attributes.

### System configuration
**Rails version**: `7.0.8` / `7.1.0`

**Ruby version**: 3.2.1

### Additional comments

As said before, I'm perfectly fine with this issue not being worked on any further, I just wanted to bring this to attention. One easy solution would be to only set the instance variables to `nil` if they were not previously defined (i.e. changing the 

```ruby
@filter_attributes = nil
@generated_association_methods = nil
```

code in `activerecord/lib/active_record/core.rb` to

```ruby
@filter_attributes ||= nil
@generated_association_methods ||= nil
```

If I understand correctly, this should not have a big impact on the performance, as these instance variables already were defined in the `belongs_to` and `filter_attributes` calls, which changed the shape of these objects. (Please correct me if I'm wrong). Maybe it could be worth checking if any of the other variables are also affected by such issues, these two are the only ones that I found. Please let me know if I should open a PR with an idea for a fix for this."
50001,"Primary key is not updated when using another mechanism than auto increment, such as Vitess sequences",dbussink,activerecord,2023-11-10T13:49:38Z,2023-11-10T20:57:40Z,,"### Steps to reproduce

When you run your Rails app against a sharded database using Vitess and when [Vitess sequences](https://vitess.io/docs/17.0/reference/features/vitess-sequences/) are used for primary keys, those are no longer set properly on the object when it is stored. 

At the MySQL protocol level, `last_insert_id` is still set and available. The problem is due to https://github.com/rails/rails/pull/48241 which hardcodes the assumption that you must be using the `auto_increment` flag on the primary key. In general, that is not recommended with Vitess since in case of wrong usage, you can generate duplicate primary keys on different shards. 

I was a bit surprised here that GitHub didn't already run into this as well, but @arthurschreiber has more details on why there. 

There are a few somewhat related issues where this assumption from the referenced PR also caused problems. https://github.com/rails/rails/pull/49955 seems to be a work in progress fix, but not 100% sure if that also solves this case. Also cc @fatkodima as the author of that PR who might know if it also resolves this issue.

### Expected behavior

The primary key value is filled in on the model.

### Actual behavior

The primary key value is missing and the value from `last_insert_id` is ignored.

### System configuration
**Rails version**:

7.1.1

**Ruby version**:

3.2.2"
49999,Expect `ActiveRecord::Relation#order` to take `Arel::Attributes::Attribute` and properly `reference` joined table,mylesboone,"activerecord, With reproduction steps",2023-11-10T13:08:51Z,2023-11-24T09:30:02Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
Topic.includes(:posts).order(Post.arel_table[:created_at])
```

### Expected behavior
<!-- Tell us what should happen -->
```ruby
Topic.includes(:posts).order(Post.arel_table[:created_at])
# SELECT ""topics"".""id"" AS t0_r0...""posts"".""id"" AS t1_r0...FROM ""topics"" LEFT OUTER JOIN ""posts"" ON ""posts"".""topic_id"" = ""topics"".""id"" ORDER BY ""posts"".""created_at""
```

### Actual behavior
<!-- Tell us what happens instead -->
```ruby
Topic.includes(:posts).order(Post.arel_table[:created_at])
# SELECT ""topics"".* FROM ""topics"" ORDER BY ""posts"".""created_at""
# ActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing FROM-clause entry for table ""posts""
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49994,Primary key index not renamed when renaming table in Postgres when using UUIDs as pkey,jessevdp,"activerecord, PostgreSQL, With reproduction steps",2023-11-10T09:09:59Z,2023-11-10T20:44:01Z,2023-11-10T20:44:00Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg"", ""~> 1.1""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# Using some utility commands installed by PostgreSQL to setup a test database
dbname = ""test_postgres_uuid_rename_table""
system(""dropdb --username=postgres --force '#{dbname}'"")
system(""createdb --username=postgres '#{dbname}'"")

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: dbname)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  enable_extension ""pgcrypto""
  enable_extension ""plpgsql""
end

class PostgresqlUuidPkeyRenameTableTest < Minitest::Test
  def setup
    @connection = ActiveRecord::Base.connection
    @connection.create_table :before_rename, id: :uuid, default: -> { ""gen_random_uuid()"" }, force: true
  end

  def teardown
    @connection.drop_table ""before_rename"", if_exists: true
    @connection.drop_table ""after_rename"", if_exists: true
  end

  def test_renaming_a_table_also_renames_the_primary_key_index
    assert_equal 1, num_indices_named(""before_rename_pkey"")
    assert_equal 0, num_indices_named(""after_rename_pkey"")

    @connection.rename_table :before_rename, :after_rename

    assert_equal 0, num_indices_named(""before_rename_pkey"")
    assert_equal 1, num_indices_named(""after_rename_pkey"")
  end

  private
    def num_indices_named(name)
      @connection.execute(<<~SQL).values.length
        SELECT 1 FROM ""pg_index""
          JOIN ""pg_class"" ON ""pg_index"".""indexrelid"" = ""pg_class"".""oid""
          WHERE ""pg_class"".""relname"" = '#{name}'
      SQL
    end
end
```

### Expected behavior

The primary index should change along with the table name, just like it happens for tables that don't make use of UUIDs as their primary key.

See: https://github.com/rails/rails/blob/main/activerecord/test/cases/adapters/postgresql/rename_table_test.rb

### Actual behavior

The index name on the primary key column does not get renamed.

### Related
* https://github.com/rails/rails/issues/12856

### System configuration
**Rails version**: 7.1 (main, see test script)

**Ruby version**: 3.2.2"
49983,Azure storage service dependency `azure-storage-blob` deprecated,ahukkanen,third party issue,2023-11-09T13:51:38Z,2023-11-24T11:29:07Z,,"### Steps to reproduce

1. Create a rails app
2. Within the Gemfile, add the following:
```
gem ""azure-storage-blob"", ""~> 2.0"", require: false
gem ""faraday"", ""~> 2.0""
```
3. Run `bundle --verbose`
4. See error

### Expected behavior
I would expect Rails applications to support newer versions of the Faraday gem because it is a popular dependency for many other gems that deal with HTTP requests.

Example gems that have this dependency:
- `json-jwt`
- `oauth2` (also works with Faraday version 1)
- `openid_connect`
- `rack-oauth2`
- `swd`
- `webfinger`

### Actual behavior
With any other dependency that relies on Faraday version 2 or above, the Azure storage cannot be used as instructed in the Active Storage documentation.

The Azure storage's dependency `azure-storage-blob` is deprecated as pointed out in the README of the project:
https://github.com/Azure/azure-storage-ruby

This means that [fixes that would solve the issue](https://github.com/Azure/azure-storage-ruby/pull/228) are not getting merged in a timely manner and the gem has to be forked in order to apply the necessary changes making it harder to maintain the dependencies.

### System configuration
**Rails version**: 6.1 (applies also to version 7)

**Ruby version**: 3.0.6
"
49981,Enum definition with symbol values are not correctly typed_casted,jean-francois-labbe,"activerecord, attached PR, With reproduction steps",2023-11-09T11:37:24Z,2023-11-10T12:17:54Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :status
  end
end

class Post < ActiveRecord::Base
  has_many :comments
  enum :status, { draft: :draft, published: :published }
end

class BugTest < Minitest::Test
  def test_enum_symbol_value_definition_returns_nil_when_accessed_on_record
    post = Post.create!(status: :draft)
    assert_equal 'draft', post.status
    # Failure:
    # BugTest#test_enum_symbol_value_definition_returns_nil_when_accessed_on_record [rails_enum_symbol_value_issue.rb:36]:
    # Expected: ""draft""
    #  Actual: nil
  end

  def test_enum_symbol_value_definition_breaks_predicates
    post = Post.create!(status: :draft)
    assert post.draft?
    # Failure:
    # BugTest#test_enum_symbol_value_definition_breaks_predicates [rails_enum_symbol_value_issue.rb:41]:
    # Expected false to be truthy.
  end

  def test_enum_symbol_value_definition_is_correclty_saved_in_database
    post = Post.create!(status: 'draft')
    assert_equal 'draft', post.attributes_before_type_cast['status']
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
When an enum is defined with symbol values
  `enum :status, { draft: :draft, published: :published }`
a warning or an exception could be raised to force fixing, same kind as invalid enum definition.
Not sure this is the correct approach since the value is correctly persisted.

I'd expect the enum symbol value to be converted to string to allow correct type_cast.

### Actual behavior
<!-- Tell us what happens instead -->
the type_cast of a symbol value of an enum is always returning `nil`.

### System configuration
**Rails version**: main (60d05cd)

**Ruby version**: 3.2.2
"
49980,has_one ... dependent: :destroy results in destruction of existing record's association on call to 'new',nemesit,activerecord,2023-11-09T10:53:38Z,2023-11-24T08:42:32Z,2023-11-24T08:42:32Z,"### Steps to reproduce

1. have a Model with a has_one: ..., dependent: :destroy relation
2. Save record with associated record to database
3. call new on the Model with an id of a persisted record and attributes for the has_one association
4. rails will destroy the association record for the persisted record instead of just creating an instance from the parameters

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""
  
  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }
  
  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :items, force: true  do |t|
  end
  
  create_table :categories, force: true  do |t|
    t.integer :item_id
    t.integer :some_attribute
  end
  
end

class Item < ActiveRecord::Base
  has_one :category, dependent: :destroy
  accepts_nested_attributes_for :category, allow_destroy: true
end

class Category < ActiveRecord::Base
  belongs_to :item
  validates :item, presence: true
end

class BugTest < Minitest::Test
  def test_new_destroying_records
    item = Item.create!
    category = item.create_category!
    
    assert_equal 1, Item.count
    assert_equal 1, Category.count
    
    # .new should in no case result in the destruction of records
    Item.new({id: item.id, category_attributes: { some_attribute: 1 }})
    
    assert_equal 1, Item.count     # success
    assert_equal 1, Category.count # fail
  end
end
```

### Expected behavior
A new instance should be created, no database access at all on Item.new

### Actual behavior
The existing category on the existing item gets destroyed.

### System configuration
**Rails version**: Rails 7.0.8

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [arm64-darwin21]
"
49976,"ActiveRecord 7.1 with ActiveSupport::Concurrency::NullLock doesn't keep the connection in the thread, PostgreSQLAdapter repeatedly calling load_types_queries",Amnesthesia,activerecord,2023-11-08T23:34:25Z,2023-11-09T05:27:58Z,2023-11-09T05:27:58Z,"We use multitenancy through a legacy gem that we haven't been able to get rid of yet (Apartment), and after upgrading from Rails 7.0 to 7.1 we noticed massively increased database load coming from a huge amount of slow calls looking like:
```
            SELECT t.oid, t.typname, t.typelem, t.typdelim, t.typinput, r.rngsubtype, t.typtype, t.typbasetype
            FROM pg_type as t
            LEFT JOIN pg_range as r ON oid = rngtypid
```

This seems to come from `PostgreSQLAdapter#load_types_queries`, and to debug this I added:

```
raise 'LOADING TYPE QUERIES'
rescue => e
  puts ""FROM: ""
  puts e.backtrace
```

Just so that it would print out the whole trace of where it was coming from and how it was getting there. It seems like every time the connection is being accessed, calling `active?` then calls `verify!`, and for some reason, `@raw_connection` is *always* nil now.


Comparing the source from 7.0 to 7.1, it seems to be related to how `ActiveRecord::ConnectionAdapters::AbstractAdapter` has changed to use `ActiveSupport::Concurrency::NullLock`, rather than `ActiveSupport::Concurrency::LoadInterlockAwareMonitor`. Forcibly changing this lock back seems to resolve the issue here, and `PostgreSQL#reload_type_map` is no longer being called, but this locking isn't configurable anywhere, and will always be set to use `NullLock`. 

### Steps to reproduce
Easiest way to get an overview of these queries being run I found was to add an exception, catch it and print the backtrace:

```
# in lib/active_record/connection_adapters/postgresql_adapter.rb

def load_types_queries(initializer, oids)
    query = <<~SQL
      SELECT t.oid, t.typname, t.typelem, t.typdelim, t.typinput, r.rngsubtype, t.typtype, t.typbasetype
      FROM pg_type as t
      LEFT JOIN pg_range as r ON oid = rngtypid
    SQL
    if oids
      yield query + ""WHERE t.oid IN (%s)"" % oids.join("", "")
    else
      yield query + initializer.query_conditions_for_known_type_names
      yield query + initializer.query_conditions_for_known_type_types
      yield query + initializer.query_conditions_for_array_types
    end
    raise 'Calling PostgreSQLAdapter#load_types_queries'
  rescue => e
    puts 'Callstack: '
    puts e.backtrace
  end
```

### Expected behavior
If the connection is being reset while still executing inside the same thread, then at least cache the results from the types queries to avoid firing this query again and again. On databases with large amounts of tables and/or schemas, this can be a very expensive query

### Actual behavior
Connection is being `reset!` and reconfigured repeatedly in the same thread, we're seeing this call 3-5 times per request on top of when switching schemas

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49973,"Using redis_cache_store, Rails.cache.write_multi does not set TTL correctly",fcbr,"activesupport, attached PR, With reproduction steps",2023-11-08T20:42:17Z,2023-11-08T21:42:16Z,2023-11-08T21:42:16Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""redis""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_redis_ttl

    redis = Redis.new
    cs = ActiveSupport::Cache.lookup_store(:redis_cache_store)
    cs.write('foo1', 'bar', expires_in: 10)
    cs.write_multi({ 'foo2' => 'bar' }, expires_in: 11)

    assert redis.ttl('foo1') != -1
    assert redis.ttl('foo2') != -1
  end
end
```

### Expected behavior

When using `Rails.cache.write_multi` with `expires_in`, the TTL of the keys should be set, just like `Rails.cache.write`.

### Actual behavior

No TTL is set (`redis.ttl key` returns -1).

### System configuration
**Rails version**: `main`, `7-0-stable`, `7-1-stable`

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]

**redis**: 6.2.8
"
49961,"net.get(""/"") hangs in Rails::Engine::CommandsTest test_server_command_broadcast_logs",fredwillmore,railties,2023-11-08T01:37:19Z,2023-11-08T19:58:39Z,,"### Steps to reproduce
cd railties
bin/test test/engine/commands_test.rb:62

### Expected behavior
test should execute

### Actual behavior
test hangs on line 68
net.get(""/"")
I can see that the process with pid is running, but it doesn't seem to be reachable. I think I must have a system configuration issue but I don't know how to resolve it..

### System configuration
Apple M2 Pro
MacOs 13.6

**Rails version**:7.2.0.alpha

**Ruby version**: 3.2.2
"
49953,Unable to combine in_order_of with distinct while using postgresql,mkasztelnik,"activerecord, With reproduction steps",2023-11-07T16:19:45Z,2023-11-15T07:55:11Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
We have a list of records with the preferred status order and joins leading to no-unique results. As a result, we want to combine `in_order_of` with `distinct`. This works fine with `mysql` and `sqlite` but fails on `postgresql`

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  # gem ""sqlite3""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
# ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  encoding: 'unicode',
  # host: ENV.fetch(""POSTGRES_HOST"", ""127.0.0.1""),
  # port: ENV.fetch(""POSTGRES_PORT"", 5432),
  database: 'rails_dev'
)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :state
  end
end

class User < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_distint_with_in_order_of
    User.create! state: ""a""
    User.create! state: ""b""
    User.create! state: ""c""

    result = User.in_order_of(:state, [""c"", ""a"", ""b""]).distinct
    assert_equal [""c"", ""a"", ""b""], result.map(&:state)
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
Unique records returned in defined order

### Actual behavior
<!-- Tell us what happens instead -->
```
Error:
BugTest#test_distint_with_in_order_of:
ActiveRecord::StatementInvalid: PG::InvalidColumnReference: ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: ...WHERE ""users"".""state"" IN ('c', 'a', 'b') ORDER BY CASE WHEN ...
                                                             ^

    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:896:in `exec_params'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:896:in `block (2 levels) in exec_no_cache'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1031:in `block in with_raw_connection'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1003:in `with_raw_connection'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:895:in `block in exec_no_cache'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1141:in `log'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:894:in `exec_no_cache'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:874:in `execute_and_clear'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:61:in `internal_exec_query'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:628:in `select'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:71:in `select_all'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:114:in `select_all'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/querying.rb:62:in `_query_by_sql'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:983:in `block in exec_main_query'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:1003:in `skip_query_cache_if_necessary'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:969:in `exec_main_query'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:947:in `block in exec_queries'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:1003:in `skip_query_cache_if_necessary'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:941:in `exec_queries'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:727:in `load'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation.rb:264:in `records'
    /home/marek/.asdf/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-d53ef2c18073/activerecord/lib/active_record/relation/delegation.rb:99:in `each'
    distinct-in_order_of-postgresql-bug.rb:53:in `map'
    distinct-in_order_of-postgresql-bug.rb:53:in `test_distint_with_in_order_of'
```
The ugly solution right now is to add dedicated select section:

```ruby
User
  .select(""users.*, CASE WHEN users.state = 'c' THEN 1 WHEN users.state = 'a' THEN 2 WHEN users.state = 'b' THEN 3 END"")
  .in_order_of(:state, [""c"", ""a"", ""b""]).distinct
```
But it is fragile and can change even when updating between bug fix rails release (e.g. https://github.com/rails/rails/pull/45670 introduced in rails 7.0.7)


### System configuration
**Rails version**:
Tested from `7.0.5` till `main`

**Ruby version**:
Tested with ruby `3.2.1`"
49950,The object does not have an `id` if it is an instance of a Rails model in which the table is a Postgres view.,wrmk,"activerecord, PostgreSQL, With reproduction steps",2023-11-07T11:16:24Z,2023-11-07T12:38:18Z,,"### Steps to reproduce
The object does not have an `id` if it is an instance of a Rails model in which the table is a Postgres view.

This worked in Rails v7.0.8 and fails in v7.1.1.
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""pg"", ""~> 1.5.4""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(ENV.fetch(""DATABASE_URL"", ""postgres:///""))
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Base.connection.exec_query(<<~SQL)
  create temporary table animals (
    id int primary key generated by default as identity,
    name text not null
  );
SQL

ActiveRecord::Base.connection.exec_query(<<~SQL)
  create temporary view dogs as SELECT animals.id, animals.name FROM animals;
SQL

class Dog < ActiveRecord::Base
  self.primary_key = :id
end

class BugTest < Minitest::Test
  def test_id_is_returned
    dog = Dog.create!(name: ""Jack"")
    assert(dog.id)
  end
end

```

### Expected behavior
`dog.id` should have the value from the database.

### Actual behavior
`dog.id` is `nil`

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49942,Routing `defaults:` values aren't overridden by request's values,seanpdoyle,"actionpack, With reproduction steps",2023-11-06T23:02:17Z,2023-11-07T19:25:47Z,2023-11-07T19:25:47Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index"", defaults: { value: ""original"" }
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    render plain: params[:value]
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    get ""/?value=override""

    assert_not_equal ""original"", last_response.body
    assert_equal ""override"", last_response.body
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

The `""override""` value passed as the request's `?value=override` query parameter would override the `defaults: { value: ""original"" }` option declared as part of the route when accessed by the `params[:value]` helper in the controller.

That String would then be rendered as the response's body.

### Actual behavior

The `""original""` String that's assigned as part of the route-based `defaults: { value: ""original"" }` option isn't being overridden by a request-based value from the `?value=override` query parameter.

### System configuration
**Rails version**: `main@8d778e0708`

**Ruby version**: `3.2.0`
"
49940,Using empty string for ActionView `template_path`,mwilde345,actionview,2023-11-06T19:59:33Z,2023-11-16T21:21:46Z,2023-11-16T21:21:41Z,"I just upgraded to Rails 7 and I had to make a change to my template paths that leaves me a bit confused.

I had to change `'./'` custom template path to `''` empty string in order for ActionView to find the correct template.

### Steps to reproduce

Project structure:
```
app
- members
- - member_mailer.rb
- - invite_member_email.erb
```

`member_mailer.rb`:
```
module Members
  class MemberMailer < ActionMailer::Base
    append_view_path Rails.root.join('app', 'members')

    default template_path: './'
    default template_name: 'invite_member_email'

    def invite_email
      mail(to: params[:to], subject: params[:subject])
    end
  end
end
```

### Expected behavior
ActionView finds the `invite_member_email` template in `app/members`

### Actual behavior
```
ActionView::MissingTemplate:
    Missing template .//invite_member_email with ""mailer"".

    Searched in:
      * ""./""
```

So I now have to use an empty string as template_path so it will search in `app/members` for `/invite_member_email`. This makes for a bit of code that is confusing to read initially. Is this a bug?

If i leave out `template_path` completely, then:

```
  ActionView::MissingTemplate:
    Missing template members/member_mailer/invite_member_email with ""mailer"".

    Searched in:
      * ""members/member_mailer""
```

It looks in the default path ActionView would expect. My custom path `app/members` is ignored now. Same result with `prepend_view_path` and `append_view_path`. Is `template_path` required when `template_name` is specified? Don't see that called out here: https://guides.rubyonrails.org/action_mailer_basics.html#mailer-views

### System configuration
**Rails version**: 7.0

**Ruby version**: 2.7.5
"
49935,Rails.cache.redis is returning ConnectionPool instead of Redis object,drgcms,activesupport,2023-11-06T07:15:04Z,2023-11-06T10:00:11Z,2023-11-06T10:00:11Z,"### Steps to reproduce
Update from Rails 7.0.x to 7.1.1

```ruby
Rails.cache.redis.del(key) 
```

### Expected behavior
success

### Actual behavior
`cache_clear': undefined method `del' for #<ConnectionPool:0x00007fec5c7b1150 @size=5, @timeout=5, @auto_reload_after_fork=true, @available=#<ConnectionPool::TimedStack:0x00007fec5c7b1100 @create_block=#<Proc:0x00007fec5c914650 /home/rails/drg_cms_test/vendor/ruby/3.2.0/gems/activesupport-7.1.1/lib/active_support/cache/redis_cache_store.rb:150>, @created=0, @que=[], @max=5, @mutex=#<Thread::Mutex:0x00007fec5c9145d8>, @resource=#<Thread::ConditionVariable:0x00007fec5c914588>, @shutdown_block=nil>, @key=:""pool-4820"", @key_count=:""pool-4820-count""> (NoMethodError)


### System configuration
Rails 7.1.1
Ruby 3.2.2


I inspected the code and it looks that this code is picking some default settings, which were not used in 7.0.x tree.

```ruby
        # around line 150 in ../active_support/cache/redis_cache_store.rb
        if pool_options = self.class.send(:retrieve_pool_options, redis_options)
          @redis = ::ConnectionPool.new(pool_options) { self.class.build_redis(**redis_options) }
        else
          @redis = self.class.build_redis(**redis_options)
        end
```

My redis configuration:
```ruby
 config.cache_store = :redis_cache_store, { url: ""redis://localhost:6379/15"", expires_in: 1.day }
```

Reverting to 7.0.8 and it works as expected.

by
TheR
"
49929,Failing to upgrade from 7.1.rc2 to 7.1: stack level too deep,devaniljr,"activesupport, third party issue",2023-11-05T20:19:29Z,2023-11-23T12:31:43Z,2023-11-06T01:53:30Z,"Everytime I try to upgrade from Rails 7.1.rc2 to 7.1.0 or 7.1.1 I get an error `stack level too deep`

The looping starts here:

`activesupport (7.1.1) lib/active_support/core_ext/object/json.rb`

```rb

class Object
  def as_json(options = nil) # :nodoc:
    if respond_to?(:to_hash)
      to_hash.as_json(options)
    else
      instance_values.as_json(options)
    end
  end
end
```
```rb
    else
      self
    end
    result = {}
    subset.each do |k, v|
      result[k.to_s] = options ? v.as_json(options.dup) : v.as_json
    end
    result
  end
end
```

`block in as_json`

Using the gem better errors, I tried to see if there is any more obvious origin. It seems to start in something related to database. 

![image](https://github.com/rails/rails/assets/7834279/f0ed57d6-c391-4e5e-9638-be90d4704a40)
"
49928,"Test fails expecting ""Couldn't drop"" to match output from rails(""db:drop"")",fredwillmore,"railties, attached PR, With reproduction steps",2023-11-05T17:48:59Z,2023-11-06T12:55:50Z,,"### Steps to reproduce
cd railties
bin/test test/application/rake/dbs_test.rb:271
on line 274-5: the test is expecting the output from the rails(""db:drop"") command to contain the string ""Couldn't drop"", but the output is 
bin/rails aborted!
ActiveRecord::StatementInvalid: SQLite3::ReadOnlyException: attempt to write a readonly database

### System configuration
Apple M2 Pro
Macos 13.6

**Rails version**: 7.2.0

**Ruby version**: 3.2.2
"
49927,intermittent test failure in connection_pool_test,fredwillmore,activerecord,2023-11-05T16:13:03Z,2023-11-05T22:48:43Z,2023-11-05T22:48:38Z,"### Steps to reproduce
in `activerecord` directory, run bin/test test/cases/connection_pool_test.rb:218
About half the time the test on line 244 fails.
I was able to get the test to pass consistently by changing the `@idle_since` value from 0.2 to 0.02000000001 seconds ago. I think the comparison between the configured idle_timeout and the actual idle time was suffering from a floating-point precision error.

### Expected behavior
The test should reliably pass.

### Actual behavior
The test fails intermittently

### System configuration 
MacOS 13.6
Apple M2 Pro

**Rails version**: 7.2.0.alpha

**Ruby version**: 3.2.2
"
49926,`db:schema:dump` ignores `ActiveRecord.dump_schemas`,mcfoton,"activerecord, attached PR",2023-11-05T13:08:43Z,2023-11-24T09:09:30Z,,"### The issue

ActiveRecord's `db:structure:dump` is using `PostgreSQLDatabaseTasks#stucture_dump` https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/tasks/postgresql_database_tasks.rb#L47-L55 and correctly dumps only specified schemas since https://github.com/rails/rails/commit/7ab36f4532c891e8a4bdaee8924a197311ff25ff and is using `db_config.configuration_hash` for that since https://github.com/rails/rails/commit/4ee9dab316296ee96629f2bffbab756a163d1b49

On the other hand, `db:schema:dump` is using more abstract `SchemaDumper::Dump` https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/schema_dumper.rb#L44-L47 and does not respect this configuration and will always dump all `current_schemas` that are available to the Postgres db user, according to https://github.com/rails/rails/blob/febd21da3438d190f0c6ce296a114baee983d1e1/activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb#L1092

---

I'm happy to open a PR as I've invested some time researching this, but need a direction on how to better approach this.
I believe, we should obtain the `db_config.configuration_hash` in the `dump` method and pass it down to this last linked piece of code to resolve an array of schemas to use instead of `""ANY (current_schemas(false))""`

`dump` already accepts a config, but it is of a different type. There was a recent refactor https://github.com/rails/rails/commit/9f82fb3f63015bbbd643bc624a49d98e97803681 that added support for passing generalized config to the `dump` method, but it is expecting an `ActiveRecord::Base` instance to resolve table name prefix and suffix, while the db_config is agnostic to that.

What would be the best approach here? Is this even an issue we should address?

P.S. I apologize for the lack of runnable tests.

---

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2

**Database adapter**: Postgres"
49906,Race condition with parallel system tests: Text file busy - chromedriver,mattbrictson,"actionpack, attached PR",2023-11-03T19:28:39Z,2023-11-07T17:41:14Z,2023-11-07T17:41:14Z,"When running system tests in parallel using `parallelize(workers: :number_of_processors)`, there is a race condition due to the chromedriver executable to being downloaded simultaneously by multiple worker processes. The following error occurs:

```
Text file busy - /home/circleci/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver
```

This race condition was previously reported in #36288 and subsequently addressed in #36592. At the time, the fix was to ""preload"" the Selenium driver path by calling `driver_path.try(:call)`. That fix was specific to how the `webdrivers` gem worked. The `webdrivers` gem assigned a Proc to `driver_path`, which could then be lazily invoked.

That fix is no longer effective, because starting in Rails 7.1, Rails apps no longer ship with the `webdrivers` gem (see #48847). Instead, the `selenum-webdriver` gem itself now contains a ""Selenium Manager"" private internal implementation that installs drivers on demand. This new implementation is susceptible to a race condition when used with Rails parallel testing.

In short, the ""preload"" fix in #36592 works when the `webdrivers` gem is used, but a different solution is needed when `webdrivers` is not being used.

### Steps to reproduce

1. Use a Rails 7.1.1 app
2. Ensure that `selenium-webdriver` is in the Gemfile
3. Ensure that `webdrivers` is **not** in the Gemfile
4. Configure `ApplicationSystemTestCase` with `driven_by :selenium, using: :chrome`
5. Run a large suite of system tests in parallel. I am using `parallelize(workers: 16)` on a CircleCI Docker/Medium instance.

(Apologies, I don't have a standalone script or repo that can be used to reproduce.)

### Expected behavior

Tests should run without errors.

### Actual behavior

Sporadic failures with the following error:

```
Text file busy - /home/circleci/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49900,Update dev dependencies install docs wrt nodesource script deprecation,zzak,"docs, attached PR, good first issue",2023-11-02T23:40:54Z,2023-11-25T10:03:39Z,2023-11-25T10:03:38Z,"In the `development_dependencies_install.md` guide here:
https://github.com/rails/rails/blob/a6099ed2b7a544d8fe67688e8a0f9237847404ee/guides/source/development_dependencies_install.md?plain=1#L126

As well as docked:
https://github.com/rails/docked/blob/0cb4cb2c72d0079885b50ec0eb6f94651e5a64f9/Dockerfile#L8-L13

Since the nodesource install script is deprecated, it can generate some pretty huge warning until it's eventually deactivated.

New instructions require installing a debian repository on Ubuntu:
https://github.com/nodesource/distributions#installation-instructions"
49898,`saved_changes` can be empty after persisting changes on a model,aprescott,"activerecord, With reproduction steps",2023-11-02T19:04:14Z,2023-11-02T19:08:42Z,,"### Steps to reproduce

If an `Account` belongs to a `Supplier`, and a `Supplier` has one `Account`, there are cases where calling `account.save` then inspecting `account.saved_changes` leads to an empty result of `{}`, even if changes have actually been made.

Code that attempts to do something based on `saved_changes`, such as record an audit event, will incorrectly act as if no changes were made.

For example, this happens when building a new `supplier` associated with the `account`:

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :suppliers, force: true do |t|
    t.string :name
  end

  create_table :accounts, force: true do |t|
    t.integer :supplier_id
    t.string :name
  end
end

class Supplier < ActiveRecord::Base
  has_one :account
end

class Account < ActiveRecord::Base
  belongs_to :supplier, optional: true
end

class BugTest < Minitest::Test
  def test_saved_changes_using_existing_child_with_build
    Account.destroy_all
    Supplier.destroy_all

    account = Account.create!(name: ""initial account name"")
    account.build_supplier(name: ""initial supplier name"")
    account.name = ""updated account name""

    account.save!

    # Fails, `saved_changes` is unexpectedly empty.
    assert_equal account.saved_changes, { ""name"" => [""initial account name"", ""updated account name""] }
  end

  def test_saved_changes_using_existing_child_with_assignment
    Account.destroy_all
    Supplier.destroy_all

    account = Account.create!(name: ""initial account name"")
    account.supplier = Supplier.new(name: ""initial supplier name"")
    account.name = ""updated account name""

    account.save!

    # Fails, `saved_changes` is unexpectedly empty.
    assert_equal account.saved_changes, { ""name"" => [""initial account name"", ""updated account name""] }
  end

  def test_saved_changes_using_new_records_saving_via_child
    Account.destroy_all
    Supplier.destroy_all

    account = Account.new(name: ""initial account name"")
    supplier = Supplier.new(name: ""initial supplier name"")
    account.name = ""updated account name""
    account.supplier = supplier

    account.save!

    assert_predicate supplier.saved_changes, :present?
    # Fails, `saved_changes` is unexpectedly empty.
    assert_predicate account.saved_changes, :present?
  end
end
```

### Expected behavior

`account.saved_changes` should reflect the changes that were saved.

### Actual behavior

`account.saved_changes` is empty.

### System configuration
**Rails version**: 7.0.8, 7.1.1, and `main` as of a6099ed2b7a544d8fe67688e8a0f9237847404ee

**Ruby version**: 3.2.2"
49896,Cannot make query to db within migration,frostmark,activerecord,2023-11-02T17:32:55Z,2023-11-07T14:32:57Z,,"Hello! I'm upgrading rails from 7.0 to 7.1 and got some problems with migrations

### Steps to reproduce
When I'm trying to get records from db within migration it freezes and does nothing. (I guess something related with transaction and isolation level here, but not sure)
```ruby
# frozen_string_literal: true

class SomeMigration < ActiveRecord::Migration[7.1]
  def change
    add_reference :files, :asset, foreign_key: true

    File.all.each do |f| # <- Freezes here and does nothing
      f.update(asset_id: f.folder.asset_id)
    end
  end
end

```

### Expected behavior
Can make query within migration file

### Actual behavior
Query doesn't work

### System configuration
Rails 7.1.1

ruby 3.2.2
"
49895,"ActiveRecord objects created with explicit attribute values in ""new"" or ""build"" create unexpected rows if DB column defaults change",hlascelles,"activerecord, With reproduction steps",2023-11-02T15:57:02Z,2023-11-03T09:13:07Z,,"Under some circumstances (viz, during rolling deploys), an explicit `new` or `build` value can be ignored when creating an ActiveRecord resource if that attribute has a column default that is changing during the deploy.

ie:
```ruby
widget = Widget.new(size: 'small')
widget.size # ""small""
widget.tap(&save!).reload.size # ""large""

# And for associations:

sprocket = Widget.new.sprockets.build(material: 'steel')
sprocket.material # ""steel""
sprocket.tap(&save!).reload.material # ""copper""
```

For this to happen the column needs to have a column `default` value in the DB, and that value should change ""under"" the ruby process.

I have made a single ruby file demonstration for this (below).

### Steps to reproduce
1. Create a table with a column with a default value.
2. Have ActiveRecord code that creates resources for that table using `new` for root objects or `build` for associations, which pass in a value for that column *which is the same as the column default value* (crucial).
3. Do a rolling deploy which changes the default value of the DB column in a migration
4. For the rest of the rolling deploy, any older boxes (and/or non canary boxes) will create rows with unexpected data.

### Expected behavior
If you pass in an explicit value for an attribute, it should be used, no matter what the `default` of the DB column is, even if it changes while the ruby process is running.

### Actual behavior
If the value explicitly used is the same as the DB column default *when the Rails/AR process started* then it will not be sent to the DB, and the table will contain unexpected data.

### Thoughts

I believe it is somewhat obvious what is happening here...

1. Make a column with default ""foo""
2. When creating an AR object with explicit value ""foo"", the AR object treats that value as ""not dirty"",
    so does not send it to the DB
3. If the DB default has changed in the meantime, that new value will be the one that is used in the DB row.

Note, a corollary to all of this is if you specify no value at all, you will still get an unexpected change in value after saving and reloading. But this is slightly more ""believable"". It is when you explicitly supply a value and it is ignored that is more unexpected.

Could a resolution to all this be to treat attributes of AR objects that are set to the column default to be ""dirty"" so they are sent to the DB?

### Example code

I have used postgres to allow `ALTER COLUMN`, so start one with:

`docker run -p 5430:5432 -e POSTGRES_PASSWORD=postgres postgres:14.7`

Then run:

```ruby
# This code demonstrates that under some circumstances ActiveRecord will ignore an explicit value
# passed into a `build` or `new` method. This is because ActiveRecord will use the default value
# from the database if it thinks the value is the default value.

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'activerecord', '7.1'
  gem 'pg', '1.4.6'
  gem 'colorize'
end

require ""active_record""

# Start a postgres on 5430
# docker run -p 5430:5432 -e POSTGRES_PASSWORD=postgres postgres:14.7

# Establish a database connection
ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  database: 'postgres',
  host: 'localhost', # Change this to your PostgreSQL host
  port: 5430,
  username: 'postgres', # Change this to your PostgreSQL username
  password: 'postgres'  # Change this to your PostgreSQL password
)

begin
  ActiveRecord::Base.connection.execute(""DROP TABLE widgets"")
  ActiveRecord::Base.connection.execute(""DROP TABLE sprockets"")
rescue ActiveRecord::StatementInvalid
  # First run time
end

class Widget < ActiveRecord::Base
  has_many :sprockets
end

class Sprocket < ActiveRecord::Base
  belongs_to :widget
end

ActiveRecord::Schema.define do
  create_table :widgets do |t|
    t.string :size, default: 'small'
  end

  create_table :sprockets do |t|
    t.belongs_to :widget, index: true
    t.string :material, default: 'steel'
  end
end

def debug(type, widget, expected)
  colour = widget.size == expected ? :green : :red
  puts ""#{type} initialized size: "" + widget.size.colorize(colour)
  widget.tap(&:save!).reload
  colour = widget.size == expected ? :green : :red
  puts ""#{type} saved and reloaded size: "" + widget.size.colorize(colour)
end

# Tests
debug(""Widget.new"", Widget.new, ""small"")
debug(""Widget.new(size: 'medium')"", Widget.new(size: 'medium'), ""medium"")

# Crucially we must make the ruby process load the column information for sprockets before
# change the column defaults. It doesn't matter what the ""material"" value is here.
Widget.new.sprockets.build(material: 'manganese').save!

puts ""***""
puts ""Now we change the defaults in the DB to 'large' and 'copper' without restarting the ruby process""
puts ""***""

# Use ActiveRecord connection to execute an SQL command to change the defaults in the DB.
# Note, after this command old ruby processes (say older boxes during a rolling deploy) are
# unaware of this change.
ActiveRecord::Base.connection.execute(""ALTER TABLE widgets ALTER COLUMN size SET DEFAULT 'large'"")
ActiveRecord::Base.connection.execute(""ALTER TABLE sprockets ALTER COLUMN material SET DEFAULT 'copper'"")

# I am not specifying anything, so the ruby will think the value will be ""small"" (and it is, in memory).
# After the `reload` the ruby process will see the value is ""large"" in the DB, so it will change to that.
debug(""Widget.new"", Widget.new, ""large"")
# I am definitely specifying small, but it is being ignored after reload. This is because AR
# can see the value is what (it thinks is) the DB default, so it is not sending it to the DB.
debug(""Widget.new(size: 'small')"", Widget.new(size: 'small'), ""small"")
# I am definitely specifying medium (which is not the old DB default), and it is being respected
debug(""Widget.new(size: 'medium')"", Widget.new(size: 'medium'), ""medium"")

puts ""***""
puts ""Now show how relations have the wrong default, even when it is specified in the build method""
puts ""***""

# This shows that relations do not use the attribute passed into the build method if it is what
# the running ruby process thinks is the DB default
sprocket = Widget.new.sprockets.build(material: 'steel') # I am specifying this should definitely be steel
sprocket.tap(&:save!).reload
puts ""sprocket.material should be steel: "" + sprocket.material.colorize(:red)

```

Results:

![image](https://github.com/rails/rails/assets/299102/1c4dd9c7-01b4-4898-a257-c1bfb47b9502)


### System configuration
**Rails version**: 6.1, 7.0, 7.1 (at least, maybe versions prior too)
**Ruby version**: 3.1.3 (but probably more)

"
49879,Inquiry About Reserved Keywords When Passing Variables to Translations,reckyy,"third party issue, i18n",2023-11-01T02:18:40Z,2023-11-14T23:04:25Z,2023-11-14T23:04:25Z,"
Hello, I would like to confirm two things regarding the reserved keywords as mentioned in the title.

1. The [document](https://railsguides.jp/i18n.html#%E8%A8%B3%E6%96%87%E3%81%AB%E5%A4%89%E6%95%B0%E3%82%92%E6%B8%A1%E3%81%99) states that the keywords `default` and `scope` are reserved. Are these the only ones? Recently, I used `object` as a variable name and was unable to pass the variable. Upon reviewing the code, I found the following line excluding reserved keywords.
https://github.com/ruby-i18n/i18n/blob/v1.14.1/lib/i18n/backend/base.rb#L57

`values = Utils.except(options, *RESERVED_KEYS) unless options.empty?`

https://github.com/ruby-i18n/i18n/blob/v1.14.1/lib/i18n.rb#L19-L34
```ruby
RESERVED_KEYS = %i[
    cascade
    deep_interpolation
    default
    exception_handler
    fallback
    fallback_in_progress
    fallback_original_locale
    format
    object
    raise
    resolve
    scope
    separator
    throw
  ]
```

2. The [document](https://railsguides.jp/i18n.html#%E8%A8%B3%E6%96%87%E3%81%AB%E5%A4%89%E6%95%B0%E3%82%92%E6%B8%A1%E3%81%99) mentions that:

> The `default` and `scope` keywords are reserved, and cannot be used as variables. Using them will result in an `I18n::ReservedInterpolationKey` exception.

However, in my case, using a reserved keyword did not trigger the `I18n::ReservedInterpolationKey` exception.

I have created a sample app for testing purposes.
https://github.com/reckyy/sample_for_i18n

I look forward to your confirmation on the above matters.

"
49877,Rails 7+ / Ruby 3+  defined?(cookies) returns nil in view context,Valued,actionview,2023-10-31T22:17:31Z,2023-11-02T10:15:11Z,,"Hello!
I faced this behavior on the working app after upgrading Ruby to 3.1 and Rails to 7.0.7.
Initially, I thought it could be something with configs, patches, etc. of the app but found nothing.
I created a brand-new app and was able to reproduce the issue. 

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
- add `debugger` to controller
- add `<% debugger %>` to view
- run the server, open the view and check the debugger console

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

### Expected behavior
Expected console output
Controller/View
```ruby
(ruby) defined? cookies
""method""
(rdbg) cookies
#<ActionDispatch::Cookies::CookieJar:...
 @committed=false,
 @cookies=
...
```

### Actual behavior
Actual console output
Controller
```ruby
(ruby) defined? cookies
""method""
(rdbg) cookies
#<ActionDispatch::Cookies::CookieJar:0x0000000111df6878
 @committed=false,
 @cookies=
...
(ruby) cookies.object_id
33860
```
View 
```ruby
(ruby) defined? cookies
nil
(rdbg) cookies
#<ActionDispatch::Cookies::CookieJar:0x0000000111df6878
 @committed=false,
 @cookies=
...
(ruby) cookies.object_id
33860
```
Note, that cookies are the same in both controller and view.

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.2.2
"
49874,`has_secure_token` bypasses overwritten setter methods,juanxcerv,"activerecord, With reproduction steps",2023-10-31T20:34:46Z,2023-12-04T00:34:30Z,2023-12-04T00:34:30Z,"### Steps to reproduce
Example code:
```ruby
has_secure_token :test_key, length: 36

def test_key=(key)
  super 
  self.hashed_test_key = hash(key)
end
```

### Expected behavior
With the new rails upgrade we're finding that our overwritten`test_key=` method is no longer being called. We've identified the following as the reason why. This [commit](https://github.com/rails/rails/commit/2df70ddb96e7ab0a7c10e411e879ab3a2b1f4d84) changed `send(""#{attribute}="")` to use `write_attribute(attribute)` which seemingly ignores our setter.  Ideally we'd continue to call our method. 


### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
"
49871,Usage of `normalizes` interacting with caching/dumping,mjankowski,"activerecord, With reproduction steps",2023-10-31T17:13:04Z,2023-11-01T01:47:04Z,2023-11-01T01:47:03Z,"There's a [long history of issues](https://github.com/search?q=repo%3Arails%2Frails+no+_dump_data+for+class+proc&type=issues) that boil down to ""ruby can't marshall procs"". I don't know if this issue is in that category and is an expected shortcoming of `normalizes`, or if this should work and doesn't. Discovered the issue running inside a caching block, but attempted to distill down minimally in case below.

### Steps to reproduce

Attempt to cache or just `Marshal.dump` an AR object using `normalizes`. Example:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :name
  end
end

class User < ActiveRecord::Base
  normalizes :name, with: -> { _1.strip.downcase }
end

class BugTest < Minitest::Test
  def test_caching_normalized_record
    user = User.create(name: ""First Name    "")

    assert_equal ""first name"", user.name
    assert_equal user.inspect, Marshal.load(Marshal.dump(user)).inspect
  end
end
```

### Expected behavior

Using `normalizes` should manipulate values when set, and not impact caching/dumping the object.

### Actual behavior

When `normalizes` is in use, an error is thrown:

> TypeError: no _dump_data is defined for class Proc

### System configuration
**Rails version**: 7.1 and/or `main` branch

**Ruby version**: 3.2.2
"
49867,[ActiveRecord] Upsert ignore on_duplicate if unique_by is specified,javierav,"activerecord, attached PR, With reproduction steps",2023-10-31T15:57:25Z,2023-10-31T22:37:46Z,2023-10-31T22:37:46Z,"### Steps to reproduce

```ruby
require 'bundler/inline'

gemfile(true) do
  source ""https://rubygems.org""

  gem 'rails', '7.1.1'
  gem 'sqlite3'
  gem 'byebug'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :sequences, force: true do |t|
    t.integer :year, null: false
    t.integer :sequence, null: false, default: 1
    t.index :year, unique: true
  end
end

class Sequence < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def setup
    Sequence.create(year: 2023)
  end

  def test_upsert
    Sequence.upsert({year: 2023}, unique_by: :year, on_duplicate: Arel.sql(""sequence = sequence + 1""))
  end
end
```

### Expected behavior

```ruby
Sequence.upsert({year: 2023}, unique_by: :year, on_duplicate: Arel.sql(""sequence = sequence + 1""))
```

Should produce following SQL code:

```sql
INSERT INTO ""sequences"" (""year"") VALUES (2023) ON CONFLICT (""year"") DO UPDATE SET sequence = sequence + 1 RETURNING ""id""
```

### Actual behavior

```
ActiveRecord::RecordNotUnique: SQLite3::ConstraintException: UNIQUE constraint failed: sequences.year
```

Due to produced SQL code:

```sql
INSERT INTO ""sequences"" (""year"") VALUES (2023) ON CONFLICT (""year"") DO NOTHING RETURNING ""id""
```

If I remove `unique_by` the SQL code not is valid:

```sql
INSERT INTO ""sequences"" (""year"") VALUES (2023) ON CONFLICT (""id"") DO UPDATE SET sequence = sequence + 1 RETURNING ""id""
```

### System configuration
**Rails version**: 7.1.1
**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
"
49862,Unintended conversion when using to_query on hash with empty string key,k-murakami0609,third party issue,2023-10-31T10:51:28Z,2023-10-31T14:36:18Z,2023-10-31T14:36:17Z,"I'm not experiencing any trouble, but I just wanted to report this.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
irb(main):001> result = {"""": {'22222': ""bbbb"", '11111': ""aaaa""}}.to_query(""query"")
=> ""query%5B%5D%5B22222%5D=bbbb&query%5B%5D%5B11111%5D=aaaa""
irb(main):002> Rack::Utils.parse_nested_query URI(""http://example.com?"" + result).query
=> {""query""=>[{""22222""=>""bbbb"", ""11111""=>""aaaa""}]}
```

### Expected behavior
<!-- Tell us what should happen -->
```ruby
irb(main):002> Rack::Utils.parse_nested_query URI(""http://example.com?"" + result).query
{""query""=>{""""=>{""11111""=>""aaaa"", ""22222""=>""bbbb""}}}
```

### Actual behavior
<!-- Tell us what happens instead -->
```ruby
irb(main):002> Rack::Utils.parse_nested_query URI(""http://example.com?"" + result).query
=> {""query""=>[{""22222""=>""bbbb"", ""11111""=>""aaaa""}]}
```

Before conversion, it was a hash with an empty string as key, but after conversion, it is treated as an array.

### System configuration
**Rails version**:
Rails 7.1.0

**Ruby version**:
ruby 3.2.2
"
49841,SQLite3Adapter test using ruby master branch got `Received cancellation signal` after 30 min ,yahonda,"activerecord, ci issues",2023-10-29T23:48:04Z,2023-12-05T11:31:27Z,,"

### Steps to reproduce
Unable to reproduce it locally. Here are 

https://buildkite.com/rails/rails/builds/101101#018b5834-8aac-4e35-8ca5-33f964f18914
https://buildkite.com/rails/rails/builds/101132#018b5ece-c103-4dae-91a0-3608f85b4b6e
https://buildkite.com/rails/rails/builds/101140#018b6002-8f41-4153-894e-db355691ecd8
https://buildkite.com/rails/rails/builds/101324#018b783b-f914-4b93-8b94-760f04dc6806
https://buildkite.com/rails/rails/builds/101326#018b7928-a571-4f7e-907a-68f1620d168d

### Expected behavior
It should finish successfully in couple of minutes like
https://buildkite.com/rails/rails/builds/101342#018b7d60-4941-4bf9-8243-03b4676ad4a4

### Actual behavior
It gets # Received cancellation signal, interrupting` after 30 min running.

### System configuration
**Rails version**: main branch

**Ruby version**: 3.3.0p-1 (2023-10-29 revision 7f2809b0a9db2a8a4a04aeaf91db191dee383574) [x86_64-linux]
 This Ruby version used for the latest one https://buildkite.com/rails/rails/builds/101342#018b7d60-4941-4bf9-8243-03b4676ad4a4"
49830,skip_before_action where an array is used for the :only option doesn't work after upgrading 7.0 -> 7.1,Cashaca,actionpack,2023-10-28T16:48:02Z,2023-10-28T18:03:35Z,2023-10-28T18:01:48Z,"### Steps to reproduce
```
class AdminController < ApplicationController
  before_action :authenticate_user!
end

class NewsletterPreferencesController < AdminController
skip_before_action :authenticate_user! , only: [:new, :create]
 def new
 end

 def create
 end

end

```
### Expected behavior
before_action authenticate_user! is skipped for the NewsletterPreferencesController new and create actions

### Actual behavior
before_action is not skipped

Using a separate line for each action without using only: [array] does work

This works
skip_before_action :authenticate_user! , only: :new
skip_before_action :authenticate_user! , only: :edit

So the root cause is that the :only option is no longer accepting an array of controller methods
...

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.1
"
49827,Setting marshalling_format_version in new_framework_defaults_7_1 does not work,tomhughes,"activerecord, railties, third party issue",2023-10-28T10:57:26Z,2023-10-28T14:08:59Z,2023-10-28T14:04:31Z,"### Steps to reproduce
Setting `Rails.application.config.active_record.marshalling_format_version` to `7.1` in `config/initializers/new_framework_defaults_7_1.rb` does not successfully activate the new format.

To reproduce create a rails 7.0 app and upgrade it to 7.1 then uncomment the line and evaluate `ActiveRecord::Marshalling.format_version` in the console and it will still be `6.1`.

Only when you change `config/application.rb` to load the 7.1 default will `ActiveRecord::Marshalling.format_version` change.

### Expected behavior
Setting the value in `new_framework_defaults_7_1.rb` should work.

### Actual behavior
Setting the value in `new_framework_defaults_7_1.rb` does not work.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49826,ActiveRecord marshalling no longer preserves attribute change flags,tomhughes,"activerecord, With reproduction steps",2023-10-28T10:49:56Z,2023-10-30T18:47:23Z,,"### Steps to reproduce
The new ActiveRecord marshalling introduced by #47747 does not preserve attribute change flags, as demonstrated by this test case:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.1""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_marshal_61
    ActiveRecord::Marshalling.format_version = 6.1

    post = Post.new(:title => ""Test"")
    assert post.title_changed?

    marshalled = Marshal.dump(post)

    unmarshalled = Marshal.load(marshalled)
    assert unmarshalled.title_changed?
  end

  def test_marshal_71
    ActiveRecord::Marshalling.format_version = 7.1

    post = Post.new(:title => ""Test"")
    assert post.title_changed?

    marshalled = Marshal.dump(post)

    unmarshalled = Marshal.load(marshalled)
    assert unmarshalled.title_changed?
  end
end
```

### Expected behavior
Both tests should pass.

### Actual behavior
Only the test using the old 6.1 marshalling format works.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49818,Existing class named Content clashes with ActionView::TestCase::Behavior::Content:Class when running test inheriting from ActionView::TestCase,ccasabona,"actionview, attached PR",2023-10-27T21:47:32Z,2023-10-31T02:22:57Z,,"We have several projects with a class named Content.  Starting in rails 7.1, referencing this class name in a helper test which inherits from ActionView::TestCase causes an exception NoMethodError from ActionView::TestCase::Behavior::Content:Class when, as in this example, calling certain Active Record methods with the object Content as the receiver.

This exception occurs only in tests which inherit from ActionView::TestCase.  The class name works correctly in other tests and in the app itself.

This seems to have come from #49194 (but don't hold me to that). It occurs in 7.1.0, 7.1.1, and in the main branch.

```
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  # gem ""rails"", ""~> 7.1.0""
  gem ""rails"", ""~> 7.1.1""
  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""action_view""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :contents, force: true do |t|
    t.string ""title""
  end
end

class Content < ActiveRecord::Base
end

class ContentsHelperTest < ActionView::TestCase
  def test_content
    # new method works
    Content.new(title: 'New Content')

    # either of these cause an exception
    # Content.create!(title: 'First')
    Content.first
  end
end

```

### Expected behavior
Existing classes named Content should be usable in tests inheriting from ActionView::TestCase

### Actual behavior
Using an object named Content as the receiver in certain Active Record method calls mistakenly goes to ActionView::TestCase::Behavior::Content:Class.  

```
# Running:

E

Error:
ContentsHelperTest#test_content:
NoMethodError: undefined method `first' for ActionView::TestCase::Behavior::Content:Class
    content-bug.rb:49:in `test_content'

```

### System configuration
Rails 7.0, 7.1, Main

**Ruby version**:
ruby 3.2.2 (2023-03-30 revision e51014f9c0) +YJIT [x86_64-darwin19]"
49816,simple_format adds br tags between li tags in rails 6,arusa,actionview,2023-10-27T20:29:27Z,2023-10-29T03:30:22Z,2023-10-29T03:29:26Z,"### Steps to reproduce

When you use [simple_format](https://github.com/rails/rails/blob/23938052acd773fa24068debe56cd892cbf8d868/actionview/lib/action_view/helpers/text_helper.rb#L322C40-L322C40) on a text that contains an html list, like the following line, it adds <br /> tags between list items, which is invalid HTML syntax:

```ruby
ApplicationController.helpers.simple_format(""<ol><li>item1</li><li>item2</li></ol>"")
```

I have tried it with Rails 6.1.7.6 and Rails 7.1.1 and the result is identical.

### Expected behavior
```
ApplicationController.helpers.simple_format(""<ol><li>item1</li><li>item2</li></ol>"")
=> ""<p><ol><li>item1</li><li>item2</li></ol></p>""
```

### Actual behavior

```
ApplicationController.helpers.simple_format(""<ol><li>item1</li><li>item2</li></ol>"")
=> ""<p><ol>\n<br /><li>item1</li>\n<br /><li>item2</li>\n<br /></ol></p>""
```

### System configuration

**Rails version**: 7.1.1 and 6.1.7.6

**Ruby version**: 3.1.4 and 3.0.6
"
49814,Uncaught ReferenceError: Cannot access 'started' before initialization,skipkayhil,With reproduction steps,2023-10-27T20:17:43Z,2023-11-08T20:30:20Z,2023-11-08T20:30:20Z,"(snip)

But there is a new error in the rails_admin gem related to Active Storage and Turbo.

![e1](https://github.com/rails/rails/assets/662545/b1da3946-1846-4d9d-b790-4818edf19cc8)

This is from Active Storage: 
https://github.com/rails/rails/blob/4c5c904a212a850c43adb7a3c3a719ca3d2b9159/activestorage/app/javascript/activestorage/ujs.js#L8
![e2](https://github.com/rails/rails/assets/662545/a3f4e759-b91e-4784-973a-f658dd74442d)

This one is from Turbo
https://github.com/rails/rails/blob/4c5c904a212a850c43adb7a3c3a719ca3d2b9159/guides/assets/javascripts/%40hotwired--turbo.js#L3913
![e3](https://github.com/rails/rails/assets/662545/a1ebd5e6-181d-46a4-a38a-8c5bb58d4d7d)

The above error prevents us to load custom js scripts for the rails_admin gem from `app/assets/javascripts/rails_admin/custom/ui.js`. Even when I remove our custom js scripts for the rails_admin gem then the error is still present.

_Originally posted by @ArturT in https://github.com/rails/rails/issues/49599#issuecomment-1779059780_
            

---

I managed to reproduce the issue on a new Rails 7 app. I installed the rails_admin gem with sprockets.
You can see step by step in git commit messages what I did.

https://github.com/ArturT/rails7-issue-49599/commits/master

![image](https://github.com/rails/rails/assets/662545/3b03c426-80dd-42ab-b073-fffa20d9e2bd)

_Originally posted by @ArturT in https://github.com/rails/rails/issues/49599#issuecomment-1781102272_
            "
49809,Updating unrelated attributes resets serialized attribute with a wrong value in 7.1,janklimo,"activerecord, With reproduction steps",2023-10-27T11:24:00Z,2023-12-04T19:17:42Z,2023-10-28T21:41:07Z,"### Steps to reproduce

The simplified example below shows that updating an unrelated attribute (name) of a user resets the serialized attribute value with wrong data. Reloading the record fixes the issue.

```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem 'activerecord', '7.1.1' # works on 7.0.8
  gem 'sqlite3'
  gem 'pry-rails'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.text :name
    t.json :cached_configuration
  end

  create_table :configurations, force: true do |t|
    t.integer :user_id
  end

  create_table :options, force: true do |t|
    t.integer :configuration_id
    t.string :key
    t.string :value
  end
end

class ConfigurationCache
  class << self
    def load(configuration_json)
      return if configuration_json.blank?

      attributes = JSON.parse(configuration_json)

      Configuration.new(attributes.except('options')).tap do |configuration|
        configuration.options = attributes['options'].map do |option_attributes|
          Option.new(option_attributes)
        end
      end
    end

    def dump(configuration)
      configuration.to_json(include: :options)
    end
  end
end

class User < ActiveRecord::Base
  has_one :configuration

  serialize :cached_configuration, coder: ConfigurationCache
end

class Configuration < ActiveRecord::Base
  belongs_to :user
  has_many :options
end

class Option < ActiveRecord::Base
  belongs_to :configuration
end

class AttributeSerializationTest < Minitest::Test
  def test_attribute_serialization
    user = User.create!(name: 'Tom')

    configuration = user.create_configuration!
    configuration.options << Option.create(key: 'key', value: 'secret')

    user.update!(cached_configuration: configuration)

    # Correctly serialized and loaded
    assert_equal configuration.id, user.cached_configuration.id
    assert_equal 1, user.cached_configuration.options.size

    # All correct – does not update serialized attribute
    user.name = 'Amanda'

    assert_equal configuration.id, user.cached_configuration.id
    assert_equal 1, user.cached_configuration.options.size

    # Wrong – updates serialized attribute with incomplete data
    user.update!(name: 'Joe')

    # user
    # => #<User:0x00000001199ac468 id: 1, name: ""Joe"", cached_configuration: #<Configuration:0x000000011bb0cbd0 id: nil, user_id: 1>>
    
    # user.cached_configuration.options
    # => []

    assert_equal configuration.id, user.cached_configuration.id
    assert_equal 1, user.cached_configuration.options.size

    # All good again – reloading the record fixes the serialized attribute
    user.reload

    assert_equal configuration.id, user.cached_configuration.id
    assert_equal 1, user.cached_configuration.options.size
  end
end
```

### Expected behavior
Updating a record should not update serialized attributes.

### Actual behavior
The attribute is updated with faulty data.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49805,Example inside comment of ActiveRecord::Promise#then does not work,akicho8,docs,2023-10-27T06:04:16Z,2023-10-27T13:08:31Z,2023-10-27T13:08:31Z,"https://github.com/rails/rails/blob/e33dbe1b3d423143685154b97ae0992f4ab821b8/activerecord/lib/active_record/promise.rb#L34

While reading the source code, I noticed that the code example in the above comment seems to mistakenly use `async_pluck` instead of `async_pick`.
This is not a high priority issue, but I thought I should report it.
"
49796,MemoryStore#fetch with 7.1 defaults can't set `expires_at` via block opts,mroach,activesupport,2023-10-26T13:02:32Z,2023-10-26T19:11:53Z,2023-10-26T19:11:52Z,"### Steps to reproduce

In a Rails app, use the following config:

```ruby
config.cache = :memory_store
config.load_defaults(7.1)
```

Now, use `Rails.cache.fetch` passing a block and try to set `options.expires_at`. An `ArgumentError` is raised:

```
ArgumentError: Either :expires_in or :expires_at can be supplied, but not both
```

Additionally, the cache store's options are mutated with the `expries_at` option set in the block

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class TestApp < Rails::Application
  config.root = ""/tmp""
  config.eager_load = false
  config.cache = :memory_store
  config.load_defaults(7.1)

  Rails.application.initialize!
end

class BugTest < Minitest::Test
  def test_memory_store_fetch_opts
    Rails.cache.fetch(SecureRandom.alphanumeric) do |_key, opts|
      opts.expires_at = 1.minute.from_now
      Time.now.to_s
    end
  ensure
    puts ""Cache options are now #{Rails.cache.options}""
  end
end
```

### Expected behavior

Cache is written with the given `expires_at` value.

### Actual behavior

An `ArgumentError` is raised saying that we're trying to set two options. `Rails.cache` options are mutated with the options from the block.

```
# Running:

Cache options are now {:compress=>true, :compress_threshold=>1024, :expires_at=>Thu, 26 Oct 2023 12:58:56.191690312 UTC +00:00}
E

Error:
BugTest#test_memory_store_fetch_opts:
ArgumentError: Either :expires_in or :expires_at can be supplied, but not both
```

### System configuration
**Rails version**: *main*

**Ruby version**: 3.2.2
"
49788,[includes solution] ActionMailer Email Preview ignoring optional date header,allisonphillips,"actionmailer, attached PR",2023-10-25T23:51:04Z,2023-11-04T21:45:09Z,2023-11-04T21:45:09Z,"My work requires total isolation of our GH accounts so I can't put up a PR for this right now / am not sure when I will have the bandwidth to do so, but if anyone wants an easy win:

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
[ActionMailer::Base#mail](https://api.rubyonrails.org/v7.0/classes/ActionMailer/Base.html#method-i-mail) accepts a `:date` header argument, but the [rails mailers email template doesn't check the date header and always renders Time.current.rfc2822](https://github.com/rails/rails/blob/ea4c48ad3979c8f6688339c62a4a9c3aea9f9a68/railties/lib/rails/templates/rails/mailers/email.html.erb#L96)

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
class MyMailerPreview < ActionMailer::Preview
  def preview
    mail = MailKlass.find(params[:id])

    MyMailer.view_sent(mail)
  end
end

class MyMailer < ActionMailer::Base
  def view_sent(email)
    mail(
      to: email.email,
      subject: email.subject,
      date: email.sent_at
    ) do |format|
      format.html { render email.template }
    end
  end
end
```
My use case is previewing an email that was already sent.

### Expected behavior
<!-- Tell us what should happen -->
ActionMailer template header section should render the value of `@mail.header['date']` (from `mail(date: some_timestamp)`) if the header is present
### Actual behavior
<!-- Tell us what happens instead -->
Previewed emails always render the result of `Time.current.rfc2822` without checking for the presence of `@email.header['date']`

### Solution
Replace this
https://github.com/rails/rails/blob/ea4c48ad3979c8f6688339c62a4a9c3aea9f9a68/railties/lib/rails/templates/rails/mailers/email.html.erb#L96

with this:
```ruby
    <dd id=""date""><%= @email.header['date'] || Time.current.rfc2822 %></dd>
```

### System configuration
**Rails version**:
7x
**Ruby version**:
3.2"
49785,"Blocked host: *.queue.ngrok.io. Not accepting ""config.hosts << /[a-z0-9]+\.queue\.ngrok\.io/"" in development.rb",masudhossain,third party issue,2023-10-25T21:19:38Z,2023-10-30T09:00:13Z,2023-10-28T10:26:27Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# development.rb file has 
  config.hosts << ""queue.ngrok.io""
  config.hosts << /[a-z0-9]+\.queue\.ngrok\.io/
```

### Expected behavior
Work with ngrok wildcard domain as expected. Issue started today 2-3 hours ago. Haven't touched the development.rb file in over a year. 

### Actual behavior
![image](https://github.com/rails/rails/assets/16615124/39443564-0c8b-41f1-989a-87557ae9856f)


### System configuration
**Rails version**:
gem 'rails', '~> 6.1', '>= 6.1.7.3'

**Ruby version**:
ruby ""3.0.3"""
49783,Nested form params are malformed in Rails 7.1,dan003400,actionview,2023-10-25T16:33:47Z,2023-10-25T19:54:28Z,,"```
<%= form_with(model: [:dashboard, @integration]) do |form| %>
  <%= form.text_field ""configurations_fields[measurement_id]"", value: @integration.configurations_fields[:measurement_id] %>
<% end %>
```

browser payload:
```
integration[configurations_fields[measurement_id]]: G-123231231
integration[kind]: ga4
```

params on server:
```
{""integration""=>#<ActionController::Parameters {""configurations_fields[measurement_id""=>{""]""=>""G-123231231""}, ""kind""=>""ga4""} permitted: false>, ""commit""=>""Connect Google Analytics"", ""layout""=>""dashboard"", ""controller""=>""dashboard/integrations"", ""action""=>""create""}
```

### Expected behavior
Before upgrading to 7.1 (previously 7.0) there was no issues by having fields like so, but now as you can see there is added characters being added. Our guess is this is being added during some middleware process that processes the controller params.

```{""configurations_fields[measurement_id""=>{""]""=>""G-123231231""}, ""kind""=>""ga4""}```


### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.1.2
"
49781,ActiveRecord fails to recover in some cases after database restart,jacobat,"activerecord, attached PR, PostgreSQL",2023-10-25T13:33:18Z,2023-11-06T06:56:13Z,2023-11-06T06:56:13Z,"ActiveRecord does not handle the database going away properly in all cases. In the following example we execute `Event.first.name`, then we stop the database and execute it again to see it fail. Even after starting the database back up repeated executions continue to fail.

Only once we execute `Event.all.map(&:name)` the connection is reestablished and `Event.first.name` starts executing correctly again.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

```
Loading development environment (Rails 7.1.1)

irb(main):001> Event.first.name
  Event Load (0.6ms)  SELECT ""events"".* FROM ""events"" ORDER BY ""events"".""id"" ASC LIMIT $1  [[""LIMIT"", 1]]
=> ""First event""

irb(main):002> `brew services stop postgresql@16`
=> ""Stopping `postgresql@16`... (might take a while)\n==> Successfully stopped `postgresql@16` (label: homebrew.mxcl.postgresql@16)\n""

irb(main):003> Event.first.name
  Event Load (0.6ms)  SELECT ""events"".* FROM ""events"" ORDER BY ""events"".""id"" ASC LIMIT $1  [[""LIMIT"", 1]]
.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQconsumeInput() FATAL:  terminating connection due to unexpected postmaster exit (ActiveRecord::ConnectionFailed)
server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or while processing the request.

.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQconsumeInput() FATAL:  terminating connection due to unexpected postmaster exit (PG::ConnectionBad)
server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or while processing the request.

irb(main):004> Event.first.name
  Event Load (0.2ms)  SELECT ""events"".* FROM ""events"" ORDER BY ""events"".""id"" ASC LIMIT $1  [[""LIMIT"", 1]]
.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQsocket() can't get socket descriptor (ActiveRecord::ConnectionNotEstablished)
.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQsocket() can't get socket descriptor (PG::ConnectionBad)

irb(main):005> `brew services start postgresql@16`
=> ""==> Successfully started `postgresql@16` (label: homebrew.mxcl.postgresql@16)\n""

irb(main):006> Event.first.name
  Event Load (0.3ms)  SELECT ""events"".* FROM ""events"" ORDER BY ""events"".""id"" ASC LIMIT $1  [[""LIMIT"", 1]]
.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQsocket() can't get socket descriptor (ActiveRecord::ConnectionNotEstablished)
.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQsocket() can't get socket descriptor (PG::ConnectionBad)

irb(main):007> Event.first.name
  Event Load (0.2ms)  SELECT ""events"".* FROM ""events"" ORDER BY ""events"".""id"" ASC LIMIT $1  [[""LIMIT"", 1]]
.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQsocket() can't get socket descriptor (ActiveRecord::ConnectionNotEstablished)
.../gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:912:in `exec_prepared': PQsocket() can't get socket descriptor (PG::ConnectionBad)

irb(main):008> Event.all
  Event Load (0.6ms)  SELECT ""events"".* FROM ""events"" /* loading for pp */ LIMIT $1  [[""LIMIT"", 11]]
=>
[#<Event:0x0000000105abd5c8
  id: 1,
  name: ""First event"",
  created_at: Wed, 25 Oct 2023 12:37:39.770913000 UTC +00:00,
  updated_at: Wed, 25 Oct 2023 12:37:39.770913000 UTC +00:00>]

irb(main):009> Event.first.name
  Event Load (0.4ms)  SELECT ""events"".* FROM ""events"" ORDER BY ""events"".""id"" ASC LIMIT $1  [[""LIMIT"", 1]]
=> ""First event""
```

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

### Expected behavior

`Event.first.name` should succeed once the database is back online.

### Actual behavior

`Event.first.name` continues to fail indefinitely until `Event.all.each(&:name)` is called.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2"
49768,Document import breaking change in @rails/ujs 7.1.0,joao-esteves,actionview,2023-10-24T16:35:25Z,2023-10-31T16:20:59Z,,"This change was done in https://github.com/rails/rails/commit/7d116c93cf6cf2470600860c4c17417df7768c34.

### Steps to reproduce

- Add `@rails/ujs` on version 7.1.0 (and up) to package.json
- On a JavaScript file write `import { fileInputSelector } from ""@rails/ujs"";`
- Build the JavaScript (using Shakapacker, but any such system should do)

### Expected behavior

Shouldn't have errors, or this breaking change should be documented in the Rails 7.1 migration guide at https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#upgrading-from-rails-7-0-to-rails-7-1.

### Actual behavior

Get the error `export 'fileInputSelector' (imported as 'fileInputSelector') was not found in '@rails/ujs' (possible exports: default)`.

### System configuration
**Rails version**: 7.1.0 / 7.1.1

**Ruby version**: 3.2.2 / Any

**Shakapacker version**: 6.6.0 (but any other JavaScript setup should do)
"
49767,postgres enum array + db:prepare regression in rails 7.1.1,modosc,"activerecord, attached PR",2023-10-24T16:02:53Z,2023-10-28T04:45:16Z,2023-10-28T04:45:16Z,"### Steps to reproduce
repo is here: https://github.com/modosc/rails-7-bug-repro

the `schema.rb` is a snippet from a rails 7.0 app we have. when upgrading to 7.1 various db tasks broken. i isolated the issue down to what's committed in `db/schema.rb`. 

### Expected behavior
`rails db:prepare`  should work and not remove the `accounts` table from `db/schema.rb`

### Actual behavior
```bash
$ rails db:drop db:prepare
Dropped database 'rails_bug_development'
Dropped database 'rails_bug_test'
Created database 'rails_bug_development'
unknown OID 824692: failed to recognize type of 'account_types'. It will be treated as String.
Created database 'rails_bug_test'
$ git diff
diff --git a/db/schema.rb b/db/schema.rb
index c7a182a..45937af 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -18,7 +18,4 @@ ActiveRecord::Schema[7.1].define(version: 2023_10_24_155210) do
   # Note that some types may not work with other database engines. Be careful if changing database.
   create_enum ""account_type"", [""customer"", ""vendor""]

-  create_table ""accounts"", force: :cascade do |t|
-    t.enum ""account_types"", array: true, enum_type: ""account_type""
-  end
 end
```

there seems to be an intermediate change to `db/schema.rb` which includes these contents:
```
# Could not dump table ""accounts"" because of following StandardError
#   Unknown type 'account_type' for column 'account_types'
```
but that gets overwritten almost immediately.

note that `db:schema:load` does work as expected:
```bash
$ rails db:drop db:create db:schema:load
Dropped database 'rails_bug_development'
Dropped database 'rails_bug_test'
Created database 'rails_bug_development'
Created database 'rails_bug_test'
```

also note that in both cases the underlying db table is created. however, any subsequent db migration will cause the `accounts` table to be removed from `db/schema.rb`

finally, note that if i remove `array: true` from both the initial migration and `db/schema.rb` everything works as expected.

### System configuration
**Rails version**:
```bash
$ rails -v
Rails 7.1.1
```

**Ruby version**:
```bash
$  ruby -v
ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
```

**Postgres version**:
```
psql (16.0, server 15.4 (Homebrew))
```"
49763,System tests does not work with Chrome/Chromium out of the box,runephilosof-abtion,"actionpack, docs",2023-10-24T13:11:35Z,2023-11-23T11:11:53Z,,"The guides https://guides.rubyonrails.org/testing.html does not mention what you need to install in order to run the system specs.

For `:headless_firefox`, it is enough to install `firefox-esr`.
But testing with `:headless_chrome` fails, even though the browser is installed.

The guides should list prerequisites.
It would also be awesome, if the CI tested this, either as is done below or by adding to https://github.com/rails/rails/blob/main/.github/workflows/rails-new-docker.yml

### Steps to reproduce
Dockerfile
```Dockerfile
FROM ruby:3.0.6

RUN curl -so nodejs.tar.xz https://nodejs.org/dist/v18.14.1/node-v18.14.1-linux-x64.tar.xz \
  && tar xJf nodejs.tar.xz -C /usr/local --strip-components=1 --no-same-owner \
  && node --version \
  && npm --version

RUN npm install -g yarn \
  && yarn --version
```

```bash
docker build -t rails-test-system .
docker run --rm -it rails-test-system bash
apt update
apt install -y chromium firefox-esr
gem install rails
rails new test-system
cd test-system
bin/rails g scaffold article
bin/rails db:migrate
sed -i 's/:chrome/:headless_firefox/' test/application_system_test_case.rb
bin/rails test:system
sed -i 's/:headless_firefox/:headless_chrome/' test/application_system_test_case.rb
bin/rails test:system
```

```bash
wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
apt-get install -y ./google-chrome-stable_current_amd64.deb
bin/rails test:system
```

### Expected behavior
The system tests should be successful, like when using `:headless_firefox`.

### Actual behavior
Using `chromium`
```
Error:
ArticlesTest#test_should_destroy_Article:
Selenium::WebDriver::Error::SessionNotCreatedError: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/chromium is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
    #0 0x5c7383be6fb3 <unknown>
```

Using `google-chrome`
```
Error:
ArticlesTest#test_should_update_Article:
Selenium::WebDriver::Error::SessionNotCreatedError: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
    #0 0x5c1c61f64fb3 <unknown>
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.0.6
"
49762,ActiveRecord::Normalization - Normalizations don't run on store-based attributes,bcollierjones,"activerecord, With reproduction steps",2023-10-24T12:32:26Z,2023-10-24T17:43:49Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :extra_data
  end
end

class User < ActiveRecord::Base
  store :extra_data, accessors: [:fav_color, :homepage], coder: JSON
  store_accessor :extra_data, :email

  # Normalizations on store attributes DO NOT work
  normalizes :homepage, :email, with: -> { _1.strip.downcase }

  # Validations on store attributes DO work
  validates :fav_color, inclusion: {in: %w[red green blue]}, allow_nil: true
end

class BugTest < Minitest::Test
  def test_association_stuff
    user = User.create(homepage: ""  http://Example.Com  "")

    user.fav_color = ""red""
    user.email = ""JaneDoe@Example.Com""

    user.save! # no errors, color validation works

    assert_equal ""http://example.com"", user.homepage
    assert_equal ""janedoe@example.com"", user.email
  end
end

```

### Expected behavior
Both the homepage and email attributes should be normalized (stripped and downcased) when set. This is expected as validations work on store-based attributes.

### Actual behavior
Normalizations don't appear to be running on store-based attributes. Not sure if this is a bug, an oversight, or intended behavior.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49761,Strict locals cause an error when implicitly rendering a collection,ayushn21,"actionview, With reproduction steps",2023-10-24T12:28:55Z,2023-10-25T16:01:23Z,2023-10-25T16:00:08Z,"Rendering a collection where the partial name is implicit, and the partial contains strict locals, an error is thrown.

### Steps to reproduce

Create a new app and scaffold a `Post`.

```shell
$ rails new strict-locals-error
$ bin/rails generate scaffold post title:string body:text
$ bin/rails db:migrate
```

Create a few posts using the UI. Amend the `index` view to render the collection implicitly:

```erb
<%# app/views/posts/index.html.erb %>

<div id=""posts"">
  <%= render @posts %>
</div>
```

Set a strict local in the `_post` partial:

```erb
<%# app/views/posts/_post.html.erb %>

<%# locals: (post:) %>

<div id=""<%= dom_id post %>"">
  <p>
    <strong>Title:</strong>
    <%= post.title %>
  </p>

  <p>
    <strong>Body:</strong>
    <%= post.body %>
  </p>

</div>
```

### Expected behavior

The index view should render successfully.

### Actual behavior

An error is thrown and the view doesn't render.

```
app/views/posts/index.html.erb:6
Started GET ""/cable"" for 127.0.0.1 at 2023-10-24 13:25:15 +0100
Started GET ""/cable"" [WebSocket] for 127.0.0.1 at 2023-10-24 13:25:15 +0100
Successfully upgraded to WebSocket (REQUEST_METHOD: GET, HTTP_CONNECTION: keep-alive, Upgrade, HTTP_UPGRADE: websocket)
Started GET ""/posts/"" for 127.0.0.1 at 2023-10-24 13:26:13 +0100
Processing by PostsController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering posts/index.html.erb within layouts/application
  Post Load (0.2ms)  SELECT ""posts"".* FROM ""posts""
  ↳ app/views/posts/index.html.erb:6
  Rendered collection of posts/_post.html.erb [2 times] (Duration: 1.0ms | Allocations: 1778)
  Rendered posts/index.html.erb within layouts/application (Duration: 3.6ms | Allocations: 2630)
  Rendered layout layouts/application.html.erb (Duration: 3.8ms | Allocations: 2722)
Completed 500 Internal Server Error in 5ms (ActiveRecord: 0.1ms | Allocations: 2972)



ActionView::Template::Error (unknown keywords: :post_counter, :post_iteration):

app/views/posts/index.html.erb:6
```

This issue is not present when implicitly rendering a single partial. For eg:

```erb
<%= render @post %>
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49757,BroadcastLogger#tagged without a block returns an array instead of a logger,mroach,"activesupport, attached PR",2023-10-24T08:03:15Z,2023-10-25T05:20:19Z,,"### Steps to reproduce

1. Use `BroadcastLogger#broadcast_to(logger)` to add a new logger
2. Use `BroadcastLogger#tagged(""MyTag"")` without a block to return a new tagged logger
3. Try to use that new tagged logger

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pry""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_broadcast_to_multiple_tagged_loggers
    iologger1 = Logger.new($stdout)
    iologger1 = ActiveSupport::TaggedLogging.new(iologger1)

    logger = ActiveSupport::BroadcastLogger.new(iologger1)

    # This works fine
    logger.tagged(""Test1"").info(""OK"")

    iologger2 = Logger.new($stderr)
    iologger2 = ActiveSupport::TaggedLogging.new(iologger2)

    logger.broadcast_to(iologger2)

    # This works fine
    logger.tagged(""Test1"") { _1.info ""OK"" }

    # Now we have a problem. `logger.tagged` returns an Array
    # NoMethodError: undefined method `info' for [#<Logger
    #
    # https://github.com/rails/rails/blob/ca5132b78a44677f708045905dc1b092a02f6b30/activesupport/lib/active_support/broadcast_logger.rb#L242
    logger.tagged(""Test2"").info(""OK"")

    # We'll never get here, but this fails
    assert logger.is_a?(ActiveSupport::BroadcastLogger)
  end
end

```

### Expected behavior

Using `ActiveSupport::BroadcastLogger#tagged` without a block returns a tagged logger that can be used for logging as normal.


### Actual behavior

When broadcasting to more than one logger that supports tagging, an `Array` is returned rather than an object that you can log to directly.

The specific use case where this came up: in some tests, I want to capture logs so I can test them. Previously I was replacing `Rails.logger` entirely, but now I tried adding and removing a broadcast target and I noticed this didn't work.

This appears to be caused by the `method_missing` implementation:
https://github.com/rails/rails/blob/ca5132b78a44677f708045905dc1b092a02f6b30/activesupport/lib/active_support/broadcast_logger.rb#L242

<!-- Tell us what happens instead -->

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49754,Rendering action mailer preview raises deprication warning,dannyy83,"actionmailer, third party issue",2023-10-24T03:44:55Z,2023-10-24T11:37:11Z,2023-10-24T11:37:11Z,"When rending an action mailer preview path, a deprication warning is raised even though I am not using `config.action_mailer.preview_path` anywhere in my rails configuration.

### Steps to reproduce
Visit a URL that renders an action mailer preview.
Or, in the rails console, execute: `ActionMailer::Base.show_previews`

### Expected behavior
The action mailer preview renders

### Actual behavior
The deprication warning is thrown:

`DEPRECATION WARNING: Using preview_path= option is deprecated and will be removed in Rails 7.2. Please use preview_paths= instead.`

I am not using the preview_path option anywhere in my rails config.

I believe this is raised within one of the before_actions of `Rails::MailersController#preview` 

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49752,Rails 7.1.1: UUID support for MariaDB/MySQL is missing -> ActiveStorage setup migration fails to correctly dump the new schema.rb (with primary key type: UUID),john-999,"With reproduction steps, activestorage",2023-10-23T22:05:07Z,2023-10-30T00:06:41Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

After running the [ActiveStorage setup](https://edgeguides.rubyonrails.org/active_storage_overview.html#setup), the migration producing the new `schema.rb` dump appears to fail, the beginning of it looking like this:

```ruby
ActiveRecord::Schema[7.0].define(version: 2023_09_29_141433) do
# Could not dump table ""active_storage_attachments"" because of following StandardError
#   Unknown type 'uuid' for column 'id'

# Could not dump table ""active_storage_blobs"" because of following StandardError
#   Unknown type 'uuid' for column 'id'

# Could not dump table ""active_storage_variant_records"" because of following StandardError
#   Unknown type 'uuid' for column 'id'
...
```

In the `config/application.rb` file, I have added:
```ruby
config.generators do |g|
  g.orm :active_record, primary_key_type: :uuid
end
```

However, looking at the generated DB tables in phpMyAdmin, all key and foreign-key values in the ""Type"" columns correctly show ""uuid"" (MariaDB [supports the UUID data type](https://mariadb.com/kb/en/uuid-data-type/) natively).

### System configuration
**Rails version**: `7.0.4.3`
**Ruby version**: `3.0.1p64` (2021-04-05 revision 0fb782ee38) [x86_64-linux]
**MariaDB version**: `11.1.2`
**gem mysql2 version**: `0.5.5`"
49750,ActiveRecord: `merge` ignores query in `from`,ivangreene,"activerecord, With reproduction steps",2023-10-23T19:59:53Z,2023-10-27T11:00:53Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.1.1""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table :authors, force: true do |t|
  end

  create_table :book_authors, force: true do |t|
    t.integer :book_id
    t.integer :author_id
  end

  create_table :books, force: true do |t|
    t.integer :library_id
  end

  create_table :libraries, force: true do |t|
  end

end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BookAuthor < ApplicationRecord
  belongs_to :book
  belongs_to :author
end

class Author < ApplicationRecord
  has_many :book_authors
  has_many :books, through: :book_authors
end

class Book < ApplicationRecord
  scope :by_author, ->(author) {
    joins(book_authors: :author).where(book_authors: { author: author })
  }
  has_many :book_authors
  has_many :authors, through: :book_authors
  belongs_to :library
end

class Library < ApplicationRecord
  has_many :books
end


class BugTest < Minitest::Test
  def test_union
    library1 = Library.create!
    library2 = Library.create!

    author1 = Author.create!
    author2 = Author.create!
    author3 = Author.create!

    author1.books << Book.create!(library: library1)
    author1.books << Book.create!(library: library1)

    author2.books << Book.create!(library: library1)
    author2.books << Book.create!(library: library1)

    author3.books << Book.create!(library: library2)
    author3.books << Book.create!(library: library2)

    author1_books = Book.by_author(author1)
    author2_books = Book.by_author(author2)

    book_union = Book.from(""(#{author1_books.to_sql} UNION #{author2_books.to_sql}) AS books"")
    # book_union = Book.where(id: Book.from(""(#{author1_books.to_sql} UNION #{author2_books.to_sql}) AS books"").select(:id)) # This works
    assert_equal(4, book_union.count)
    library_query = Library.joins(:books).merge(book_union)

    assert_equal(4, library_query.count)
    assert(library_query.to_sql.include?('UNION'))
  end
end
```

### Expected behavior
Calling `.merge` with the result of a `Record.from` should preserve the query in the `from`

### Actual behavior
The query in the `.from` is discarded and the query that gets executed does not filter by it

### System configuration
**Rails version**: `7.1.1`

**Ruby version**: `ruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]`
"
49747,Rails 7.1.1 form_with and include_blank cannot be false for a required field,francesco-loreti,more-information-needed,2023-10-23T13:04:59Z,2023-10-30T10:12:03Z,2023-10-23T17:51:38Z,"```ruby
= form_with model: product do |f|
  = f.select :user_id, collection, { include_hidden: false, include_blank: false, required: true }
```

### Actual behavior
`ArgumentError - include_blank cannot be false for a required field.:`

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49746,`cookies.delete` does not remove cookies with a path if called from a different path,zavan,"actionpack, attached PR, With reproduction steps",2023-10-23T12:32:24Z,2023-11-10T20:21:24Z,,"I don't know if this is intended behavior, but calling `cookies.delete` for a cookie that has a path, doesn't delete it if called from a different path.

This is because Rails only removes cookies that are present in the request, but since cookies with a path are only sent to that path, removing them with `cookies.delete` does not work.

I think it should work since deleting the cookie is actually just setting the value to nil and expiring it, and you can do that from a different path.

https://github.com/rails/rails/blob/23938052acd773fa24068debe56cd892cbf8d868/actionpack/lib/action_dispatch/middleware/cookies.rb#L382-L389

Manually expiring the cookie works.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.1""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get 'set_cookies' => ""test#set_cookies""
    get 'show_cookies' => ""test#show_cookies""
    get 'delete_cookies' => ""test#delete_cookies""
    get 'delete_cookies_hack' => ""test#delete_cookies_hack""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def set_cookies
    cookies[:root] = ""root""
    cookies[:show] = { value: ""show"", path: ""/show_cookies"" }
    render plain: ""OK""
  end

  def show_cookies
    render plain: ""#{cookies[:root]}-#{cookies[:show]}""
  end

  def delete_cookies
    cookies.delete :root
    cookies.delete :show, path: ""/show_cookies""
    render plain: ""OK""
  end

  def delete_cookies_hack
    cookies[:root] = { value: nil, expires: Time.at(0), max_age: 0 }
    cookies[:show] = { value: nil, expires: Time.at(0), max_age: 0, path: ""/show_cookies"" }
    render plain: ""OK""
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  # This fails
  def test_deletes_cookies_regular
    get ""/set_cookies""
    assert_equal ""OK"", last_response.body
    assert_equal ""/"", last_response.cookies[""root""].path
    assert_equal ""/show_cookies"", last_response.cookies[""show""].path

    get ""/show_cookies""
    assert_equal ""root-show"", last_response.body

    get ""/delete_cookies""
    assert_equal ""OK"", last_response.body
    refute_nil last_response.cookies[""root""]
    # This fails because the 'show' cookie is not set to be deleted.
    refute_nil last_response.cookies[""show""]

    get ""/show_cookies""
    # This fails because the 'show' cookie is still present.
    assert_equal ""-"", last_response.body
  end

  # This passes
  def test_deletes_cookies_hack
    get ""/set_cookies""
    assert_equal ""OK"", last_response.body
    assert_equal ""/"", last_response.cookies[""root""].path
    assert_equal ""/show_cookies"", last_response.cookies[""show""].path

    get ""/show_cookies""
    assert_equal ""root-show"", last_response.body

    get ""/delete_cookies_hack""
    assert_equal ""OK"", last_response.body
    refute_nil last_response.cookies[""root""]
    refute_nil last_response.cookies[""show""]

    get ""/show_cookies""
    assert_equal ""-"", last_response.body
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior
Calling `cookies.delete` for a cookie that has a path deletes the cookie, even if called from a different path.

### Actual behavior
Calling `cookies.delete` for a cookie that has a path does not delete it if called from a different path.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49745,`Rails.logger.tagged` will execute block as many times as the number of tagged loggers in the broadcast,davidstosik,"activesupport, attached PR",2023-10-23T09:45:55Z,2023-11-10T21:24:02Z,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""debug""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

module ActiveSupport
  class BugTest < Minitest::Test
    def test_tagged_broadcast
      logger1_io = StringIO.new
      logger2_io = StringIO.new

      logger = BroadcastLogger.new(TaggedLogging.new(Logger.new(logger1_io)))
      logger.broadcast_to(TaggedLogging.new(Logger.new(logger2_io)))

      run_counter = 0

      logger.tagged(""TEST"") do
        logger.info(""Doing something"")
        run_counter += 1
      end

      # require ""debug"";binding.b
      assert_equal 1, run_counter                                  # Actual: 2
      assert_equal ""[TEST] Doing something\n"", logger1_io.string   # Actual: ""[TEST] Doing something\nDoing something\n""
      assert_equal ""[TEST] Doing something\n"", logger2_io.string   # Actual: ""Doing something\n[TEST] Doing something\n""
    end
  end
end
```

### Expected behavior

When I do `Rails.logger.tagged(""MY TAG"") { do_something }`, I expect `do_something` to be called once, regardless of how many loggers Rails is broadcasting to.

I also expect my log to be tagged and displayed in each logger. (I should see ""[TEST] Doing something"" once in the first log sink, and once in the second log sink.)

I don't know how common this is, but I've seen many applications (starting with Shopify), passing rather long blocks to `#tagged`, expecting all logs produced by the code in that block to be tagged. This becomes a problem if we for example do database operations in that block.

### Actual behavior

The block passed to `tagged` is run as many times as there are loggers broadcasted to.
The log messages get multiplied too (obviously), and only one for each logger is tagged.

### System configuration

**Rails version**: `HEAD`
**Ruby version**: 3.2.1

---

Still working on a graceful but quick solution to handle this. Suggestions welcome!"
49737,"ArgumentError: `auth_tag': wrong number of arguments (given 1, expected 0)",imaqsood,activesupport,2023-10-21T20:27:42Z,2023-10-27T19:55:14Z,2023-10-27T19:53:15Z,"### Steps to reproduce
step 1: `docker run -it jruby:9.4 bash`
step 2: `gem install rails`
step 3: `rails new jrails -BT -j esbuild -d jdbcpostgresql`  

### Expected behavior
should create a new rails application without bundle and test and with esbuild and jdbcpostgresql driver

### Actual behavior
Getting an Error
```bash
      create
      create  README.md
      create  Rakefile
sh: 1: node: not found
      create  .node-version
      create  .ruby-version
      create  config.ru
      create  .gitignore
      create  .gitattributes
      create  Gemfile
sh: 1: git: not found
sh: 1: git: not found
nil versions are discouraged and will be deprecated in Rubygems 4
         run  git init && git symbolic-ref HEAD refs/heads/main from "".""
sh: 1: git: not found
      create  app
      create  app/assets/config/manifest.js
      create  app/assets/stylesheets/application.css
      create  app/channels/application_cable/channel.rb
      create  app/channels/application_cable/connection.rb
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/jobs/application_job.rb
      create  app/mailers/application_mailer.rb
      create  app/models/application_record.rb
      create  app/views/layouts/application.html.erb
      create  app/views/layouts/mailer.html.erb
      create  app/views/layouts/mailer.text.erb
      create  app/assets/images
      create  app/assets/images/.keep
      create  app/controllers/concerns/.keep
      create  app/models/concerns/.keep
      create  bin
      create  bin/rails
      create  bin/rake
      create  bin/setup
sh: 1: node: not found
sh: 1: yarn: not found
      create  Dockerfile
      create  .dockerignore
      create  bin/docker-entrypoint
      create  config
      create  config/routes.rb
      create  config/application.rb
      create  config/environment.rb
      create  config/cable.yml
      create  config/puma.rb
      create  config/storage.yml
      create  config/environments
      create  config/environments/development.rb
      create  config/environments/production.rb
      create  config/environments/test.rb
      create  config/initializers
      create  config/initializers/assets.rb
      create  config/initializers/content_security_policy.rb
      create  config/initializers/cors.rb
      create  config/initializers/filter_parameter_logging.rb
      create  config/initializers/inflections.rb
      create  config/initializers/new_framework_defaults_7_1.rb
      create  config/initializers/permissions_policy.rb
      create  config/locales
      create  config/locales/en.yml
/usr/local/bundle/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/java_thread_pool_executor.rb:13: warning: method redefined; discarding old to_int
/usr/local/bundle/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/java_thread_pool_executor.rb:13: warning: method redefined; discarding old to_f
      create  config/master.key
      append  .gitignore
ArgumentError: `auth_tag': wrong number of arguments (given 1, expected 0)
                            encrypt at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/message_encryptor.rb:290
                     create_message at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/message_encryptor.rb:257
                   encrypt_and_sign at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/message_encryptor.rb:221
                            encrypt at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/encrypted_file.rb:105
                              write at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/encrypted_file.rb:79
                            writing at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/encrypted_file.rb:98
                             create at /opt/jruby/lib/ruby/stdlib/tempfile.rb:137
                            writing at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/encrypted_file.rb:90
                             change at /usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/encrypted_file.rb:84
  render_template_to_encrypted_file at /usr/local/bundle/gems/railties-7.1.1/lib/rails/generators/rails/credentials/credentials_generator.rb:51
               add_credentials_file at /usr/local/bundle/gems/railties-7.1.1/lib/rails/generators/rails/credentials/credentials_generator.rb:21
                            in_root at /usr/local/bundle/gems/thor-1.3.0/lib/thor/actions.rb:201
                             inside at /usr/local/bundle/gems/thor-1.3.0/lib/thor/actions.rb:190
                              chdir at org/jruby/RubyDir.java:456
                                 cd at /opt/jruby/lib/ruby/stdlib/fileutils.rb:139
                             inside at /usr/local/bundle/gems/thor-1.3.0/lib/thor/actions.rb:190
                            in_root at /usr/local/bundle/gems/thor-1.3.0/lib/thor/actions.rb:201
               add_credentials_file at /usr/local/bundle/gems/railties-7.1.1/lib/rails/generators/rails/credentials/credentials_generator.rb:15
                        credentials at /usr/local/bundle/gems/railties-7.1.1/lib/rails/generators/rails/app/app_generator.rb:194
                        public_send at org/jruby/RubyKernel.java:2126
                              build at /usr/local/bundle/gems/railties-7.1.1/lib/rails/generators/app_base.rb:150
                 create_credentials at /usr/local/bundle/gems/railties-7.1.1/lib/rails/generators/rails/app/app_generator.rb:392
                                run at /usr/local/bundle/gems/thor-1.3.0/lib/thor/command.rb:28
                     invoke_command at /usr/local/bundle/gems/thor-1.3.0/lib/thor/invocation.rb:127
                         invoke_all at /usr/local/bundle/gems/thor-1.3.0/lib/thor/invocation.rb:134
                               each at org/jruby/RubyHash.java:1601
                                map at org/jruby/RubyEnumerable.java:835
                         invoke_all at /usr/local/bundle/gems/thor-1.3.0/lib/thor/invocation.rb:134
                           dispatch at /usr/local/bundle/gems/thor-1.3.0/lib/thor/group.rb:232
                              start at /usr/local/bundle/gems/thor-1.3.0/lib/thor/base.rb:584
                            perform at /usr/local/bundle/gems/railties-7.1.1/lib/rails/commands/application/application_command.rb:28
                                run at /usr/local/bundle/gems/thor-1.3.0/lib/thor/command.rb:28
                     invoke_command at /usr/local/bundle/gems/thor-1.3.0/lib/thor/invocation.rb:127
                     invoke_command at /usr/local/bundle/gems/railties-7.1.1/lib/rails/command/base.rb:178
                           dispatch at /usr/local/bundle/gems/thor-1.3.0/lib/thor.rb:527
                            perform at /usr/local/bundle/gems/railties-7.1.1/lib/rails/command/base.rb:73
                             invoke at /usr/local/bundle/gems/railties-7.1.1/lib/rails/command.rb:71
                          with_argv at /usr/local/bundle/gems/railties-7.1.1/lib/rails/command.rb:149
                             invoke at /usr/local/bundle/gems/railties-7.1.1/lib/rails/command.rb:69
                             <main> at /usr/local/bundle/gems/railties-7.1.1/lib/rails/cli.rb:21
                            require at org/jruby/RubyKernel.java:1071
                            require at /opt/jruby/lib/ruby/stdlib/rubygems/core_ext/kernel_require.rb:85
                             <main> at /usr/local/bundle/gems/railties-7.1.1/exe/rails:10
                               load at org/jruby/RubyKernel.java:1107
                             <main> at /usr/local/bundle/bin/rails:25

```

### System configuration
**Rails version**:  7.1.1

**Ruby version**:  jruby 9.4.4.0 (3.1.4) 2023-10-18 9c9bfd3dc7 OpenJDK 64-Bit Server VM 25.382-b05 on 1.8.0_382-b05 +jit [aarch64-linux]
"
49736,EDITOR in rails credentials:edit is being ignored ,ChaosInfinited,railties,2023-10-21T19:54:35Z,2023-10-24T19:16:06Z,2023-10-21T22:32:15Z,"### Steps to reproduce
1. Create new Rails  >=7.1.0.beta1 <=7.1.1 application (on Arch Linux, don't know about other OSes)
2. Type in terminal `EDITOR=nano rails credentials:edit`

### Expected behavior
Rails' credentials should be opened using nano, or any other specified editor

### Actual behavior
Rails' credentials are opening in system's default text editor (Kate), which doesn't work right, as it opens an empty tmp file and the terminal doesn't wait for Kate to end before saving: `File encrypted and saved.`
I tried uninstalling kate to see how rails will react to it, but it just opened nothing with `File encrypted and saved.` 

It fails as such on >=7.1.0.beta1 <=7.1.1 rails versions, works fine on <=7.0.8

### System configuration
**Rails version**: 7.1.0.beta1 - 7.1.1

**Ruby version**: 3.2.2
"
49734,Killed Resque jobs cannot be retried using ActiveJob,geoffyoungs,"third party issue, attached PR, activejob",2023-10-21T19:25:48Z,2023-10-30T12:53:05Z,,"Resque workers can be killed.  

If they are killed with SIGKILL, the error handling in ActiveJob doesn't kick in, because it's not raised as an exception within the job code.

The failures _can_ be detected in Resque because other workers call `prune_dead_workers` and trigger `on_failure_XXX` hooks on the job class, which can be handled, but ActiveJob currently misses these exceptions and cannot trigger retry logic.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

1. Create an ActiveJob instance
2. Add `rescue_from(Resque::DirtyExit) { retry_job } `
3. Enqueue in resque, and kill it mid-job with SIGKILL
4. Wait for the worker to be pruned
5. The error will be visible in the resque failure queue, but the retry will never happen.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

# this requires redis-server to be in PATH

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  # gem ""rails"", github: ""geoffyoungs/rails"", branch: ""resque-dirty-exit-active-job""
  gem 'redis'
  gem 'resque'
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""active_job""
require ""resque""
require ""minitest/autorun""

ENV['QUEUE'] = 'std'
ENV['FORK_PER_JOB'] = 'false'
REDIS_PORT = 8765
REDIS_DB = 'resque_dirty_exit_active_job.rdb'+$$.to_s
ActiveJob::Base.queue_adapter = :resque

class BugTest < Minitest::Test
  class Job < ActiveJob::Base
    def self.status=(value)
      Resque.redis.set('job_status', value)
    end

    def self.status
      Resque.redis.get('job_status')
    end

    queue_as ENV['QUEUE']

    rescue_from(Resque::DirtyExit) do |exception|
      Job.status = 'retry'
      retry_job
    end

    def perform
      sleep 2
      Job.status = 'done'
    end
  end

  def setup
    spawn_redis
    connect_to_redis
    clear_redis
    FileUtils.rm_f(REDIS_DB)
  end

  def teardown
    kill_redis
    FileUtils.rm_f(REDIS_DB)
  end

  def test_whether_job_is_retried_after_dirty_exit
    Job.status = 'start'

    Job.perform_later

    assert Job.status.eql?('start')

    work_for(1)

    wait_for_workers_to_be_pruned

    assert Job.status.eql?('retry')

    work_for(3)

    assert Job.status.eql?('done')
  end

  private

  def work_for(time=0.5)
    pid = fork {
      connect_to_redis
      worker = Resque::Worker.new
      worker.prepare
      worker.heartbeat
      worker.work(1)
      exit!
    }
    sleep(time)
    kill('KILL', pid)
  end

  def spawn_redis
    @redis ||= spawn(['redis-server', '--port', REDIS_PORT.to_s, '--dbfilename', REDIS_DB].join(' '), out: File.open('/dev/null', 'w'))
  end

  def clear_redis
    Resque::Failure.clear
    Resque.remove_queue('std')
    Job.status = ''
  end

  def kill_redis
    kill('INT', @redis)
    @redis = nil
  end

  def kill(signal, pid)
    Process.kill(signal, pid)
    Process.waitpid(pid)
  end

  def connect_to_redis
    Resque.redis = Redis.new(port: REDIS_PORT)
  end

  def wait_for_workers_to_be_pruned
    while (workers = Resque::Worker.all).any?
      sleep(0.1)
      workers.first.prune_dead_workers
    end
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
It should be possible to handle the exception in the ActiveJob class.


### Actual behavior
<!-- Tell us what happens instead -->
It's not possible to handle the exception in ActiveJob without additional resque behaviour added to the JobWrapper class.

### System configuration
**Rails version**: 7.0.0-7.2.0pre (at least)

**Ruby version**: Any
"
49733,"Since rails 7.1, executing with a disconnected Mysql2Adapter no longer raises ConnectionNotEstablished.",fumihumi,activerecord,2023-10-21T14:39:24Z,2023-10-28T09:44:16Z,2023-10-28T09:44:16Z,"Since rails 7.1, executing with a disconnected Mysql2Adapter no longer raises ConnectionNotEstablished.

### Steps to reproduce
in my project, conn.disconnect! is used to disconnect the connection after detecting a temporary database connection failure.
 (e.g. failover / connection failure due to restart...etc)

Until Rails 7.0.8, when using a disconnected connection, ActiveRecord::ConnectionNotEstablished would be raised and conn.execute would fail.
(I have a mechanism to try to reconnect using this ConnectionNotEstablished Error)

Since Rails 7.1.0, conn.execute does not raise an error despite being disconnected.

Perhaps this change was made by this PR ( https://github.com/rails/rails/pull/44591).

Are there any plans to modify it to raise the error?

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""
  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", '7.1.1' # failed
  # gem ""rails"", '7.1.0' # failed
  # gem ""rails"", '7.0.8' # passed

  gem ""mysql2""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

db_name = ""test_connection""
options = { host: ""127.0.0.1"", port: 3306 }

adapter = 'mysql2'

ActiveRecord::Base.establish_connection(adapter: adapter, username: ""root"", **options)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Base.connection.drop_database db_name
ActiveRecord::Base.connection.create_database db_name
ActiveRecord::Base.establish_connection(adapter: adapter, username: ""root"", database: db_name, **options)
ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :name
  end
end

class User < ActiveRecord::Base; end

class BugTest < Minitest::Test
  def test_disconnected_conn_execute
    conn = User.connection
    conn.disconnect!
     # v7.0.8: pass, v7.1.0 and v7.1.1: failed
    assert_raises(ActiveRecord::ConnectionNotEstablished) { conn.execute(""select 1;"") }
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

ConnectionNotEstablished is raised in case of execute using a disconnected connection.

### Actual behavior
<!-- Tell us what happens instead -->

The execute method does not raise an error.
execute completes successfully and returns Mysql::Result.

### System configuration
**Rails version**: 7.1.1
**Ruby version**: 3.2.2
"
49717,Rails 7.1 - can't define enums for attributes which don't exist in table,ejskipper,activerecord,2023-10-20T07:51:32Z,2023-11-24T23:39:08Z,2023-10-23T16:50:23Z,"Not sure if this is an intended change or not. Pre 7.1, I could define an attr on a model using `attribute` and define enum values for it, then use enum helper methods. I'm using this heavily in my current project for i18ns etc, so defining the enum values as an array and manually validating won't cover all my use cases

Since 7.1, this isn't possible.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
  attribute :topic
  enum topic: %i[sports politics entertainment]
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    post.assign_attributes(topic: :sports)

    assert_equal true, post.sports?
  end
end# frozen_string_literal: true


```

### Expected behavior
Post should instantiate correctly and can use enum helper methods

### Actual behavior
Error thrown

`RuntimeError: Unknown enum attribute 'topic' for Post`

### System configuration
**Rails version**: 7.1.1

**Ruby version**: ruby 3.1.2p20
"
49713,NoMethodError occurs when specifying a number as the argument of `ActiveSupport::OrderedOptions#dig`,sinsoku,"activesupport, With reproduction steps",2023-10-20T03:10:58Z,2023-10-20T10:57:24Z,2023-10-20T10:57:24Z,"### Steps to reproduce

Passing a number as an argument to `ActiveSupport::OrderedOptions#dig` causes an error.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  version = ENV.fetch(""AS_VERSION"", ""7.1.1"")
  gem ""activesupport"", version
end

require ""active_support""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_ordered_options
    h = ActiveSupport::OrderedOptions.new
    h[:foo] = [{ a: 1 }]

    assert_equal 1, h.dig(:foo, 0, :a)
  end
end
```

The results are as follows.

```
$ AS_VERSION=7.0.8 ruby steps_to_reproduce.rb
# Running:

.

Finished in 0.000639s, 1564.9453 runs/s, 1564.9453 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips

$ ruby steps_to_reproduce.rb
# Running:

E

Finished in 0.001081s, 925.0693 runs/s, 0.0000 assertions/s.

  1) Error:
BugTest#test_ordered_options:
NoMethodError: undefined method `to_sym' for 0:Integer
    /Users/shotokutakumi/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.1/lib/active_support/ordered_options.rb:46:in `map'
    /Users/shotokutakumi/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.1/lib/active_support/ordered_options.rb:46:in `dig'
    steps_to_reproduce.rb:22:in `test_ordered_options'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
```

There is a change in 5c15b58 that calls `to_sym` on all keys.

### Expected behavior

No errors.
Since arrays are sometimes used in credentials and custom configuration, this behavior may cause problems for some people.

### Actual behavior

Error occurs.

### System configuration
**Rails version**:
v7.1.1

**Ruby version**:
v3.2.2"
49708,Rails 7.1 changes `joins` behavior when using `unscope` in the scope,jwoodrow,"activerecord, more-information-needed",2023-10-19T22:23:49Z,2023-11-24T21:22:55Z,2023-11-24T21:22:55Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
create_table(:humans), id: :uuid do |t|
  t.string :human_id
  t.timestamp
end

create_table(:things), id: :uuid do |t|
  t.timestamp
end

class Thing
  belongs_to :human, lamda {
    unscope(:where).where('CAST(humans.id AS character varying) = things.human_id')
  }
end

class Human
  has_many :things, lambda {
    unscope(:where).where('things.human_id = CAST(humans.id AS character varying)')
  }
end

puts Human.joins(:things).to_sql
```

### Expected behavior
<!-- Tell us what should happen -->

```sql
SELECT ""humans"".*
FROM ""humans""
INNER JOIN ""things"" ON things.human_id = CAST(humans.id AS character varying)
```

### Actual behavior
<!-- Tell us what happens instead -->

```sql
SELECT ""humans"".*
FROM ""humans""
INNER JOIN ""things"" ON things.human_id = CAST(humans.id AS character varying)
AND ""things"".""human_id"" = ""humans"".""id""
```

### Why the `unscope` behavior required

We use Heroku Connect to keep Salesforce data up to date without the need for API calls. This works by having a second schema `salesforce` next to the `public` one. The extra complexity being we get 0 possibility of controlling the types on the fields in the `salesforce` schema. And it just so happens that they don't have any UUID types for their columns so any attempt to do a `INNER JOIN ""things"" ON ""things"".""human_id"" = ""humans"".""id""` will lead inevitably to a `PG::UndefinedFunction: ERROR:  operator does not exist: character varying = uuid` error.

I believe this is linked to [this PR change](https://github.com/rails/rails/pull/47246) and more specifically [this change](https://github.com/rails/rails/blob/9f6b721b1d482ab16d7bdce758fea448bd7ffdbb/activerecord/lib/active_record/reflection.rb#L209)

```ruby
primary_foreign_key_pairs.each do |primary_key_column_name, foreign_key_column_name|
  klass_scope.where!(table[primary_key_column_name].eq(foreign_table[foreign_key_column_name]))
end
```

Now it systematically enforces the `foreign_key`/`primary_key` pairing after the scope is calculated meaning `unscope` no longer has any effect. 

Not being able to do joins/eager_loading is blocking situation for Rails 7.1 for us and I wish rails would just allow users to build their own join queries ready to use like it used to be possible back in the day with `finder_sql`

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49707,`ActiveRecord::Core#inspect` should have an option to not show the attributes in production,rafaelfranca,"activerecord, good first issue",2023-10-19T22:04:21Z,2023-11-08T20:08:37Z,2023-11-08T20:08:37Z,"By mistake, we had a hash containing multiple `ActiveRecord::Base` instance being inspected in production, through `Hash#to_s` call.

This was causing the parameter filter to execute for each attribute, which with the large set of objects we had, end up spending 9s to run.

While this was clearly a mistake, Rails could just help here avoiding the catastrophic results by not listing the attribute by default in production.

If for some reason people want to include their attributes in log message they can use another method that would print the record with attributes (maybe a formatted_inspect). Or they can disable the config per class (or globally)"
49706,`travel_to` overwrites existing stubs if called from different classes,nicoco007,"activesupport, With reproduction steps",2023-10-19T20:57:00Z,2023-10-20T01:03:00Z,2023-10-20T01:02:59Z,"With Rails 7.1 we started getting some rather strange errors when running all tests in CI. Seemingly randomly, tests would suddenly all fail with `NoMethodError: undefined method 'original_method' for nil:NilClass` stemming from various different spots, often not even from our code (for example, the backtrace sometimes indicated a fixture YML when not passing `--backtrace` to `rails test`).

It turns out we have some tests in our codebase that have additional classes that include `ActiveSupport::Testing::TimeHelpers` and call `travel_to` and since the list of currently stubbed methods is stored as an instance variable, we were accidentally causing stubs to be overwritten in certain situations. Once that happened, everything stopped working. I think this wasn't an issue before Rails 7.1 since `Time.new` wasn't stubbed (that was introduced by #47315) so the problem wasn't as obvious. Now that it's being stubbed, if the stub gets overwritten, it ends up trying to call the original `Time.new` that no longer exists after unstubbing, and we get either the error above or one of the two other errors that can be reproduced with the example below.

The way we're using `TimeHelpers` and `travel_to` may not be recommended/supported, so I'm not sure this should be considered a bug. Some of our tests relied on the previous behaviour and I'm not sure we'd be able to refactor all of them to use these ""properly"" so hopefully we can find a solution. If it isn't a bug though, it'd be nice to have some more obvious error/message show up. For example, raise or warn if a method with the same name as the original method that's about to be stubbed (the one prefixed with `__simple_stubs__`) exists already.

I'm happy to discuss and provide further information if necessary!

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/testing/time_helpers""
require ""minitest/autorun""

class MyOtherClass
  include ActiveSupport::Testing::TimeHelpers

  def travel_no_block
    travel_to(Time.parse(""2023-10-19 05:00:00""))
    # do something
  end

  def travel_in_block
    travel_to(Time.parse(""2023-10-19 05:00:00"")) do
      # do something
    end
  end
end

class BugTest < Minitest::Test
  include ActiveSupport::Testing::TimeHelpers

  def setup
    @my_other_class = MyOtherClass.new
  end

  # NoMethodError: undefined method `original_method' for nil:NilClass
  def test_no_block_in_other_class
    travel_to(Time.parse(""2023-10-19 00:00:00"")) do
      @my_other_class.travel_no_block
    end
    assert_equal Time.parse(""2023-10-19""), Time.new(2023, 10, 19)
  end

  # SystemStackError: stack level too deep
  def test_no_block_in_other_class_with_time_new_in_block
    travel_to(Time.parse(""2023-10-19 00:00:00"")) do
      @my_other_class.travel_no_block
      assert_equal Time.parse(""2023-10-19""), Time.new(2023, 10, 19)
    end
  end

  # NameError: undefined method `__simple_stub__now' for class `#<Class:Time>'
  def test_block_in_other_class
    travel_to(Time.parse(""2023-10-19 00:00:00"")) do
      @my_other_class.travel_in_block
    end
    assert_equal Time.parse(""2023-10-19""), Time.new(2023, 10, 19)
  end
end

```

### Expected behavior
No errors as in Rails pre 7.1.

### Actual behavior
Various errors (see comment above each test case).

### System configuration
**Rails version**: 7.1.1 & latest `main` as of writing (9f6b721b1d482ab16d7bdce758fea448bd7ffdbb)

**Ruby version**: 3.2.2
"
49699,`alias_attribute` raises a deprecation warning. Rails 7.1 ,rockwellll,docs,2023-10-19T15:01:00Z,2023-10-20T22:52:31Z,2023-10-20T22:52:31Z,"I'm in the process of upgrading an app from Rails 7.0.6 to Rails 7.1. 

Everything is running smoothly but I am seeing these logs,

```
DEPRECATION WARNING: Contact::Property model aliases `contact`, but `contact` is not an attribute. Starting in Rails 7.2, alias_attribute with non-attribute targets will raise. Use `alias_method :profile, :contact` or define the method manually. (called from block (3 levels) in <top (required)> at /Users/ahmed/hellotext/hellotext/spec/models/api/profile/params_spec.rb:181)
```

I searched in the Rails' upgrade docs but there was no mention of deprecating `alias_attribute`. 

Can anyone confirm this behavior or link a related page? Thank you in advance. "
49697,"Cast ""False"" to `false` for boolean casting.",mikestone14,activemodel,2023-10-19T14:15:22Z,2023-10-19T14:25:58Z,2023-10-19T14:25:26Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activemodel"", ""~> 7.1.0""
end

require ""active_model""
require ""minitest/autorun""
require ""logger""

class BugTest < Minitest::Test
  def test_boolean_casting
    assert_equal false, ActiveModel::Type::Boolean.new.cast(""False"")
  end
end
```

### Expected behavior

The test should pass because ""False"" should be considered falsey. Some other programming languages use capitalized words for booleans so it's reasonable to assume developers might use this syntax when setting string values like environment variables that they want to cast to boolean values in their application code.

### Actual behavior

`ActiveModel::Type::Boolean` treats ""False"" as a truthy value so the test fails.
"
49695,url_helpers generate invalid urls if a records second composite primary key is empty,mateigl,"actionpack, activerecord, With reproduction steps",2023-10-19T13:24:03Z,2023-10-23T20:17:45Z,2023-10-23T20:17:44Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, primary_key: [""firstname"", ""lastname""], force: true do |t|
    t.string ""firstname"", default: """", null: false
    t.string ""lastname"", default: """", null: false
  end
end

class User < ActiveRecord::Base
end

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger = config.logger

  routes.draw do
    resources :users, only: [:show]
  end
end

require ""action_controller/railtie""

class UsersController < ActionController::Base
  include Rails.application.routes.url_helpers

  def show
    @user = User.find(params.extract_value(:id))
    render json: @user
  end
end

class BugTest < Minitest::Test
  include Rack::Test::Methods
  include Rails.application.routes.url_helpers

  def test_with_both_keys
    user = User.create!(firstname: ""John"", lastname: ""Doe"")
    get user_path(user)
    assert last_response.ok?
  end

  def test_with_only_first_key
    user = User.create!(firstname: ""Jack"")
    get user_path(user)
    assert last_response.ok?
  end

  def test_with_only_second_key
    user = User.create!(lastname: ""Black"")
    get user_path(user)
    assert last_response.ok?
  end

  private

  def app
    Rails.application
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

Generated urls should be handled correctly even if the composite primary key is partially empty. It might be design choice to not support empty keys but the url helpers should at least warn about invalid urls.

### Actual behavior
<!-- Tell us what happens instead -->

Generated urls which contain merged composite primary keys always respond with a 404 error if the respective record has a empty second primary key.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49690,Rails.cache.delete_matched throws invalid %-encoding for long url keys,m-bucher,"activesupport, With reproduction steps",2023-10-18T18:04:09Z,2023-10-19T18:48:02Z,2023-10-19T18:48:02Z,"Because the FileStore Rails-Cache splits URI-encoded strings within an escape sequence (e.g. `%/2F`) , the path cannot be URI-decoded again: `invalid %-encoding`.
IMHO `ActiveSupport::Cache::FileStore::normalize_key‎` should make sure that the sub-directory names do not split escape-sequences.
There might be an issue with finding such large URL-keys  with `delete_matched` again in order to delete them, but I have not tested that.

### Steps to reproduce
```
Rails.cache.write ""http://test.example.de#{'/a'*100}"", 'brute-force'
Rails.cache.delete_matched(/hello/)
```
This will only fail, if the `cache_path` is set to a path without a trailing `/`, e.g. `Rails.root.join('tmp', 'cache')`.

```
Rails.cache.write ""http://test.example.de#{'/a'*200}"", 'brute-force'
Rails.cache.delete_matched(/hello/)
```
This also breaks if a trailing slash is in the cache_path (like it is in the default-path`)


### Expected behavior
`Rails.cache.delete_matched()` should not throw an exception.

### Actual behavior
```
/.../rubies/ruby-3.0.0/lib/ruby/3.0.0/uri/common.rb:324:in `decode_www_form_component': invalid %-encoding (Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa/%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2/Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa%2Fa) (ArgumentError)
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.0.0
"
49689,Deadlock in `check_pending_migrations` with multiple databases and missing `connects_to`,bensheldon,"regression, activerecord",2023-10-18T16:56:58Z,2023-10-19T17:17:10Z,2023-10-19T17:17:09Z,"I looked into this with @matthewd and he believed it warranted opening an issue for visibility.

Briefly, I have a Rails Application with multiple databases configured in `database.yml` (`primary` and `animals`). And I have a Rails Engine with a `BaseRecord < ActiveRecord::Base` that doesn't have a `connects_to` .

When running the application, for some reason the `check_pending_migrations` middleware is causing a hang because it seems to be waiting on `attempt_to_checkout_all_existing_connections`.

In my poking at it, the only connection that seems to be checked out and waiting for that exclusive checkout is the same connection that has been checked out a little earlier in the callstack from `with_temporary_connection`.

<details><summary>Report generated by `ActionDispatch::DebugLocks`</summary>

```
Thread 0 [0x3c78 sleep]  No lock (yielded share)

/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:108:in `sleep'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:108:in `wait'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:108:in `wait_for_cond'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:108:in `wait'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:174:in `wait'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:119:in `block (2 levels) in wait_poll'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:118:in `block in wait_poll'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:117:in `loop'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:117:in `wait_poll'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:78:in `internal_poll'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:204:in `internal_poll'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:73:in `block in poll'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:202:in `synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:202:in `mon_synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:82:in `synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:73:in `poll'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:661:in `acquire_connection'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:355:in `checkout'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:591:in `checkout_for_exclusive_access'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:559:in `block (3 levels) in attempt_to_checkout_all_existing_connections'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:202:in `synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/monitor.rb:202:in `mon_synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:555:in `block (2 levels) in attempt_to_checkout_all_existing_connections'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:554:in `loop'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:554:in `block in attempt_to_checkout_all_existing_connections'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb:185:in `with_a_bias_for'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:553:in `attempt_to_checkout_all_existing_connections'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:539:in `block in with_exclusively_acquired_all_connections'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:615:in `with_new_connections_blocked'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:538:in `with_exclusively_acquired_all_connections'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:261:in `disconnect'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:283:in `disconnect!'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/pool_config.rb:56:in `block in disconnect!'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/mutex_m.rb:79:in `synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/3.2.0/mutex_m.rb:79:in `mu_synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/pool_config.rb:52:in `disconnect!'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_handler.rb:308:in `disconnect_pool_from_pool_manager'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_handler.rb:155:in `establish_connection'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/tasks/database_tasks.rb:516:in `with_temporary_pool'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/tasks/database_tasks.rb:500:in `with_temporary_connection'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/tasks/database_tasks.rb:494:in `block in with_temporary_connection_for_each'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/tasks/database_tasks.rb:493:in `each'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/tasks/database_tasks.rb:493:in `with_temporary_connection_for_each'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:771:in `pending_migrations'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:750:in `check_pending_migrations'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:642:in `block (2 levels) in call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/file_update_checker.rb:85:in `execute'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:647:in `block in call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:639:in `synchronize'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:639:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/callbacks.rb:101:in `run_callbacks'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/callbacks.rb:28:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/executor.rb:14:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/actionable_exceptions.rb:16:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/debug_exceptions.rb:29:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/web-console-4.2.1/lib/web_console/middleware.rb:132:in `call_app'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/web-console-4.2.1/lib/web_console/middleware.rb:28:in `block in call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/web-console-4.2.1/lib/web_console/middleware.rb:17:in `catch'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/web-console-4.2.1/lib/web_console/middleware.rb:17:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.1.0/lib/rails/rack/logger.rb:37:in `call_app'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.1.0/lib/rails/rack/logger.rb:24:in `block in call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/tagged_logging.rb:135:in `block in tagged'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/tagged_logging.rb:39:in `tagged'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/tagged_logging.rb:135:in `tagged'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/broadcast_logger.rb:212:in `method_missing'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.1.0/lib/rails/rack/logger.rb:24:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/sprockets-rails-3.4.2/lib/sprockets/rails/quiet_assets.rb:13:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/remote_ip.rb:92:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/request_id.rb:28:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/method_override.rb:28:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/runtime.rb:24:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.1.0/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/server_timing.rb:59:in `block in call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/server_timing.rb:24:in `collect_events'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/server_timing.rb:58:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/executor.rb:14:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/static.rb:25:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/rack-3.0.8/lib/rack/sendfile.rb:114:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-7.1.0/lib/action_dispatch/middleware/host_authorization.rb:141:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.1.0/lib/rails/engine.rb:529:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/puma-6.4.0/lib/puma/configuration.rb:272:in `call'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/puma-6.4.0/lib/puma/request.rb:100:in `block in handle_request'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/puma-6.4.0/lib/puma/thread_pool.rb:378:in `with_force_shutdown'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/puma-6.4.0/lib/puma/request.rb:99:in `handle_request'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/puma-6.4.0/lib/puma/server.rb:443:in `process_client'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/puma-6.4.0/lib/puma/server.rb:241:in `block in run'
/Users/bensheldon/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/puma-6.4.0/lib/puma/thread_pool.rb:155:in `block in spawn_thread'
```

</details>

Our thinking is that by not having a `connects_to` on the model, the model is using the connection that’s used on ActiveRecord::Base.  But the migration checker _also_ uses the connection on ActiveRecord::Base to do the migration. When the temporary connection tries to disconnect and clean up, it gets stuck waiting for the currently outstanding connection to be returned to the pool. Which it can’t because that thread is stuck waiting for it to be returned to the pool.

And a thought was to fix it with `with_temporary_connection_for_each` so that it is ok for there to be an existing pool that can be set aside when running the migration-related queries. 

Initially reported in https://github.com/bensheldon/good_job/issues/1103"
49688,"Regression in 7.1 that duplicates the relative root path of routes defined in a mounted engine when the application has a relative root different to ""/""",vtamara,"actionpack, engines",2023-10-18T15:15:30Z,2023-11-21T16:12:44Z,,"## Simple case

(1) An engine that has a route (let's say `articles_path` pointing to `/articles`) and
(2) an application mounted on a relative route (let's say `/a/`) that mounts the engine on that same route by a) using `config.relative_url_root=""/a""` in `config/application.rb` as well as defining a `scope ""/a""`  in `config/routes.rb` and mounting the engine on the same route.

In the application `articles_path` will be `/a/a/articles` instead of `/a/articles` as it is with rails 7.0

### Steps to reproduce

1. With rails 7 generate part of the engine described at <https://edgeguides.rubyonrails.org/engines.html>:
    ```
    rails plugin new engine49688 --mountable
    cd engine49688
    bundle
    bin/rails generate scaffold article title:string text:text
    bin/rails db:migrate
    ```
   If you prefer you can clone this engine from this repository https://gitlab.com/vtamara/engine49688 or 
   check more details of how we generated it in the    [README.md](https://gitlab.com/vtamara/engine49688/-/blob/main/README.md)
3. With rails 7 generate part of the application described at <https://edgeguides.rubyonrails.org/engines.html>:
    ```sh
    cd ..
    rails new app49688 --minimal --skip-keeps
    cd app49688
    bundle add engine49688 --path=../engine49688
    bundle
    bin/rails engine49688:install:migrations
    bin/rails g scaffold user username:string name:string
    bin/rails db:migrate
    ```
   In this application make sure that the relative root is `/a` by 
   * Adding `config.relative_url_root = ""/a/""` to `config/application.rb`
   * Using that route as main scope in `config/routes.rb` and to mount on it the engine, i.e the contents of the file is:
      ```ruby
      Rails.application.routes.draw do            
        scope ""/a"" do
          resources :users
        end
        mount Engine49688::Engine => ""/a"", as: :engine49688
      end
      ```
    And create the test `test/controllers/routes_test.rb` with:
    ```ruby
     require ""test_helper""
     class RoutesTest < ActionDispatch::IntegrationTest

       test ""articles_path"" do
         assert_equal '/a/articles', engine49688.articles_path
       end
     end
     ```
     If you prefer you can also clone this application from https://gitlab.com/vtamara/app49688 or check details on how 
     we generated it and use it in the [README.md](https://gitlab.com/vtamara/app49688/-/blob/main/README.md).
4.  Run the test with rails 7 and it wil pass
5.  Update the application to rails 7.1 by changing in the `Gemfile` the line `gem ""rails"", ""~> 7.0.8""` with
     `gem ""rails"", ""~> 7.1""` and running `bundle`
6.  Run the same test and it will fail

### Expected behavior
With rails 7.1 the test should pass, i.e `engine49688.articles_path` should be `/a/articles` as it is with Rails 7.0:
```
% bin/rails test test/controllers/routes_test.rb
Running 1 tests in a single process (parallelization threshold is 50)
Run options: --seed 22764

# Running:

.

Finished in 0.345284s, 2.8962 runs/s, 2.8962 assertions/s.
1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
```

### Actual behavior

```
 % bin/rails test test/controllers/routes_test.rb
...
Running 1 tests in a single process (parallelization threshold is 50)
Run options: --seed 2957

# Running:

F

Failure:
RoutesTest#test_articles_path [/home/vtamara/comp/rails/tmp/app49688/test/controllers/routes_test.rb:6]:
Expected: ""/a/articles""
  Actual: ""/a/a/articles""


bin/rails test test/controllers/routes_test.rb:5



Finished in 0.206910s, 4.8330 runs/s, 4.8330 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips 
```

In the test `articles_path` duplicates the relative  root.

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2

"
49673,ActiveRecord::StatementInvalid when using empty? on a request with computed columns (Rails Exists? query fails),svgr-slth,activerecord,2023-10-17T14:49:41Z,2023-10-18T14:49:03Z,2023-10-18T14:49:03Z,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""postgresql""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :comments, force: true do |t|
    t.integer :post_id
    t.float :value
    t.datetime :time
  end
end

class Comment < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_ar_failure
    Comment.create!(value: 10.0, time: 3.hours.ago)
    Comment.create!(value: 20.0, time: 2.hours.ago)
    Comment.create!(value: 30.0, time: 1.hour.ago)

    # This should equal false, but it just fails with ActiveRecord::StatementInvalid: PG::UndefinedColumn: ERROR:  column ""time_group"" does not exist
    assert_equal false, Comment.select(""DATE_TRUNC('day', time) + ((date_part('hour', time)::integer) || ' hour')::interval AS time_group, AVG(value) AS value_average"").group(""time_group"").order(time_group: :asc).empty?
  end
end

```



More explanations:
```
class MyModel < ApplicationRecord
   # @field time => datetime
   # @field value => float
end
```



<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Request that works on it's own, averaging values over steps of 1hour of time (basically calculation over granularity)
MyModel
  .select(""DATE_TRUNC('day', time) + ((date_part('hour', time)::integer) || ' hour')::interval AS time_group, AVG(value) AS value_average"")
  .group('time_group')
  .order('time_group') # works on it's own

# Fails with ActiveRecord::StatementInvalid: PG::UndefinedColumn: ERROR:  column ""time_group"" 
MyModel
  .select(""DATE_TRUNC('day', time) + ((date_part('hour', time)::integer) || ' hour')::interval AS time_group, AVG(value) AS value_average"")
  .group('time_group')
  .order('time_group')
  .empty?
# It seems that the Exists? request generated by AR (SELECT 1 as one.....) when calling .empty? tries to order/group by time_group like the original request but it does not exist in this context so it fails

#Succeeds because it does not trigger the Exists? request
MyModel
  .select(""DATE_TRUNC('day', time) + ((date_part('hour', time)::integer) || ' hour')::interval AS time_group, AVG(value) AS value_average"")
  .group('time_group')
  .order('time_group')
  .length.zero?
```

DISCLAIMER: In the Rails console, if you store this request in a variable, then perform `.empty?` on this variable, will not reproduce the issue because AR will return the result of the request as soon as executed in the console. this is why i'm pasting again the full request for each test so it's actually reproducible in the console.


### Expected behavior

I think the Exists? request generated to verify that the model exists when calling `empty?` should add the original computed column to the selected fields so it does not fail. 

This error was very hard to understand, especially that the Exists? requests that are triggered when using certain methods on AR::Collections. Also, Rubocop encourages to use `empty?` instead of `length.zero?` which is completely understandable, but in the end I discovered that this is more than a simple stylistic choice, because `empty?` triggers a request, that `.length.zero?` doesn't.

### Actual behavior

Request fails with this error: 

```
[1] pry(main)>MyModel.select(""DATE_TRUNC('day', time) + ((date_part('hour', time)::integer) || ' hour')::interval AS time_group, AVG(value) AS value_average"").group('time_group').order('time_group').empty?
  MyModel Exists? (1.3ms)  SELECT 1 AS one FROM ""my_models"" GROUP BY time_group LIMIT $1  [[""LIMIT"", 1]]
  
ActiveRecord::StatementInvalid: PG::UndefinedColumn: ERROR:  column ""time_group"" does not exist
LINE 1: SELECT 1 AS one FROM ""my_models"" GROUP BY time_group LIMIT...
                                                    ^
from /bundle/ruby/2.7.0/gems/activerecord-7.0.7.2/lib/active_record/connection_adapters/postgresql_adapter.rb:768:in `exec_params'
Caused by PG::UndefinedColumn: ERROR:  column ""time_group"" does not exist
LINE 1: SELECT 1 AS one FROM ""my_models"" GROUP BY time_group LIMIT...
```


### System configuration
**Rails version**: 7.0.7.2

**Ruby version**: ruby 2.7.7p221 (2022-11-24 revision 168ec2b1e5)
"
49672,`ConnectionNotEstablished` when accessing column data with `check_schema_cache_dump_version = false` on postgres,Earlopain,"activerecord, With reproduction steps",2023-10-17T14:29:45Z,2023-10-19T20:40:37Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

I started looking into the schema cache functionality that Rails offers. When loading the cache and setting `check_schema_cache_dump_version` to false, accessing column information still queries the database somewhere.

This is not the case on main anymore. Perhaps because of #49378, #49415 or similar work that has been done in that regard.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.0""
  # Passes on main
  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""psych"", ""5.1.1.1""
  gem ""pg""
end

require ""active_record/railtie""
require ""minitest/autorun""
require ""logger""

class TestApp < Rails::Application
  config.load_defaults 7.1
  config.eager_load = false
  config.root = __dir__

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  config.active_record.check_schema_cache_dump_version = false
end

schema_yml = <<~YML
  --- !ruby/object:ActiveRecord::ConnectionAdapters::SchemaCache
  columns:
    ar_internal_metadata:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: key
      sql_type_metadata: &1 !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
        delegate_dc_obj: !ruby/object:ActiveRecord::ConnectionAdapters::SqlTypeMetadata
          sql_type: character varying
          type: :string
          limit:
          precision:
          scale:
        oid: 1043
        fmod: -1
      'null': false
      default:
      default_function:
      collation:
      comment:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: value
      sql_type_metadata: *1
      'null': true
      default:
      default_function:
      collation:
      comment:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: created_at
      sql_type_metadata: &2 !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
        delegate_dc_obj: !ruby/object:ActiveRecord::ConnectionAdapters::SqlTypeMetadata
          sql_type: timestamp(6) with time zone
          type: :datetime
          limit:
          precision: 6
          scale:
        oid: 1184
        fmod: 6
      'null': false
      default:
      default_function:
      collation:
      comment:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: updated_at
      sql_type_metadata: *2
      'null': false
      default:
      default_function:
      collation:
      comment:
    posts:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial: true
      generated: ''
      name: id
      sql_type_metadata: !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
        delegate_dc_obj: !ruby/object:ActiveRecord::ConnectionAdapters::SqlTypeMetadata
          sql_type: bigint
          type: :integer
          limit: 8
          precision:
          scale:
        oid: 20
        fmod: -1
      'null': false
      default:
      default_function: nextval('posts_id_seq'::regclass)
      collation:
      comment:
    schema_migrations:
    - !ruby/object:ActiveRecord::ConnectionAdapters::PostgreSQL::Column
      serial:
      generated: ''
      name: version
      sql_type_metadata: *1
      'null': false
      default:
      default_function:
      collation:
      comment:
  primary_keys:
    ar_internal_metadata: key
    posts: id
    schema_migrations: version
  data_sources:
    ar_internal_metadata: true
    posts: true
    schema_migrations: true
  indexes:
    ar_internal_metadata: []
    posts: []
    schema_migrations: []
  version: 20230922142507
  database_version: 150004
YML

file = Tempfile.new([""schema"" "".yml""])
file.write(schema_yml)
file.rewind

ENV[""DATABASE_URL""] = ""postgresql://localhost:5432/doesnt_exist""
Rails.application.initialize!

class Post < ActiveRecord::Base
end

cache = ActiveRecord::ConnectionAdapters::SchemaCache._load_from(file.path)
ActiveRecord::Base.connection_pool.schema_reflection.set_schema_cache(cache)

class BugTest < ActiveSupport::TestCase
  def test_association_stuff
    assert_nothing_raised do
      assert_equal([""id""], Post.column_names)
    end
  end
end
```

### Expected behavior
No attempted connection to the database.

### Actual behavior
Attempted connection to the database.

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2
"
49671,AR nullifies one of the primary_key if we nullify the belongs_to association with composite_keys  ,prog-supdex,"activerecord, With reproduction steps",2023-10-17T11:37:53Z,2023-11-09T20:07:49Z,,"### Steps to reproduce


```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :organizations do
  end

  create_table :items, primary_key: %i[id organization_id] do |t|
    t.integer :id, null: false
    t.integer :organization_id, null: false
    t.integer :group_id
  end
end

class Organization < ActiveRecord::Base
end

class Item < ActiveRecord::Base
  self.primary_key = %i[id organization_id]

  belongs_to :organization
  belongs_to :group,
             class_name: 'Item',
             optional: true,
             query_constraints: %i[group_id organization_id]
end

class BugTest < Minitest::Test
  def test_nullify_association
    organization = Organization.create!
    first_item = Item.create!(id: [1, organization.id])

    second_item = Item.create!(id: [2, organization.id])
    second_item.group = first_item
    second_item.save!

    second_item.group = nil
    
    refute_nil(second_item.organization_id)
    assert_nil(second_item.group_id)
  end
  
  def test_adding_association
    organization = Organization.create!
    first_item = Item.create!(id: [1, organization.id])

    second_item = Item.new
    second_item.group = first_item

    assert_nil(second_item.organization_id)
    assert_equal(second_item.group_id, first_item.id.first)
  end
end
```


### Expected behavior

The expected behaviour for the `test_nullify_association` case is not nullifying the composite `primary_keys` of the Item record.

```  
#<Item id: 2, organization_id: 1, group_id: nil>
```


The expected behaviour for the `test_adding_association` case doesn't add an `organization_id`

```
#<Item id: nil, organization_id: nil, group_id: 1>
```

### Actual behavior

In the case `test_nullify_association` we get one of the Item's composite primary_keys `organization_id` as nil

```
#<Item id: 2, organization_id: nil, group_id: nil>
```


In the case `test_adding_association` we get filled field `organization_id`

```
#<Item id: nil, organization_id: 1, group_id: 1>
```

### System configuration
**Rails version**: 7.1.1 and also main

**Ruby version:** 3.2.2
"
49670,Unsafe implementation of `==(other)` method of AttributeSet,DmitryPogrebnoy,activemodel,2023-10-17T08:19:55Z,2023-10-20T21:26:48Z,2023-10-20T21:26:48Z,"### Steps to reproduce

There is a problem with the implementation of method `==(other)` of AttributeSet.
See https://github.com/rails/rails/blob/e4e242685efc74e4bacccd5c5878bc671fd63fb7/activemodel/lib/active_model/attribute_set.rb#L106-L108

So if you try to use it like this: `attribute_set == null`, then you get an NoMethodException.

The steps for reproduction are clear:
1. Get an instance of `AttributeSet` or `LazyAttributeSet`.
2. Suppose you have and instance AttributeSet in the variable `my_attribute_set`. Invoke the code below
```ruby
my_attribute_set == nil
```

### Expected behavior
It should return false. And be safe for any other instances

### Actual behavior
NoMethodException is thrown

### System configuration
**Rails version**: Rails 7

**Ruby version**: 2.7.8
"
49657,`TypeError: wrong argument type Integer` when using `prefetch_primary_key?`,nicoco007,"activerecord, attached PR",2023-10-16T20:32:28Z,2023-11-10T19:53:34Z,2023-11-10T19:53:34Z,"We're using `prefetch_primary_key?` and `next_sequence_value` in a potentially unorthodox way in our project. It worked fine previously, but as of 7.1.0 we get the following error when creating a record:

```
TypeError: wrong argument type Integer (must respond to :each)
    bundler/gems/rails-2872d55a3be1/activerecord/lib/active_record/persistence.rb:1256:in `zip'
```

It seems be caused by #48241 which [returns the prefetched ID as-is](https://github.com/Shopify/rails/blob/c92933265efce7faa77767bf7f6ac0532312fd4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb#L192) even if a list of `returning` columns is specified. It looks like `_create_record` in `persistence.rb` expects a list of values corresponding to the columns to be returned, so when `_insert_record` returns just the integer it blows up.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
Note the return values of `prefetch_primary_key?` and `next_sequence_value` here are just placeholders for actual logic.
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
  class << self
    def prefetch_primary_key?
      true
    end

    def next_sequence_value
      Random.rand(1000000)
    end
  end
end

class BugTest < Minitest::Test
  def test_prefetch_primary_key
    Post.create!
  end
end
```

### Expected behavior
Model is created with the ID returned by `next_sequence_value`.

### Actual behavior
`TypeError` deep inside Rails.

### System configuration
**Rails version**: 7.1.1 & latest `main` as of writing (2872d55)

**Ruby version**: 3.2.2
"
49656,action_mailer.asset_host is missing protocol/scheme (http/https),mikevoets,"actionmailer, attached PR, good first issue",2023-10-16T20:27:43Z,2023-10-28T00:31:40Z,2023-10-25T13:37:37Z,"## Overview

According to the [Action Mailer documentation](https://guides.rubyonrails.org/v5.1/action_mailer_basics.html), `action_mailer.asset_host` needs to have a value with the protocol or ""scheme"", e.g. `https://`. I have also experienced that if we omit the protocol, images sourced from our CDN aren't included in emails.

However, in the [Rails documentation](https://guides.rubyonrails.org/asset_pipeline.html), it's advised that `asset_host` is without the protocol. 

Rails also claims that setting `config.asset_host` is a shorthand for setting `config.action_controller.asset_host` and `config.action_mailer.asset_host`, but the latter won't work if you omit the protocol.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  ruby '3.0.5'
  source 'https://rubygems.org'
  gem 'rails', '7.0.8'
end

require 'rails/all'

module MyApplication
  class Application < Rails::Application
    config.load_defaults 7.0
    config.asset_host = 'example.com'
  end
end

Rails.application.initialize!

puts Rails.configuration.action_mailer.asset_host
```

### Expected behavior

I expect `Rails.configuration.action_mailer.asset_host` to return `https://example.com`

### Actual behavior

`Rails.configuration.action_mailer.asset_host` returns `example.com`

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.0.5
"
49651,ActiveRecord: upsert with Postgres adapter fails for very large integers,Catsuko,activerecord,2023-10-16T12:38:19Z,2023-10-17T13:43:45Z,,"It seems like a [security fix for the Postgres adapter](https://discuss.rubyonrails.org/t/cve-2022-44566-possible-denial-of-service-vulnerability-in-activerecords-postgresql-adapter/82119) is causing some issues when upserting large integers. It will raise an error for integers larger than signed 64 bit.

I followed the code into the `InsertAll` object, where [this line](https://github.com/rails/rails/blob/v7.0.4.1/activerecord/lib/active_record/insert_all.rb#L203) was converting my value to an `Integer` which would then be caught and error'd by the[ int range check related to the security issue](https://github.com/rails/rails/blob/v7.0.4.1/activerecord/lib/active_record/connection_adapters/postgresql/quoting.rb#L25-L39).

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""postgresql"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :beaches, force: true do |t|
    t.string ""name"", null: false
    t.decimal ""grains_of_sand_count"", precision: 39, null: false
    t.index [""name""], name: ""index_on_name"", unique: true
  end
end

class Beach < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_can_create_and_update
    beach = Beach.create!(name: ""Dingo"", grains_of_sand_count: 1e30)
    beach.update!(grains_of_sand_count: 1e30 + 5)
  end

  def test_can_query
    Beach.where(grains_of_sand_count: 1e30).count
  end

  def test_can_query_range
    Beach.where(grains_of_sand_count: ..1e30).count
  end

  def test_can_query_raw
    Beach.connection.select_all(
      Beach.sanitize_sql([""SELECT 1 FROM beaches WHERE grains_of_sand_count > :count"", count: 1e30])
    )
  end

  # Fails
  def test_can_upsert
    beach = Beach.create!(name: ""Airlie"", grains_of_sand_count: 1e30)
    Beach.upsert(
      { name: ""Airlie"", grains_of_sand_count: 1e30 + 25 }, unique_by: :name
    )
  end
end

```

### Expected behavior

Upsert should create or update the record

### Actual behavior

Upsert fails with error:

```
ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting::IntegerOutOf64BitRange: Provided value outside of the range of a signed 64bit integer.
```

### System configuration
**Rails version**: 7.0.4.1
**Ruby version**: 3.2.0


"
49650,Active Storage `test_analyzing_a_video_without_a_video_stream` fails using Ubuntu 23.10,yahonda,activestorage,2023-10-16T09:33:02Z,2023-10-31T17:29:48Z,2023-10-31T17:29:48Z,"### Steps to reproduce
Install Ubuntu 23.10

```ruby
git clone https://github.com/rails/rails
cd rails/activestorage
bundle install
bin/test test/analyzer/video_analyzer_test.rb -n test_analyzing_a_video_without_a_video_stream
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ bin/test test/analyzer/video_analyzer_test.rb -n test_analyzing_a_video_without_a_video_stream
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/httpclient-2.8.3/lib/httpclient/ssl_config.rb:370: warning: assigned but unused variable - pathlen
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/httpclient-2.8.3/lib/httpclient/ssl_config.rb:51: warning: method redefined; discarding old initialize
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/httpclient-2.8.3/lib/httpclient/ssl_config.rb:58: warning: method redefined; discarding old add_cert
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/httpclient-2.8.3/lib/httpclient/ssl_config.rb:58: warning: method redefined; discarding old add_file
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/httpclient-2.8.3/lib/httpclient/ssl_config.rb:58: warning: method redefined; discarding old add_path
Missing service configuration file in test/service/configurations.yml
/home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/turbo-rails-1.3.2/app/models/concerns/turbo/broadcastable.rb:84: warning: `**' interpreted as argument prefix
== 20170806125915 CreateActiveStorageTables: migrating ========================
-- create_table(:active_storage_blobs, {:id=>:primary_key})
   -> 0.0008s
-- create_table(:active_storage_attachments, {:id=>:primary_key})
   -> 0.0007s
-- create_table(:active_storage_variant_records, {:id=>:primary_key})
   -> 0.0005s
== 20170806125915 CreateActiveStorageTables: migrated (0.0022s) ===============

==  ActiveStorageCreateUsers: migrating =======================================
-- create_table(:users)
   -> 0.0004s
==  ActiveStorageCreateUsers: migrated (0.0004s) ==============================

==  ActiveStorageCreateGroups: migrating ======================================
-- create_table(:groups)
   -> 0.0003s
==  ActiveStorageCreateGroups: migrated (0.0003s) =============================

Run options: -n test_analyzing_a_video_without_a_video_stream --seed 7120

# Running:

F

Failure:
ActiveStorage::Analyzer::VideoAnalyzerTest#test_analyzing_a_video_without_a_video_stream [/home/yahonda/src/github.com/rails/rails/activestorage/test/analyzer/video_analyzer_test.rb:67]:
Expected: 1.022
  Actual: 1.0


bin/test test/analyzer/video_analyzer_test.rb:61



Finished in 0.092548s, 10.8052 runs/s, 54.0261 assertions/s.
1 runs, 5 assertions, 1 failures, 0 errors, 0 skips
$
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
49649,rails 7.1 app:update warns on config/application.rb,wlipa,railties,2023-10-16T08:20:10Z,2023-10-29T23:20:39Z,2023-10-29T23:20:38Z,"Running rails app:update to go from 7.0.8 to 7.1.1 on an app gives an error on config/application.rb.  The error is:

File unchanged! Either the supplied flag value not found or the content has already been inserted!  config/application.rb

However a change is inserted into the file. I don't know if the config/application.rb the update script generates is correct or not.

```
$ rails app:update
   identical  config/boot.rb
       exist  config
   identical  config/application.rb
   identical  config/environment.rb
       exist  config/environments
   identical  config/environments/development.rb
   identical  config/environments/production.rb
   identical  config/environments/test.rb
       exist  config/initializers
    conflict  config/initializers/assets.rb
Overwrite /Users/wlipa/Code/ruby/xyz/config/initializers/assets.rb? (enter ""h"" for help) [Ynaqdhm] n
        skip  config/initializers/assets.rb
   identical  config/initializers/content_security_policy.rb
      create  config/initializers/cors.rb
    conflict  config/initializers/filter_parameter_logging.rb
Overwrite /Users/wlipa/Code/ruby/xyz/config/initializers/filter_parameter_logging.rb? (enter ""h"" for help) [Ynaqdhm] n
        skip  config/initializers/filter_parameter_logging.rb
    conflict  config/initializers/inflections.rb
Overwrite /Users/wlipa/Code/ruby/xyz/config/initializers/inflections.rb? (enter ""h"" for help) [Ynaqdhm] n
        skip  config/initializers/inflections.rb
      create  config/initializers/new_framework_defaults_7_1.rb
   identical  config/initializers/permissions_policy.rb
      remove  config/initializers/cors.rb
File unchanged! Either the supplied flag value not found or the content has already been inserted!  config/application.rb
       exist  bin
   identical  bin/rails
   identical  bin/rake
   identical  bin/setup
       rails  active_storage:update
Copied migration 20231016080609_add_service_name_to_active_storage_blobs.active_storage.rb from active_storage
Copied migration 20231016080610_create_active_storage_variant_records.active_storage.rb from active_storage
Copied migration 20231016080611_remove_not_null_on_active_storage_blobs_checksum.active_storage.rb from active_storage

After this, check Rails upgrade guide at https://guides.rubyonrails.org/upgrading_ruby_on_rails.html for more details about upgrading your app.
$ git diff config/application.rb 
diff --git a/config/application.rb b/config/application.rb
index d8b365579..beac33fb2 100644
--- a/config/application.rb
+++ b/config/application.rb
@@ -11,6 +11,11 @@ module Xyz
     # Initialize configuration defaults for originally generated Rails version.
     config.load_defaults 7.0
 
+    # Please, add to the `ignore` list any other `lib` subdirectories that do
+    # not contain `.rb` files, or that should not be reloaded or eager loaded.
+    # Common ones are `templates`, `generators`, or `middleware`, for example.
+    config.autoload_lib(ignore: %w(assets tasks))
+
     # Configuration for the application, engines, and railties goes here.
     #
     # These settings can be overridden in specific environments using the files
$
```

The full contents of the generated config/application.rb are:

```
require_relative ""boot""

require ""rails/all""

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module Xyz
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 7.0

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    config.autoload_lib(ignore: %w(assets tasks))

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = ""Central Time (US & Canada)""
    # config.eager_load_paths << Rails.root.join(""extras"")
  end
end
```


### System configuration
**Rails version**: 7.0.8 > 7.1.1

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
"
49648,Active Support test cases fail using Ubuntu 23.10,yahonda,activesupport,2023-10-16T06:41:55Z,2023-10-17T11:41:34Z,,"### Steps to reproduce
1. Install or upgrade to Ubuntu 23.10
2. Install Ruby 3.2 or whatever Ruby version supported by Rails main branch

```ruby
git clone https://github.com/rails/rails
cd rails/activesupport
bundle install
bin/test -n ""/^(?:RangeTest#(?:test_overlap_last_exclusive)|DateAndTimeCompatibilityTest#(?:test_datetime_to_time_does_not_preserve_time_zone|test_datetime_to_time_frozen_does_not_preserve_time_zone|test_string_to_time_does_not_preserve_time_zone|test_string_to_time_frozen_does_not_preserve_time_zone|test_time_to_time_does_not_preserve_time_zone|test_time_to_time_frozen_does_not_preserve_time_zone|test_twz_to_time_does_not_preserve_time_zone|test_twz_to_time_frozen_does_not_preserve_time_zone)|DateExtCalculationsTest#(?:test_xmlschema)|DateTimeExtCalculationsTest#(?:test_current_returns_date_today_when_zone_is_not_set|test_current_returns_time_zone_today_when_zone_is_set|test_getlocal|test_localtime|test_to_time)|DurationTest#(?:test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set)|StringConversionsTest#(?:test_daylight_savings_string_to_time_when_current_time_is_daylight_savings|test_daylight_savings_string_to_time_when_current_time_is_standard_time|test_partial_string_to_time_when_current_time_is_daylight_savings|test_partial_string_to_time_when_current_time_is_standard_time|test_standard_time_string_to_time_when_current_time_is_daylight_savings|test_standard_time_string_to_time_when_current_time_is_standard_time|test_string_to_time_utc_offset)|TestJSONEncoding#(?:test_time_to_json_includes_local_offset)|TimeExtCalculationsTest#(?:test_advance_preserves_offset_for_local_times_around_end_of_dst|test_advance_preserves_offset_for_zoned_times_around_end_of_dst|test_at_with_datetime_returns_local_time|test_at_with_local_time|test_at_with_time_with_zone_returns_local_time|test_change_preserves_offset_for_local_times_around_end_of_dst|test_change_preserves_offset_for_zoned_times_around_end_of_dst|test_daylight_savings_time_crossings_backward_end|test_daylight_savings_time_crossings_backward_start|test_daylight_savings_time_crossings_forward_end|test_daylight_savings_time_crossings_forward_start|test_formatted_offset_with_local|test_future_with_time_current_as_time_local|test_future_with_time_current_as_time_with_zone|test_past_with_time_current_as_time_local|test_past_with_time_current_as_time_with_zone|test_seconds_since_midnight_at_daylight_savings_time_end|test_seconds_since_midnight_at_daylight_savings_time_start|test_seconds_until_end_of_day_at_daylight_savings_time_end|test_seconds_until_end_of_day_at_daylight_savings_time_start|test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst|test_to_fs)|TimeWithZoneMethodsForTimeAndDateTimeTest#(?:test_current_returns_time_zone_now_when_zone_set|test_in_time_zone_with_time_local_instance)|TimeWithZoneTest#(?:test_future_with_time_current_as_time_local|test_past_with_time_current_as_time_local|test_to_time_with_preserve_timezone|test_to_time_without_preserve_timezone|test_utc\\?)|TimeZoneTest#(?:test_map_kyiv_to_tzinfo|test_map_rangoon_to_tzinfo|test_now|test_now_enforces_spring_dst_rules|test_parse_with_day_omitted|test_strptime_with_day_omitted))$/""
```

### Expected behavior
It should pass.

### Actual behavior
It gets 53 failures and 5 errors as follows.

```ruby
$ bin/test -n ""/^(?:RangeTest#(?:test_overlap_last_exclusive)|DateAndTimeCompatibilityTest#(?:test_datetime_to_time_does_not_preserve_time_zone|test_datetime_to_time_frozen_does_not_preserve_time_zone|test_string_to_time_does_not_preserve_time_zone|test_string_to_time_frozen_does_not_preserve_time_zone|test_time_to_time_does_not_preserve_time_zone|test_time_to_time_frozen_does_not_preserve_time_zone|test_twz_to_time_does_not_preserve_time_zone|test_twz_to_time_frozen_does_not_preserve_time_zone)|DateExtCalculationsTest#(?:test_xmlschema)|DateTimeExtCalculationsTest#(?:test_current_returns_date_today_when_zone_is_not_set|test_current_returns_time_zone_today_when_zone_is_set|test_getlocal|test_localtime|test_to_time)|DurationTest#(?:test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set)|StringConversionsTest#(?:test_daylight_savings_string_to_time_when_current_time_is_daylight_savings|test_daylight_savings_string_to_time_when_current_time_is_standard_time|test_partial_string_to_time_when_current_time_is_daylight_savings|test_partial_string_to_time_when_current_time_is_standard_time|test_standard_time_string_to_time_when_current_time_is_daylight_savings|test_standard_time_string_to_time_when_current_time_is_standard_time|test_string_to_time_utc_offset)|TestJSONEncoding#(?:test_time_to_json_includes_local_offset)|TimeExtCalculationsTest#(?:test_advance_preserves_offset_for_local_times_around_end_of_dst|test_advance_preserves_offset_for_zoned_times_around_end_of_dst|test_at_with_datetime_returns_local_time|test_at_with_local_time|test_at_with_time_with_zone_returns_local_time|test_change_preserves_offset_for_local_times_around_end_of_dst|test_change_preserves_offset_for_zoned_times_around_end_of_dst|test_daylight_savings_time_crossings_backward_end|test_daylight_savings_time_crossings_backward_start|test_daylight_savings_time_crossings_forward_end|test_daylight_savings_time_crossings_forward_start|test_formatted_offset_with_local|test_future_with_time_current_as_time_local|test_future_with_time_current_as_time_with_zone|test_past_with_time_current_as_time_local|test_past_with_time_current_as_time_with_zone|test_seconds_since_midnight_at_daylight_savings_time_end|test_seconds_since_midnight_at_daylight_savings_time_start|test_seconds_until_end_of_day_at_daylight_savings_time_end|test_seconds_until_end_of_day_at_daylight_savings_time_start|test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst|test_to_fs)|TimeWithZoneMethodsForTimeAndDateTimeTest#(?:test_current_returns_time_zone_now_when_zone_set|test_in_time_zone_with_time_local_instance)|TimeWithZoneTest#(?:test_future_with_time_current_as_time_local|test_past_with_time_current_as_time_local|test_to_time_with_preserve_timezone|test_to_time_without_preserve_timezone|test_utc\\?)|TimeZoneTest#(?:test_map_kyiv_to_tzinfo|test_map_rangoon_to_tzinfo|test_now|test_now_enforces_spring_dst_rules|test_parse_with_day_omitted|test_strptime_with_day_omitted))$/""
WARNING: Nokogiri was built against libxml version 2.11.5, but has dynamically loaded 2.9.14

Run options: -n ""/^(?:RangeTest#(?:test_overlap_last_exclusive)|DateAndTimeCompatibilityTest#(?:test_datetime_to_time_does_not_preserve_time_zone|test_datetime_to_time_frozen_does_not_preserve_time_zone|test_string_to_time_does_not_preserve_time_zone|test_string_to_time_frozen_does_not_preserve_time_zone|test_time_to_time_does_not_preserve_time_zone|test_time_to_time_frozen_does_not_preserve_time_zone|test_twz_to_time_does_not_preserve_time_zone|test_twz_to_time_frozen_does_not_preserve_time_zone)|DateExtCalculationsTest#(?:test_xmlschema)|DateTimeExtCalculationsTest#(?:test_current_returns_date_today_when_zone_is_not_set|test_current_returns_time_zone_today_when_zone_is_set|test_getlocal|test_localtime|test_to_time)|DurationTest#(?:test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set)|StringConversionsTest#(?:test_daylight_savings_string_to_time_when_current_time_is_daylight_savings|test_daylight_savings_string_to_time_when_current_time_is_standard_time|test_partial_string_to_time_when_current_time_is_daylight_savings|test_partial_string_to_time_when_current_time_is_standard_time|test_standard_time_string_to_time_when_current_time_is_daylight_savings|test_standard_time_string_to_time_when_current_time_is_standard_time|test_string_to_time_utc_offset)|TestJSONEncoding#(?:test_time_to_json_includes_local_offset)|TimeExtCalculationsTest#(?:test_advance_preserves_offset_for_local_times_around_end_of_dst|test_advance_preserves_offset_for_zoned_times_around_end_of_dst|test_at_with_datetime_returns_local_time|test_at_with_local_time|test_at_with_time_with_zone_returns_local_time|test_change_preserves_offset_for_local_times_around_end_of_dst|test_change_preserves_offset_for_zoned_times_around_end_of_dst|test_daylight_savings_time_crossings_backward_end|test_daylight_savings_time_crossings_backward_start|test_daylight_savings_time_crossings_forward_end|test_daylight_savings_time_crossings_forward_start|test_formatted_offset_with_local|test_future_with_time_current_as_time_local|test_future_with_time_current_as_time_with_zone|test_past_with_time_current_as_time_local|test_past_with_time_current_as_time_with_zone|test_seconds_since_midnight_at_daylight_savings_time_end|test_seconds_since_midnight_at_daylight_savings_time_start|test_seconds_until_end_of_day_at_daylight_savings_time_end|test_seconds_until_end_of_day_at_daylight_savings_time_start|test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst|test_to_fs)|TimeWithZoneMethodsForTimeAndDateTimeTest#(?:test_current_returns_time_zone_now_when_zone_set|test_in_time_zone_with_time_local_instance)|TimeWithZoneTest#(?:test_future_with_time_current_as_time_local|test_past_with_time_current_as_time_local|test_to_time_with_preserve_timezone|test_to_time_without_preserve_timezone|test_utc\\?)|TimeZoneTest#(?:test_map_kyiv_to_tzinfo|test_map_rangoon_to_tzinfo|test_now|test_now_enforces_spring_dst_rules|test_parse_with_day_omitted|test_strptime_with_day_omitted))$/"" --seed 18207

# Running:

F

Failure:
StringConversionsTest#test_standard_time_string_to_time_when_current_time_is_standard_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:631]:
Expected: 2012-01-01 13:00:00 +0000
  Actual: 2012-01-01 10:00:00 -0800


bin/test test/core_ext/string_ext_test.rb:626

F

Failure:
StringConversionsTest#test_string_to_time_utc_offset [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:604]:
Expected: -18000
  Actual: 0


bin/test test/core_ext/string_ext_test.rb:600

F

Failure:
StringConversionsTest#test_standard_time_string_to_time_when_current_time_is_daylight_savings [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:650]:
Expected: 2012-01-01 13:00:00 +0000
  Actual: 2012-01-01 10:00:00 -0800


bin/test test/core_ext/string_ext_test.rb:645

F

Failure:
StringConversionsTest#test_partial_string_to_time_when_current_time_is_standard_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:707]:
Expected: 2012-01-01 06:00:00 +0000
  Actual: 2012-01-01 10:00:00 -0100


bin/test test/core_ext/string_ext_test.rb:702

F

Failure:
StringConversionsTest#test_partial_string_to_time_when_current_time_is_daylight_savings [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:730]:
Expected: 2012-07-01 07:00:00 +0000
  Actual: 2012-07-01 10:00:00 -0100


bin/test test/core_ext/string_ext_test.rb:725

F

Failure:
StringConversionsTest#test_daylight_savings_string_to_time_when_current_time_is_daylight_savings [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:688]:
Expected: 2012-07-01 13:00:00 +0000
  Actual: 2012-07-01 10:00:00 -0700


bin/test test/core_ext/string_ext_test.rb:683

F

Failure:
StringConversionsTest#test_daylight_savings_string_to_time_when_current_time_is_standard_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/string_ext_test.rb:669]:
Expected: 2012-07-01 13:00:00 +0000
  Actual: 2012-07-01 10:00:00 -0700


bin/test test/core_ext/string_ext_test.rb:664

E

Error:
TimeWithZoneTest#test_utc?:
NoMethodError: undefined method `period_for_utc' for nil:NilClass
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/time_with_zone.rb:73:in `period'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/time_with_zone.rb:134:in `zone'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/time_with_zone.rb:106:in `utc?'
    /home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:69:in `test_utc?'


bin/test test/core_ext/time_with_zone_test.rb:64

F

Failure:
TimeWithZoneTest#test_past_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:322]:
Expected: true
  Actual: false


bin/test test/core_ext/time_with_zone_test.rb:319

F

Failure:
TimeWithZoneTest#test_future_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:341]:
Expected: false
  Actual: true


bin/test test/core_ext/time_with_zone_test.rb:338

F

Failure:
TimeWithZoneTest#test_to_time_with_preserve_timezone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:527]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 1999-12-31 19:00:00 -0500


bin/test test/core_ext/time_with_zone_test.rb:520

F

Failure:
TimeWithZoneTest#test_to_time_without_preserve_timezone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:540]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 2000-01-01 00:00:00 +0000


bin/test test/core_ext/time_with_zone_test.rb:533

F

Failure:
TimeExtCalculationsTest#test_formatted_offset_with_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1110]:
Expected: ""-05:00""
  Actual: ""+00:00""


bin/test test/core_ext/time_ext_test.rb:1108

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_forward_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:297]:
st+24.hours=>dt.
Expected: 2005-04-03 20:27:00 +0000
  Actual: 2005-04-03 19:27:00 +0000


bin/test test/core_ext/time_ext_test.rb:294

F

Failure:
TimeExtCalculationsTest#test_time_created_with_local_constructor_cannot_represent_times_during_hour_skipped_by_dst [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1240]:
Expected: 2006-04-02 03:00:00 +0000
  Actual: 2006-04-02 02:00:00 +0000


bin/test test/core_ext/time_ext_test.rb:1236

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_backward_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:239]:
st-24.hours=>dt.
Expected: 2005-10-29 05:03:00 +0000
  Actual: 2005-10-29 04:03:00 +0000


bin/test test/core_ext/time_ext_test.rb:236

F

Failure:
TimeExtCalculationsTest#test_advance_preserves_offset_for_local_times_around_end_of_dst [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:674]:
Expected 2005-10-30 01:00:00 +0000 to be < 2005-10-30 01:00:00 +0000.


bin/test test/core_ext/time_ext_test.rb:666

F

Failure:
TimeExtCalculationsTest#test_seconds_since_midnight_at_daylight_savings_time_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:43]:
just after DST end.
Expected: 10801
  Actual: 7201.0


bin/test test/core_ext/time_ext_test.rb:38

E

Error:
TimeExtCalculationsTest#test_advance_preserves_offset_for_zoned_times_around_end_of_dst:
ArgumentError: Invalid Timezone: US/Eastern
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:84:in `find_zone!'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:42:in `zone='
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test_helpers.rb:6:in `with_tz_default'
    /home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:699:in `test_advance_preserves_offset_for_zoned_times_around_end_of_dst'


bin/test test/core_ext/time_ext_test.rb:698

E

Error:
TimeExtCalculationsTest#test_change_preserves_offset_for_zoned_times_around_end_of_dst:
ArgumentError: Invalid Timezone: US/Eastern
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:84:in `find_zone!'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/core_ext/time/zones.rb:42:in `zone='
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test_helpers.rb:6:in `with_tz_default'
    /home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:495:in `test_change_preserves_offset_for_zoned_times_around_end_of_dst'


bin/test test/core_ext/time_ext_test.rb:494

F

Failure:
TimeExtCalculationsTest#test_future_with_time_current_as_time_with_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1090]:
Expected: true
  Actual: false


bin/test test/core_ext/time_ext_test.rb:1084

F

Failure:
TimeExtCalculationsTest#test_seconds_until_end_of_day_at_daylight_savings_time_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:75]:
just before DST start.
Expected: 75600
  Actual: 79200


bin/test test/core_ext/time_ext_test.rb:72

F

Failure:
TimeExtCalculationsTest#test_change_preserves_offset_for_local_times_around_end_of_dst [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:474]:
Expected 2005-10-30 01:00:00 +0000 to be < 2005-10-30 01:00:00 +0000.


bin/test test/core_ext/time_ext_test.rb:466

F

Failure:
TimeExtCalculationsTest#test_at_with_time_with_zone_returns_local_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1186]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 2000-01-01 00:00:00 +0000


bin/test test/core_ext/time_ext_test.rb:1183

F

Failure:
TimeExtCalculationsTest#test_future_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1077]:
Expected: false
  Actual: true


bin/test test/core_ext/time_ext_test.rb:1071

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_backward_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:216]:
dt-24.hours=>st.
Expected: 2005-04-02 03:18:00 +0000
  Actual: 2005-04-02 04:18:00 +0000


bin/test test/core_ext/time_ext_test.rb:213

F

Failure:
TimeExtCalculationsTest#test_past_with_time_current_as_time_with_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1062]:
Expected: false
  Actual: true


bin/test test/core_ext/time_ext_test.rb:1057

F

Failure:
TimeExtCalculationsTest#test_seconds_until_end_of_day_at_daylight_savings_time_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:90]:
just before DST end.
Expected: 86400
  Actual: 82800


bin/test test/core_ext/time_ext_test.rb:86

F

Failure:
TimeExtCalculationsTest#test_at_with_local_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1213]:
--- expected
+++ actual
@@ -1 +1,3 @@
-""EST""
+# encoding: US-ASCII
+#    valid: true
+""""



bin/test test/core_ext/time_ext_test.rb:1210

F

Failure:
TimeExtCalculationsTest#test_past_with_time_current_as_time_local [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1050]:
Expected: true
  Actual: false


bin/test test/core_ext/time_ext_test.rb:1044

F

Failure:
TimeExtCalculationsTest#test_at_with_datetime_returns_local_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:1156]:
Expected: 1999-12-31 19:00:00 +0000
  Actual: 2000-01-01 00:00:00 +0000


bin/test test/core_ext/time_ext_test.rb:1153

F

Failure:
TimeExtCalculationsTest#test_daylight_savings_time_crossings_forward_end [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:359]:
dt+24.hours=>st.
Expected: 2005-10-30 23:45:00 +0000
  Actual: 2005-10-31 00:45:00 +0000


bin/test test/core_ext/time_ext_test.rb:356

F

Failure:
TimeExtCalculationsTest#test_to_fs [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:845]:
--- expected
+++ actual
@@ -1 +1 @@
-""Thu, 05 Feb 2009 14:30:05 -0600""
+""Thu, 05 Feb 2009 14:30:05 +0000""



bin/test test/core_ext/time_ext_test.rb:829

F

Failure:
TimeExtCalculationsTest#test_seconds_since_midnight_at_daylight_savings_time_start [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_ext_test.rb:28]:
just after DST start.
Expected: 7201
  Actual: 10801.0


bin/test test/core_ext/time_ext_test.rb:24

F

Failure:
DurationTest#test_since_and_ago_anchored_to_time_zone_now_when_time_zone_is_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/duration_test.rb:306]:
Expected: 2000-01-01 00:00:05 UTC
  Actual: 1999-12-31 19:00:05 UTC


bin/test test/core_ext/duration_test.rb:300

F

Failure:
TimeWithZoneMethodsForTimeAndDateTimeTest#test_in_time_zone_with_time_local_instance [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:1145]:
--- expected
+++ actual
@@ -1 +1 @@
-""Fri, 31 Dec 1999 15:00:00.000000000 AKST -09:00""
+""Fri, 31 Dec 1999 10:00:00.000000000 AKST -09:00""



bin/test test/core_ext/time_with_zone_test.rb:1142

F

Failure:
TimeWithZoneMethodsForTimeAndDateTimeTest#test_current_returns_time_zone_now_when_zone_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/time_with_zone_test.rb:1284]:
Expected: 2000-01-01 00:00:00 UTC
  Actual: 1999-12-31 19:00:00 UTC


bin/test test/core_ext/time_with_zone_test.rb:1278

F

Failure:
DateExtCalculationsTest#test_xmlschema [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_ext_test.rb:320]:
Expected /^1980-02-28T00:00:00-05:?00$/ to match ""1980-02-28T00:00:00+00:00"".


bin/test test/core_ext/date_ext_test.rb:318

.F

Failure:
DateAndTimeCompatibilityTest#test_time_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:69]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:61

F

Failure:
DateAndTimeCompatibilityTest#test_twz_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:161]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:152

F

Failure:
DateAndTimeCompatibilityTest#test_twz_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:207]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:198

F

Failure:
DateAndTimeCompatibilityTest#test_time_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:40]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:32

F

Failure:
DateAndTimeCompatibilityTest#test_string_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:270]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:262

F

Failure:
DateAndTimeCompatibilityTest#test_string_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:243]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:235

F

Failure:
DateAndTimeCompatibilityTest#test_datetime_to_time_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:97]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:89

F

Failure:
DateAndTimeCompatibilityTest#test_datetime_to_time_frozen_does_not_preserve_time_zone [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_and_time_compatibility_test.rb:124]:
Expected: -14400
  Actual: 0


bin/test test/core_ext/date_and_time_compatibility_test.rb:116

F

Failure:
DateTimeExtCalculationsTest#test_current_returns_time_zone_today_when_zone_is_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:384]:
--- expected
+++ actual
@@ -1 +1 @@
-Fri, 31 Dec 1999 23:59:59 -0500
+Fri, 31 Dec 1999 18:59:59 -0500



bin/test test/core_ext/date_time_ext_test.rb:380

F

Failure:
DateTimeExtCalculationsTest#test_to_time [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:88]:
Expected: 2005-02-21 05:11:12 +0000
  Actual: 2005-02-21 10:11:12 +0000


bin/test test/core_ext/date_time_ext_test.rb:83

F

Failure:
DateTimeExtCalculationsTest#test_getlocal [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:69]:
Expected: 2016-03-11 10:11:12 +0000
  Actual: 2016-03-11 15:11:12 +0000


bin/test test/core_ext/date_time_ext_test.rb:66

F

Failure:
DateTimeExtCalculationsTest#test_current_returns_date_today_when_zone_is_not_set [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:375]:
--- expected
+++ actual
@@ -1 +1 @@
-Fri, 31 Dec 1999 23:59:59 -0500
+Fri, 31 Dec 1999 23:59:59 +0000



bin/test test/core_ext/date_time_ext_test.rb:372

F

Failure:
DateTimeExtCalculationsTest#test_localtime [/home/yahonda/src/github.com/rails/rails/activesupport/test/core_ext/date_time_ext_test.rb:60]:
Expected: 2016-03-11 10:11:12 +0000
  Actual: 2016-03-11 15:11:12 +0000


bin/test test/core_ext/date_time_ext_test.rb:57

F

Failure:
TimeZoneTest#test_now [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:95]:
Expected: 2000-01-01 05:00:00 UTC
  Actual: 2000-01-01 00:00:00 UTC


bin/test test/time_zone_test.rb:90

E

Error:
TimeZoneTest#test_map_kyiv_to_tzinfo:
NoMethodError: undefined method `tzinfo' for nil:NilClass
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:54:in `block (2 levels) in <class:TimeZoneTest>'


bin/test test/time_zone_test.rb:52

F

Failure:
TimeZoneTest#test_now_enforces_spring_dst_rules [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:108]:
Expected: 2006-04-02 03:00:00 UTC
  Actual: 2006-04-01 21:00:00 UTC


bin/test test/time_zone_test.rb:101

F

Failure:
TimeZoneTest#test_strptime_with_day_omitted [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:671]:
--- expected
+++ actual
@@ -1 +1 @@
-2000-02-01 00:00:00 +0000
+Tue, 01 Feb 2000 00:00:00.000000000 EST -05:00



bin/test test/time_zone_test.rb:668

E

Error:
TimeZoneTest#test_map_rangoon_to_tzinfo:
NoMethodError: undefined method `tzinfo' for nil:NilClass
    /home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:54:in `block (2 levels) in <class:TimeZoneTest>'


bin/test test/time_zone_test.rb:52

F

Failure:
TimeZoneTest#test_parse_with_day_omitted [/home/yahonda/src/github.com/rails/rails/activesupport/test/time_zone_test.rb:443]:
--- expected
+++ actual
@@ -1 +1 @@
-2000-02-01 00:00:00 +0000
+Tue, 01 Feb 2000 00:00:00.000000000 EST -05:00



bin/test test/time_zone_test.rb:440

F

Failure:
TestJSONEncoding#test_time_to_json_includes_local_offset [/home/yahonda/src/github.com/rails/rails/activesupport/test/json/encoding_test.rb:108]:
--- expected
+++ actual
@@ -1 +1 @@
-""\""2005-02-01T15:15:10.000-05:00\""""
+""\""2005-02-01T15:15:10.000+00:00\""""



bin/test test/json/encoding_test.rb:105



Finished in 0.140540s, 419.8095 runs/s, 875.1962 assertions/s.
59 runs, 123 assertions, 53 failures, 5 errors, 0 skips
$
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
49629,Autoloading regression between Rails 7.0 and 7.1,bradgessler,railties,2023-10-13T19:38:28Z,2023-10-16T16:35:02Z,2023-10-14T15:35:13Z,"### Steps to reproduce

Setup the Rails 7.1 project:

```
git clone git@github.com:bradgessler/rails-7-1-autoloading-regression.git
cd rails-7-1-autoloading-regression.git
bundle
bin/rails server
```

Then open http://localhost:3000. You should see the error. Refresh the page and you won't see the error.

Now open `./config/environments/development.rb` and change `config.eager_load`

```
  config.eager_load = true
```

Reboot the server and you'll see the Zeitwerk error message.

The path for this helper is set at https://github.com/sitepress/sitepress/blob/main/sitepress-rails/lib/sitepress/engine.rb#L29 and it lives in the Rails app at https://github.com/bradgessler/rails-7-1-autoloading-regression/blob/main/app/content/helpers/page_helper.rb

To see the behavior in Rails 7.0, run:

```
git checkout -b rails-7-1
bundle
bin/rails server
```

Load the page with the `eager_load` setting to true, then false, and you'll see that it works.

### Expected behavior

I expect for the dev environment is one of the following:

1. It continues to work, as it does in Rails 7.0
2. The Zeitwerk autoloading error is displayed immediately in the dev env

### Actual behavior

In my dev env, the helper is not initially loaded. When I refresh the page it's loaded.

Video of this behavior at https://objects.bradgessler.com/Screen-Recording-2023-10-13-at-12.09.03-PM.mov

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2
"
49620,Rails 7.1 : `with_options` now aggregates options from validations,sgara,activesupport,2023-10-13T10:47:06Z,2023-10-13T12:54:28Z,2023-10-13T12:54:27Z,"### Steps to reproduce
Using `with_options` to group multiple validations like this :
```ruby
class MyObject < ApplicationRecord
  with_options unless: -> { skip_validations? } do |object|
    object.validate :on_update_custom_validation, on: :update
    object.validate :another_custom_validation
  end
end
```

### Expected behavior
`another_custom_validation` should always run, this should be equivalent to :
```ruby
class MyObject < ApplicationRecord
  validate :on_update_custom_validation, on: :update, unless: -> { skip_validations? }
  validate :another_custom_validation, unless: -> { skip_validations? }
end
```

### Actual behavior
`another_custom_validation` runs on update, eg, it's now equivalent to :
```ruby
class MyObject < ApplicationRecord
  validate :on_update_custom_validation, on: :update, unless: -> { skip_validations? }
  validate :another_custom_validation, on: :update, unless: -> { skip_validations? }
end
```

### System configuration
**Rails version**: Rails 7.1

**Ruby version**: Ruby 3.2.2
"
49611,"InvalidAuthenticityToken Exception raised for ""null"" origin headers regardless of the protection strategy",jwright,"actionpack, more-information-needed",2023-10-12T19:24:48Z,2023-10-27T18:37:18Z,2023-10-27T18:37:18Z,"### Steps to reproduce

1. Specify the `null_session` strategy on a controller.
2. Send a POST request to an action in the controller with a ""null"" `origin` header
3. Notice that an exception is raised even though the strategy is set to `:null_session`

```ruby
# app/controllers/orders_controller.rb

class OrdersController < ActionController::Base
  protect_from_forgery with: :null_session

  def create
    # ...
  end
end
```

```ruby
# test/controllers/orders_controller_test.rb

class OrdersControllerTest < ActionDispatch::IntegrationTest
  describe ""POST /orders"" do
    describe ""without an origin header"" do
      let(:params) { {} }

      it ""should still create the order"" do
        OrdersController.stub_any_instance(:protect_against_forgery?, true) do
          post orders_path, params: params, headers: {HTTP_ORIGIN: ""null""}

          assert_response :success
        end
      end
    end
  end
end
```

### Expected behavior

I believe that the exception for a null `origin` should result in the same protection strategy specified for that controller instance. If it is set to `with: :null_session` then it should not raise an exception and should null out the session just as other issues with the authenticity token.

For endpoints where we get these exceptions raised, they are valid requests from a webhook and for some reason some have a ""null"" origin. We want to process these requests so we are forced to add something like this as a workaround:

```ruby
class OrdersController < ActionController::Base
  protect_from_forgery with: :null_session
  rescue_from ActionController::InvalidAuthenticityToken, with: :ignore

  def create
    # ...
  end

  private

  def ignore(_exception)
    # we do not care about this exception, hence the `null_session` strategy
  end
end
```

If this is in fact by design and it is in the best interest for security to have this raise an exception, then I would ask that a special error class (e.g. `UnidentifiableOrigin`) be used.

### Actual behavior

An `InvalidAuthenticityToken` exception is raised, ignoring the protection strategy. 

Source: https://github.com/rails/rails/blob/d39db5d1891f7509cde2efc425c9d69bbb77e670/actionpack/lib/action_controller/metal/request_forgery_protection.rb#L614

### System configuration
**Rails version**: 7.0.6
**Ruby version**: 2.7.5
"
49604,Rails 7.1: incorrect path when submitting form for a singular resource,jp524,"routing, attached PR",2023-10-12T13:40:59Z,2023-12-10T08:51:08Z,,"### Steps to reproduce
When submitting a form with an error, Rails 7.1 redirects to incorrect path when the resource is singular.
This may be an issue with Turbo (see expected and actual behaviors below).

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :authors, force: true do |t|
    t.string :name
  end
end

class Author < ActiveRecord::Base
  validates :name,
            format: { with: /\A[a-zA-Z0-9-]{0,39}\z/, message: 'can only contain alphanumeric characters and dashes' },
            length: { maximum: 39 }
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    resource :author, only: %i[edit update]
  end
end

class AuthorsController < ActionController::Base
  include Rails.application.routes.url_helpers

  before_action :set_author, only: %i[edit update]

  def edit; end

  def update
    if @author.update(author_params)
      redirect_to edit_author_path
    else
      render :edit, status: :unprocessable_entity
    end
  end

  private

  def set_author
    @author = Author.find(1) # Actual application would use session to find author logged in
  end

  def author_params
    params.require(:author).permit(:name)
  end
end

class BugTest < Minitest::Test
  include Rack::Test::Methods

  Author.create!(name: 'name')

  def test_author_updated_success
    patch '/author', { author: { name: 'validName' } }
    assert_equal 'http://example.org/author/edit', last_response.headers['location']
  end

  def test_author_updated_failure
    patch '/author', { author: { name: 'invalid!!!name?' } }
    assert_equal 'http://example.org/author/edit', last_response.headers['location']
  end

  private

  def app
    Rails.application
  end
end
```

### Expected behavior
The request path should be `author/edit`.
The console in Rails 7.0.8 showed
```ruby
Started PATCH ""/author"" for 127.0.0.1 at 2023-10-12 09:22:13 -0400
Processing by AuthorsController#update as TURBO_STREAM
```

### Actual behavior
The request path is `author/#{author.id}”`.
The console in Rails 7.1.0 shows
```ruby
Started PATCH ""/author.1"" for 127.0.0.1 at 2023-10-12 09:21:10 -0400
Processing by AuthorsController#update as */*
```

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.2
"
49601,Rails 7.1: nested object cannot handle its parameters properly,eroluysal,actionpack,2023-10-12T12:15:23Z,2023-10-13T22:45:08Z,2023-10-13T22:45:08Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

Rails 7.1 cannot properly handle parameters from multipart/formdata requests.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.0""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    post ""/countries"" => ""countries#create""
  end
end

class CountriesController < ActionController::Base
  include Rails.application.routes.url_helpers

  def create
    puts country_params
    render plain: ""Home""
  end

  private
    def country_params
      params.fetch(:country, {}).permit(:name, metadatum_attributes: [:title, :description])
    end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    post ""/countries"", {
      country: {
        name: ""Turkey"",
        # metadatum_attributes: {
        #   title: ""metadatum title"",
        #   description: ""metadatum description""
        # }
        ""metadatum_attributes[title]"": ""metadatum title"",
        ""metadatum_attributes[description]"": ""metadatum description"",
      }
    }
    assert last_response.ok?
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior
<!-- Tell us what should happen -->

### Actual behavior
<!-- Tell us what happens instead -->
It was working smoothly in version 7.0.8. However, after the 7.1.0 update, it gives this error on the console.

```ruby
Unpermitted parameter: :metadatum_attributes[title. Context: { controller: CountriesController, action: create, request: #<ActionDispatch::Request:0x000000010cd11ae8>, params: {""country""=>{""name""=>""Hello"", ""image""=>#<ActionDispatch::Http::UploadedFile:0x00000001101349d8 @tempfile=#<Tempfile:/var/folders/73/lcd4nwrj3xsbm4mj4xtgxx4r0000gp/T/RackMultipart20231012-15400-mfpjrl.jpg>, @content_type=""image/jpeg"", @original_filename=""dolmabahce-palace.jpg"", @headers=""Content-Disposition: form-data; name=\""country[image]\""; filename=\""dolmabahce-palace.jpg\""\r\nContent-Type: image/jpeg\r\n"">, ""about""=>""Test"", ""metadatum_attributes[title""=>{""]""=>""Hello World""}}, ""format""=>:json, ""controller""=>""countries"", ""action""=>""create""} }
```

### System configuration
**Rails version**: 7.1.1

**Ruby version**: 3.2.2"
49599,"Rails 7.1 breaks assets compilation (Terser::Error: ""extend"" is redeclared)",ArturT,"attached PR, actioncable",2023-10-12T11:40:36Z,2023-10-27T21:14:31Z,2023-10-27T14:29:31Z,"### Steps to reproduce

Rails 7.1 breaks assets compilation (Terser::Error: ""extend"" is redeclared)

I updated Rails 7.0.8 to Rails 7.1.1.

I use the terser 1.1.18 gem.

```ruby
# config/environments/production.rb
config.assets.js_compressor = :terser
```


When I deploy the Rails app to Heroku I'm getting the following error for the assets compilation step.

https://eslint.org/docs/latest/rules/no-redeclare

```
...
remote:        rake aborted!
remote:        Terser::Error: ""extend"" is redeclared
remote:        --
remote:         44142   }
remote:         44143
remote:         44144 };
remote:         44145
remote:         44146 const ZERO_WIDTH_SPACE = ""\uFEFF"";
remote:         44147 const NON_BREAKING_SPACE = ""\u00A0"";
remote:         44148 const OBJECT_REPLACEMENT_CHARACTER = ""\uFFFC"";
remote:         44149
remote:            => const extend = function (properties) {
remote:         44151   for (const key in properties) {
remote:         44152     const value = properties[key];
remote:         44153     this[key] = value;
remote:         44154   }
remote:         44155
remote:         44156   return this;
remote:         44157 };
remote:         44158
remote:        ==
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/terser-1.1.18/lib/terser.rb:284:in `parse_result'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/terser-1.1.18/lib/terser.rb:228:in `run_terserjs'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/terser-1.1.18/lib/terser.rb:180:in `compile_with_map'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/terser-1.1.18/lib/terser/compressor.rb:36:in `call'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/terser-1.1.18/lib/terser/compressor.rb:23:in `call'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/processor_utils.rb:84:in `call_processor'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/processor_utils.rb:66:in `block in call_processors'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/processor_utils.rb:65:in `reverse_each'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/processor_utils.rb:65:in `call_processors'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/loader.rb:184:in `load_from_unloaded'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/loader.rb:59:in `block in load'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/loader.rb:339:in `fetch_asset_from_dependency_cache'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/loader.rb:43:in `load'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/cached_environment.rb:44:in `block in load'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/map.rb:207:in `block in fetch_or_store'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/map.rb:187:in `fetch'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/map.rb:206:in `fetch_or_store'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/cached_environment.rb:44:in `load'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/base.rb:81:in `find_asset'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/base.rb:88:in `find_all_linked_assets'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/manifest.rb:125:in `each'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/manifest.rb:125:in `to_a'
remote:        /tmp/build_6cc64a5b/vendor/bundle/ruby/3.2.0/gems/sprockets-4.2.1/lib/sprockets/manifest.rb:125:in `block (2 levels) in find'
...
```

I suspect the issue is related to actioncable but I could not find the exact line of code that is failing.
There are a few similar lines, for example `rails/actioncable/app/assets/javascripts/actioncable.js`:
https://github.com/search?q=repo%3Arails%2Frails++const+extend+%3D+function+%28properties%29+%7B&type=code

When I run `bundle exec rake assets:precompile` in development then there is no error.

I'd appreciate your help. I'm not sure if this is the issue with Rails or maybe it's our Heroku environment issue. Thank you.

### Expected behavior

Assets compilation should be successful.

### Actual behavior

Assets compilation is failing during Heroku deployment.

### System configuration

**Rails version**: 7.1.1 (also the same issue on Rails 7.1.0)

**Ruby version**: 3.2.2

**terser version**: 1.1.18
"
49597,update_all on a joined query with composite primary keys generates invalid SQL,jarl-dk,"activerecord, attached PR",2023-10-12T08:26:29Z,2023-11-10T20:20:33Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :books, force: true, primary_key: %i[number] do |t|
    t.integer :number
    t.string :title
  end

  create_table :chapters, force: true, primary_key: %i[book_number number] do |t|
    t.integer :book_number
    t.integer :number
    t.string :title
  end
end

class Book < ActiveRecord::Base
  has_many :chapters, foreign_key: :book_number, inverse_of: :book
end

class Chapter < ActiveRecord::Base
  self.primary_key = %i[book_number number]

  belongs_to :book, foreign_key: :book_number, inverse_of: :chapters
end

class BugTest < Minitest::Test
  def test_association_stuff
    book = Book.create!(number: 1, title: ""First book"")
    book.chapters << Chapter.create!(book:, number: 1, title: ""Chapter one"")

    assert_equal 1, book.chapters.count
    assert_equal 1, Chapter.count
    assert_equal 1, Chapter.joins(:book).where(book: {title: ""First book""}).update_all(title: ""Chapter"")
  end
end
```

### Expected behaviour
The expected behaviour is for the test to pass.
The expected generated SQL is
```sql
UPDATE ""chapters"" SET ""title"" = ? WHERE (""chapters"".""book_number"", ""chapters"".""number"") IN (SELECT ""chapters"".""book_number"", ""chapters"".""number"" FROM ""chapters"" INNER JOIN ""books"" ""book"" ON ""book"".""number"" = ""chapters"".""book_number"" WHERE ""book"".""title"" = ?)  [[""title"", ""Chapter""], [""title"", ""First book""]]
```

A working example using rails 7.0 and [composite_primary_keys](https://github.com/composite-primary-keys/composite_primary_keys) gem is here:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""~> 7.0.8""
  gem ""sqlite3""
  gem ""composite_primary_keys"", ""~> 14.0.0""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :books, force: true, primary_key: %i[number] do |t|
    t.integer :number
    t.string :title
  end

  create_table :chapters, force: true, primary_key: %i[book_number number] do |t|
    t.integer :book_number
    t.integer :number
    t.string :title
  end
end

class Book < ActiveRecord::Base
  has_many :chapters, foreign_key: :book_number, inverse_of: :book
end

class Chapter < ActiveRecord::Base
  self.primary_key = %i[book_number number]

  belongs_to :book, foreign_key: :book_number, inverse_of: :chapters
end

class BugTest < Minitest::Test
  def test_association_stuff
    book = Book.create!(number: 1, title: ""First book"")
    book.chapters << Chapter.create!(book:, number: 1, title: ""Chapter one"")

    assert_equal 1, book.chapters.count
    assert_equal 1, Chapter.count
    assert_equal 1, Chapter.joins(:book).where(book: {title: ""First book""}).update_all(title: ""Chapter"")
  end
end
```

### Actual behaviour
The test case fails with
```shell
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: chapters.[""book_number"", ""number""]
```

The actual generated SQL is
```sql
UPDATE ""chapters"" SET ""title"" = ? WHERE ""chapters"".""[""""book_number"""", """"number""""]"" IN (SELECT ""chapters"".""[""""book_number"""", """"number""""]"" FROM ""chapters"" INNER JOIN ""books"" ""book"" ON ""book"".""number"" = ""chapters"".""book_number"" WHERE ""book"".""title"" = ?)  [[""title"", ""Chapter""], [""title"", ""First book""]]
```
### System configuration
**Rails version**: `7.1.1` and also `main`

**Ruby version**: 3.2.2
"
49591,Rails 7.1.1 breaks Postgres < 10,ccutrer,"regression, activerecord",2023-10-11T22:57:34Z,2023-10-21T21:21:24Z,2023-10-12T11:18:30Z,"pg_attribute.attidentity was introduced in 10. See https://www.postgresql.org/docs/9.6/catalog-pg-attribute.html vs. https://www.postgresql.org/docs/10/catalog-pg-attribute.html. According to Rails docs at https://guides.rubyonrails.org/active_record_postgresql.html, back to 9.3 is supported.

End result when running against Postgres 9.6:

```
PG::UndefinedColumn: ERROR:  column a.attidentity does not exist
LINE 4:        a.attidentity AS identity,
               ^
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql/database_statements.rb:19:in `exec'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql/database_statements.rb:19:in `block (2 levels) in query'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/abstract_adapter.rb:1024:in `block in with_raw_connection'
/usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/abstract_adapter.rb:996:in `with_raw_connection'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql/database_statements.rb:18:in `block in query'
/usr/local/bundle/gems/activesupport-7.1.1/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/app/lib/switchman/sharded_instrumenter.rb:26:in `instrument'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/abstract_adapter.rb:1134:in `log'
/app/lib/switchman/active_record/abstract_adapter.rb:39:in `log'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql/database_statements.rb:17:in `query'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/postgresql_adapter.rb:1075:in `column_definitions'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/abstract/schema_statements.rb:109:in `columns'
/app/lib/switchman/active_record/postgresql_adapter.rb:132:in `block in columns'
/app/lib/switchman/active_record/postgresql_adapter.rb:98:in `with_local_table_name'
/app/lib/switchman/active_record/postgresql_adapter.rb:132:in `columns'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:346:in `block in columns'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:345:in `fetch'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:345:in `columns'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:354:in `block in columns_hash'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:353:in `fetch'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:353:in `columns_hash'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:58:in `columns_hash'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/connection_adapters/schema_cache.rb:188:in `columns_hash'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/model_schema.rb:616:in `load_schema!'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/attributes.rb:264:in `load_schema!'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/encryption/encryptable_record.rb:127:in `load_schema!'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/model_schema.rb:561:in `block in load_schema'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/model_schema.rb:558:in `synchronize'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/model_schema.rb:558:in `load_schema'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/model_schema.rb:439:in `attribute_types'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/attribute_methods.rb:256:in `_has_attribute?'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/inheritance.rb:61:in `new'
/usr/local/bundle/gems/activerecord-7.1.1/lib/active_record/persistence.rb:54:in `create!'
```"
49590,Render Partial Collection ignores layout parameter,obie,actionview,2023-10-11T22:51:56Z,2023-12-13T14:11:28Z,,"### Steps to reproduce
Try to add a layout to rendering of a collection that uses `partial:collection` syntax.

`<%= render partial: @conversation.messages, as: :message, layout: ""message_wrapper"" %>`

### Expected behavior
The message wrapper partial should be invoked to wrap each partial rendered.

### Actual behavior
Layout parameter is ignored. Including both `partial` and `collection` parameters does respect the `layout` parameter, but hardcoding the partial name makes you lose the polymorphic rendering behavior that makes rendering of heterogeneous collections so valuable.

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
"
49588,Rails 7.1 breaks ActionDispatch Enumerator Handling,arcreative,"actionpack, attached PR",2023-10-11T16:53:24Z,2023-10-13T18:02:21Z,2023-10-13T13:11:22Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

Use an enumerator to pass data to `self.response_body`

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.1.0""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    self.response_body = Enumerator.new do |enumerator|
      10.times do |n|
        enumerator << n.to_s
      end
    end
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    get ""/""
    assert last_response.ok?
    assert last_response.body === '0123456789'
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

Response should contain `0123456789`

### Actual behavior

Fails with error (error is from my application, seems that minitest is hiding the error somewhere 😃):

```
Puma caught this error: undefined method `to_ary' for #<Enumerator: #<Enumerator::Generator:0x0000000136b26588>:each>
Did you mean?  to_a (NoMethodError)
/Users/arob/.gem/ruby/3.0.6/gems/actionpack-7.1.0/lib/action_dispatch/http/response.rb:107:in `to_ary'
/Users/arob/.gem/ruby/3.0.6/gems/actionpack-7.1.0/lib/action_dispatch/http/response.rb:509:in `to_ary'
/Users/arob/.gem/ruby/3.0.6/gems/rack-2.2.8/lib/rack/body_proxy.rb:41:in `method_missing'
/Users/arob/.gem/ruby/3.0.6/gems/rack-2.2.8/lib/rack/body_proxy.rb:41:in `method_missing'
/Users/arob/.gem/ruby/3.0.6/gems/rack-2.2.8/lib/rack/body_proxy.rb:41:in `method_missing'
/Users/arob/.gem/ruby/3.0.6/gems/rack-2.2.8/lib/rack/body_proxy.rb:41:in `method_missing'
/Users/arob/.gem/ruby/3.0.6/gems/rack-2.2.8/lib/rack/body_proxy.rb:41:in `method_missing'
/Users/arob/.gem/ruby/3.0.6/gems/rack-2.2.8/lib/rack/body_proxy.rb:41:in `method_missing'
/Users/arob/.gem/ruby/3.0.6/gems/puma-6.4.0/lib/puma/request.rb:183:in `prepare_response'
/Users/arob/.gem/ruby/3.0.6/gems/puma-6.4.0/lib/puma/request.rb:133:in `handle_request'
/Users/arob/.gem/ruby/3.0.6/gems/puma-6.4.0/lib/puma/server.rb:443:in `process_client'
/Users/arob/.gem/ruby/3.0.6/gems/puma-6.4.0/lib/puma/server.rb:241:in `block in run'
/Users/arob/.gem/ruby/3.0.6/gems/puma-6.4.0/lib/puma/thread_pool.rb:155:in `block in spawn_thread'
```

### System configuration
**Rails version**: 7.1.0 (7.0.8 works fine)

**Ruby version**: 3.0.6
"
49574,"Active Record join class is unable to infer value for `belongs_to ..., inverse_of:`",seanpdoyle,activerecord,2023-10-10T22:16:42Z,2023-12-06T16:25:53Z,,"### Steps to reproduce

An Active Record join model accessed through a `has_many ..., through:` association is unable to infer its `inverse_of:` association by pluralizing a predictably pluralizable class name.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table ""listings"", force: :cascade do |t|
    t.bigint ""list_id"", null: false
    t.bigint ""pin_id"", null: false
  end

  create_table ""lists"", force: :cascade do |t|
  end

  create_table ""pins"", force: :cascade do |t|
  end
end

class Pin < ActiveRecord::Base
  has_many :listings
end

class List < ActiveRecord::Base
  has_many :listings
  has_many :pins, through: :listings
end

class Listing < ActiveRecord::Base
  belongs_to :list
  belongs_to :pin
end

class BugTest < Minitest::Test
  def test_association_stuff
    list = List.create!
    pin = list.pins.new

    pin.save!

    assert_equal [pin], list.reload.pins
    assert_equal 1, list.reload.pins.count
  end
end
```

### Expected behavior

The call to `list.reload.pins` should include `pin`, and the `Listing.belongs_to :pin` association should be able to infer its inverse by pluralizing its class name to `:listings`.

### Actual behavior

```
Failure:
BugTest#test_association_stuff [bug.rb:64]:
--- expected
+++ actual
@@ -1 +1 @@
-[#<Pin id: 1, created_at: ""2023-10-10 22:12:52.792230000 +0000"", updated_at: ""2023-10-10 22:12:52.792230000 +0000"">]
+#<ActiveRecord::Associations::CollectionProxy []>

Failure:
BugTest#test_association_stuff [bug.rb:64]:
Expected: 1
  Actual: 0
```

When declared as `Listing.belongs_to :pin, inverse_of :listings`, the tests pass.

```diff
diff --git a/activerecord/bug.rb b/activerecord/bug.rb
index ffd9d384e0..16974dc6df 100644
--- a/activerecord/bug.rb
+++ b/activerecord/bug.rb
@@ -51,7 +51,7 @@ class List < ActiveRecord::Base
 
 class Listing < ActiveRecord::Base
   belongs_to :list
-  belongs_to :pin
+  belongs_to :pin, inverse_of: :listings
 end
 
 class BugTest < Minitest::Test
```

### System configuration

**Rails version**:

`activerecord` at `main@c8149e6`

**Ruby version**:

```
❯ ruby -v
ruby 3.2.0 (2022-12-25 revision a528908271) [arm64-darwin22]
```"
49572,"ActionView 7.1.0 `number_to_currency` Not Returning Delimiter Of "","" For USD Money Object",peterb-onramp,"activesupport, attached PR",2023-10-10T21:00:42Z,2023-10-11T08:46:34Z,2023-10-11T08:46:34Z,"### Steps to reproduce
### Action View 6.0.0 Delimiter Returned
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""actionview"", ""~> 6.0.0""
  gem ""money-rails""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""
require ""action_view""


class BugTest < Minitest::Test
  include ActionView::Helpers::NumberHelper

  def test_number_to_currency_usd_delimiter
    number_money = Money.new(2_400_00, ""USD"")
    assert_equal ""$2,400"", number_to_currency(number_money, precision: 0)
  end
end
```

### Action View 7.1.0 Delimiter Not Returned
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""actionview"", ""~> 7.1.0""
  gem ""money-rails""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""
require ""action_view""


class BugTest < Minitest::Test
  include ActionView::Helpers::NumberHelper

  def test_number_to_currency_usd_delimiter
    number_money = Money.new(2_400_00, ""USD"")
    assert_equal ""$2,400.00"", number_to_currency(number_money, precision: 0)
  end
end
```

Test Result:
```ruby
Expected: ""$2,400.00""
  Actual: ""$2400.00
```
### Expected behavior
For USD money `number_to_currency` when passed a `Money` object  returns a delimiter value of "","" (Example: ""$7,000.00"")

### Actual behavior
For USD money `number_to_currency` when passed a `Money` object does not return the delimiter of "","" (Example: ""$7000.00"")

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.1.4
"
49567,_uses_legacy_table_name ignored for DB Table name on Schema Load,ElliottAYoung,activerecord,2023-10-10T15:56:33Z,2023-10-12T22:43:23Z,2023-10-12T22:43:20Z,"### Steps to reproduce
A Migration with a legacy database table name that is too long, for example (tested specifically on Postgres):

```ruby
class SomeMigration < ActiveRecord[7.0]
    create_table :some_table_name_that_is_too_long_for_the_database_to_handle do |t|
      ...
    end
end
```

Will run successfully and the database table will be created. At any point forward if I run `bundle exec rake db:schema:load` I get the following error message:

```
ArgumentError: Table name 'some_table_name_that_is_too_long_for_the_database_to_handle' is too long; the limit is 58 characters
```

### Expected behavior
If a database table is generated and flagged as a legacy override for the length validation this should persist to future schema loads instead of raising an error.

### Actual behavior
Despite being disabled for the `create_table` method in the migration, any tables with names that are too long are unable to be created when loading the DB schema with `bundle exec rake db:schema:load`

### System configuration
**Rails version**:
7.1.0

**Ruby version**:
3.1.2
"
49557,"The Postgres adapter's ""table name too long"" error message is confusing",adampal,"activerecord, attached PR",2023-10-10T03:09:39Z,2023-10-12T22:43:29Z,2023-10-12T22:43:23Z,"The PR #45136 enforces a maximum table name length when creating tables.

The error message is:
`Table name '#{table_name}' is too long; the limit is #{table_name_length} characters`

The issue is `table_name_length` for Postgres returns 58 characters. All the Postgres docs show a max table length of 63 characters. The reason it's different is that we're reducing it by 5 characters to allow for `_pkey` suffix Postgres adds.

I encountered the error when upgrading an app to Rails 7.1 and it wasn't immediately obvious to me why my table name that was 60 characters long should be an issue.  I had to check the Rails source code to find out why it wasn't working.

My suggestion is to add something to the error message to save people having to dig through the Rails code to figure out why the max allowed by Rails is less than the max allowed by Postgres.

I'm happy to submit a PR if it's something the core team are happy to add."
49550,Rails 7.1 is breaking mongoid dependency...,fedorzajac,third party issue,2023-10-09T09:17:33Z,2023-10-10T01:30:52Z,2023-10-09T09:30:03Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
updating rails from 7.0.8 to 7.1

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
bundle update
bundle update
Fetching gem metadata from https://rubygems.org/...........
Resolving dependencies...
Using rack 3.0.8 (was 2.2.8)
Using activesupport 7.1.0 (was 7.0.8)
Using activemodel 7.1.0 (was 7.0.8)
Using mongoid 1.0.6 (was 8.1.2) # <----------------
Using activejob 7.1.0 (was 7.0.8)
Using activerecord 7.1.0 (was 7.0.8)
Using actionview 7.1.0 (was 7.0.8)
Using actionpack 7.1.0 (was 7.0.8)
Using actioncable 7.1.0 (was 7.0.8)
Using actionmailer 7.1.0 (was 7.0.8)
Using activestorage 7.1.0 (was 7.0.8)
Using railties 7.1.0 (was 7.0.8)
Using actionmailbox 7.1.0 (was 7.0.8)
Using actiontext 7.1.0 (was 7.0.8)
Using rails 7.1.0 (was 7.0.8) # <-------------
Bundle updated!
```

### Expected behavior
<!-- Tell us what should happen -->
do not downgrade mongoid

### Actual behavior
<!-- Tell us what happens instead -->
mongoid was downgraded and my models break.

### System configuration
**Rails version**:
7.0.8

**Ruby version**:
ruby -v      
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [arm64-darwin22]"
49545,"Incorrect value of current shard inside log tags - always falls back to ""default"" ",pospieszynski,"railties, With reproduction steps",2023-10-08T21:12:00Z,2023-11-20T15:14:18Z,,"### Steps to reproduce
1. Create a sample app with multiple db shards, let's say ""cats"" & ""dogs"".
2. Implement abstract class ""AnimalsRecord"" that can connect to shards ""cats"" & ""dogs"".
3. In `application.rb` implement shard_resolver (`config.active_record.shard_resolver`) to always return ""dogs"".
4. Configure logger to have tag that represents the current shard (`AnimalsRecord.current_shard`)

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
  #config/application.rb
  config.active_record.shard_resolver = -> (request) { :dogs }
```

```ruby
 #config/environments/development.rb
  logger = ActiveSupport::Logger.new(STDOUT)
  logger.formatter = config.log_formatter
  config.logger = ActiveSupport::TaggedLogging.new(logger)
  config.log_tags = [:request_id, lambda { |request| AnimalsRecord.current_shard }]
```


### Expected behavior
The logs should indicate the `[dogs]` tag set by a shard resolver

### Actual behavior
The logs indicate the `[default]` tag, ignoring the current shard configuration. Please see SS below
<img width=""653"" alt=""image"" src=""https://github.com/rails/rails/assets/15077823/c4a0c9b7-1e94-4fc2-8901-59b8b6740507"">


Sample app where problem can be observed: https://github.com/pospieszynski/testapp
Related problem where current shard is not set correctly this time for ActionCable channel was mentioned here https://github.com/rails/rails/issues/49052


Thanks for looking into it


### System configuration
Rails version: 7.0.7.2

Ruby version: 3.0.2"
49543,Default cache format version still on 6.2,djfpaagman,"activerecord, activesupport, With reproduction steps",2023-10-08T18:09:37Z,2023-10-29T08:34:42Z,2023-10-09T00:20:00Z,"### Steps to reproduce

I'm working with a single file, simplified Rails app to test some stuff in the Rails codebase, and noticed that it gives a deprecation warning:

> DEPRECATION WARNING: Support for `config.active_support.cache_format_version = 6.1` has been deprecated and will be removed in Rails 7.2.

```ruby
# frozen_string_literal: true
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '~> 7.1'
end

require 'rails/all'

Rails.logger = Logger.new(STDOUT)

class App < Rails::Application
  config.root = __dir__
  config.consider_all_requests_local = true
  config.secret_key_base = 'i_am_a_secret'
  config.active_storage.service_configurations = { 'local' => { 'service' => 'Disk', 'root' => './storage' } }
  config.eager_load = false

  routes.append do
    root to: 'welcome#index'
  end
end

class WelcomeController < ActionController::Base
  def index
    render inline: 'Hi!'
  end
end

App.initialize!

run App
```

Boot the app, the deprecation warning is printed on boot:

```sh
rackup app.ru
```

> DEPRECATION WARNING: Support for `config.active_support.cache_format_version = 6.1` has been deprecated and will be removed in Rails 7.2.
>
> Check the Rails upgrade guide at https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#new-activesupport-cache-serialization-format
for more information on how to upgrade.
 (called from load at /Users/dennis/.asdf/installs/ruby/3.2.1/bin/rackup:25)
[2023-10-08 20:10:50] INFO  WEBrick 1.8.1
[2023-10-08 20:10:50] INFO  ruby 3.2.1 (2023-02-08) [arm64-darwin22]
[2023-10-08 20:10:50] INFO  WEBrick::HTTPServer#start: pid=45700 port=9292


### Expected behavior
No deprecation warnings.

### Actual behavior
Deprecation warnings.

### System configuration
- **Rails version**: 7.1
- **Ruby version**: 3.2.1

---

I think this is because these variables still need to be bumped:

https://github.com/rails/rails/blob/f20643d4b903e3b57b905fdb19479cccb42a220f/activesupport/lib/active_support/cache.rb#L55
https://github.com/rails/rails/blob/f20643d4b903e3b57b905fdb19479cccb42a220f/activerecord/lib/active_record/marshalling.rb#L5

Not sure what the correct way to bump these is, can they just be bumped to `7.1` or will that break things? Happy to create a PR to do whatever makes most sense."
49541,Cannot create records with composite primary key containing `id` column in Rails 7.1,janko,activerecord,2023-10-08T13:13:59Z,2023-10-11T16:26:56Z,2023-10-09T16:22:58Z,"### Steps to reproduce

This example table comes from Rodauth:

```rb
require ""active_record""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.connection.create_table :recovery_codes, primary_key: [:id, :code] do |t|
  t.integer :id
  t.string :code
end

class RecoveryCode < ActiveRecord::Base
end

RecoveryCode.create(id: 1, code: ""foo"")
```

### Expected behavior

I expected the record to be successfully created, since the `id` column is just like any other column.

### Actual behavior

I get an error:

```
/Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/attribute_methods/primary_key.rb:36:in `id=': Expected value matching [""id"", ""code""], got 1. (TypeError)

          raise TypeError, ""Expected value matching #{self.class.primary_key.inspect}, got #{value.inspect}."" unless value.is_a?(Enumerable)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activemodel-7.1.0/lib/active_model/attribute_assignment.rb:49:in `public_send'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activemodel-7.1.0/lib/active_model/attribute_assignment.rb:49:in `_assign_attribute'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/attribute_assignment.rb:19:in `block in _assign_attributes'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/attribute_assignment.rb:11:in `each'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/attribute_assignment.rb:11:in `_assign_attributes'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activemodel-7.1.0/lib/active_model/attribute_assignment.rb:34:in `assign_attributes'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/core.rb:431:in `initialize'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/inheritance.rb:76:in `new'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/inheritance.rb:76:in `new'
        from /Users/janko/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/persistence.rb:37:in `create'
```

If I rename the `id` column to something else (e.g. `account_id`), then it works. IMO Active Record should not be treating the `id` column in any special way, it's just a column like any other, it should only be concerned what column is the primary key. But I see the `#id=` method being overridden with special behavior in Active Record.

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.2
"
49524,Warning on README.md files not found during Rails 7.1 gem installation,mohits,"regression, docs",2023-10-07T02:57:33Z,2023-11-10T19:53:57Z,,"### Steps to reproduce

On WIndows with Ruby 3.2, do `gem install rails`

### Expected behavior

No warnings about README.md files should be found.

### Actual behavior

Instead, we get the following items littered through the installation information (some are extracted).

```
Couldn't find file to include 'README.rdoc' from lib/minitest.rb
Couldn't find file to include 'activesupport/README.rdoc' from lib/active_support.rb
Couldn't find file to include 'actionview/README.rdoc' from lib/action_view.rb
Couldn't find file to include 'activemodel/README.rdoc' from lib/active_model.rb
...
Couldn't find file to include 'actioncable/README.md' from lib/action_cable.rb
```


### System configuration
**Rails version**: 7.1

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x64-mingw-ucrt]


"
49523,"ArgumentError: wrong number of arguments (given 3, expected 2) when execute down migration of `rename_table`",sue445,"activerecord, attached PR",2023-10-07T01:51:31Z,2023-10-07T16:32:31Z,2023-10-07T16:32:31Z,"Down migration  (e.g. `./bin/rails db:rollback`) of `rename_table` fails when version less than 7.1 is specified in migration file

### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activerecord"", ""7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :things, force: true do |t|
    t.text ""content""
  end
end

class RenameThings < ActiveRecord::Migration[7.0]
  def change
    rename_table ""things"", ""awesome_things""
  end
end

class BugTest < Minitest::Test
  def test_migration_down
    RenameThings.migrate(:up)
    RenameThings.migrate(:down)
  end
end
```

### Expected behavior
no error ( down migration is successful)

### Actual behavior
```
==  RenameThings: reverting ===================================================
E

Finished in 0.002283s, 438.0201 runs/s, 0.0000 assertions/s.

  1) Error:
BugTest#test_migration_down:
ArgumentError: wrong number of arguments (given 3, expected 2)
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration/compatibility.rb:105:in `rename_table'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration/command_recorder.rb:146:in `block in replay'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration/command_recorder.rb:145:in `each'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration/command_recorder.rb:145:in `replay'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:855:in `revert'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:980:in `exec_migration'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:966:in `block (2 levels) in migrate'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/3.2.0/benchmark.rb:296:in `measure'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:965:in `block in migrate'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:229:in `with_connection'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:964:in `migrate'
    /Users/sue445/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.1.0/lib/active_record/migration.rb:738:in `migrate'
    scripts/active_record_migrations_gem.rb:38:in `test_migration_down'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
```

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.1.2

### Workarround
We can avoid this by one of the following

#### 1. Use `ActiveRecord::Migration[7.1]`
e.g.

```ruby
class RenameThings < ActiveRecord::Migration[7.1]
  def change
    rename_table ""things"", ""awesome_things""
  end
end
```

####  2.  Use `def self.change`
e.g.

```ruby
class RenameThings < ActiveRecord::Migration[7.0]
  def self.change
    rename_table ""things"", ""awesome_things""
  end
end
```
"
49522,"when creating a new rails 7.1 with bun, the JS side errors out on foreman (bin/dev)",whyczz,third party issue,2023-10-07T00:27:26Z,2023-10-12T02:24:09Z,2023-10-09T00:29:46Z,"After creating a new rails 7.1 app with bun enabled, the generated package.json doesn't have `@hotwired/turbo-rails` added, so the Procfile.dev fails on the js process/container.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

```
➜ rails new pot -j bun -c tailwind
```

### Expected behavior
I should get the Procfile.dev to be up and running.

### Actual behavior
The JS process fails:
```
pot on  main [?] via ⬢ v18.15.0 via 🍞 v1.0.4 via 💎 v3.2.2 
➜ bin/dev 
20:14:02 web.1  | started with pid 9278
20:14:02 js.1   | started with pid 9279
20:14:02 css.1  | started with pid 9280
20:14:02 js.1   | $ bun bun.config.js --watch
20:14:02 css.1  | $ tailwindcss -i ./app/assets/stylesheets/application.tailwind.css -o ./app/assets/builds/application.css --minify --watch
20:14:02 js.1   | Build failed
20:14:02 js.1   | 
20:14:02 js.1   | 
20:14:02 js.1   | error: Could not resolve: ""@hotwired/turbo-rails"". Maybe you need to ""bun install""?
20:14:02 js.1   | 
20:14:02 js.1   | import ""@hotwired/turbo-rails""
20:14:02 js.1   |        ^
20:14:02 js.1   | /Users/by/w/pot/app/javascript/application.js:2:8 64
20:14:02 css.1  | 
20:14:02 css.1  | Rebuilding...
20:14:02 css.1  | 
20:14:02 css.1  | Done in 103ms.
20:14:02 web.1  | DEBUGGER: Debugger can attach via UNIX domain socket (/var/folders/4p/zm2r8q_x41d8tvt4n3d1b_fh0000gn/T/ruby-debug-sock-501/ruby-debug-by-9278)
20:14:02 web.1  | => Booting Puma
20:14:02 web.1  | => Rails 7.1.0 application starting in development 
20:14:02 web.1  | => Run `bin/rails server --help` for more startup options
20:14:02 web.1  | Puma starting in single mode...
20:14:02 web.1  | * Puma version: 6.4.0 (ruby 3.2.2-p53) (""The Eagle of Durango"")
20:14:02 web.1  | *  Min threads: 5
20:14:02 web.1  | *  Max threads: 5
20:14:02 web.1  | *  Environment: development
20:14:02 web.1  | *          PID: 9278
20:14:02 web.1  | * Listening on http://127.0.0.1:3000
20:14:02 web.1  | * Listening on http://[::1]:3000
20:14:02 web.1  | Use Ctrl-C to stop
```

### Fix
Add the two hotwired packages:
```
➜ bun a @hotwired/turbo-rails
bun add v1.0.4 (745b6b94)

 installed @hotwired/turbo-rails@7.3.0


 3 packages installed [2.41s]

➜ bun a @hotwired/stimulus   
bun add v1.0.4 (745b6b94)

 installed @hotwired/stimulus@3.2.2


 1 packages installed [1353.00ms]
```

And here's the updated package.json:
```
{
  ""name"": ""app"",
  ""private"": ""true"",
  ""scripts"": {
    ""build"": ""bun bun.config.js"",
    ""build:css"": ""tailwindcss -i ./app/assets/stylesheets/application.tailwind.css -o ./app/assets/builds/application.css --minify""
  },
  ""dependencies"": {
    ""@hotwired/stimulus"": ""^3.2.2"",
    ""@hotwired/turbo-rails"": ""^7.3.0"",
    ""autoprefixer"": ""latest"",
    ""postcss"": ""latest"",
    ""tailwindcss"": ""latest""
  }
}
```

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
"
49521,Unnecessary table prefix slows down queries by 5-10%,Fjan,activerecord,2023-10-06T20:42:11Z,2023-10-15T22:12:25Z,2023-10-09T16:52:02Z,"### Steps to reproduce

Active Record prefixes all field names with a table name in order to disambiguate them, in case they become part of a query with multiple tables. I noticed that on a simple query this adds a significant overhead. The second query in this benchmark is 30% faster than the first:

```ruby
ActiveRecord::Base.logger=nil
Benchmark.bm do
   _1.report { 1000.times { User.select(:id,:name,:email).where(id: 1).take }}
   _1.report { 1000.times { User.select('id,name,email').where('id = 1').take }}
end

#       user     system      total
#   0.089070   0.003442   0.092512
#   0.060436   0.003398   0.063834
#   (warm up done, but omitted for brevity)
```

Of course, large part of this difference is on the Rails side to construct the query, a hash is more work to convert than a string. But I noticed part is because more bytes are sent over the wire and additional parsing has to be done by the database. To narrow down this difference, the following benchmarks skips the parsing part and sends it as a raw query (this is to MySQL 5.7):

```ruby
Benchmark.bm do
   _1.report {1000.times { ActiveRecord::Base.connection.select_rows('SELECT `id`,`name`,`email` FROM `users` WHERE `id` = 1 LIMIT 1') }}
   _1.report {1000.times { ActiveRecord::Base.connection.select_rows('SELECT `users`.`id`,`users`.`name`,`users`.`email` FROM `users` WHERE `users`.`id` = 1 LIMIT 1') }}
end

#       user     system      total
#   0.022526   0.003475   0.026001
#   0.021833   0.003650   0.025483
```

So it turns out a 5% slowdown on the database side, caused by the table prefixes. I've tried several different queries, some end up above 10%. (I was suspicious of these numbers, so I've tried benchmarking with `pluck` instead of `select`, with existing and non-existing objects, and with different tables, but the numbers are comparable in each case. Confirmation by someone else would be appreciated.)

### Desired behavior
It would seem that it should be possible for Active Record / Arel to know only a single table is involved, and in that case skip the table prefixing and make work for the DB easier. Perhaps knowledge whether a query involves a single table could also be used to speed up the query construction part, but I have no insight into that. 

Besides a performance boost on simple queries, this would also make for easier to read debug logs.

### System configuration
**Rails version**: 7.1
**Ruby version**: 3.2.2
**Database**: MySQL 5.7

Filing this as a bug as suggested by @tenderlove and @dhh at Rails world today 🙂
"
49520,strict_loading is ignored when using a subsequent .includes on a nested record,ivangreene,"activerecord, With reproduction steps",2023-10-06T20:17:56Z,2023-12-18T11:33:14Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table :authors, force: true do |t|
  end

  create_table :book_authors, force: true do |t|
    t.integer :book_id
    t.integer :author_id
  end

  create_table :books, force: true do |t|
    t.integer :library_id
  end

  create_table :libraries, force: true do |t|
  end

end

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

class BookAuthor < ApplicationRecord
  belongs_to :book
  belongs_to :author
end

class Author < ApplicationRecord
  has_many :book_authors
  has_many :books, through: :book_authors
end

class Book < ApplicationRecord
  has_many :book_authors
  has_many :authors, through: :book_authors
  belongs_to :library
end

class Library < ApplicationRecord
  has_many :books
end


class BugTest < Minitest::Test
  def test_association_stuff
    library = Library.create!

    author1 = Author.create!
    author2 = Author.create!

    author1.books << Book.create!(library: library)
    author1.books << Book.create!(library: library)

    author2.books << Book.create!(library: library)
    author2.books << Book.create!(library: library)

    library = Library.includes(:books).strict_loading.first

    assert_raises ActiveRecord::StrictLoadingViolationError do
      library.books.each do |book|
        puts book.authors
                 .includes(:books) # Remove this line to see the expected behavior
                 .each(&:inspect)
      end
    end
  end
end
```

### Expected behavior
StrictLoadingViolationError should be thrown

### Actual behavior
N+1 queries are run. No exception is thrown

### System configuration
**Rails version**: `7.1.0`

**Ruby version**: `ruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]`
"
49510,activesupport 7.1.0 is throwing NoMethodError: undefined method `deprecator' for ActiveSupport:Module,bblaal,activesupport,2023-10-06T07:18:03Z,2023-10-06T11:31:35Z,2023-10-06T11:31:35Z,"### Steps to reproduce
by running command `bundle exec rake assets:precompile` or simply by running any configured pipeline, i.e: `jenkins`

### Expected behavior
Build should pass without an error

### Actual behavior
Build is getting failed with error:
`NoMethodError: undefined method `deprecator' for ActiveSupport:Module`

### System configuration
**Rails version**: `7.1.0`

**Ruby version**: `2.7`
"
49505,`#signed_id` outputs URL unsafe strings,terracatta,"activerecord, attached PR",2023-10-05T21:02:13Z,2023-10-06T13:24:39Z,2023-10-06T13:24:39Z,"Today, calling `Model.signed_id` there is a chance of generating URL unsafe strings. 

From my research, this has always been true, but I believe it may be more likely to happen due to changes in how ruby objects might be serialized after https://github.com/rails/rails/pull/47916 was merged (which IMO is a great change).

In my view, when @dhh introduced signed_ids he always intended them to be url safe.

Since the intent of signed_ids is to be included in things like URL params, we should be passing `url_safe: true` option to `MessageVerifier`.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.signed_id_verifier_secret = ""foobar""

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
  end
end

class User < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def check_for_unsafe_base64_characters
    user = User.create!
    signed_id = user.signed_id(purpose: ""~~~~~~~~~"")
    # `+` is not a url-safe character
    assert !signed_id.include?(""+"")
  end
end
```

### Expected behavior
`user.signed_id` should generate base64 strings that are url safe

### Actual behavior
The `+` is included which is not safe for URLs.

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.2

### Monkey Patch
Here is the patch I am using in my app that fixes the issue.

```ruby
module ActiveRecord
  module SignedId
    module ClassMethods
      # Overriding this method because we want Rails to support signed_ids that are url_safe
      def signed_id_verifier
        @signed_id_verifier ||= begin
          secret = signed_id_verifier_secret
          secret = secret.call if secret.respond_to?(:call)

          if secret.nil?
            raise ArgumentError, ""You must set ActiveRecord::Base.signed_id_verifier_secret to use signed ids""
          else
            ActiveSupport::MessageVerifier.new secret, digest: ""SHA256"", serializer: JSON, url_safe: true
          end
        end
      end
    end
  end
end

```"
49502,ActiveRecord 7.1.0 does not return and assign primary keys that are generated identity columns,jackc,"activerecord, attached PR",2023-10-05T19:40:39Z,2023-10-09T16:42:08Z,2023-10-09T16:42:08Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

Use ActiveRecord to create a record in a PostgreSQL table with a primary key `generated by default as identity` or `generated always as identity`. The database generated id will not be returned and assigned to the new record.

This worked in Rails v7.0.8 and fails in v7.1.0.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.1.0""
  gem ""pg"", ""~> 1.5.4""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(ENV.fetch(""DATABASE_URL"", ""postgres:///""))
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Base.connection.exec_query <<~SQL
  create temporary table people (
    id int primary key generated by default as identity,
    name text not null
  );
SQL

class Person < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_id_is_returned
    person = Person.create! name: ""Jack""
    assert person.id
  end
end
```

### Expected behavior

`person.id` should have the value from the database.

### Actual behavior
<!-- Tell us what happens instead -->

`person.id` is `nil`.

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.2
"
49500, `Could not find table` in CI even though `db:test:prepare` has been run,deanpcmad,"regression, activerecord, attached PR",2023-10-05T14:50:18Z,2023-10-11T21:12:07Z,2023-10-06T13:36:25Z,"When creating a new Rails app with 7.1.0, which is setup to test in GitHub actions, it fails with a `Could not find table` error.

With 7.1.0.rc2, it works fine, so something has changed in the last few days.

An example app is here: https://github.com/deanpcmad/blogtest

Of which you can see the actions logs for [7.1.0](https://github.com/deanpcmad/blogtest/actions/runs/6420609711/job/17433065722) or for [7.1.0.rc2](https://github.com/deanpcmad/blogtest/actions/runs/6420698975/job/17433371320)

### System configuration
**Rails version**: 7.1.0

**Ruby version**: 3.2.2
"
49499,Undocumented breaking change for @rails/ujs,Earlopain,"attached PR, rails-ujs",2023-10-05T12:41:04Z,2023-10-24T19:01:26Z,2023-10-24T19:01:26Z,"During the upgrade from 7.0 to 7.1 I had to change how @rails/ujs is getting initialized from

```js
import Rails from ""@rails/ujs""
Rails.start()
```

to

```js
import ""@rails/ujs"";
```

The explicit import seems to now have side-effects as it complains about ujs already being initialized.
![image](https://github.com/rails/rails/assets/14981592/0cefbc8b-4314-405d-9100-c002f0b5b746)

https://github.com/rails/rails/tree/main/actionview/app/javascript suggests that the previous usage is still correct.

I'm using esbuild to bundle my js, specifically with this command:
`esbuild app/typescript/*.* --target=es2022 --bundle --sourcemap --outdir=./public/build`

Is this a bug with my setup or in ujs itself?

### Expected behavior
<!-- Tell us what should happen -->

### Actual behavior
<!-- Tell us what happens instead -->

### System configuration
**Rails version**: 7.1

**Ruby version**: 3.2.2
"
49496,Unnecessary dependency on webpack in @rails/actiontext 7.1 ,erikaxel,"attached PR, actiontext",2023-10-05T11:37:53Z,2023-10-06T01:03:12Z,2023-10-05T15:01:56Z,"Hi,

https://github.com/rails/rails/pull/47679 introduced webpack as a dependency for @rails/actiontext 7.1 in https://github.com/rails/rails/blob/v7.1.0/actiontext/package.json

We are not using webpack to bundle our javascript and this change draws in around 350 extra packages on our system.
Is it possible to remove this dependency? I don't see a specific reason why it would needed to be included, but I might be wrong. @smridge do you perhaps remember why it was added?

### System configuration
**Rails version**: 7.1

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-darwin23]
"
49494,"Indicate in the changelog/release notes for 7.1, that `Rails.logger` is now a `BroadcastLogger`",mensfeld,railties,2023-10-05T10:09:12Z,2023-10-09T12:16:42Z,2023-10-07T12:56:09Z,"Following on my discussion with @rafaelfranca:

My gem [karafka](https://github.com/karafka/karafka) integrates with the Rails logger via a Railtie using the ""unofficial"" broadcast  API as follows:

https://github.com/karafka/karafka/blob/b32be801a9a81853d81bbe249a76388acfd5876b/lib/karafka/railtie.rb#L49

Rails 7.1 has replaced the `#broadcast` module with a `BroadcastLogger` and because of that I wanted to upgrade my integration. After reading the docs what I did was that (in railtie:

```ruby
rails_logger = Rails.logger

stdout_logger = ActiveSupport::Logger.new($stdout)
stdout_logger.level = Rails.logger.level

Rails.logger = ActiveSupport::BroadcastLogger.new(
  rails_logger,
  stdout_logger
)
```
basically wrapping the native Rails logger and my logger with a broadcast and using this as a Rails logger.

While it worked for my case, it caused following issue for any ActiveJobs:

```
/gems/3.1.0/gems/activejob-7.1.0/lib/active_job/logging.rb:32:in `logger_tagged_by_active_job?': undefined method `current_tags' for nil:NilClass (NoMethodError)

        logger.formatter.current_tags.include?(""ActiveJob"")
```

that is because BroadcastLogger is proxying only the logger API (which makes sense).

My approach was based on the docs as they did not clearly state that `Rails.logger` is now a broadcast logger itself with the extra APIs needed and that instead of wrapping it with a BroadcastLogger the upgrade path is to use a `broadcast_to` delegator on the Rails logger itself effectively replacing the above code with:

```ruby
stdout_logger = ActiveSupport::Logger.new($stdout)

Rails.logger.broadcast_to(stdout_logger)
```

it is not stated in the [release notes](https://edgeguides.rubyonrails.org/7_1_release_notes.html) or at least it was not exactly clear to me how to upgrade my integration to achieve the pre 7.1 behaviour without any errors.
"
49489,Cache-Control header should be lower-case for static files with Rack 3,zarqman,actionpack,2023-10-04T20:14:47Z,2023-10-09T18:35:37Z,2023-10-09T16:53:57Z,"Responses from `ActionDispatch::Static` can return a mixed-case Cache-Control header on Rails 7.1 with Rack 3.

a) If `Cache-Control` is specified as part of `environments/*.rb` (which is the default on `development` and `test`), its casing is passed through as-is. I don't know if generators for `rails new` and `app:update` should be aware of Rack 3 and update this to lower-case or if it should be modified to lower-case during rails initialization or for each static response. 

Alternatively, the default could just be switched to lower-case since Rack 3 is likely to be pulled in for Rails 7.1 apps--not sure if that's safe if an app ends up running Rack 2 (perhaps because some other gem constrains it).

b) Related, `Content-Length` appears to be mixed-case all the time (both static files and normal controller actions).

### Steps to reproduce

Make sure the app is configured to use Rack 3.

Run `rails dev:cache` if not already enabled (to expose `cache-control` when in `development` mode):
```bash
$ rails dev:cache
Development mode is now being cached.
```

### Expected behavior

```bash
$ curl -I http://localhost:3000/robots.txt
HTTP/1.1 200 OK
last-modified: Sun, 18 Dec 2022 07:14:50 GMT
content-type: text/plain
cache-control: public, max-age=172800
content-length: 150
```

And, if (a) should manage the case of `cache-control` directly in `config/environments/{development,production,test}.rb`, `rails app:update` should offer this:

```ruby
  # example for development.rb
  config.public_file_server.headers = {
    ""cache-control"" => ""public, max-age=#{2.days.to_i}""
  }
```

### Actual behavior

Note the case of the final 2 lines.
```bash
$ curl -I http://localhost:3000/robots.txt
HTTP/1.1 200 OK
last-modified: Sun, 18 Dec 2022 07:14:50 GMT
content-type: text/plain
Cache-Control: public, max-age=172800
Content-Length: 150
```

And again, depending on (a):

```ruby
  # example for development.rb
  config.public_file_server.headers = {
    ""Cache-Control"" => ""public, max-age=#{2.days.to_i}""
  }
```


### System configuration
**Rails version**: 7.1.0.rc2

**Ruby version**: 3.2.2

**Rack version**: 3.0.8
"
49481,Rails 7.1.0rc2 NoMethodError: undefined method `-' in active_record/validations/uniqueness.rb:90,hatai,"regression, activerecord, attached PR",2023-10-04T04:42:53Z,2023-10-04T08:32:25Z,2023-10-04T08:32:24Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

An NoMethodError occurred when trying to save data in the following table.
This error seems to be a problem in [active_record/validations/uniqueness.rb:90](https://github.com/rails/rails/blame/536d1680a1e79ca9e6cb95de7d914f762cac5b7e/activerecord/lib/active_record/validations/uniqueness.rb#L90)

- schema.rb 

```ruby:schema.rb
 create_table ""branches"", id: :serial, force: :cascade do |t|
    t.integer ""account_id"", null: false
    t.string ""name"", null: false
    t.string ""display_name"", null: false
    t.uuid ""uuid"", default: -> { ""uuid_generate_v4()"" }, null: false
	...
    t.datetime ""deleted_at"", precision: nil
    t.index ""account_id, display_name, COALESCE(deleted_at, 'infinity'::timestamp without time zone)"", name: ""index_branch_display_name_unique"", unique: true
  end
```

- Error log

```sh
NoMethodError:
       undefined method `-' for ""account_id, display_name, COALESCE(deleted_at, 'infinity'::timestamp without time zone)"":String
       Did you mean?  -@

# ./app/controllers/admin/branches_controller.rb:194:in `block in create'
# ./app/controllers/admin/branches_controller.rb:179:in `create'
```

- Backtrace

```sh
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations/uniqueness.rb:90:in `block (2 levels) in covered_by_unique_index?'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations/uniqueness.rb:87:in `any?'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations/uniqueness.rb:87:in `block in covered_by_unique_index?'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations/uniqueness.rb:83:in `select'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations/uniqueness.rb:83:in `covered_by_unique_index?'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations/uniqueness.rb:79:in `validation_needed?'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations/uniqueness.rb:23:in `validate_each'
/vendor/bundle/ruby/3.0.0/gems/globalize-6.2.1/lib/patches/active_record/rails6_1/uniqueness_validator.rb:38:in `validate_each'
/vendor/bundle/ruby/3.0.0/gems/enumerize-2.5.0/lib/enumerize/hooks/uniqueness.rb:16:in `validate_each'
/vendor/bundle/ruby/3.0.0/gems/activemodel-7.1.0.rc2/lib/active_model/validator.rb:155:in `block in validate'
/vendor/bundle/ruby/3.0.0/gems/activemodel-7.1.0.rc2/lib/active_model/validator.rb:151:in `each'
/vendor/bundle/ruby/3.0.0/gems/activemodel-7.1.0.rc2/lib/active_model/validator.rb:151:in `validate'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:426:in `block in make_lambda'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:202:in `block (2 levels) in halting'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:707:in `block (2 levels) in default_terminator'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:706:in `catch'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:706:in `block in default_terminator'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:203:in `block in halting'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:598:in `block in invoke_before'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:598:in `each'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:598:in `invoke_before'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:109:in `run_callbacks'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:952:in `_run_validate_callbacks'
/vendor/bundle/ruby/3.0.0/gems/activemodel-7.1.0.rc2/lib/active_model/validations.rb:441:in `run_validations!'
/vendor/bundle/ruby/3.0.0/gems/activemodel-7.1.0.rc2/lib/active_model/validations/callbacks.rb:115:in `block in run_validations!'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:110:in `run_callbacks'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:952:in `_run_validation_callbacks'
/vendor/bundle/ruby/3.0.0/gems/activemodel-7.1.0.rc2/lib/active_model/validations/callbacks.rb:115:in `run_validations!'
/vendor/bundle/ruby/3.0.0/gems/activemodel-7.1.0.rc2/lib/active_model/validations.rb:366:in `valid?'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/validations.rb:72:in `valid?'
/app/controllers/admin/branches_controller.rb:194:in `block in create'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/connection_adapters/abstract/transaction.rb:531:in `block in within_new_transaction'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/concurrency/load_interlock_aware_monitor.rb:23:in `handle_interrupt'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/concurrency/load_interlock_aware_monitor.rb:23:in `block in synchronize'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/concurrency/load_interlock_aware_monitor.rb:19:in `handle_interrupt'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/concurrency/load_interlock_aware_monitor.rb:19:in `synchronize'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/connection_adapters/abstract/transaction.rb:528:in `within_new_transaction'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/connection_adapters/abstract/database_statements.rb:342:in `transaction'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/transactions.rb:212:in `transaction'
/app/controllers/admin/branches_controller.rb:179:in `create'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/abstract_controller/base.rb:224:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/ddtrace-0.53.0/lib/ddtrace/contrib/action_pack/action_controller/instrumentation.rb:127:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/metal/rendering.rb:165:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/abstract_controller/callbacks.rb:259:in `block in process_action'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:121:in `block in run_callbacks'
/vendor/bundle/ruby/3.0.0/gems/active_decorator-1.4.1/lib/active_decorator/view_context.rb:37:in `block (3 levels) in <module:Filter>'
/vendor/bundle/ruby/3.0.0/gems/active_decorator-1.4.1/lib/active_decorator/view_context.rb:25:in `run_with'
/vendor/bundle/ruby/3.0.0/gems/active_decorator-1.4.1/lib/active_decorator/view_context.rb:36:in `block (2 levels) in <module:Filter>'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:130:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:130:in `block in run_callbacks'
/vendor/bundle/ruby/3.0.0/gems/sentry-rails-5.11.0/lib/sentry/rails/controller_transaction.rb:28:in `block in sentry_around_action'
/vendor/bundle/ruby/3.0.0/gems/sentry-ruby-5.11.0/lib/sentry/hub.rb:102:in `with_child_span'
/vendor/bundle/ruby/3.0.0/gems/sentry-ruby-5.11.0/lib/sentry-ruby.rb:456:in `with_child_span'
/vendor/bundle/ruby/3.0.0/gems/sentry-rails-5.11.0/lib/sentry/rails/controller_transaction.rb:14:in `sentry_around_action'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:130:in `block in run_callbacks'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/callbacks.rb:141:in `run_callbacks'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/abstract_controller/callbacks.rb:258:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/metal/rescue.rb:25:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/metal/instrumentation.rb:74:in `block in process_action'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/notifications.rb:206:in `block in instrument'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/notifications.rb:206:in `instrument'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/metal/instrumentation.rb:73:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/metal/params_wrapper.rb:261:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/activerecord-7.1.0.rc2/lib/active_record/railties/controller_runtime.rb:32:in `process_action'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/abstract_controller/base.rb:160:in `process'
/vendor/bundle/ruby/3.0.0/gems/actionview-7.1.0.rc2/lib/action_view/rendering.rb:40:in `process'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/metal.rb:227:in `dispatch'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/test_case.rb:611:in `block in process_controller_response'
/vendor/bundle/ruby/3.0.0/gems/activesupport-7.1.0.rc2/lib/active_support/execution_wrapper.rb:92:in `wrap'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/test_case.rb:601:in `wrap_execution'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/test_case.rb:611:in `process_controller_response'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/test_case.rb:521:in `process'
/vendor/bundle/ruby/3.0.0/gems/rails-controller-testing-1.0.5/lib/rails/controller/testing/template_assertions.rb:62:in `process'
/vendor/bundle/ruby/3.0.0/gems/devise-4.8.1/lib/devise/test/controller_helpers.rb:35:in `block in process'
/vendor/bundle/ruby/3.0.0/gems/devise-4.8.1/lib/devise/test/controller_helpers.rb:104:in `catch'
/vendor/bundle/ruby/3.0.0/gems/devise-4.8.1/lib/devise/test/controller_helpers.rb:104:in `_catch_warden'
/vendor/bundle/ruby/3.0.0/gems/devise-4.8.1/lib/devise/test/controller_helpers.rb:35:in `process'
/vendor/bundle/ruby/3.0.0/gems/actionpack-7.1.0.rc2/lib/action_controller/test_case.rb:422:in `post'
/vendor/bundle/ruby/3.0.0/gems/rails-controller-testing-1.0.5/lib/rails/controller/testing/integration.rb:16:in `block (2 levels) in <module:Integration>'
/spec/controllers/admin/branches_controller_spec.rb:43:in `block (3 levels) in <top (required)>'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:263:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:263:in `block in run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:511:in `block in with_around_and_singleton_context_hooks'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:468:in `block in with_around_example_hooks'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:486:in `block in run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:626:in `block in run_around_example_hooks_for'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:352:in `call'
/vendor/bundle/ruby/3.0.0/gems/rspec-rails-6.0.3/lib/rspec/rails/example/controller_example_group.rb:192:in `block (2 levels) in <module:ControllerExampleGroup>'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:390:in `execute_with'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:628:in `block (2 levels) in run_around_example_hooks_for'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:352:in `call'
/vendor/bundle/ruby/3.0.0/gems/rspec-rails-6.0.3/lib/rspec/rails/adapters.rb:75:in `block (2 levels) in <module:MinitestLifecycleAdapter>'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:390:in `execute_with'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:628:in `block (2 levels) in run_around_example_hooks_for'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:352:in `call'
/spec/rails_helper.rb:249:in `block (2 levels) in <top (required)>'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:390:in `execute_with'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:628:in `block (2 levels) in run_around_example_hooks_for'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:352:in `call'
/vendor/bundle/ruby/3.0.0/gems/rspec-expectations-3.12.3/lib/rspec/expectations/failure_aggregator.rb:25:in `block in aggregate'
/vendor/bundle/ruby/3.0.0/gems/rspec-support-3.12.1/lib/rspec/support.rb:124:in `with_failure_notifier'
/vendor/bundle/ruby/3.0.0/gems/rspec-expectations-3.12.3/lib/rspec/expectations/failure_aggregator.rb:23:in `aggregate'
/vendor/bundle/ruby/3.0.0/gems/rspec-expectations-3.12.3/lib/rspec/matchers.rb:306:in `aggregate_failures'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/configuration.rb:2253:in `block in define_built_in_hooks'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:457:in `instance_exec'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:390:in `execute_with'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:628:in `block (2 levels) in run_around_example_hooks_for'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:352:in `call'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:629:in `run_around_example_hooks_for'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/hooks.rb:486:in `run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:468:in `with_around_example_hooks'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:511:in `with_around_and_singleton_context_hooks'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example.rb:259:in `run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example_group.rb:646:in `block in run_examples'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example_group.rb:642:in `map'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example_group.rb:642:in `run_examples'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example_group.rb:607:in `run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example_group.rb:608:in `block in run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example_group.rb:608:in `map'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/example_group.rb:608:in `run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:121:in `block (3 levels) in run_specs'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:121:in `map'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:121:in `block (2 levels) in run_specs'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/configuration.rb:2070:in `with_suite_hooks'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:116:in `block in run_specs'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/reporter.rb:74:in `report'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:115:in `run_specs'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:89:in `run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:71:in `run'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/lib/rspec/core/runner.rb:45:in `invoke'
/vendor/bundle/ruby/3.0.0/gems/rspec-core-3.12.2/exe/rspec:4:in `<top (required)>'
/vendor/bundle/ruby/3.0.0/bin/rspec:25:in `load'
/vendor/bundle/ruby/3.0.0/bin/rspec:25:in `<main>'
```

### Expected behavior
<!-- Tell us what should happen -->

### Actual behavior
<!-- Tell us what happens instead -->

### System configuration
**Rails version**: 7.1.0.rc2

**Ruby version**: 3.0.5
"
49473,Strict loading in `:n_plus_one_only` mode should not eager load child associations,reid-rigo,"activerecord, attached PR",2023-10-03T15:23:23Z,2023-10-04T10:57:29Z,,"### Description
Strict loading in `:n_plus_one_only` mode is designed to prevent performance issues when deeply traversing associations. It allows `Person.find(1).posts`, but _not_ `Person.find(1).posts.map(&:category)`. This fix avoids the surprise that occurs when `person.posts.first` eagerly loads the whole association rather than allowing the user to manage the child association.

This fixes a serious ordering issue. Without strict loading, `person.posts.first` is guaranteed to return the first post in primary key order. On the other hand, `person.posts.load.first` is nondeterministic. The database is not guaranteed to return in a consistent order, in particular under load with other operations occurring. This is a rude surprise when trying to use `:n_plus_one_only` mode.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
This can be reproduced via any `has_many` association. Here's an example using ActiveRecord test models:
```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first
# SELECT * FROM posts WHERE person_id = 1; -- non-deterministic order
```

### Expected behavior
<!-- Tell us what should happen -->
```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first # this is 1+1, not N+1
# SELECT * FROM posts WHERE person_id = 1 ORDER BY id LIMIT 1;
```

### Actual behavior
<!-- Tell us what happens instead -->
```ruby
person = Person.find(1)
person.strict_loading!(mode: :n_plus_one_only)
person.posts.first
# SELECT * FROM posts WHERE person_id = 1; -- non-deterministic order
```

### Proposed fix
Please see #48785 

### System configuration
**Rails version**: `rails (7.0.7.2)`
**Ruby version**: `ruby 3.2.2`
"
49468,`validates_uniqueness_of` does not work with `mark_for_destruction`,ghiculescu,activerecord,2023-10-03T06:56:13Z,2023-10-04T23:59:47Z,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.text :title
    t.integer :post_id

    t.index [:title, :post_id], unique: true
  end
end

class Post < ActiveRecord::Base
  has_many :comments, autosave: true
end

class Comment < ActiveRecord::Base
  belongs_to :post
  validates_uniqueness_of :title
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    post.comments.create!(title: ""hi"")

    # reload
    post = Post.find(post.id)

    post.comments[0].mark_for_destruction
    post.comments.build(title: ""hi"")

    # raises ActiveRecord::RecordInvalid: Validation failed: Comments title has already been take
    post.save!

    assert_equal 1, post.comments.count
  end
end
```

### Expected behavior
I expect the test to pass.

### Actual behavior
`post.save!` raises with a validation error.

If you remove the `validates_uniqueness_of` and just keep the unique database constraint, the test passes. I expect `validates_uniqueness_of` to do the same thing as an equivalent database index, so I expect it to not block the save here.

Before working on a PR I'd like to get confirmation on if this expectation is wrong.

### System configuration
**Rails version**: main

**Ruby version**: 3.2.2
"
49464,`RubyTrackerTest` fail using ruby 3.3.0dev since ruby/ruby#8573,yahonda,"actionview, attached PR, ci issues",2023-10-03T02:02:33Z,2023-10-09T19:06:19Z,2023-10-09T19:06:19Z,"Managed to reproduce CI failure at https://buildkite.com/rails/rails/builds/100319#018af314-f0bd-4ea0-ae84-f2f576479e56/1090-1099

### Steps to reproduce
1. Install `ruby 3.3.0dev` including https://github.com/ruby/ruby/pull/8573
```ruby
cd actionview
bin/test test/template/dependency_tracker_test.rb -n /test_finds_dependenc/
```

### Expected behavior
It should pass.

### Actual behavior

```ruby
$ bin/test test/template/dependency_tracker_test.rb -n /test_finds_dependenc/
Running 39 tests in a single process (parallelization threshold is 50)
Run options: -n /test_finds_dependenc/ --seed 56149

# Running:

E

Error:
RubyTrackerTest#test_finds_dependencies_on_method_chains:
NoMethodError: undefined method `pluralize' for an instance of Symbol
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:120:in `render_call_template'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:18:in `render_calls'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:32:in `render_dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:13:in `dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/test/template/dependency_tracker_test.rb:158:in `test_finds_dependencies_on_method_chains'


bin/test test/template/dependency_tracker_test.rb:154

..E

Error:
RubyTrackerTest#test_finds_dependencies_with_extra_spaces:
NoMethodError: undefined method `pluralize' for an instance of Symbol
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:120:in `render_call_template'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:18:in `render_calls'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:32:in `render_dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:13:in `dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/test/template/dependency_tracker_test.rb:197:in `test_finds_dependencies_with_extra_spaces'


bin/test test/template/dependency_tracker_test.rb:179

E

Error:
RubyTrackerTest#test_finds_dependency_in_correct_directory:
NoMethodError: undefined method `pluralize' for an instance of Symbol
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:120:in `render_call_template'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:18:in `render_calls'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:32:in `render_dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:13:in `dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/test/template/dependency_tracker_test.rb:85:in `test_finds_dependency_in_correct_directory'


bin/test test/template/dependency_tracker_test.rb:81

E

Error:
RubyTrackerTest#test_finds_dependencies_with_bare_assoc_hash_on_constant:
NoMethodError: undefined method `pluralize' for an instance of Symbol
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:120:in `render_call_template'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:18:in `render_calls'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:32:in `render_dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:13:in `dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/test/template/dependency_tracker_test.rb:209:in `test_finds_dependencies_with_bare_assoc_hash_on_constant'


bin/test test/template/dependency_tracker_test.rb:200

..E

Error:
RubyTrackerTest#test_finds_dependency_in_correct_directory_with_underscore:
NoMethodError: undefined method `pluralize' for an instance of Symbol
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:120:in `render_call_template'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/render_parser/prism_render_parser.rb:18:in `render_calls'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:32:in `render_dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/dependency_tracker/ruby_tracker.rb:13:in `dependencies'
    /home/yahonda/src/github.com/rails/rails/actionview/test/template/dependency_tracker_test.rb:92:in `test_finds_dependency_in_correct_directory_with_underscore'


bin/test test/template/dependency_tracker_test.rb:88

.........

Finished in 0.010077s, 1786.3040 runs/s, 1290.1085 assertions/s.
18 runs, 13 assertions, 0 failures, 5 errors, 0 skips
$
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.3.0dev (2023-10-02T13:18:56Z master 87dad067e0) [x86_64-linux]
"
49463,Change in ActiveRecord::Relation#merge behavior on v7.0.8,ajvondrak,activerecord,2023-10-03T02:01:32Z,2023-10-04T07:52:11Z,2023-10-03T10:59:42Z,"### Steps to reproduce

**Context:**
- 515aa1ea4ed6fc744636d5c3495e44b88057dcf6 changed how `ActiveRecord::Relation#merge` behaves circa v7.0.0rc1
- #48095 added the `Arel::Nodes::And#fetch_attribute` method circa v7.0.8 (previously, `And` used the default `Arel::Nodes::Node` implementation that just returns `nil`)
- However, the above patch has changed the output of `#merge` in a weird corner case, and I'm not sure whether it's considered correct (in light of the new Rails 7 behavior) or incorrect (because the output has changed—perhaps unexpectedly?—between patch versions)

```ruby
require ""bundler/inline""

gemfile do
  gem ""rails"", ENV[""RAILS_VERSION""]
  gem ""sqlite3""
end

require ""active_record""

# db adapter shouldn't actually impact this repro
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Schema.define { create_table :models, force: true }

class Model < ActiveRecord::Base
end

$nesting = 0

trace = TracePoint.new(:call, :return) do |tp|
  case tp.self
  when ActiveRecord::Relation::WhereClause, Arel::Nodes::Node
    case tp.event
    when :call
      puts ""#{'  ' * $nesting}#{tp.self} #{tp.method_id}""
      $nesting += 1
    when :return
      $nesting -= 1
      puts ""#{'  ' * $nesting}--> #{tp.return_value.inspect}""
    end
  end
end

# I'm afraid this is as simplified as I can get the repro! Our actual query had the same basic shape.
x = Model.where.not(a: 1)
y = Model.where.not(a: 2).where.not(b: ['', nil])
z = Model.where(c: true)
y_or_z = y.or(z)

trace.enable if ENV[""TRACE""]
merged = x.merge(y_or_z)
trace.disable

puts ""\n=== SQL generated on Rails #{Rails.version} ===""
puts merged.to_sql
```

Prior to v7.0.8, the `WHERE` clause includes the first `""models"".""a"" != 1` condition:

```console
$ RAILS_VERSION=7.0.7.2 ruby repro.rb
-- create_table(:models, {:force=>true})
   -> 0.0125s

=== SQL generated on Rails 7.0.7.2 ===
SELECT ""models"".* FROM ""models"" WHERE ""models"".""a"" != 1 AND (""models"".""a"" != 2 AND NOT ((""models"".""b"" = '' OR ""models"".""b"" IS NULL)) OR ""models"".""c"" = 1)
```

However, with the patch in v7.0.8, the `""models"".""a"" != 1` condition disappears:

```console
$ RAILS_VERSION=7.0.8 ruby repro.rb
-- create_table(:models, {:force=>true})
   -> 0.0056s

=== SQL generated on Rails 7.0.8 ===
SELECT ""models"".* FROM ""models"" WHERE (""models"".""a"" != 2 AND NOT ((""models"".""b"" = '' OR ""models"".""b"" IS NULL)) OR ""models"".""c"" = 1)
```

### Expected behavior

I'm not sure what the desired behavior is here, in light of the changes to `#merge` circa Rails v7.0.0rc1.

It could be that this is now considered the ""right"" behavior: you could say that the `y_or_z` predicates include a condition on the `""models"".""a""` column, so the predicates in `x` should be clobbered, even though the query results now change between patch versions of Rails.

OTOH, it seems like this behavior change may have been unintentional (as it relates to the `unscope` issue), so I wanted to call attention to it, in case there are more tests that can/should be added.

### Actual behavior

If you run the repro script with `TRACE=1`, you can see that `Arel::Nodes::And#fetch_attribute` winds up recursing down into its children in 7.0.8 (versus returning `nil` immediately in older versions), which appears to have a ripple effect on the logic of `ActiveRecord::Relation::WhereClause#referenced_columns`, which influences how the `#merge` goes (output truncated here for brevity):

```console
$ RAILS_VERSION=7.0.7.2 TRACE=1 ruby repro.rb | head -11
-- create_table(:models, {:force=>true})
   -> 0.0113s
#<ActiveRecord::Relation::WhereClause:0x000000010c498448> merge
  #<ActiveRecord::Relation::WhereClause:0x000000010c498448> predicates_unreferenced_by
    #<ActiveRecord::Relation::WhereClause:0x000000010c492fe8> referenced_columns
      #<ActiveRecord::Relation::WhereClause:0x000000010c492fe8> each_attributes
        #<ActiveRecord::Relation::WhereClause:0x000000010c492fe8> extract_attribute
          #<Arel::Nodes::Grouping:0x000000010c492598> fetch_attribute
            #<Arel::Nodes::Or:0x000000010c4926d8> fetch_attribute
              #<Arel::Nodes::And:0x000000010c492c00> fetch_attribute
              --> nil
```

```console
$ RAILS_VERSION=7.0.8 TRACE=1 ruby repro.rb | head -15
-- create_table(:models, {:force=>true})
   -> 0.0098s
#<ActiveRecord::Relation::WhereClause:0x000000010e09a538> merge
  #<ActiveRecord::Relation::WhereClause:0x000000010e09a538> predicates_unreferenced_by
    #<ActiveRecord::Relation::WhereClause:0x000000010e098850> referenced_columns
      #<ActiveRecord::Relation::WhereClause:0x000000010e098850> each_attributes
        #<ActiveRecord::Relation::WhereClause:0x000000010e098850> extract_attribute
          #<Arel::Nodes::Grouping:0x000000010e098508> fetch_attribute
            #<Arel::Nodes::Or:0x000000010e098558> fetch_attribute
              #<Arel::Nodes::And:0x000000010e0986c0> fetch_attribute
                #<Arel::Nodes::NotEqual:0x000000010e099ef8> fetch_attribute
                --> #<struct Arel::Attributes::Attribute relation=#<Arel::Table:0x000000010c6c1fa8 @name=""models"", @klass=Model(id: integer), @type_caster=#<ActiveRecord::TypeCaster::Map:0x000000010e09cf68 @klass=Model(id: integer)>, @table_alias=nil>, name=""a"">
                #<Arel::Nodes::Not:0x000000010e0994a8> fetch_attribute
                --> nil
              --> false
```

### System configuration

**Rails version**: this potential regression applies to Rails 7.0.8

**Ruby version**: `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-darwin22]`"
49461,ActiveSupport::NumberHelper number_to_currency loss of precision in Rails 7.x,mrpasquini,"regression, actionview, attached PR",2023-10-02T19:12:31Z,2023-10-03T11:06:15Z,2023-10-03T11:06:15Z,"### Steps to reproduce
```
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""
require 'action_view'

  
class BugTest < Minitest::Test
include ActionView::Helpers::NumberHelper
  
  def test_large_number_to_currency
    large_string = ""123456789012345678.91""
    
    assert ""$123,456,789,012,345,678.91"" == number_to_currency(large_string, locale: :en)
  end
end
```

or manually in console:
```
> include ActionView::Helpers::NumberHelper
> large_string = ""123456789012345678.91""
> large_bd = BigDecimal(large_string)

> number_to_currency(large_string, locale: :en)
=> ""$123,456,789,012,345,680.00""
> number_to_currency(large_bd, locale: :en)
=> ""$123,456,789,012,345,680.00""
```

### Expected behavior
```
# (Rails 6.1.7.6)
> include ActionView::Helpers::NumberHelper
=> Object
> large_string = ""123456789012345678.91""
=> ""123456789012345678.91""
> large_bd= BigDecimal(large_string)
=> 0.12345678901234567891e18

> number_to_currency(large_string, locale: :en)
=> ""$123,456,789,012,345,678.91""
> number_to_currency(large_bd, locale: :en)
=> ""$123,456,789,012,345,678.91""
```

### Actual behavior
```
# (Rails 7.0.8)
> include ActionView::Helpers::NumberHelper
=> Object
> large_string = ""123456789012345678.91""
=> ""123456789012345678.91""
> large_bd = BigDecimal(large_string)
=> 0.12345678901234567891e18

> number_to_currency(large_string, locale: :en)
=> ""$123,456,789,012,345,680.00""
> number_to_currency(large_bd, locale: :en)
=> ""$123,456,789,012,345,680.00""

```

Starting in Rails 7, precision is limited to 17 leftmost digits. Previously string and BigDecimal input values with more precision were preserved.

https://github.com/rails/rails/pull/43098 looks like where the change in behavior was introduced possibly with `valid_float?` always performing a float conversion.

### System configuration
**Rails version**: Rails 7.0.8

**Ruby version**: ruby 3.1.3p185"
49459,Reading from read replica using connected_to method will not enforce limit query,taman9333,activerecord,2023-10-02T18:41:57Z,2023-10-03T15:02:08Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
ActiveRecord::Base.connected_to(role: :reading) { Customer.where(name: ""Roberto"") }
```

### Expected behavior
<!-- Tell us what should happen -->
SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""name"" = 'Roberto' LIMIT 11.

### Actual behavior
<!-- Tell us what happens instead -->
SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""name"" = 'Roberto' 

Query without limit can lead to a query that would take a lot of time to execute, so I am wondering why using `connected_to` will not add limit query implicitly exactly as if we are executing query without using `connected_to`

Doing the following query in rails console
```ruby
Customer.where(name: ""Roberto"")
```

will generate the following sql
SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""name"" = 'Roberto' LIMIT 11.

### System configuration
**Rails version**: 6.0.5.1

**Ruby version**: 2.7.6
"
49457,Using config gem and with_options crashed on 7.1.0.rc1,euglena1215,"third party issue, With reproduction steps",2023-10-02T13:51:05Z,2023-10-02T18:00:00Z,2023-10-02T18:00:00Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", tag: ""v7.1.0.rc1""
  # gem ""rails"", github: ""rails/rails"", tag: ""v7.1.0.beta1"" # It works
  gem ""sqlite3""
  gem ""config""
end

require ""active_record""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
  with_options if: -> { true } do
    validates :foo, presence: true
    validate :something_validation
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->

Complete loading without crashing.

<details><summary>Execution result in v7.1.0.beta1</summary>

```shell
% ruby reproduce.rb
Fetching https://github.com/rails/rails.git
Fetching gem metadata from https://rubygems.org/..........
Resolving dependencies...
-- create_table(:posts, {:force=>true})
D, [2023-10-02T22:45:26.402083 #92115] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""posts""
D, [2023-10-02T22:45:26.402355 #92115] DEBUG -- :    (0.2ms)  CREATE TABLE ""posts"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL)
   -> 0.0089s
D, [2023-10-02T22:45:26.402963 #92115] DEBUG -- :    (0.0ms)  CREATE TABLE ""schema_migrations"" (""version"" varchar NOT NULL PRIMARY KEY)
D, [2023-10-02T22:45:26.403759 #92115] DEBUG -- :    (0.0ms)  CREATE TABLE ""ar_internal_metadata"" (""key"" varchar NOT NULL PRIMARY KEY, ""value"" varchar, ""created_at"" datetime(6) NOT NULL, ""updated_at"" datetime(6) NOT NULL)
D, [2023-10-02T22:45:26.415922 #92115] DEBUG -- :   ActiveRecord::InternalMetadata Load (1.7ms)  SELECT * FROM ""ar_internal_metadata"" WHERE ""ar_internal_metadata"".""key"" = ? ORDER BY ""ar_internal_metadata"".""key"" ASC LIMIT 1  [[nil, ""environment""]]
D, [2023-10-02T22:45:26.416117 #92115] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.0ms)  INSERT INTO ""ar_internal_metadata"" (""key"", ""value"", ""created_at"", ""updated_at"") VALUES ('environment', 'development', '2023-10-02 13:45:26.415971', '2023-10-02 13:45:26.415973')
```

</details> 

### Actual behavior
<!-- Tell us what happens instead -->

raises ArgumentError

```
% ruby reproduce.rb
Fetching https://github.com/rails/rails.git
Fetching gem metadata from https://rubygems.org/..........
Resolving dependencies...
-- create_table(:posts, {:force=>true})
D, [2023-10-02T22:42:04.623135 #91869] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""posts""
D, [2023-10-02T22:42:04.623333 #91869] DEBUG -- :    (0.1ms)  CREATE TABLE ""posts"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL)
   -> 0.0070s
D, [2023-10-02T22:42:04.624177 #91869] DEBUG -- :    (0.1ms)  CREATE TABLE ""schema_migrations"" (""version"" varchar NOT NULL PRIMARY KEY)
D, [2023-10-02T22:42:04.625161 #91869] DEBUG -- :    (0.0ms)  CREATE TABLE ""ar_internal_metadata"" (""key"" varchar NOT NULL PRIMARY KEY, ""value"" varchar, ""created_at"" datetime(6) NOT NULL, ""updated_at"" datetime(6) NOT NULL)
D, [2023-10-02T22:42:04.636874 #91869] DEBUG -- :   ActiveRecord::InternalMetadata Load (1.1ms)  SELECT * FROM ""ar_internal_metadata"" WHERE ""ar_internal_metadata"".""key"" = ? ORDER BY ""ar_internal_metadata"".""key"" ASC LIMIT 1  [[nil, ""environment""]]
D, [2023-10-02T22:42:04.637118 #91869] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.0ms)  INSERT INTO ""ar_internal_metadata"" (""key"", ""value"", ""created_at"", ""updated_at"") VALUES ('environment', 'development', '2023-10-02 13:42:04.636924', '2023-10-02 13:42:04.636926') RETURNING ""key""
/Users/me/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/bundler/gems/rails-bf460ba277b7/activemodel/lib/active_model/validations.rb:177:in `block in validate': Unknown key: :presence. Valid keys are: :on, :if, :unless, :prepend. Perhaps you meant to call `validates` instead of `validate`? (ArgumentError)

              raise ArgumentError.new(""Unknown key: #{k.inspect}. Valid keys are: #{VALID_OPTIONS_FOR_VALIDATE.map(&:inspect).join(', ')}. Perhaps you meant to call `validates` instead of `validate`?"")
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	from /Users/me/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/bundler/gems/rails-bf460ba277b7/activemodel/lib/active_model/validations.rb:175:in `each_key'
	from /Users/me/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/bundler/gems/rails-bf460ba277b7/activemodel/lib/active_model/validations.rb:175:in `validate'
	from /Users/me/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/bundler/gems/rails-bf460ba277b7/activesupport/lib/active_support/option_merger.rb:28:in `method_missing'
	from reproduce.rb:31:in `block in <class:Post>'
	from /Users/me/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/bundler/gems/rails-bf460ba277b7/activesupport/lib/active_support/core_ext/object/with_options.rb:96:in `instance_eval'
	from /Users/me/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/bundler/gems/rails-bf460ba277b7/activesupport/lib/active_support/core_ext/object/with_options.rb:96:in `with_options'
	from reproduce.rb:29:in `<class:Post>'
	from reproduce.rb:28:in `<main>'
```

### System configuration
**Rails version**: `v7.1.0.rc1`

**Ruby version**: `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]`
"
49453,Performance issue,tfader,activerecord,2023-10-02T09:49:07Z,2023-10-03T14:15:13Z,2023-10-03T12:50:15Z,"Is't correct with difference running time as above?

```ruby
**#real=8.912131999997655**
def get_item_attrs(sale_item:) 
      return [] if sale_item.blank?
      item = Item.find_by(id: sale_item.item_id)
      return [] if item.blank?
      item.item_attrs.pluck(:attr_id)
end
```

```ruby
**#real=11.078622999993968**
def get_item_attrs(sale_item:) 
      return [] if sale_item.blank?
      sale_item.item.item_attrs.pluck(:attr_id)
end
```"
49446,`ArgumentError (comparison of Integer with String failed)` when encrypting data with `message_pack`,luizkowalski,activesupport,2023-10-01T18:23:04Z,2023-10-01T20:51:49Z,2023-10-01T20:51:44Z,"I have an app where I encrypt some content based on a user-provided password, like this

```ruby
APPLICATION_KEY = Rails.application.credentials.application_secret_key # 64 chars key
KEY_LENGTH      = ActiveSupport::MessageEncryptor.key_len

...

def encrypt_content
  self.content = encryptor(password: password).encrypt_and_sign(raw_content)
  self.raw_content = nil
end

def encryptor(password:)
  ActiveSupport::KeyGenerator.new(password).generate_key(APPLICATION_KEY, KEY_LENGTH).then do |user_key|
    ActiveSupport::MessageEncryptor.new(user_key)
  end
end
```

It is working fine, but I'm upgrading to Rails 7.1.0.rc1, and I set this configuration:

```ruby
Rails.application.config.active_support.message_serializer = :message_pack
```

now, when I try to encrypt data, I get this error:


```sh
 development  irb(main):001> Record.new(raw_content: 'hello', password: '123').save
/Users/luiz/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/msgpack-1.7.2/lib/msgpack/factory.rb:149:in `<': comparison of Integer with String failed (ArgumentError)

              if member && @members.size < @size
```

Now, I'm not familiar with `msgpack` whatsoever, but I didn't expect this issue since I'm not doing anything out of the ordinary.

### Expected behavior
`MessageEncryptor` should work just fine

### Actual behavior
ArgumentError thrown

### System configuration
**Rails version**: 7.1.0.rc
```
remote: https://github.com/rails/rails.git
revision: c42dc1329c24c0d751fec654b711cb310f7d737e
```

**Ruby version**:
3.2.2"
49439,`PersistenceTest#test_persisted_returns_boolean` fails at 7-1-stable branch,yahonda,"activerecord, PostgreSQL, ci issues",2023-09-30T13:08:56Z,2023-10-02T12:56:21Z,2023-10-02T08:05:47Z,"Managed to reproduce this 7-1-stable branch CI failure.

https://buildkite.com/rails/rails/builds/100265#018ae40b-9424-4772-a311-3263c2230ec4/1192-1203

This issue only reports the first error while there is 11 failures and 25 errors https://buildkite.com/rails/rails/builds/100265#018ae40b-9424-4772-a311-3263c2230ec4/1192-2016 because the first error may be causing all following errors/failures.


### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails
git checkout 7-1-stable
bundle update sdoc --conservative # or `rm Gemfile.lock ; bundle install`
cd activerecord
ARCONN=postgresql bundle exec ruby -Itest:lib -e 'require ""./test/cases/active_record_test.rb"" ; require ""./test/cases/relation/merging_test.rb"" ; require ""./test/cases/persistence_test.rb""' -- --seed 63051  -n ""/^(?:ActiveRecordTest#(?:test_.disconnect_all\!_closes_all_connections)|RelationMergingTest#(?:test_merging_reorders_bind_params)|PersistenceTest#(?:test_persisted_returns_boolean))$/""
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ ARCONN=postgresql bundle exec ruby -Itest:lib -e 'require ""./test/cases/active_record_test.rb"" ; require ""./test/cases/relation/merging_test.rb"" ; require ""./test/cases/persistence_test.rb""' -- --seed 63051  -n ""/^(?:ActiveRecordTest#(?:test_.disconnect_all\!_closes_all_connections)|RelationMergingTest#(?:test_merging_reorders_bind_params)|PersistenceTest#(?:test_persisted_returns_boolean))$/""
Using postgresql
Run options: --seed 63051 -n ""/^(?:ActiveRecordTest#(?:test_.disconnect_all\\!_closes_all_connections)|RelationMergingTest#(?:test_merging_reorders_bind_params)|PersistenceTest#(?:test_persisted_returns_boolean))$/""

# Running:

..E

Error:
PersistenceTest#test_persisted_returns_boolean:
ActiveRecord::RecordInvalid: Validation failed: Salary is not included in the list
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/validations.rb:84:in `raise_validation_error'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/validations.rb:55:in `save!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/transactions.rb:313:in `block in save!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/transactions.rb:365:in `block in with_transaction_returning_status'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:531:in `block in within_new_transaction'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:23:in `handle_interrupt'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:23:in `block in synchronize'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:19:in `handle_interrupt'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:19:in `synchronize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:528:in `within_new_transaction'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:342:in `transaction'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/transactions.rb:361:in `with_transaction_returning_status'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/transactions.rb:313:in `save!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/suppressor.rb:56:in `save!'
    /home/yahonda/src/github.com/rails/rails/activerecord/test/cases/persistence_test.rb:1301:in `test_persisted_returns_boolean'


bin/rails test /home/yahonda/src/github.com/rails/rails/activerecord/test/cases/persistence_test.rb:1298



Finished in 0.151615s, 19.7869 runs/s, 32.9782 assertions/s.
3 runs, 5 assertions, 0 failures, 1 errors, 0 skips
$
```

### System configuration
**Rails version**: `7-1-stable`, it does not reproduce at `main`

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
49434,"Using group and aggregated functions on dates with sqlite3, returns date as a string and not as a Time object.",mariochavez,"activerecord, With reproduction steps",2023-09-29T17:36:37Z,2023-10-06T18:22:12Z,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.timestamps
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    Post.create!

    assert_kind_of Time, Post.group(:created_at).pluck(""MAX(created_at) AS last_date"").first
  end
end
```

### Expected behavior
Returned date must be a Time object.
2023-09-29 00:00:00 -0400 - Time

### Actual behavior
Returned date is a String.
2023-09-29 17:32:20.148108 - String

```
Failure:
BugTest#test_association_stuff [sqlite.rb:39]:
Expected ""2023-09-29 17:35:06.041688"" to be a kind of Time, not String.
```

NOTE: Postgresql adapter returns a Time object.

### System configuration
**Rails version**:
main@d38dcdc

**Ruby version**:
3.2.2"
49422,"Weird `[""` being added to cookie names on Rails 7.1.0 RC1",brunnopleffken,actionpack,2023-09-28T22:10:41Z,2023-10-03T15:33:18Z,2023-10-03T10:37:13Z,"### Steps to reproduce

I'm using Phusion Passenger + Nginx. I upgraded my app from Rails 7.0.8 to Rails 7.1 RC1, using the unaltered code below for getting email and password, authenticating and creating cookies as I always did:

```ruby
# authenticate and get user
# ...
token = WebToken.encode({ user_id: user.id })
cookies.permanent[:user_id] = token
```

Now, Rails 7.1.0 is storing cookies with `[""`, like this:

<img width=""633"" alt=""Screenshot 2023-09-28 at 18 59 38"" src=""https://github.com/rails/rails/assets/3427344/96f86b61-c7bf-4e1c-b616-bfba3ab664c2"">

This is getting me a LOT of trouble because...

```ruby
if cookies[:user_id].blank?
  # ...I'm ALWAYS getting here because the cookie name is invalid
end
```

Renaming manually it to just `user_id` (which means removing `[""`), everything works perfectly like before.

### Expected behavior

The name of the cookie should be `user_id`.

### Actual behavior

The name is `[""user_id`, so it's impossible to authenticate a user with the actual name.

### System configuration
**Rails version**: 7.1.0 RC1

**Ruby version**: 3.3.0-preview2
"
49419,[DOCS] has_one association options in guides does reflect all options in api,silva96,"activerecord, docs, good first issue",2023-09-28T15:51:45Z,2023-09-29T20:25:41Z,2023-09-29T20:25:41Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
```

### Expected behavior
<!-- Tell us what should happen -->
Go to https://edgeguides.rubyonrails.org/association_basics.html#options-for-has-one

You should see :required option, and other options that are present [in the api](https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one-label-Options)

I suspect has_many and maybe other relations don't reflect all options, like `: ensuring_owner_was`

### Actual behavior
<!-- Tell us what happens instead -->
Go to https://edgeguides.rubyonrails.org/association_basics.html#options-for-has-one

You don't see :required option, and other options that are present [in the api](https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one-label-Options)

### System configuration
**Rails version**: Any version

**Ruby version**: It doesn't matter
"
49408,ActiveRecord: TypeError when trying to destroy a composite primary key parent with a present `dependent: :restrict_with_error` association,mateigl,activerecord,2023-09-27T14:44:16Z,2023-09-27T17:32:59Z,2023-09-27T17:32:59Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

A TypeError rises when destruction a parent object (with a composite primary key!) gets prevented by a `dependent: :restrict_with_error` child association.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""7.1.0.rc1""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, primary_key: [""title"", ""category""], force: true do |t|
    t.string :title
    t.string :category
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :category
  end
end

class Post < ActiveRecord::Base
  self.primary_key = [:title, :category]

  has_many :comments,
           primary_key: :post_id,
           foreign_key: :category,
           dependent: :restrict_with_error
end

class Comment < ActiveRecord::Base
  belongs_to :post,
             primary_key: [:title, :category],
             foreign_key: :category
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    post.comments << Comment.create!

    post.destroy!
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->

The following exception should rise instead:
```bash
ActiveRecord::RecordNotDestroyed: Failed to destroy Post with category=
```

### Actual behavior
<!-- Tell us what happens instead -->

A TypeError rises because the composite primary key is an Array but gets handled like a method:

```bash
TypeError: [""title"", ""category""] is not a symbol nor a string
```

### System configuration
**Rails version**: v7.1.0.rc1

**Ruby version**: 3.2.2
"
49406,Documentation: execution order of ActiveJob retry_on / discard_on is unspecified,dssjoblom,"docs, activejob",2023-09-27T13:21:49Z,2023-09-28T06:44:09Z,2023-09-28T05:02:04Z,"As far as I can tell, the documentation does not explicitly define the order of execution of multiple `retry_on` / `discard_on` blocks. This makes application code unnecessarily dependent on internal implementation details.

For example, consider the following case:

```ruby
class BaseError < StandardError; end

class SpecializedError < BaseError; end

class MyJob < ApplicationJob 
  discard_on BaseError
  retry_on SpecializedError
end
```

The idea here would be to retry only specific errors and discard the rest. The example works as intended, but it is unclear why, as it fails if the order of the `discard_on` and `retry_on` lines are inverted."
49385,nested_attributes create with pre-filled id,armellarcier,activerecord,2023-09-26T09:34:26Z,2023-10-06T09:49:01Z,2023-10-06T09:49:01Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

```ruby
order = Order.new
order.order_lines_attributes = [{ id: 'uuid1', name: 'first line', _create: true }]
order.save
```

### Expected behavior
<!-- Tell us what should happen -->

creates an Order with an OrderLine, giving the OrderLine 'uuid1' as an id

### Actual behavior
<!-- Tell us what happens instead -->

`raise_nested_attributes_record_not_found!`

### Suggestion

Add an option so that nested_attributes looks like

```
          if attributes[""id""].blank? || attributes[""_create""]
            unless reject_new_record?(association_name, attributes)
              association.reader.build(attributes.except(*UNASSIGNABLE_KEYS))
            end
...
```

### System configuration
**Rails version**: Rails 7.0.3.1

**Ruby version**: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux-musl]
"
49375,Can Rails run without tzdata / tzinfo-data,voxik,railties,2023-09-25T08:27:36Z,2023-09-30T13:15:53Z,2023-09-27T02:52:53Z,"The tzdata package is by default not installed in Fedora anymore. Due to this, quite some package depending on Rails are failing for us with errors such as:

~~~
/usr/share/gems/gems/tzinfo-2.0.6/lib/tzinfo/data_sources/zoneinfo_data_source.rb:252:in `initialize': None of the paths included in TZInfo::DataSources::ZoneinfoDataSource.search_path are valid zoneinfo directories. (TZInfo::DataSources::ZoneinfoDirectoryNotFound)
    from /usr/share/gems/gems/tzinfo-2.0.6/lib/tzinfo/data_source.rb:157:in `new'
    from /usr/share/gems/gems/tzinfo-2.0.6/lib/tzinfo/data_source.rb:157:in `create_default_data_source'
    from /usr/share/gems/gems/tzinfo-2.0.6/lib/tzinfo/data_source.rb:55:in `block in get'
    from /usr/share/gems/gems/tzinfo-2.0.6/lib/tzinfo/data_source.rb:54:in `synchronize'
    from /usr/share/gems/gems/tzinfo-2.0.6/lib/tzinfo/data_source.rb:54:in `get'
    from /usr/share/gems/gems/activesupport-7.0.8/lib/active_support/railtie.rb:88:in `block in <class:Railtie>'
    from /usr/share/gems/gems/railties-7.0.8/lib/rails/initializable.rb:32:in `instance_exec'
    from /usr/share/gems/gems/railties-7.0.8/lib/rails/initializable.rb:32:in `run'
    from /usr/share/gems/gems/railties-7.0.8/lib/rails/initializable.rb:61:in `block in run_initializers'
    from /usr/share/ruby/tsort.rb:231:in `block in tsort_each'
    from /usr/share/ruby/tsort.rb:353:in `block (2 levels) in each_strongly_connected_component'
    from /usr/share/ruby/tsort.rb:434:in `each_strongly_connected_component_from'
    from /usr/share/ruby/tsort.rb:352:in `block in each_strongly_connected_component'
    from /usr/share/ruby/tsort.rb:350:in `each'
    from /usr/share/ruby/tsort.rb:350:in `call'
    from /usr/share/ruby/tsort.rb:350:in `each_strongly_connected_component'
    from /usr/share/ruby/tsort.rb:229:in `tsort_each'
    from /usr/share/ruby/tsort.rb:208:in `tsort_each'
    from /usr/share/gems/gems/railties-7.0.8/lib/rails/initializable.rb:60:in `run_initializers'
    from /usr/share/gems/gems/railties-7.0.8/lib/rails/application.rb:372:in `initialize!' 
~~~

The thing is that while we can force installation of tzdata via package dependencies, some projects might opt for installing tzinfo-data gem instead.

Now I have two questions:

1) Are the tzdata really always required? Could they be e.g. lazy loaded?

2) I believe that the error is not properly handled. In the following code:

https://github.com/rails/rails/blob/e35e78020f27836a53f5e54ada1c3e63aed2cd4f/activesupport/lib/active_support/railtie.rb#L89-L93

Not only the `TZInfo::DataSourceNotFound` should be handled, but also the `TZInfo::DataSources::ZoneinfoDirectoryNotFound` we are facing."
49373,`ReloadModelsTest#test_has_one_with_reload` fails ,yahonda,"activerecord, ci issues",2023-09-25T05:16:27Z,2023-09-27T07:51:42Z,2023-09-26T16:00:46Z,"### Steps to reproduce
Managed to reproduce CI failure at https://buildkite.com/rails/rails/builds/99978#018aca6a-35cb-40dd-b802-6e520a52b670/1092-1103


```
ReloadModelsTest#test_has_one_with_reload:
ActiveRecord::StatementInvalid: SQLite3::IOException: disk I/O error
```

```ruby
ARCONN=postgresql bin/test ""test/cases/active_record_schema_test.rb"" ""test/cases/active_record_test.rb"" ""test/cases/adapter_prevent_writes_test.rb"" ""test/cases/adapter_test.rb"" ""test/cases/aggregations_test.rb"" ""test/cases/annotate_test.rb"" ""test/cases/arel/attributes/attribute_test.rb"" ""test/cases/arel/attributes/math_test.rb"" ""test/cases/arel/attributes_test.rb"" ""test/cases/arel/collectors/bind_test.rb"" ""test/cases/arel/collectors/composite_test.rb"" ""test/cases/arel/collectors/sql_string_test.rb"" ""test/cases/arel/collectors/substitute_bind_collector_test.rb"" ""test/cases/arel/crud_test.rb"" ""test/cases/arel/delete_manager_test.rb"" ""test/cases/arel/factory_methods_test.rb"" ""test/cases/arel/insert_manager_test.rb"" ""test/cases/arel/nodes/and_test.rb"" ""test/cases/arel/nodes/as_test.rb"" ""test/cases/arel/nodes/ascending_test.rb"" ""test/cases/arel/nodes/bin_test.rb"" ""test/cases/arel/nodes/binary_test.rb"" ""test/cases/arel/nodes/bind_param_test.rb"" ""test/cases/arel/nodes/bound_sql_literal_test.rb"" ""test/cases/arel/nodes/case_test.rb"" ""test/cases/arel/nodes/casted_test.rb"" ""test/cases/arel/nodes/comment_test.rb"" ""test/cases/arel/nodes/count_test.rb"" ""test/cases/arel/nodes/cte_test.rb"" ""test/cases/arel/nodes/delete_statement_test.rb"" ""test/cases/arel/nodes/descending_test.rb"" ""test/cases/arel/nodes/distinct_test.rb"" ""test/cases/arel/nodes/equality_test.rb"" ""test/cases/arel/nodes/extract_test.rb"" ""test/cases/arel/nodes/false_test.rb"" ""test/cases/arel/nodes/filter_test.rb"" ""test/cases/arel/nodes/fragments_test.rb"" ""test/cases/arel/nodes/grouping_test.rb"" ""test/cases/arel/nodes/homogeneous_in_test.rb"" ""test/cases/arel/nodes/infix_operation_test.rb"" ""test/cases/arel/nodes/insert_statement_test.rb"" ""test/cases/arel/nodes/named_function_test.rb"" ""test/cases/arel/nodes/node_test.rb"" ""test/cases/arel/nodes/not_test.rb"" ""test/cases/arel/nodes/or_test.rb"" ""test/cases/arel/nodes/over_test.rb"" ""test/cases/arel/nodes/select_core_test.rb"" ""test/cases/arel/nodes/select_statement_test.rb"" ""test/cases/arel/nodes/sql_literal_test.rb"" ""test/cases/arel/nodes/sum_test.rb"" ""test/cases/arel/nodes/table_alias_test.rb"" ""test/cases/arel/nodes/true_test.rb"" ""test/cases/arel/nodes/unary_operation_test.rb"" ""test/cases/arel/nodes/update_statement_test.rb"" ""test/cases/arel/nodes/window_test.rb"" ""test/cases/arel/nodes_test.rb"" ""test/cases/arel/select_manager_test.rb"" ""test/cases/arel/table_test.rb"" ""test/cases/arel/update_manager_test.rb"" ""test/cases/arel/visitors/dispatch_contamination_test.rb"" ""test/cases/arel/visitors/dot_test.rb"" ""test/cases/arel/visitors/mysql_test.rb"" ""test/cases/arel/visitors/postgres_test.rb"" ""test/cases/arel/visitors/sqlite_test.rb"" ""test/cases/arel/visitors/to_sql_test.rb"" ""test/cases/associations/belongs_to_associations_test.rb"" ""test/cases/associations/bidirectional_destroy_dependencies_test.rb"" ""test/cases/associations/callbacks_test.rb"" ""test/cases/associations/cascaded_eager_loading_test.rb"" ""test/cases/associations/eager_load_includes_full_sti_class_test.rb"" ""test/cases/associations/eager_load_nested_include_test.rb"" ""test/cases/associations/eager_singularization_test.rb"" ""test/cases/associations/eager_test.rb"" ""test/cases/associations/extension_test.rb"" ""test/cases/associations/has_and_belongs_to_many_associations_test.rb"" ""test/cases/associations/has_many_associations_test.rb"" ""test/cases/associations/has_many_through_associations_test.rb"" ""test/cases/associations/has_many_through_disable_joins_associations_test.rb"" ""test/cases/associations/has_one_associations_test.rb"" ""test/cases/associations/has_one_through_associations_test.rb"" ""test/cases/associations/has_one_through_disable_joins_associations_test.rb"" ""test/cases/associations/inner_join_association_test.rb"" ""test/cases/associations/inverse_associations_test.rb"" ""test/cases/associations/join_model_test.rb"" ""test/cases/associations/left_outer_join_association_test.rb"" ""test/cases/associations/nested_through_associations_test.rb"" ""test/cases/associations/required_test.rb"" ""test/cases/associations_test.rb"" ""test/cases/asynchronous_queries_test.rb"" ""test/cases/attribute_methods/read_test.rb"" ""test/cases/attribute_methods_test.rb"" ""test/cases/attributes_test.rb"" ""test/cases/autosave_association_test.rb"" ""test/cases/base_prevent_writes_test.rb"" ""test/cases/base_test.rb"" ""test/cases/batches_test.rb"" ""test/cases/binary_test.rb"" ""test/cases/bind_parameter_test.rb"" ""test/cases/boolean_test.rb"" ""test/cases/cache_key_test.rb"" ""test/cases/calculations_test.rb"" ""test/cases/callbacks_test.rb"" ""test/cases/clone_test.rb"" ""test/cases/coders/json_test.rb"" ""test/cases/coders/yaml_column_test.rb"" ""test/cases/collection_cache_key_test.rb"" ""test/cases/column_alias_test.rb"" ""test/cases/column_definition_test.rb"" ""test/cases/comment_test.rb"" ""test/cases/connection_adapters/adapter_leasing_test.rb"" ""test/cases/connection_adapters/connection_handler_test.rb"" ""test/cases/connection_adapters/connection_handlers_multi_db_test.rb"" ""test/cases/connection_adapters/connection_handlers_multi_pool_config_test.rb"" ""test/cases/connection_adapters/connection_handlers_sharding_db_test.rb"" ""test/cases/connection_adapters/connection_swapping_nested_test.rb"" ""test/cases/connection_adapters/merge_and_resolve_default_url_config_test.rb"" ""test/cases/connection_adapters/mysql_type_lookup_test.rb"" ""test/cases/connection_adapters/schema_cache_test.rb"" ""test/cases/connection_adapters/standalone_connection_test.rb"" ""test/cases/connection_adapters/type_lookup_test.rb"" ""test/cases/connection_management_test.rb"" ""test/cases/connection_pool_test.rb"" ""test/cases/core_test.rb"" ""test/cases/counter_cache_test.rb"" ""test/cases/custom_locking_test.rb"" ""test/cases/database_configurations/hash_config_test.rb"" ""test/cases/database_configurations/resolver_test.rb"" ""test/cases/database_configurations_test.rb"" ""test/cases/database_selector_test.rb"" ""test/cases/database_statements_test.rb"" ""test/cases/date_test.rb"" ""test/cases/date_time_precision_test.rb"" ""test/cases/date_time_test.rb"" ""test/cases/defaults_test.rb"" ""test/cases/delegated_type_test.rb"" ""test/cases/dirty_test.rb"" ""test/cases/disconnected_test.rb"" ""test/cases/dup_test.rb"" ""test/cases/encryption/cipher/aes256_gcm_test.rb"" ""test/cases/encryption/cipher_test.rb"" ""test/cases/encryption/concurrency_test.rb"" ""test/cases/encryption/config_test.rb"" ""test/cases/encryption/configurable_test.rb"" ""test/cases/encryption/contexts_test.rb"" ""test/cases/encryption/derived_secret_key_provider_test.rb"" ""test/cases/encryption/deterministic_key_provider_test.rb"" ""test/cases/encryption/encryptable_record_api_test.rb"" ""test/cases/encryption/encryptable_record_test.rb"" ""test/cases/encryption/encrypted_fixtures_test.rb"" ""test/cases/encryption/encrypting_only_encryptor_test.rb"" ""test/cases/encryption/encryption_schemes_test.rb"" ""test/cases/encryption/encryptor_test.rb"" ""test/cases/encryption/envelope_encryption_key_provider_test.rb"" ""test/cases/encryption/extended_deterministic_queries_test.rb"" ""test/cases/encryption/key_generator_test.rb"" ""test/cases/encryption/key_provider_test.rb"" ""test/cases/encryption/key_test.rb"" ""test/cases/encryption/message_serializer_test.rb"" ""test/cases/encryption/message_test.rb"" ""test/cases/encryption/null_encryptor_test.rb"" ""test/cases/encryption/properties_test.rb"" ""test/cases/encryption/read_only_null_encryptor_test.rb"" ""test/cases/encryption/scheme_test.rb"" ""test/cases/encryption/unencrypted_attributes_test.rb"" ""test/cases/encryption/uniqueness_validations_test.rb"" ""test/cases/enum_test.rb"" ""test/cases/errors_test.rb"" ""test/cases/excluding_test.rb"" ""test/cases/explain_subscriber_test.rb"" ""test/cases/explain_test.rb"" ""test/cases/filter_attributes_test.rb"" ""test/cases/finder_respond_to_test.rb"" ""test/cases/finder_test.rb"" ""test/cases/fixture_set/file_test.rb"" ""test/cases/fixtures_test.rb"" ""test/cases/forbidden_attributes_protection_test.rb"" ""test/cases/habtm_destroy_order_test.rb"" ""test/cases/hot_compatibility_test.rb"" ""test/cases/i18n_test.rb"" ""test/cases/inheritance_test.rb"" ""test/cases/insert_all_test.rb"" ""test/cases/instrumentation_test.rb"" ""test/cases/integration_test.rb"" ""test/cases/invalid_connection_test.rb"" ""test/cases/invertible_migration_test.rb"" ""test/cases/json_attribute_test.rb"" ""test/cases/json_serialization_test.rb"" ""test/cases/locking_test.rb"" ""test/cases/log_subscriber_test.rb"" ""test/cases/marshal_serialization_test.rb"" ""test/cases/message_pack_test.rb"" ""test/cases/migration/change_schema_test.rb"" ""test/cases/migration/change_table_test.rb"" ""test/cases/migration/check_constraint_test.rb"" ""test/cases/migration/column_attributes_test.rb"" ""test/cases/migration/column_positioning_test.rb"" ""test/cases/migration/columns_test.rb"" ""test/cases/migration/command_recorder_test.rb"" ""test/cases/migration/compatibility_test.rb"" ""test/cases/migration/create_join_table_test.rb"" ""test/cases/migration/exclusion_constraint_test.rb"" ""test/cases/migration/foreign_key_test.rb"" ""test/cases/migration/index_test.rb"" ""test/cases/migration/invalid_options_test.rb"" ""test/cases/migration/logger_test.rb"" ""test/cases/migration/pending_migrations_test.rb"" ""test/cases/migration/references_foreign_key_test.rb"" ""test/cases/migration/references_index_test.rb"" ""test/cases/migration/references_statements_test.rb"" ""test/cases/migration/rename_table_test.rb"" ""test/cases/migration/schema_definitions_test.rb"" ""test/cases/migration/unique_key_test.rb"" ""test/cases/migration_test.rb"" ""test/cases/migrator_test.rb"" ""test/cases/mixin_test.rb"" ""test/cases/modules_test.rb"" ""test/cases/multi_db_migrator_test.rb"" ""test/cases/multiparameter_attributes_test.rb"" ""test/cases/multiple_db_test.rb"" ""test/cases/nested_attributes_test.rb"" ""test/cases/nested_attributes_with_callbacks_test.rb"" ""test/cases/normalized_attribute_test.rb"" ""test/cases/null_relation_test.rb"" ""test/cases/numeric_data_test.rb"" ""test/cases/persistence_test.rb"" ""test/cases/pooled_connections_test.rb"" ""test/cases/prepared_statement_status_test.rb"" ""test/cases/primary_class_test.rb"" ""test/cases/primary_keys_test.rb"" ""test/cases/query_cache_test.rb"" ""test/cases/query_logs_test.rb"" ""test/cases/quoting_test.rb"" ""test/cases/readonly_test.rb"" ""test/cases/reaper_test.rb"" ""test/cases/reflection_test.rb"" ""test/cases/relation/and_test.rb"" ""test/cases/relation/delegation_test.rb"" ""test/cases/relation/delete_all_test.rb"" ""test/cases/relation/field_ordered_values_test.rb"" ""test/cases/relation/load_async_test.rb"" ""test/cases/relation/merging_test.rb"" ""test/cases/relation/mutation_test.rb"" ""test/cases/relation/or_test.rb"" ""test/cases/relation/predicate_builder_test.rb"" ""test/cases/relation/record_fetch_warning_test.rb"" ""test/cases/relation/select_test.rb"" ""test/cases/relation/structural_compatibility_test.rb"" ""test/cases/relation/update_all_test.rb"" ""test/cases/relation/where_chain_test.rb"" ""test/cases/relation/where_clause_test.rb"" ""test/cases/relation/where_test.rb"" ""test/cases/relation/with_test.rb"" ""test/cases/relation_test.rb"" ""test/cases/relations_test.rb"" ""test/cases/reload_models_test.rb"" ""test/cases/reserved_word_test.rb"" ""test/cases/result_test.rb"" ""test/cases/sanitize_test.rb"" ""test/cases/schema_dumper_test.rb"" ""test/cases/schema_loading_test.rb"" ""test/cases/scoping/default_scoping_test.rb"" ""test/cases/scoping/named_scoping_test.rb"" ""test/cases/scoping/relation_scoping_test.rb"" ""test/cases/secure_password_test.rb"" ""test/cases/secure_token_test.rb"" ""test/cases/serialization_test.rb"" ""test/cases/serialized_attribute_test.rb"" ""test/cases/shard_selector_test.rb"" ""test/cases/signed_id_test.rb"" ""test/cases/statement_cache_test.rb"" ""test/cases/statement_invalid_test.rb"" ""test/cases/store_test.rb"" ""test/cases/strict_loading_test.rb"" ""test/cases/suppressor_test.rb"" ""test/cases/tasks/database_tasks_test.rb"" ""test/cases/test_databases_test.rb"" ""test/cases/test_fixtures_test.rb"" ""test/cases/time_precision_test.rb"" ""test/cases/timestamp_test.rb"" ""test/cases/token_for_test.rb"" ""test/cases/touch_later_test.rb"" ""test/cases/transaction_callbacks_test.rb"" ""test/cases/transaction_instrumentation_test.rb"" ""test/cases/transaction_isolation_test.rb"" ""test/cases/transactions_test.rb"" ""test/cases/type/adapter_specific_registry_test.rb"" ""test/cases/type/date_time_test.rb"" ""test/cases/type/integer_test.rb"" ""test/cases/type/string_test.rb"" ""test/cases/type/time_test.rb"" ""test/cases/type/type_map_test.rb"" ""test/cases/type/unsigned_integer_test.rb"" ""test/cases/type_test.rb"" ""test/cases/types_test.rb"" ""test/cases/unconnected_test.rb"" ""test/cases/unsafe_raw_sql_test.rb"" ""test/cases/validations/absence_validation_test.rb"" ""test/cases/validations/association_validation_test.rb"" ""test/cases/validations/i18n_generate_message_validation_test.rb"" ""test/cases/validations/i18n_validation_test.rb"" ""test/cases/validations/length_validation_test.rb"" ""test/cases/validations/numericality_validation_test.rb"" ""test/cases/validations/presence_validation_test.rb"" ""test/cases/validations/uniqueness_validation_test.rb"" ""test/cases/validations_test.rb"" ""test/cases/view_test.rb"" ""test/cases/yaml_serialization_test.rb"" ""test/cases/adapters/postgresql/active_schema_test.rb"" ""test/cases/adapters/postgresql/array_test.rb"" ""test/cases/adapters/postgresql/bind_parameter_test.rb"" ""test/cases/adapters/postgresql/bit_string_test.rb"" ""test/cases/adapters/postgresql/bytea_test.rb"" ""test/cases/adapters/postgresql/case_insensitive_test.rb"" ""test/cases/adapters/postgresql/change_schema_test.rb"" ""test/cases/adapters/postgresql/cidr_test.rb"" ""test/cases/adapters/postgresql/citext_test.rb"" ""test/cases/adapters/postgresql/collation_test.rb"" ""test/cases/adapters/postgresql/composite_test.rb"" ""test/cases/adapters/postgresql/connection_test.rb"" ""test/cases/adapters/postgresql/create_unlogged_tables_test.rb"" ""test/cases/adapters/postgresql/datatype_test.rb"" ""test/cases/adapters/postgresql/date_test.rb"" ""test/cases/adapters/postgresql/dbconsole_test.rb"" ""test/cases/adapters/postgresql/domain_test.rb"" ""test/cases/adapters/postgresql/enum_test.rb"" ""test/cases/adapters/postgresql/explain_test.rb"" ""test/cases/adapters/postgresql/extension_migration_test.rb"" ""test/cases/adapters/postgresql/foreign_table_test.rb"" ""test/cases/adapters/postgresql/full_text_test.rb"" ""test/cases/adapters/postgresql/geometric_test.rb"" ""test/cases/adapters/postgresql/hstore_test.rb"" ""test/cases/adapters/postgresql/infinity_test.rb"" ""test/cases/adapters/postgresql/integer_test.rb"" ""test/cases/adapters/postgresql/interval_test.rb"" ""test/cases/adapters/postgresql/invertible_migration_test.rb"" ""test/cases/adapters/postgresql/json_test.rb"" ""test/cases/adapters/postgresql/ltree_test.rb"" ""test/cases/adapters/postgresql/money_test.rb"" ""test/cases/adapters/postgresql/network_test.rb"" ""test/cases/adapters/postgresql/numbers_test.rb"" ""test/cases/adapters/postgresql/optimizer_hints_test.rb"" ""test/cases/adapters/postgresql/partitions_test.rb"" ""test/cases/adapters/postgresql/postgresql_adapter_prevent_writes_test.rb"" ""test/cases/adapters/postgresql/postgresql_adapter_test.rb"" ""test/cases/adapters/postgresql/postgresql_rake_test.rb"" ""test/cases/adapters/postgresql/prepared_statements_disabled_test.rb"" ""test/cases/adapters/postgresql/quoting_test.rb"" ""test/cases/adapters/postgresql/range_test.rb"" ""test/cases/adapters/postgresql/referential_integrity_test.rb"" ""test/cases/adapters/postgresql/rename_table_test.rb"" ""test/cases/adapters/postgresql/schema_authorization_test.rb"" ""test/cases/adapters/postgresql/schema_test.rb"" ""test/cases/adapters/postgresql/serial_test.rb"" ""test/cases/adapters/postgresql/statement_pool_test.rb"" ""test/cases/adapters/postgresql/timestamp_test.rb"" ""test/cases/adapters/postgresql/transaction_nested_test.rb"" ""test/cases/adapters/postgresql/transaction_test.rb"" ""test/cases/adapters/postgresql/type_lookup_test.rb"" ""test/cases/adapters/postgresql/utils_test.rb"" ""test/cases/adapters/postgresql/uuid_test.rb"" ""test/cases/adapters/postgresql/virtual_column_test.rb"" ""test/cases/adapters/postgresql/xml_test.rb"" --seed 58510
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
Error:
ReloadModelsTest#test_has_one_with_reload:
ActiveRecord::StatementInvalid: SQLite3::IOException: disk I/O error
    /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/sqlite3-1.6.6-x86_64-linux/lib/sqlite3/database.rb:150:in `initialize'
    /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/sqlite3-1.6.6-x86_64-linux/lib/sqlite3/database.rb:150:in `new'
    /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/sqlite3-1.6.6-x86_64-linux/lib/sqlite3/database.rb:150:in `prepare'
    /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/sqlite3-1.6.6-x86_64-linux/lib/sqlite3/database.rb:194:in `execute'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:115:in `block (2 levels) in raw_execute'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1024:in `block in with_raw_connection'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:996:in `with_raw_connection'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:114:in `block in raw_execute'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1134:in `log'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:113:in `raw_execute'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:733:in `configure_connection'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:693:in `block (2 levels) in reconnect!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:374:in `reset_transaction'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:691:in `block in reconnect!'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:684:in `reconnect!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:788:in `verify!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:795:in `connect!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:997:in `block in with_raw_connection'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:996:in `with_raw_connection'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:78:in `block in begin_db_transaction'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1134:in `log'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:77:in `begin_db_transaction'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:369:in `materialize!'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:445:in `block in begin_transaction'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:412:in `begin_transaction'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:350:in `begin_transaction'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:149:in `block in setup_fixtures'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:148:in `each'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:148:in `setup_fixtures'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:10:in `before_setup'


bin/test test/cases/reload_models_test.rb:13



Finished in 137.610620s, 67.2041 runs/s, 226.9156 assertions/s.
9248 runs, 31226 assertions, 0 failures, 1 errors, 20 skips

You have skipped tests. Run with --verbose for details.
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
49363,`bin/rails test` command is compiling assets too,luizkowalski,"docs, attached PR",2023-09-23T21:03:34Z,2023-09-26T16:22:17Z,2023-09-26T16:22:17Z,"Hey 👋🏻 

I'm seeing this strange behavior when running my app on the `main` Rails branch: executing the tests with `bin/rails test` will first compile the assets prior to executing the test suite.

I checked the edge upgrade guide and changelog and I see no mention of this behavior


<details><summary>when on branch main</summary>
<p>

```ruby
sumiu on  rails-main +1 -113974 [$✘!?] via  orbstack via  v20.7.0 via 💎 v3.2.2 via 📟 5GiB/8GiB
❯ rt
yarn install v1.22.19
[1/4] 🔍  Resolving packages...
success Already up-to-date.
✨  Done in 0.06s.
yarn run v1.22.19
$ postcss ./app/assets/stylesheets/application.postcss.css -o ./app/assets/builds/style.css

🌼 daisyUI 3.7.7 https://daisyui.com
╰╮
 ╰─ ✔︎ [ 3 ] themes are enabled. You can add more themes or make your own theme:
      https://daisyui.com/docs/themes

    ❤︎ Support daisyUI: https://opencollective.com/daisyui

✨  Done in 0.70s.
yarn install v1.22.19
[1/4] 🔍  Resolving packages...
success Already up-to-date.
✨  Done in 0.07s.
yarn run v1.22.19
$ esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets --minify

  app/assets/builds/application.js      988.0kb
  app/assets/builds/application.js.map  586.5kb

✨  Done in 0.15s.
Running 7 tests in a single process (parallelization threshold is 50)
Run options: --seed 64798

# Running:

.......

Finished in 0.280526s, 24.9531 runs/s, 53.4710 assertions/s.
7 runs, 15 assertions, 0 failures, 0 errors, 0 skips
Coverage report generated for Minitest to /Users/luiz/Projects/sumiu/coverage. 96 / 105 LOC (91.43%) covered.
```



</p>
</details> 


<details><summary>when on 7.0.x</summary>
<p>

```ruby
❯ rt
Running 7 tests in a single process (parallelization threshold is 50)
Run options: --seed 61047

# Running:

.......

Finished in 0.266972s, 26.2200 runs/s, 52.4400 assertions/s.
7 runs, 14 assertions, 0 failures, 0 errors, 0 skips
Coverage report generated for Minitest to /Users/luiz/Projects/sumiu/coverage. 99 / 100 LOC (99.0%) covered.
```


</p>
</details> 

I checked the changelog and the upgrade

### Steps to reproduce

```
rails _7.1.0.beta1_ new app_name
cd app_name
bin/rails g model user email:string
bin/rails test
```


### Expected behavior
Assets not to be compiled during test

### Actual behavior
Assets being compiled

### System configuration
**Rails version**:
7.1.0.beta1

**Ruby version**:
3.2.2

"
49355,ActiveRecord: `preload` for `has_many through` with `source_type` provided fails if `has_many through` association without `source_type` was specified in `preload` earlier.,EnotPoloskun,"activerecord, With reproduction steps",2023-09-22T23:02:51Z,2023-09-23T14:04:08Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", ""7.0.8""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table ""invoices"", force: :cascade, &:timestamps

  create_table ""invoice_payments"", force: :cascade do |t|
    t.integer ""invoice_id""
    t.integer ""source_id""
    t.string ""source_type""
  end

  create_table ""checks"", force: :cascade, &:timestamps

  create_table ""charges"", force: :cascade do |t|
    t.integer ""card_id""
  end

  create_table ""cards"", force: :cascade, &:timestamps
end

class Invoice < ActiveRecord::Base
  has_many :invoice_payments
  has_many :charges, through: :invoice_payments, source: :source, source_type: ""Charge""
end

class InvoicePayment < ActiveRecord::Base
  belongs_to :invoice
  belongs_to :source, polymorphic: true
end

class Check < ActiveRecord::Base
end

class Charge < ActiveRecord::Base
  belongs_to :card
end

class Card < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_preload
    invoice = Invoice.create!
    check = Check.create!
    card = Card.create!
    charge = Charge.create!(card: card)
    InvoicePayment.create!(invoice: invoice, source: charge)
    InvoicePayment.create!(invoice: invoice, source: check)

    assert_equal invoice, Invoice.preload(:invoice_payments).first # works
    assert_equal invoice, Invoice.preload(:charges).first # works
    assert_equal invoice, Invoice.preload(:invoice_payments, :charges).first # works
    assert_equal invoice, Invoice.preload(:charges, :invoice_payments).first # works
    assert_equal invoice, Invoice.preload({ charges: :card }, :invoice_payments).first # works
    assert_equal invoice, Invoice.preload(:invoice_payments, { charges: :card }).first # fails
  end
end

```

### Expected behavior
```
Invoice.preload(:invoice_payments, { charges: :card }).first
```
Should return first invoice with preloaded associations provided in `preload` same way how 
```
Invoice.preload({ charges: :card }, :invoice_payments).first
```
does. Order inside `preload` must not matter.

### Actual behavior
Following error is raised:
```
ActiveRecord::AssociationNotFoundError: Association named 'card' was not found on Check; perhaps you misspelled it?
```

### System configuration
**Rails version**: 7.0.8
**Ruby version**: 3.2.2
"
49353,ArgumentError when using create_with().find_or_create_by() with an array of enum.,jean-francois-labbe,activerecord,2023-09-22T13:30:52Z,2023-10-09T05:31:44Z,2023-10-09T05:31:44Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :devices, force: true do |t|
  end

  create_table :alerts, force: true do |t|
    t.integer :device_id
    t.string :status
  end
end

class Device < ActiveRecord::Base
  has_many :alerts
end

class Alert < ActiveRecord::Base
  belongs_to :device
  enum status: { active: 'active', closed: 'closed', pending: 'pending' }
end

class BugTest < Minitest::Test
  def test_find_or_create_by_with_array_of_enum
    device = Device.create!

    Alert.find_by(device: device, status: [:pending, :active]) # Working fine

    Alert.create_with(status: :pending).find_or_create_by(device: device, status: [:pending, :active])
  end

  def test_find_or_create_by_doesnt_take_create_with_into_account
    assert_equal Alert.create_with(status: :pending).find_or_create_by(device: Device.create!, status: :active), 'pending'
  end
end
```

Crashes with
```
Failure:
BugTest#test_find_or_create_by_doesnt_take_create_with_into_account [find_or_create_by_rails_issue.rb:51]:
--- expected
+++ actual
@@ -1 +1 @@
-#<Alert id: 1, device_id: 1, status: ""active"">
+""pending""

Error:
BugTest#test_find_or_create_by_with_array_of_enum:
ArgumentError: '[:pending, :active]' is not a valid status
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/enum.rb:215:in `assert_valid_value'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activemodel/lib/active_model/attribute.rb:79:in `with_value_from_user'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activemodel/lib/active_model/attribute_set.rb:60:in `write_from_user'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/attribute_methods/write.rb:42:in `_write_attribute'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activemodel/lib/active_model/attribute_methods.rb:286:in `status='
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activemodel/lib/active_model/attribute_assignment.rb:49:in `public_send'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activemodel/lib/active_model/attribute_assignment.rb:49:in `_assign_attribute'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/attribute_assignment.rb:19:in `block in _assign_attributes'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/attribute_assignment.rb:11:in `each'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/attribute_assignment.rb:11:in `_assign_attributes'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activemodel/lib/active_model/attribute_assignment.rb:34:in `assign_attributes'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/core.rb:431:in `initialize'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/inheritance.rb:76:in `new'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/inheritance.rb:76:in `new'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/persistence.rb:37:in `create'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:899:in `_create'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:103:in `block in create'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:914:in `_scoping'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:452:in `scoping'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:103:in `create'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:216:in `block in create_or_find_by'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:531:in `block in within_new_transaction'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:528:in `within_new_transaction'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:342:in `transaction'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/transactions.rb:212:in `transaction'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation/delegation.rb:122:in `public_send'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation/delegation.rb:122:in `block in method_missing'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:914:in `_scoping'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:452:in `scoping'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation/delegation.rb:122:in `method_missing'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:216:in `create_or_find_by'
    .gem/ruby/3.0.6/bundler/gems/rails-e6f09150a88c/activerecord/lib/active_record/relation.rb:176:in `find_or_create_by'
    find_or_create_by_rails_issue.rb:45:in `test_association_stuff'
```

### Expected behavior
When using `create_with(status: :pending)` followed by `find_or_create_by(device: device, status: [:pending, :active])` with an array of enum values I would expect the find to use the array of enum values and in case it needs to create a record it would use the value provided in `create_with`.

### Actual behavior
it crashes with `ArgumentError: '[:pending, :active]' is not a valid status`

What's surprising is that    ` Alert.find_by(device: device, status: [:pending, :active]) ` is Working fine

### System configuration
**Rails version**:  main@e6f0915

**Ruby version**: 3.0.6

**EDIT:**
Added `test_find_or_create_by_doesnt_take_create_with_into_account`"
49351,`db:rollback:{database}` dumps all databases schemas,kv109,activerecord,2023-09-22T08:07:21Z,2023-10-26T13:14:08Z,2023-10-26T13:14:08Z,"### Steps to reproduce

Create a new Rails app
```
rails new --minimal rails-rollback-bug
cd rails-rollback-bug
```

Replace the `development` section in the `database.yml` with:
```yaml
development:
  primary:
    <<: *default
    database: db/primary.sqlite3
  secondary:
    <<: *default
    database: db/secondary.sqlite3
```

Run the rollback task:
```
rails db:rollback:primary
```

Verify that schemas for both databases were dumped, even though the task was supposed to be performed only for the `primary` database:
```
ls db | grep schema
schema.rb
secondary_schema.rb # this should not be here!
```

### Expected behavior
Only schema for the primary database should be dumped, i.e. only the `schema.rb` file should be created.

### Actual behavior
Schemas for both databases are dumped, i.e. two files (`schema.rb` and `secondary_schema.rb`) are created.

### Fix
I have a [fix](https://github.com/rails/rails/compare/main...kv109:rails:dont-dump-all-schemas-after-rollback?expand=1), but I didn't open a pull request, because I'm not sure how/if to test it. It looks like this aspect of databases tasks is [not tested at all](https://github.com/rails/rails/blob/main/activerecord/test/cases/tasks/database_tasks_test.rb), at least I couldn't find such tests. I'd be happy to write them, but I need some guidance.

### Is this really a problem?
If
1. Your secondary database schema isn't maintained by your Rails app and
2. you don't want to set `database_tasks` option to `false`, because you still want to be able to use `db:create`, `db:drop`, etc. (for easier development),

then each `db:rollback` will result in `ActiveRecord::StatementInvalid: PG::UndefinedColumn: ERROR:  column schema_migrations.version does not exist`, which can be pretty annoying.

### System configuration
Rails version: 7.0.8
Ruby version: 3.2.2
"
49334,Incorrect dumping of functional indices in MySQL 8.0.13+,sundling,"activerecord, attached PR, MySQL",2023-09-20T16:32:14Z,2023-09-25T16:22:35Z,2023-09-25T16:22:35Z,"### Steps to reproduce
Functional indices were added in MySQL 8.0.13 but if single quotes are used in the definition the resulting schema dump will escape these quotes ""twice"".

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""
  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activerecord"", ""7.1.0.beta1""
  gem ""mysql2""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""mysql2"", host: ""127.0.0.1"", database: ""test1"", username: ""root"", password: """")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :people, force: true do |t|
    t.string :first_name
    t.string :last_name
    t.index ""(CONCAT_WS(`first_name`,`last_name`,_utf8mb4' '))"", name: ""full_name_index""
  end
end

class BugTest < Minitest::Test
  def test_dump
    stream = ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, StringIO.new)
    index_definition = stream.string.split(/\n/).grep(/t\.index.*full_name_index/).first.strip
    index_definition.sub!(/, name: ""full_name_index""\z/, """")

    assert_match %r{concat_ws\(`first_name`,`last_name`,_utf8mb4' '\)\)""\z}i, index_definition
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
Single quotes in functional indices should not be escaped when dumping as that will not work when importing the schema.rb to an empty database.

### Actual behavior
<!-- Tell us what happens instead -->
Single quotes in functional indices are escaped by MySQL and the ActiveRecord connection is then escaping the backslash making the output look like `\\'` instead of the expected `'`.

### System configuration
**Rails version**: Rails 7.1.0.beta1, Rails 7.0.8

**Ruby version**: Ruby 3.1.2
"
49333,Locals on partials now are only accepted with special comments.,celsoMartins,actionview,2023-09-20T15:48:18Z,2023-09-20T19:31:48Z,2023-09-20T18:15:21Z,"Hi all.

It's really unbelievable that this is happening: https://blog.kiprosh.com/allow-template-to-set-strict-locals/

I can only access the partial variables with a weird special comment.

Do you know what the result in the code will be, right?

1. Developers will stop using partials
2. If they do, they will use the controller's instance variables.

Do you have any plans to rollback it? To make it optional or magical in the Rails way?

I'll have to change every partial in all of my projects.

I attached the error I'm getting that led me to the post above.

Thanks.

![Screenshot 2023-09-20 at 12 25 58](https://github.com/rails/rails/assets/214322/8523cc10-218f-46db-a7f1-870b51850e3b)
"
49331,Report what connection spec failed on `ActiveRecord::StatementInvalid`,sobrinho,"activerecord, With reproduction steps",2023-09-20T14:12:26Z,2023-09-29T20:26:55Z,,"### Steps to reproduce
Backtraces doesn't always point exactly to what connection have failed.

```ruby
ActiveRecord::Base.configurations.configs_for(env_name: ActiveRecord::Tasks::DatabaseTasks.env).each do |db_config|
  ActiveRecord::Base.establish_connection(db_config)
  puts ActiveRecord::Base.connection.select_values 'select now()'
end
```

### Expected behavior
```
ActiveRecord::StatementInvalid
primary --> [connection name or something about what connection failed]
PG::ConnectionBad: PQconsumeInput() FATAL:  terminating connection due to idle-in-transaction timeout
ERROR:  server conn crashed?
SSL connection has been closed unexpectedly
```

### Actual behavior
```
ActiveRecord::StatementInvalid
PG::ConnectionBad: PQconsumeInput() FATAL:  terminating connection due to idle-in-transaction timeout
ERROR:  server conn crashed?
SSL connection has been closed unexpectedly
PG::ConnectionBad
```

### System configuration
**Rails version**: 6.1.7.5

**Ruby version**: 2.7.6
"
49328,Custom master key path is not respected in credentials:show and credentials:edit,Verseth,railties,2023-09-20T10:36:03Z,2023-10-17T17:20:40Z,2023-10-17T17:20:40Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```sh
$ rails new example
$ cd example
$ mv config/master.key config/custom_master.key
$ echo ""Rails.application.config.credentials.key_path = Rails.root.join('config', 'custom_master.key')"" >> config/application.rb
$ echo ""Rails.application.config.require_master_key = true"" >> config/application.rb
```

The app is set up. It is configured with a custom master key path, and to shutdown when the master key could not be found.

### Expected behavior
<!-- Tell us what should happen -->

The server should work just fine

```sh
$ bin/rails s
=> Booting Puma
=> Rails 7.0.8 application starting in development 
=> Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 5.6.7 (ruby 3.2.2-p53) (""Birdie's Version"")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 43547
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop
```

The `credentials:show` and `credentials:edit` commands should look for the key in the file path configured in `config/application.rb`. They should load the key from `config/custom_master.key`, just like the app does when the server is started with `bin/rails server`

```sh
$ bin/rails credentials:show
# aws:
#   access_key_id: 123
#   secret_access_key: 345

# Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies.
secret_key_base: 6dd34e9349447df81fac521bb56e790e7851148c8d6b308d9467ee4750f0432f5d2b9c64d49caa67094783504ee578932b7de5ffbe2478ea10b673de1ac85027
```

The same thing should happen for the `credentials:edit` command.

```sh
$ EDITOR=""code --wait"" bin/rails credentials:edit
```


### Actual behaviour
The server works just fine

```sh
$ bin/rails s
=> Booting Puma
=> Rails 7.0.8 application starting in development 
=> Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 5.6.7 (ruby 3.2.2-p53) (""Birdie's Version"")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 43547
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop
```

But the `credentials:show` and `credentials:edit` commands are broken.

`bin/rails credentials:show` still looks for the master key in the default path `config/master.key` even though I configured `Rails.application.config.credentials.key_path` to `config/custom_master.key`.

```sh
$ bin/rails credentials:show
/Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.0.8/lib/active_support/encrypted_file.rb:121:in `handle_missing_key': Missing encryption key to decrypt file with. Ask your team for your master key and write it to /Users/mateuszdrewniak/tmp/example/config/master.key or put it in the ENV['RAILS_MASTER_KEY']. (ActiveSupport::EncryptedFile::MissingKeyError)
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.0.8/lib/active_support/encrypted_file.rb:53:in `key'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.0.8/lib/active_support/encrypted_file.rb:65:in `read'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.0.8/lib/active_support/encrypted_configuration.rb:43:in `read'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/commands/credentials/credentials_command.rb:51:in `show'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/thor-1.2.2/lib/thor/command.rb:27:in `run'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/thor-1.2.2/lib/thor/invocation.rb:127:in `invoke_command'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/thor-1.2.2/lib/thor.rb:392:in `dispatch'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/command/base.rb:87:in `perform'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/command.rb:48:in `invoke'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/commands.rb:18:in `<main>'
        from <internal:/Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
        from <internal:/Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/bootsnap-1.16.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:32:in `require'
        from bin/rails:4:in `<main>'
```

The same thing happens for the `credentials:edit` command.

```sh
$ EDITOR=""code --wait"" bin/rails credentials:edit
/Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.0.8/lib/active_support/encrypted_file.rb:121:in `handle_missing_key': Missing encryption key to decrypt file with. Ask your team for your master key and write it to /Users/mateuszdrewniak/tmp/example/config/master.key or put it in the ENV['RAILS_MASTER_KEY']. (ActiveSupport::EncryptedFile::MissingKeyError)
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.0.8/lib/active_support/encrypted_file.rb:53:in `key'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/commands/credentials/credentials_command.rb:34:in `edit'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/thor-1.2.2/lib/thor/command.rb:27:in `run'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/thor-1.2.2/lib/thor/invocation.rb:127:in `invoke_command'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/thor-1.2.2/lib/thor.rb:392:in `dispatch'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/command/base.rb:87:in `perform'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/command.rb:48:in `invoke'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/railties-7.0.8/lib/rails/commands.rb:18:in `<main>'
        from <internal:/Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
        from <internal:/Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/site_ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
        from /Users/mateuszdrewniak/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/bootsnap-1.16.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:32:in `require'
        from bin/rails:4:in `<main>'
```

### System configuration
**Rails version**:
Rails 7.0.8

**Ruby version**:
ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]"
49327,"Documentation Bug, lack of definition of 'Resourceful' ",YusukeSuzuki,"docs, attached PR, good first issue",2023-09-20T06:37:21Z,2023-12-11T17:04:29Z,2023-12-11T17:04:29Z,The documentation lacks a definition of what conditions are met for resourceful routing.
49324,Cannot detect when touch is called with belongs_to touch: true,humphreyja,activerecord,2023-09-19T23:44:30Z,2023-11-01T16:03:45Z,,"I can't seem to find a way to detect when a touch event is called in an `after_commit` hook when the touch event is triggered by a relational ""touch: true"" event. If I manually call `comment.touch` the behavior is different and I can detect that the change being made is only a touch event.

In our system we rely on `updated_at` for caching, but we also have plenty of actioncable subscriptions and various other calculations being called on `after_commit`, but we only want to actually run those events when the record was updated, not just touched from a related record. 

Is there any way to detect when a commit is caused by a `belongs_to ... touch: true`? I can't seem to find anything about it and this seems like it'd be a pretty useful thing...

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", ""7.0.8""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :events, force: true do |t|
    t.string :name
    t.timestamps
  end

  create_table :posts, force: true do |t|
    t.integer :author_id
    t.string :results
    t.timestamps
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :description
    t.timestamps
  end
end

class Event < ActiveRecord::Base
end

class Post < ActiveRecord::Base
  has_many :comments

  after_commit :create_change_event, unless: :touched_only?

  def create_change_event
    Event.create(name: 'POST')
  end

  def touched_only?
    saved_changes.keys == ['updated_at']
  end
end

class Comment < ActiveRecord::Base
  belongs_to :post, touch: true
end

class BugTest < Minitest::Test
  def test_relational_touch_should_skip_hook_but_still_touch_parents
    post = Post.create!
    comment = Comment.create!(post:)
    Event.destroy_all
    post.reload

    assert_equal 0, Event.count, 'should have no events in the database'

    comment.update(description: 'something...')
    # Post should not create a new updated event because it was touched only
    assert_equal 0, Event.count, 'should still have no events in the database as we do not want to track touch only events'
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
`saved_changes` should include `updated_at` to prevent unnecessary operations in the `after_commit` hook.

### Actual behavior
<!-- Tell us what happens instead -->
`saved_changes` is empty, leading the system to believe that nothing was changed but the `after_commit` hook was still called.

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.2.2
"
49323,Puma fails to boot in production with default config due to missing `Concurrency` constant (Rails 7.1.0.beta1),mattbrictson,"railties, attached PR",2023-09-19T23:17:07Z,2023-09-20T15:57:07Z,2023-09-20T15:57:07Z,"### Steps to reproduce

1. Generate an app using `rails new` with Rails 7.1.0.beta1
2. Run `RAILS_ENV=production bundle exec puma -C ./config/puma.rb`

### Expected behavior

Puma should start.

### Actual behavior

```
./config/puma.rb:16:in `block in _load_from': uninitialized constant Puma::DSL::Concurrent (NameError)
	from ./config/puma.rb:16:in `fetch'
	from ./config/puma.rb:16:in `_load_from'
```

The problem lies in the `config/puma.rb` file generated by `rails new`, specifically this statement that was added in #46838:

```ruby
ENV.fetch(""WEB_CONCURRENCY"") { Concurrent.physical_processor_count }
```

At the time Puma evals this statement, `Bundler.require` has not yet been run, and so the `concurrent-ruby` gem has not yet been loaded. That is why the `Concurrent` constant is not defined and we see an `uninitialized constant` error when Puma starts.

### Workaround

Set the `WEB_CONCURRENCY` env var or change the `ENV.fetch` statement `config/puma.rb` as follows:

```ruby
ENV.fetch(""WEB_CONCURRENCY"") do
  require ""concurrent-ruby""
  Concurrent.physical_processor_count
end
```

### System configuration

**Rails version**: 7.1.0.beta1

**Ruby version**: 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-darwin22]
"
49304,rails db:system:change should update the Dockerfile too,dhh,"railties, attached PR",2023-09-16T16:25:45Z,2023-09-20T05:16:51Z,2023-09-20T05:16:51Z,"If you start a new Rails app with the default sqlite db adapter, you can change the config/database.yml and Gemfile declarations to mysql using `rails db:system:change --to=mysql`. But this doesn't update our new Dockerfile to exchange `sqlite` to `default-mysql-client` for the deployment section and adding `default-libmysqlclient-dev` to the build section. It should."
49303,"`render` with no arguments or non-existent partial returns `200 OK "" ""` in API controller",nholden,"actionpack, attached PR",2023-09-16T15:48:13Z,2023-10-12T22:59:04Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""rack"", ""~> 2.0""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/base_no_arguments"" => ""test_base#no_arguments""
    get ""/base_non_existent_partial"" => ""test_base#non_existent_partial""
    get ""/api_no_arguments"" => ""test_api#no_arguments""
    get ""/api_non_existent_partial"" => ""test_api#non_existent_partial""
  end
end

class TestBaseController < ActionController::Base
  include Rails.application.routes.url_helpers

  def no_arguments
    render
  end

  def non_existent_partial
    render partial: ""foo/bar""
  end
end

class TestApiController < ActionController::API
  include Rails.application.routes.url_helpers

  def no_arguments
    render
  end

  def non_existent_partial
    render partial: ""foo/bar""
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_base_no_arguments_returns_500
    get ""/base_no_arguments""

    refute last_response.ok?
    # ActionView::MissingTemplate
    assert_equal 500, last_response.status
    assert_equal """", last_response.body
  end

  def test_base_non_existent_partial_returns_500
    get ""/base_non_existent_partial""

    refute last_response.ok?
    # ActionView::MissingTemplate
    assert_equal 500, last_response.status
    assert_equal """", last_response.body
  end

  def test_api_no_arguments_returns_success
    get ""/api_no_arguments""

    assert last_response.ok?
    assert_equal 200, last_response.status
    assert_equal "" "", last_response.body
  end

  def test_api_non_existent_partial_returns_success
    get ""/api_non_existent_partial""

    assert last_response.ok?
    assert_equal 200, last_response.status
    assert_equal "" "", last_response.body
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior
When I call `render` with no arguments or with a non-existent partial (e.g. `render(partial: ""foo/bar"")`) in an API controller. I'd expect to get some feedback that I'm doing something wrong. In a controller that inherits from `ActionController::Base`, this raises a `ActionView::MissingTemplate` error. I would expect Rails to raise a similar error in a controller that inherits from `ActionController::API`.

### Actual behavior
When I call `render` with no arguments or with a non-existent partial (e.g. `render(partial: ""foo/bar"")`), the controller returns a `200 OK` response with a body of `"" ""`.

I proposed deprecating this behavior in https://github.com/rails/rails/pull/49212.

### System configuration
**Rails version**: `main`

**Ruby version**: 3.1.2
"
49293,Validates uniqueness on a belongs_to association doesn't use foreign_key value.,joshuapinter,activerecord,2023-09-15T19:23:07Z,2023-09-18T14:10:19Z,2023-09-16T09:25:27Z,"### Steps to reproduce

When you have a `belongs_to` association that uses a custom `foreign_key`, using `validates` with `uniqueness` uses the `id` column value instead of the `foreign_key` column value. To explain, here is a simplified setup:

```ruby
class StudentCourse
  belongs_to :student, primary_key: :uid, foreign_key: :student_uid
  belongs_to :course,  primary_key: :uid, foreign_key: :course_uid

  validates :student, presence: true, uniqueness: { scope: :course, message: ""is already in the Course"" }
end
```

And assume there is one `Student` record and one `Course` record each with an `id` of 1 and a `uid` of ""A"".

And then look at the logs and trigger the validation query with:

```ruby
student_course.valid?
```

### Expected behavior
```sql
StudentCourse Exists? (0.7ms)  SELECT 1 AS one FROM `course_students` WHERE `course_students`.`student_uid` = 'A' AND `course_students`.`course_uid` = 'A' LIMIT 1
```

### Actual behavior
```sql
StudentCourse Exists? (0.7ms)  SELECT 1 AS one FROM `course_students` WHERE `course_students`.`student_uid` = '1' AND `course_students`.`course_uid` = 'A' LIMIT 1
```

Notice that it is using the value of 1 for `student_uid` instead of `""A""`.

### Additional Investigation
NOTE: If I instead use the `foreign_key` column (`student_uid`) directly in the validation instead of the association, like: 
```ruby
validates :student_uid, presence: true, uniqueness: { scope: :course, message: ""is already in the Course"" }
```

Then you get the expected behaviour of:

```sql
StudentCourse Exists? (0.7ms)  SELECT 1 AS one FROM `course_students` WHERE `course_students`.`student_uid` = 'A' AND `course_students`.`course_uid` = 'A' LIMIT 1
```

So the issue appears to be with the association and how Rails is ignoring the `foreign_key` in the association definition.

### System configuration
**Rails version**: 7.0.7

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
"
49283,shard_names method returns duplicate shard names,nikhilbhatt,activerecord,2023-09-15T11:16:17Z,2023-09-15T13:27:18Z,2023-09-15T13:27:18Z,"### Steps to reproduce

if `connects_to` method has more than one role shard_names method will return duplicate shard names.

```
connects_to shards: {
   default: { writing: :db1, reading: :db1 },
   database2: { writing: :db2 reading: :db2 }
}
```

when this below code is executed
```
ActiveRecord::Base.connection_handler.send(:get_pool_manager, ""ActiveRecord::Base"").shard_names 
```

it will return `[:db1, :db2, :db1, :db2]`

if used this code it will work as expected.
```
connects_to shards: {
  default: { writing: :db1 },
  database2: { writing: :db2 }
}
```

### Expected behavior
this should return actual number of shards. `[:db1, :db2]`


### Actual behavior
4 shards are getting returned `[:db1, :db2, :db1, :db2]`

### System configuration
**Rails version**:7.0.8

**Ruby version**:3.2.2
"
49282,Precision removed for datetime column for postgres adapter,pegasusflyhigh,"activerecord, more-information-needed",2023-09-15T11:15:02Z,2023-09-29T14:22:43Z,2023-09-29T14:22:43Z,"
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
Hi!

We got a dependabot PR to upgrade rails version from 7.0.7.2 to 7.0.8. But [this](https://github.com/rails/rails/commit/8db97a70460a42b12b61a3fe4cd57f26d3f95a3d) commit has changed our structure.sql removing precision 6 from a specific datetime column. 
We use postgres for database and that commit is for sqlite adapter. We want to understand the cause of this change in postgres adapter?

This is how we added the column :

```ruby
  change_table :tests, bulk: true do |t|
    t.column :activate_at, :datetime, null: true
  end

```

Please note that the precision was not removed where we added the column using `create_table` or `create_column`.

### System configuration
**Rails version**:  7.0.7.2

**Ruby version**:  ruby 3.2.2
"
49270,ActiveJob::QueueAdapters::SidekiqAdapter support for Sidekiq::TransactionAwareClient ,alexrolopez,activejob,2023-09-14T10:08:43Z,2023-09-14T14:08:19Z,2023-09-14T14:08:18Z,"From Sidekiq 7 onwards, a ""transaction aware client"" is supported as a way to make all jobs go to redis only after committing any potentially ongoing transaction, that is, if any job was enqueued from inside a transaction. This helps avoid subtle race conditions. It uses AfterCommitEverywhere under the hood. More info:
https://github.com/sidekiq/sidekiq/blob/main/lib/sidekiq/transaction_aware_client.rb
https://www.mikeperham.com/2022/06/17/coming-soon-in-sidekiq-2022-edition/

It seems like ActiveJob doesn't honor this setting if present in Sidekiq, as it always uses the default Sidekiq::Client instead of the one configured on `Sidekiq.default_job_options[""client_class""]`, and latest version of the adapter is using `push_bulk` anyways, which will actually never use AfterCommitEverywhere even if using the `Sidekiq::TransactionAwareClient`.

### Steps to reproduce
```ruby
# config/initializers/sidekiq.rb
Sidekiq.transactional_push!

# Enqueuing an active job
SomeActiveJob.perform_later
```

### Expected behavior
Job should honor `Sidekiq.transactional_push!` setting and be pushed only after commit.

See `Sidekiq::Job::Setter#perform_async` in https://github.com/sidekiq/sidekiq/blob/main/lib/sidekiq/job.rb for some guidance on how does Sidekiq actually pick the client to use.

### Actual behavior
Job is pushed immediately.

### System configuration
**Rails version**:
7.0.6
**Ruby version**:
3.1.2"
49259,rails console backtrace cleaner is too aggressive and removes all lines,wlipa,"railties, attached PR",2023-09-13T19:39:11Z,2023-09-14T00:38:38Z,,"In Rails 7.0.8, ruby 3.2.2, the backtrace cleaner completely removes all backtrace lines from any exception thrown in the rails console. Only the exception message is shown, which contains the location of the raised exception, but not any call stack info.

### Steps to reproduce

```
rails new consoletest
# add to app/models/application_record.rb:
  def self.ex
    raise 'an exception'
  end
  def self.ex2
    ex
  end
# then run the console
rails c
Loading development environment (Rails 7.0.8)
irb(main):001> ApplicationRecord.ex2
/private/tmp/consoletest/app/models/application_record.rb:5:in `ex': an exception (RuntimeError)
irb(main):002>

# note that no caller frames of the backtrace were shown - in particular the ex2 stack frame should be there. 
```

### Expected behavior

The backtrace should at least contain any app code stack frames for the exception call stack.

### Actual behavior

The rails backtrace silencer inside the railties lib removes each line.  I was unable to figure out why this happens in the console but not in a puma process.  Workaround is to remove all the backtrace silencers when running via the rails console.

### System configuration
**Rails version**: 7.0.8

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
"
49254,ActionCable 7.0.8 guide,Tikkoneus,"docs, stale",2023-09-13T16:37:00Z,2023-12-19T19:03:03Z,2023-12-19T19:03:03Z,"Not a bug, but the [guide](https://guides.rubyonrails.org/action_cable_overview.html) left me in the dark at the end. The consumer never connected. Running `rails generate channel foobar` worked. It seems the key step missing from the docs is the diff in `config/importmap.rb`, never mentioned in the guide:

```
+pin ""@rails/actioncable"", to: ""actioncable.esm.js""
+pin_all_from ""app/javascript/channels"", under: ""channels""
```

I appreciate the guide's walk-through of all files involved, but since all the functionality the generator creates is do-nothing it seems reasonable to me to start the guide with an invocation of `generate channel` and then do the walk-through to fill out all the files just created.

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.2.2
"
49250,7.1.0.beta1 regression: NameError when using alias_method with aliased attribute,andreimaxim,"activemodel, activerecord",2023-09-13T07:19:24Z,2023-09-13T15:46:32Z,2023-09-13T15:27:14Z,"Before Rails 7.1.0.beta1 it was possible to use `alias_method` or `alias` on an attribute defined with `alias_attribute`.

This is very useful when working with legacy databases that don't conform to the Rails naming conventions:

```ruby
class Payment < ActiveRecord::Base
  alias_attribute :legacy_amount, ""legacyamount""

  alias_method :amount, :legacy_amount
end
```

The solution is rather simple: replace `alias_method` with `alias_attribute`, but I figured it's worth creating an issue and letting the Rails team decide if it's worth fixing or not.

The test script below will raise a `NameError` exception once it reaches the `alias_method` line on Rails 7.1.0.beta1 and it passes correctly on v7.0.8:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""= 7.1.0.beta1""
  gem ""sqlite3""
end

require ""minitest/autorun""
require ""active_record""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :payments, force: true do |t|
    t.decimal :legacyamount, precision: 10, scale: 0, default: 0, null: false
  end
end

class Payment < ActiveRecord::Base
  alias_attribute :legacy_amount, ""legacyamount""

  alias_method :amount, :legacy_amount
end

class BugTest < Minitest::Test
  def test_legacy_attribute
    payment = Payment.create legacy_amount: 10

    assert_equal 10, payment.legacyamount
    assert_equal 10, payment.legacy_amount
  end

  def test_aliased_attribute
    payment = Payment.create legacy_amount: 10

    assert_equal 10, payment.amount
  end
end
```

"
49248,TypeError: no implicit conversion of Symbol into Integer,nicke,more-information-needed,2023-09-13T07:09:31Z,2023-10-18T03:15:26Z,2023-09-27T09:17:24Z,"### Error Trace
```
/Users/username/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/activesupport-7.0.8/lib/active_support/core_ext/string/output_safety.rb [line 183]

181 def [](*args)
182  if html_safe?
183    new_string = super
184    return unless new_string
```

### System configuration
**Rails version**: 7.0.8

**Ruby version**: 3.2.2
"
49227,`CurrentAttribute`s are cleared when a job gets executed inline in tests,Earlopain,activejob,2023-09-11T21:28:34Z,2023-10-12T02:57:55Z,,"### Steps to reproduce

I have a test case like this

```rb
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support/railtie""
require ""active_job/railtie""
require ""minitest/autorun""

class TestApp < Rails::Application
  config.load_defaults 7.1

  config.active_job.queue_adapter = :inline
  config.eager_load = false
end

Rails.application.initialize!

class Current < ActiveSupport::CurrentAttributes
  attribute :user
end

class DummyJob < ActiveJob::Base
  def perform
  end
end

class CurrentAttributeTest < ActiveSupport::TestCase
  test ""CurrentAttributes"" do
    Current.user = ""test""
    DummyJob.perform_later

    assert_equal(""test"", Current.user, ""CurrentAttributes reset"")
  end
end
```

Using the inline queue adapter the second assertion failed. ~~I tried making a self-contained test script but couldn't manage, the attributes only seem to be reset when I run it in a full-blown rails app. I have created a sample app here https://github.com/Earlopain/rails-current-attributes, you can just run rake test there.~~

I found issue #37526 and pr #37568 which seem to be about the same thing and it looks like they were closed as fixed/completed. Don't know what to make of that, just wanted to document.

### Expected behavior
CurrentAttributes are preserved.

### Actual behavior
CurrentAttributes are cleared.

### System configuration
**Rails version**: main

**Ruby version**: 3.2.2
"
49197,ActiveRecord: Incorrect preloading behavior on has_many through associations with strict_loading,inkstak,"activerecord, stale",2023-09-08T09:22:02Z,2023-12-17T14:11:14Z,2023-12-17T14:11:14Z,"This issue may be linked to #49084 but conditions to reproduce seems to differ a bit

### Steps to reproduce
```ruby
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '7.0.7.2'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table 'groups', force: :cascade
  create_table 'members', force: :cascade

  create_table 'memberships', force: :cascade do |t|
    t.integer 'group_id'
    t.integer 'member_id'
  end

  create_table 'contributions', force: :cascade do |t|
    t.integer 'member_id'
  end
end

class Group < ActiveRecord::Base
  has_many :memberships
  has_many :members, through: :memberships
end

class Member < ActiveRecord::Base
  has_many :memberships
  has_many :groups, through: :memberships
  has_many :contributions
end

class Membership < ActiveRecord::Base
  belongs_to :group
  belongs_to :member
end

class Contribution < ActiveRecord::Base
  belongs_to :member
end

class BugTest < Minitest::Test
  def test_preload
    group = Group.create!
    member = Member.create!
    member.contributions.create!
    group.members << member

    assert Group.preload(:members, members: :contributions).first.members.first.contributions.loaded?
    assert Group.strict_loading.preload(:members, members: :contributions).first.members.first.contributions.loaded?
  end
end
```
### Expected behavior

The following expressions should both preload and returns first member's contributions:

```ruby
Group.preload(:members, members: :contributions).first.members.first.contributions
=> [#<Contribution:0x0000000108dd6e00 id: 1, member_id: 1>]

Group.strict_loading.preload(:members, members: :contributions).first.members.first.contributions
=> [#<Contribution:0x0000000108dd6e00 id: 1, member_id: 1>]
```

### Actual behavior

Actually, the second one raises an exception :

```ruby
Group.strict_loading.preload(:members, members: :contributions).first.members.first.contributions
# An error occurred when inspecting the object: #<ActiveRecord::StrictLoadingViolationError: `Member` is marked for strict_loading. The Contribution association named `:contributions` cannot be lazily loaded.>
# An error occurred when running Kernel#inspect: #<ActiveRecord::StrictLoadingViolationError: `Member` is marked for strict_loading. The Contribution association named `:contributions` cannot be lazily loaded.>
# .../active_record/core.rb:242:in `strict_loading_violation!'
# .../active_record/associations/association.rb:220:in `find_target'
# .../active_record/associations/collection_association.rb:264:in `load_target'
# .../active_record/associations/collection_proxy.rb:43:in `load_target'
# .../active_record/associations/collection_proxy.rb:1101:in `inspect'
```

This seems to happen when 3 conditions are met:

* using `strict_loading`
* using a `has_many through` association
* calling twice the `through` association in `preload`

It works when preloaded associations are inverted:

```ruby
Group.strict_loading.preload({ members: :contributions }, :members).first.members.first.contributions
=> [#<Contribution:0x0000000108dd6e00 id: 1, member_id: 1>]
```


### System configuration
**Rails version**: 7.0.7.2

**Ruby version**: 3.2.1 & 3.2.2

Cannot reproduce on Rails 6.0 or 6.1
"
49174,ActionController does not respect authority,slondr,more-information-needed,2023-09-06T19:15:22Z,2023-09-20T22:51:55Z,2023-09-20T22:51:55Z,"Hi. When I'm hosting my rails app in production mode, served through an nginx reverse proxy, all calls to redirect_to don't have the port my application is served on, so all link_to and redirect_to calls fail. From the clients perspective, they get redirected to port 443 instead of the actual port used. So, in other words, clients are redirected to the hostname instead of the full URI authority. 

In a controller the request object has port: nil."
49165,Connection to localhost refused on distributing operations,rsdel2007,more-information-needed,2023-09-06T09:23:36Z,2023-09-20T20:51:56Z,2023-09-20T20:51:56Z,"### Steps to reproduce
`database.yml`
```default: &default
    adapter: postgresql
    encoding: unicode
    host:     <%= Figaro.env.db_host%>
    username: <%= Figaro.env.db_user%>
    password: <%= Figaro.env.db_password %>
    database: <%= Figaro.env.db_name %>
    pool: <%= Figaro.env.db_pool || 5 %>

default_replica: &default_replica
    adapter: postgresql
    encoding: unicode
    host:     <%= Figaro.env.replica_db_host%>
    username: <%= Figaro.env.replica_db_user%>
    password: <%= Figaro.env.replica_db_password %>
    database: <%= Figaro.env.replica_db_name %>
    pool: <%= Figaro.env.replica_db_pool || 5 %>

<%= Figaro.env.rails_env%>:
  <<: *default
  host: <%= Figaro.env.db_host%>
  username: <%= Figaro.env.db_user%>
  password: <%= Figaro.env.db_password %>
  database: <%= Figaro.env.db_name %>

<%= Figaro.env.rails_env%>_replica:
  <<: *default_replica
  host: <%= Figaro.env.replica_db_host%>
  username: <%= Figaro.env.replica_db_user%>
  password: <%= Figaro.env.replica_db_password %>
  database: <%= Figaro.env.replica_db_name %>

test:
  <<: *default
  database: test

test_replica:
  <<: *default_replica
  database: test_replica
```
`application.yml.sample` changes
```
DB_HOST: localhost
DB_NAME: development
DB_PASSWORD: """"
DB_USER: ''
RAILS_ENV: development

REPLICA_DB_HOST: localhost
REPLICA_DB_NAME: development
REPLICA_DB_PASSWORD: ''
REPLICA_DB_USER: ''
````

And for using the primary_replica I have added a line of code, shown below an example
```
  def delete_steps
    ActiveRecord::Base.establish_connection(""#{Rails.env}_replica"".to_sym)
    all_steps_ids = AutomationStep.where(:parent_id => strategy.id).map(&:id) 
    automation_step_where_clause = {:automation_step_id => all_steps_ids}
   ## more code
   end
```
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
On running
```
RAILS_ENV=test bundle exec rake db:drop:all db:create:all db:migrate
```

Getting below error
```
Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
Couldn't drop database 'development'
rake aborted!
ActiveRecord::JDBCError: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
```

### Expected behavior
Migration should have happen smoothly but instead got the above error.


### System configuration
**Rails version**:  7.0.7.2

**Ruby version**: `jruby-9.2.20.1`
"
49147,ActiveRecord#define_attribute_methods should be called on deserialization from cache,such,"activerecord, stale",2023-09-05T09:59:49Z,2023-12-12T16:17:53Z,2023-12-12T16:17:53Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""


gemfile(true) do
  source ""https://rubygems.org""

  gem 'rails', github: 'rails/rails'
  gem 'sqlite3'
  gem 'test-unit'
end

require 'rails'
require 'active_record'
require 'logger'
require 'test/unit/assertions'

include Test::Unit::Assertions

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table 'posts' do |t|
    t.string 'title'
  end
end

class Post < ActiveRecord::Base
  def title
    super.upcase
  end
end

Rails.cache = ActiveSupport::Cache::MemoryStore.new

post = Post.create!(title: 'Bug')
assert_equal 'BUG', post.title

Rails.cache.write('post', post)
post = Rails.cache.read('post')
assert_equal 'BUG', post.title

Post.reset_column_information
post = Post.find_by(title: 'Bug')
assert_equal 'BUG', post.title

Post.reset_column_information
post = Rails.cache.read('post')
assert_equal 'BUG', post.title
```

### Expected behavior
`post.title` should return `BUG` on the last line of code

It's failing because the `title` method has not been defined on Post. This. is usually done through `define_attribute_methods` the first time an ActiveRecord model is initialized or loaded from the DB.

### Actual behavior
<!-- Tell us what happens instead -->
```
/ruby-3.2.2/bundler/gems/rails-a10e7a9dc52d/activemodel/lib/active_model/attribute_methods.rb:481:in `method_missing': 
super: no superclass method `title' for #<Post id: 1, title: ""Bug""> (NoMethodError)
```
### System configuration
**Rails version**: `main`

**Ruby version**: `3.2.2`
"
49143,`ActiveRecordMessagePackTest#test_roundtrips_record_and_cached_associations` fails,yahonda,"activerecord, ci issues",2023-09-05T04:53:33Z,2023-09-05T18:56:09Z,2023-09-05T18:56:09Z,"Managed to reproduce CI failure at  https://buildkite.com/rails/rails/builds/99356#018a6381-3c6d-40ca-8678-09f67dab785b

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
cd activerecord
ARCONN=mysql2 bin/test test/cases/adapters/abstract_mysql_adapter/connection_test.rb test/cases/message_pack_test.rb -n ""/^(?:ConnectionTest#(?:test_active_after_disconnect)|ActiveRecordMessagePackTest#(?:test_roundtrips_record_and_cached_associations))$/"" --seed 30112
```

### Expected behavior
It should pass.

### Actual behavior
It fails.

```ruby
ARCONN=mysql2 bin/test test/cases/adapters/abstract_mysql_adapter/connection_test.rb test/cases/message_pack_test.rb -n ""/^(?:ConnectionTest#(?:test_active_after_disconnect)|ActiveRecordMessagePackTest#(?:test_roundtrips_record_and_cached_associations))$/"" --seed 30112
Using mysql2
Run options: -n ""/^(?:ConnectionTest#(?:test_active_after_disconnect)|ActiveRecordMessagePackTest#(?:test_roundtrips_record_and_cached_associations))$/"" --seed 30112

# Running:

.F

Failure:
ActiveRecordMessagePackTest#test_roundtrips_record_and_cached_associations [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/message_pack_test.rb:34]:
Expected nil (oid=4) to be the same as #<Author id: 1, name: ""An Author"", author_address_id: nil, author_address_extra_id: nil, organization_id: nil, owned_essay_id: nil> (oid=7160).


bin/test test/cases/message_pack_test.rb:27



Finished in 0.119663s, 16.7135 runs/s, 66.8542 assertions/s.
2 runs, 8 assertions, 1 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
49135,Broken composite foreign key support,brunoenten,activerecord,2023-09-04T16:29:06Z,2023-09-05T13:19:00Z,2023-09-05T13:19:00Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, id: false, force: true do |t|
    t.string :author
    t.integer :number
  end

  create_table :comments, force: true do |t|
    t.string :post_author
    t.integer :post_number
  end
end

class Post < ActiveRecord::Base
  self.primary_key = [:author, :number]
  has_many :comments, foreign_key: [:post_author, :post_number]
end

class Comment < ActiveRecord::Base
  belongs_to :post, foreign_key: [:post_author, :post_number]
end

class BugTest < Minitest::Test
  def test_composite_fk_association
    post = Post.create!(author: 'John Doe', number: 1)
    post.comments << Comment.create!

    assert_equal 1, post.comments.count
    assert_equal 1, Comment.count
    assert_equal post.author, Comment.first.post_author
    assert_equal post.number, Comment.first.post_number
  end
end

```

### Expected behavior
A Comment should be created, that belongs to the created Post, using the composite foreign key of the former to reference the composite primary key of the latter.

### Actual behavior
An exception is triggered:
ActiveRecord::CompositePrimaryKeyMismatchError: Association Post#comments primary key [""author"", ""number""] doesn't match with foreign key [:post_author, :post_number]. Please specify query_constraints, or primary_key and foreign_key values.

### System configuration
**Rails version**: edge 7.1.0-alpha

**Ruby version**: 3.2.2
"
49132,Column not updated when counter_cache columns overlap with model db field,Earlopain,"activerecord, attached PR",2023-09-04T10:53:29Z,2023-09-05T06:07:54Z,2023-09-05T06:07:54Z,"### Steps to reproduce

This works fine with 7.0.7.2 but fails on main. ~~I'm fairly sure it has something to do with #48665.~~

```rb
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :tags, force: true do |t|
    t.integer :post_count
  end
  create_table :posts, force: true do |t|
  end
  create_table :user_statuses, force: true do |t|
  end
end

class Tag < ActiveRecord::Base
end

class UserStatus < ActiveRecord::Base
end

class Post < ActiveRecord::Base
  belongs_to :user_status, counter_cache: :post_count
end

class BugTest < Minitest::Test
  def test_association_stuff
    tag = Tag.create!(post_count: 4)
    tag.update!(post_count: 10)

    assert_equal(10, tag.reload.post_count)
  end
end
```

### Expected behavior
The column should be updated.

### Actual behavior
The column remains the same.

### System configuration
**Rails version**: main

**Ruby version**: 3.2.2
"
49131,has_one association is not clear after transaction is rollback,sanjaysalunkhe-ayla,more-information-needed,2023-09-04T09:22:30Z,2023-09-27T02:34:16Z,2023-09-19T07:19:10Z,"### Background
I am upgrading project from rails 3 to rails 5 version. in rails 3 version when transaction is rollback record is not getting inserted into has_one relationship but in rails 5 this is happening.
### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
class Student < ApplicationRecord
    has_one :task
end

class Task < ApplicationRecord
    belongs_to :student
end

student = Student.new
student.save
student = Student.first
def student.testing
  begin
    ActiveRecord::Base.transaction do
      t = Task.new
      t.name = 'ddd'
      t.student = self
      t.save!
      puts ""raising exception""
      raise ""exception""
   end
  rescue => e
  end
end
student.testing
student.save!
```

### Expected behavior
<!-- Tell us what should happen -->
Transaction is rollback hence record should not be inserted into tasks table.
### Actual behavior
<!-- Tell us what happens instead -->
Record is getting inserted into the tasks table
### System configuration
**Rails version**:
Rails 5.2.8.1
**Ruby version**:
ruby 2.6.10p210 (2022-04-12 revision 67958) [x86_64-linux]
"
49128,`RipperTrackerTest#test_finds_dependencies_with_extra_spaces ` fails,yahonda,"actionview, ci issues",2023-09-04T07:52:39Z,2023-09-28T15:57:25Z,2023-09-28T15:57:25Z,"### Steps to reproduce

Managed to reproduce https://buildkite.com/rails/rails/builds/99296#018a52fe-3347-4ec9-ab12-d9b0d56683ad 

Install Ruby 3.3.0 dev whose commit includes https://github.com/ruby/ruby/commit/45cd011d73

```ruby
git clone https://github.com/rails/rails
cd rails/actionview
rm ../Gemfile.lock ; bundle ; bin/test test/template/dependency_tracker_test.rb -n test_finds_dependencies_with_extra_spaces
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ bin/test test/template/dependency_tracker_test.rb -n test_finds_dependencies_with_extra_spaces
Fetching https://github.com/matthewd/websocket-client-simple.git
Fetching https://github.com/rails/sdoc.git
Fetching gem metadata from https://rubygems.org/.........
Resolving dependencies...
Bundle complete! 80 Gemfile dependencies, 218 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
Running 39 tests in a single process (parallelization threshold is 50)
Run options: -n test_finds_dependencies_with_extra_spaces --seed 7482

# Running:

F

Failure:
RipperTrackerTest#test_finds_dependencies_with_extra_spaces [/home/yahonda/src/github.com/rails/rails/actionview/test/template/dependency_tracker_test.rb:194]:
--- expected
+++ actual
@@ -1 +1 @@
-[""spaces/header"", ""spaces/form"", ""messages/message"", ""events/event"", ""comments/comment""]
+[""spaces/header"", ""spaces/form"", ""messages/message"", ""comments/comment""]



bin/test test/template/dependency_tracker_test.rb:179
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.3.0dev (2023-09-01T03:55:09Z master 45cd011d73) [x86_64-linux]
"
49104,ActiveStorage Javascript: Error parameter passed to the DirectUpload create callback should provide response status code and body,alexandergitter,"attached PR, activestorage",2023-09-01T13:54:40Z,2023-11-24T05:37:39Z,,"My example below implements a custom direct uploads controller (for authentication) and uses the Javascript class `DirectUpload` in the frontend code. It mostly follows the example code given in https://edgeguides.rubyonrails.org/active_storage_overview.html#integrating-with-libraries-or-frameworks

This issue is about the Javascript code, specifically the callback passed to the `create` method in `DirectUpload`. In the unauthenticated case, where the server responds with status code 401 (and potentially a JSON document body containing some extra information), the `error` parameter currently is just a simple string.

### Steps to reproduce
The Rails controller (backend):
```ruby
class DirectUploadsController < ActiveStorage::DirectUploadsController
  skip_forgery_protection
  before_action :authenticate!

  def authenticate!
    @token = request.headers['Authorization']&.split&.last

    return head :unauthorized unless @token == ""secret""
  end
end
```

The Javascript frontend code:
```javascript
import { DirectUpload } from ""@rails/activestorage""

const file = new File([], ""test.txt"")

const upload = new DirectUpload(file, ""/custom_direct_uploads"")
upload.create((error, blob) => console.log(error))
```

### Expected behavior
The `error` parameter passed to the callback should hold some structured information about the failed direct upload request - the response's status code and probably the body (most likely a JSON document).

### Actual behavior
The `error` parameter is a plain string: `Error creating Blob for ""test.txt"". Status: 401`.

### System configuration
**Rails version**:
7.0.7.2

**Ruby version**:
3.2.2"
49102,Upgrading rails from 5.0.2 to 5.1.7 and Encounter an Error,shoaib-iqbal,more-information-needed,2023-09-01T11:39:53Z,2023-09-15T12:56:51Z,2023-09-15T12:56:51Z,"my ruby version is 2.5.9
and i upgraded rails from 5.0.2  to 5.1.6.2 and I am facing this issue.

That this line is running in loop, whenever i create one of my model name relationships which has association with needs.

CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')
  CACHE  (0.0ms)  SELECT nextval('needs_id_seq')


![rails_upgradation_error](https://github.com/rails/rails/assets/12743611/73b71605-81ec-45f6-9ac9-752862fd5874)
"
49098,"ActiveStorage::Attachment Forcefully Sets touch: true, Causing after_update Callbacks to Trigger Twice",rapito,activestorage,2023-08-31T18:34:24Z,2023-11-02T19:22:02Z,2023-11-02T19:22:01Z,"When using `ActiveStorage::Attachment`, I noticed that it forcefully sets `touch: true` to the parent record whenever it's saved. This behavior leads to `after_update` callbacks on the parent record being invoked twice. In use cases where versioning (e.g., with the PaperTrail gem) is employed, this results in two versions being created instead of just one.

### Steps to reproduce:

1. Create a model with an ActiveStorage attachment and an `after_update` callback.
2. Integrate versioning with PaperTrail gem.
3. Upload an attachment to the model and save.
4. Observe that two versions are created in PaperTrail instead of one.

or

1. Create a model with an ActiveStorage attachment and an after_update callback.
2. Attach a file to the model instance and save.
3. Observe that the operation within the after_update callback is triggered twice.

### Expected behavior:

Only one version should be created in PaperTrail when an attachment is added or updated.

### Actual behavior:

Two versions are being created in PaperTrail due to the `after_update` callback being triggered twice.

### System configuration:

**Rails version:** 7.0.5
**Ruby version:** 3.0.5

### Possible solutions:

1. Make the `touch: true` behavior configurable for ActiveStorage::Attachment.
2. Do not set `touch: true` by default and allow developers to opt-in if needed.

### Additional notes:

This behavior can potentially lead to other unintended side effects when combined with other gems or custom logic that relies on after_update callbacks. It would be beneficial for developers to have more control over this behavior.

i.e.: Imagine I have an after_update that runs or schedules a long-running process, this will be triggered twice just because the attachment is touched the record.

Furthermore, I've seen workarounds such as wrapping the code with no_touching, but I find this to be somewhat unpractical and bloats the code. 
Some codebases are large enough that doing this would require a considerable amount of refactoring just to attach a file.
```rb
SomeClass.no_touching do
  some_object.attachment.attach(attachable)
end
```"
49084,ActiveRecord: incorrect Preloader behavior on has_many through associations when through association is preloaded,kshnurov,"activerecord, With reproduction steps",2023-08-30T11:53:38Z,2023-12-08T22:26:02Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '7.0.7.2'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new($stdout)

ActiveRecord::Schema.define do
  create_table 'companies', force: :cascade, &:timestamps

  create_table 'announcements', force: :cascade, &:timestamps

  create_table 'announcement_references', force: :cascade do |t|
    t.integer 'announcement_id'
    t.integer 'owner_id'
    t.string 'owner_type'
  end

  create_table 'taxonomy_references', force: :cascade do |t|
    t.integer 'company_id'
    t.integer 'taxonomy_id'
    t.string 'taxonomy_type'
  end

  create_table 'categories', force: :cascade do |t|
    t.string 'name'
  end

  create_table 'groups', force: :cascade do |t|
    t.string 'name'
  end
end

class Company < ActiveRecord::Base
  has_many :taxonomy_references, dependent: :destroy
  has_many :group_references, -> { where(taxonomy_type: 'Group') }, class_name: 'TaxonomyReference', foreign_key: :company_id
  has_many :groups, through: :group_references, source: :taxonomy, source_type: 'Group'
  has_many :category_references, -> { where(taxonomy_type: 'Category') }, class_name: 'TaxonomyReference', foreign_key: :company_id
  has_many :categories, through: :category_references, source: :taxonomy, source_type: 'Category'

  has_many :announcement_references, foreign_key: :owner_id, as: :owner, inverse_of: :owner, dependent: :restrict_with_error
  has_many :announcements, through: :announcement_references, source: :announcement, dependent: :restrict_with_error
  has_many :announcements_from_groups, class_name: 'Announcement', through: :groups, source: :announcements
end

class TaxonomyReference < ActiveRecord::Base
  belongs_to :taxonomy, optional: false, polymorphic: true
  belongs_to :company, optional: false
end

class Category < ActiveRecord::Base
  has_many :taxonomy_references, as: :taxonomy, foreign_key: :taxonomy_id, dependent: :destroy
  has_many :companies, through: :taxonomy_references, source: :company
end

class Group < ActiveRecord::Base
  has_many :taxonomy_references, as: :taxonomy, foreign_key: :taxonomy_id, dependent: :destroy
  has_many :companies, through: :taxonomy_references, source: :company

  has_many :announcement_references, foreign_key: :owner_id, as: :owner, inverse_of: :owner, dependent: :restrict_with_error
  has_many :announcements, through: :announcement_references, source: :announcement, dependent: :restrict_with_error
end

class Announcement < ActiveRecord::Base
  has_many :announcement_references, foreign_key: :announcement_id, inverse_of: :announcement, dependent: :destroy

  has_many :companies, through: :announcement_references, source_type: 'Company', source: :owner
  has_many :groups, through: :announcement_references, source_type: 'Group', source: :owner
  has_many :companies_in_groups, through: :groups, source: :companies
end

class AnnouncementReference < ActiveRecord::Base
  belongs_to :announcement, optional: false, foreign_key: :announcement_id
  belongs_to :owner, optional: false, polymorphic: true
end

class BugTest < Minitest::Test
  def test_preload
    company = Company.create!
    group = Group.create!
    category = Category.create!
    company.categories << category
    company.groups << group
    group_announcement = Announcement.create!
    group_announcement.announcement_references.create(owner_type: 'Group', owner_id: group.id)
    company_announcement = Announcement.create!
    company_announcement.announcement_references.create(owner_type: 'Company', owner_id: company.id)

    assert_equal 1, company.groups.size
    assert_equal 1, company.categories.size
    assert_equal 1, group.announcements.size
    assert_equal 1, company.announcements.size
    assert_equal 1, company.announcements_from_groups.size

    assert_equal group_announcement, Announcement.preload(:companies => :categories).first # works
    assert_equal company_announcement, Announcement.preload(:companies => :categories).last # works
    assert_equal company_announcement, Announcement.preload(:announcement_references, :companies => :categories).last # works
    assert_equal group_announcement, Announcement.preload(:announcement_references, :companies, :companies => :categories).first # works!
    assert_equal group_announcement, Announcement.preload(:announcement_references, :companies => :categories).first # fails
  end
end
```

### Expected behavior
Should preload `companies => categories` only if there are `companies` as owners

### Actual behavior
Tries to preload `categories` on `Group`
```
ActiveRecord::AssociationNotFoundError: Association named 'categories' was not found on Group; perhaps you misspelled it?
```

### System configuration
**Rails version**: 7.0.7.2
**Ruby version**: 3.1.4
"
49075,ActiveRecord::ConnectionNotEstablished when migration is running with replica,artursmolin,"activerecord, more-information-needed",2023-08-29T09:53:42Z,2023-09-12T13:34:43Z,2023-09-12T13:34:43Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

database.yml
```
staging: &staging
  primary: &staging_primary
    <<: *default
    host: <%= Rails.application.credentials.dig(:database, :host) %>
    database: <%= Rails.application.credentials.dig(:database, :dbname) %>
    username: <%= Rails.application.credentials.dig(:database, :username) %>
    password: <%= Rails.application.credentials.dig(:database, :password) %>
    port: <%= Rails.application.credentials.dig(:database, :port) %>
  primary_replica:
    <<: *staging_primary
    host: <%= Rails.application.credentials.dig(:database, :replica_host) %>
    replica: true
```    

application_record.rb
```
class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class

  connects_to database: { writing: :primary,
                          reading: :primary_replica }
end
```
rails db:migrate
```
...

== 20211202122216 AddFieldAttachmentsMapToCards: migrating ====================
-- add_column(:cards, :field_attachments_map, :jsonb, {:default=>{}})
   -> 0.0045s
== 20211202122216 AddFieldAttachmentsMapToCards: migrated (0.0045s) ===========

== 20211206163126 AddLocaleToUsers: migrating =================================
-- add_column(:users, :locale, :string)
   -> 0.0009s
== 20211206163126 AddLocaleToUsers: migrated (0.0010s) ========================

== 20211211164209 AddPositionToDecks: migrating ===============================
-- add_column(:decks, :position, :integer)
   -> 0.0028s
== 20211211164209 AddPositionToDecks: migrated (0.0363s) ======================

rails aborted!
StandardError: An error has occurred, this and all later migrations canceled:

connection is closed


Caused by:
ActiveRecord::ConnectionNotEstablished: connection is closed


Caused by:
PG::ConnectionBad: connection is closed


Caused by:
ActiveRecord::ConnectionNotEstablished: connection is closed


Caused by:
PG::ConnectionBad: connection is closed

Tasks: TOP => db:migrate
(See full trace by running task with --trace)

```

### Expected behavior
<!-- Tell us what should happen -->

Migration should go smooth even with replica. 
Without replica setup everything is going ok.

### Actual behavior
<!-- Tell us what happens instead -->

Migration fails, PG::ConnectionBad: connection is closed.

### System configuration
**Rails version**: 7.0.7.2

**Ruby version**: 3.2.0
"
49070,Through associations aren't populated for non-persisted records in a `belongs_to` cascade,Slotos,"activerecord, stale",2023-08-28T21:30:45Z,2023-12-22T21:46:47Z,2023-12-18T14:50:20Z,"### Steps to reproduce

Through associations are not populated correctly for non-persisted records in a belongs_to cascade, breaking cases where one model behaves as an autosave root for an associated tree, especially when it needs to run validations on far leaves in a Law of Demeter abiding setup.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :mesopotamians, force: true do |t|
    t.boolean :active, null: false, default: false
  end

  create_table :parchments, force: true do |t|
    t.references :mesopotamian, null: false, foreign_key: true
  end

  create_table :cuneiforms, force: true do |t|
    t.references :parchment, null: false, foreign_key: true
  end
end

class Mesopotamian < ActiveRecord::Base
  has_many :parchments, inverse_of: ""mesopotamian""
  has_many :cuneiforms, through: :parchments, inverse_of: ""mesopotamian""
end

class Parchment < ActiveRecord::Base
  belongs_to :mesopotamian, optional: false, autosave: true, inverse_of: ""parchments""
  has_many :cuneiforms, inverse_of: ""parchment""
end

class Cuneiform < ActiveRecord::Base
  belongs_to :parchment, optional: false, autosave: true, inverse_of: ""cuneiforms""
  has_one :mesopotamian, through: :parchment, inverse_of: ""cuneiforms""

  validate :mesopotamian_is_active

  def mesopotamian_is_active
    errors.add(:mesopotamian, ""Inactive ancestors cannot contribute"") unless mesopotamian&.active?
  end
end

class BugTest < Minitest::Test
  def test_has_one_through_on_new_records
    mesopotamian = Mesopotamian.new(active: true)
    parchment =  Parchment.new(mesopotamian:)
    cuneiform = Cuneiform.new(parchment:)

    assert cuneiform.save
    assert mesopotamian.persisted?
  end

  def test_has_one_through_on_new_cuneiform_for_existing_mesopotamian
    mesopotamian = Mesopotamian.create!(active: true)
    parchment =  Parchment.new(mesopotamian:)
    cuneiform = Cuneiform.new(parchment:)

    assert cuneiform.save
    assert mesopotamian.persisted?
  end

  def test_works_fine_on_persisted_intermediate
    mesopotamian = Mesopotamian.new(active: true)
    parchment =  Parchment.create!(mesopotamian:)
    cuneiform = Cuneiform.new(parchment:)

    assert cuneiform.save
    assert mesopotamian.persisted?
  end
end
```

### Expected behavior

`Cuneiform.new(parchment: Parchment.new(mesopotamian: Mesopotamian.new(active: true))).save` is able to correctly validate `mesopotamian.active` flag and proceed to saving the record

### Actual behavior

`mesopotamian` association is always evaluated to `nil` if `parchment` association is not persisted.

### System configuration

**Rails version**: 7.0.7.2

**Ruby version**: 3.1.4p223

### Notes

I'd be the first one to admit that the example provided is dubious in design terms and there are multiple alternative implementations with the same DB schema that wouldn't exhibit this issue. However, I'm working with an existing code where I need a similarly shaped association tree with a set of existing behaviours to behave well while I'm refactoring it.

Most importantly, I believe the association chain is clear, honest, and descriptive, which adds to the surprise factor of the issue."
49060,Serial attributes (PostgreSQL) not set on save,dorianmarie,activerecord,2023-08-28T08:02:58Z,2023-08-29T06:47:50Z,2023-08-28T15:33:26Z,"### Steps to reproduce

- Run postgres
- Have a field type `t.serial :external_id` on `users`
- `User.create!.external_id` => `nil`
- `User.create!.reload.external_id` => `1`

### Expected behavior

The serial attribute is set on the model after_save

### Actual behavior

The serial attribute is not set on the model and present on reload

### System configuration

**Rails version**: Rails 7.0.7
**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) +YJIT [arm64-darwin22]
"
49055,`#accepts_nested_attributes_for` does not raise an error when redeclaring for an association,joshuay03,"activerecord, attached PR",2023-08-28T06:32:45Z,2023-09-06T15:47:43Z,2023-09-06T15:47:43Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

I had to hunt down a weird bug in our Rails app and it turned out that `accepts_nested_attributes_for` had been redeclared for an association with different options (exactly like in the script below). This resulted in the association writer method defined during the second declaration to get utilised instead of the first (I'm unsure yet if it's duplicated or overridden), which is not surprising considering the ordering, but unexpected if you're unaware that the declaration was duplicated.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
  accepts_nested_attributes_for :comments, update_only: true
  accepts_nested_attributes_for :comments # I feel like this should raise an error on load
end

class Comment < ActiveRecord::Base
  belongs_to :post
end
```

### Expected behavior
<!-- Tell us what should happen -->

I think this should raise an error on load. I can't think of a reason not to?

Hoping to address in https://github.com/rails/rails/pull/49056.

### Actual behavior
<!-- Tell us what happens instead -->

No error is raised. Autosave validation callbacks and association writers seem to be overridden?

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 2.7.3
"
49041,v6.1 of Rails guides redirects to edge guides,maxfelsher,With reproduction steps,2023-08-25T22:05:50Z,2023-08-28T16:43:46Z,2023-08-28T16:43:45Z,"This may be a server configuration issue instead of something that can be addressed in-repo, but I wasn't sure where else to report this.

### Steps to reproduce
```bash
% curl -i 'https://guides.rubyonrails.org/v6.1/'      
HTTP/1.1 302 Moved Temporarily
Server: nginx/1.18.0 (Ubuntu)
Date: Fri, 25 Aug 2023 21:52:04 GMT
Content-Type: text/html
Content-Length: 154
Connection: keep-alive
Location: http://edgeguides.rubyonrails.org/
Strict-Transport-Security: max-age=63072000; includeSubdomains;

<html>
<head><title>302 Found</title></head>
<body>
<center><h1>302 Found</h1></center>
<hr><center>nginx/1.18.0 (Ubuntu)</center>
</body>
</html>
```

### Expected behavior
The Rails 6.1 guides should be reachable.

### Actual behavior
Any request for a URL in the 6.1 guides (that I've tried) is redirected to the equivalent page in the edge guides with a 302 response. Even arbitrary URLs that I assume don't exist in the 6.1 guides are redirected. I tried a few other versions (7.0, 6.0, 5.2), and they seem to load correctly.

### System configuration
N/A"
49033,Rails 7.0.7 config.active_support.disable_to_s_conversion doesn't work for ActiveSupport::TimeWithZone,adamzapasnik,"activesupport, attached PR, With reproduction steps",2023-08-25T10:44:03Z,2023-08-25T21:11:46Z,2023-08-25T21:11:46Z,"### Steps to reproduce

```sh
rails new tt --skip-javascript --database=postgresql
cd tt
# Add  ENV['RAILS_DISABLE_DEPRECATED_TO_S_CONVERSION'] = true to application.rb
rails console
``` 

```ruby
Time::DATE_FORMATS[:default] = ""%d %b %Y %H:%M""
Time.zone.now.to_s
 ```

### Expected behavior
I'm not sure what to expect tbh. Maybe the previous warning?
```ruby
ActiveSupport::Deprecation.warn(
  ""TimeWithZone#to_s(#{format.inspect}) is deprecated. Please use TimeWithZone#to_fs(#{format.inspect}) instead.""
)
```
or maybe `@utc.to_default_s` being used?

I think what the problem is that:
1. I'm supposed to be able to use `to_fs(:default)`
2. I enabled the ENV to disable deprecated_to_s_conversion
3. It didn't disable the deprecated behaviour in TimeWithZone class
4. I can't use `Time.zone.now.to_s` if `::Time::DATE_FORMATS[:default]` is set (to be used with `to_fs`)
☝️ hopefully this explain well enough my way of thinking

### Actual behavior
Instead shows a warning
```ruby
[1] pry(main)> ENV['RAILS_DISABLE_DEPRECATED_TO_S_CONVERSION']
=> ""true""
[2] pry(main)> Time::DATE_FORMATS[:default] = ""%d %b %Y %H:%M""
=> ""%d %b %Y %H:%M""
[3] pry(main)> Time.zone.now.to_s
DEPRECATION WARNING: Using a :default format for TimeWithZone#to_s is deprecated. Please use TimeWithZone#to_fs instead. If you fixed all places inside your application that you see this deprecation, you can set `ENV['RAILS_DISABLE_DEPRECATED_TO_S_CONVERSION']` to `""true""` in the `config/application.rb` file before the `Bundler.require` call to fix all the callers outside of your application. (called from eval at /Users/xxx/.gem/ruby/3.1.4/gems/pry-0.14.1/lib/pry/pry_instance.rb:290)
=> ""25 Aug 2023 10:59""
[4] pry(main)> Time.zone.now.to_fs
=> ""25 Aug 2023 10:59""
```

### System configuration
**Rails version**: f9175dbf20938f744c5081d199250db15e520e9f 7-0-stable branch

**Ruby version**: 3.1.4
"
49009,AR::Base#becomes no longer handles attribute type changes,mlarraz,"activerecord, attached PR",2023-08-23T01:14:39Z,2023-11-25T09:18:05Z,,"On Rails 6.1, it was possible to use `AR::Base#becomes` to handle converting one model to another with the same attribute but a different type. In the below example, two models share the same table but one stores emails in Base64. This appears to have broken in Rails 7.

### Steps to reproduce
```ruby
require ""base64""
require ""bundler/inline""

gemfile do
  gem ""activerecord"", ""~> 7.0""
  gem ""sqlite3""
end

require ""active_record""

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')

ActiveRecord::Schema.define do
    create_table :users do |t|
      t.string :email
    end
end

class Base64String < ActiveModel::Type::Value
  def serialize(value)
    ::Base64.strict_encode64(value) unless value.nil?
  end

  def deserialize(value)
     ::Base64.strict_decode64(value) unless value.nil?
  end
end

ActiveRecord::Type.register(:base64_string, Base64String)

class User < ActiveRecord::Base
  self.primary_key = ""id""
end

class EncryptedUser < ActiveRecord::Base
  self.primary_key = ""id""
  self.table_name = ""users""

  attribute :email, :base64_string
end

user = User.create!(email: ""foo@example.com"")

encrypted_user = EncryptedUser.create!(email: ""secret@example.com"")

# The EncryptedUser's email is stored as a Base64 encoded string
User.exists?(email: ""secret@example.com"") # => false
User.exists?(email: ::Base64.strict_encode64(""secret@example.com"")) # => true

converted_user = user.becomes(EncryptedUser)
converted_user.email = ""secret2@example.com""
converted_user.save!

# When a User is converted to an EncryptedUser, their email should be stored as a Base64 encoded string
User.exists?(email: ""secret2@example.com"") # => false on Rails 6.1, true on Rails 7.0
User.exists?(email: Base64.strict_encode64(""secret2@example.com"")) # => true on Rails 6.1, false on Rails 7.0
```

### Expected behavior
Converting a `User` to an `EncryptedUser` and saving it should automatically persist the `email` attribute using the Base64String type. This was the behavior in Rails 6.1.

### Actual behavior
The custom attribute type on `EncryptedUser` is ignored and `email` is saved as plain text. 

I believe this accidentally changed with https://github.com/rails/rails/commit/6ee96a8f42d6b13bffd46342248f447d9f289288#diff-11b42664eb9834972953ecd5725c75fd6020af6d4ee5da37ef6d8e0c146f7773R432-R435, since `PredicateBuilder#build_bind_attribute` would get the updated attribute type from the table definition: https://github.com/rails/rails/blob/90b0266e9bfaaadbd2d249ad2eeec042077a0063/activerecord/lib/active_record/relation/predicate_builder.rb#L71-L74

I have fixed this manually by overriding the setter:

```ruby
def email=(value)
   super
   @attributes[""email""] = @attributes[""email""].with_type(self.type_for_attribute(""email""))
end
```
but I propose that a more generic solution be added directly to `#becomes`.

### System configuration
**Rails version**: 7.0.7

**Ruby version**: 3.2.2"
48995,Rails 7.0.7 regression Time#to_fs when setting :wait option in active job instance,adamzapasnik,activejob,2023-08-22T12:14:14Z,2023-08-23T17:58:54Z,2023-08-23T17:58:54Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activesupport"", ""7.0.7""
  gem ""activejob"", ""7.0.7""
end

require ""active_support""
require ""active_job""
require ""active_support/core_ext/time""

# Add default format
Time::DATE_FORMATS[:default] = ""%d %b %Y %H:%M""

class TestJob < ActiveJob::Base
  def perform
  end
end

puts ""job""
TestJob.set(wait: 5.minutes).perform_later
puts ""to_s""
Time.current.to_s
puts ""to_fs""
Time.current.to_fs
```

### Expected behavior
```ruby
job
[ActiveJob] Enqueued TestJob (Job ID: 7b0fee7a-bfb6-4fc6-8d30-038ddc949524) to Async(default) at 22 Aug 2023 11:36
to_s
DEPRECATION WARNING: Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. (called from <main> at b.rb:30)
to_fs
```


### Actual behavior
```ruby
job
DEPRECATION WARNING: Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. (called from <main> at b.rb:28)
[ActiveJob] Enqueued TestJob (Job ID: 7b0fee7a-bfb6-4fc6-8d30-038ddc949524) to Async(default) at 22 Aug 2023 11:36
to_s
DEPRECATION WARNING: Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. (called from <main> at b.rb:30)
to_fs
```

The deprecation warning is guiding me to use `to_fs`, but the warning comes from ActiveJob::LogSubscriber https://github.com/rails/rails/blob/7-0-stable/activejob/lib/active_job/log_subscriber.rb#L41

Adding `to_fs` seems to solve the problem.
```ruby
info do
  ""Enqueued #{job.class.name} (Job ID: #{job.job_id}) to #{queue_name(event)} at #{scheduled_at(event).to_fs}"" + args_info(job)
end
```

 
### System configuration
**Rails version**:  7.0.7

**Ruby version**: 3.1.4
"
48994,`DEPRECATION WARNING: AbstractStiPost model aliases`,yahonda,"activerecord, ci issues",2023-08-22T11:41:36Z,2023-08-23T12:33:01Z,2023-08-23T12:33:01Z,"### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails/activerecord
bundle install
bin/test test/cases/associations/join_model_test.rb
```

### Expected behavior
It should pass without deprecation warnings.

### Actual behavior
It raises `DEPRECATION WARNING: AbstractStiPost model aliases`.

```ruby
$ bin/test test/cases/associations/join_model_test.rb
Using sqlite3
Run options: --seed 52182

# Running:

...........................DEPRECATION WARNING: AbstractStiPost model aliases `id` and has a method called `id_came_from_user?` defined. Starting in Rails 7.2 `id_value_came_from_user?` will not be calling `id_came_from_user?` anymore. You may want to additionally define `id_value_came_from_user?` to preserve the current behavior. (called from block (3 levels) in run at /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest/test.rb:94)
/home/yahonda/src/github.com/rails/rails/activemodel/lib/active_model/attribute_methods.rb:218:in `block in generate_alias_attribute_methods'
  /home/yahonda/src/github.com/rails/rails/activemodel/lib/active_model/attribute_methods.rb:217:in `each'
  /home/yahonda/src/github.com/rails/rails/activemodel/lib/active_model/attribute_methods.rb:217:in `generate_alias_attribute_methods'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/attribute_methods.rb:58:in `block in alias_attribute'
  /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/code_generator.rb:41:in `batch'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/attribute_methods.rb:57:in `alias_attribute'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/model_schema.rb:621:in `block in load_schema!'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/model_schema.rb:612:in `each'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/model_schema.rb:612:in `load_schema!'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/attributes.rb:264:in `load_schema!'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/encryption/encryptable_record.rb:123:in `load_schema!'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/model_schema.rb:595:in `block in load_schema'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/model_schema.rb:592:in `synchronize'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/model_schema.rb:592:in `load_schema'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/model_schema.rb:416:in `columns_hash'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/inheritance.rb:88:in `descends_from_active_record?'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/inheritance.rb:86:in `descends_from_active_record?'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/inheritance.rb:94:in `finder_needs_type_condition?'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/inheritance.rb:349:in `ensure_proper_type'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/inheritance.rb:339:in `initialize_internals_callback'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/scoping.rb:55:in `initialize_internals_callback'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/core.rb:434:in `initialize'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/inheritance.rb:76:in `new'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/inheritance.rb:76:in `new'
  /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/persistence.rb:37:in `create'
  /home/yahonda/src/github.com/rails/rails/activerecord/test/cases/associations/join_model_test.rb:102:in `test_polymorphic_has_many_create_model_with_inheritance_and_custom_base_class'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest/test.rb:94:in `block (3 levels) in run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest/test.rb:191:in `capture_exceptions'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest/test.rb:89:in `block (2 levels) in run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:296:in `time_it'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest/test.rb:88:in `block in run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:405:in `on_signal'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest/test.rb:239:in `with_info_handler'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest/test.rb:87:in `run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:1091:in `run_one_method'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:371:in `run_one_method'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:358:in `block (2 levels) in run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:357:in `each'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:357:in `block in run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:405:in `on_signal'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:392:in `with_info_handler'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:356:in `run'
  /home/yahonda/src/github.com/rails/rails/railties/lib/rails/test_unit/line_filtering.rb:10:in `run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:182:in `block in __run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:182:in `map'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:182:in `__run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:159:in `run'
  /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/minitest-5.19.0/lib/minitest.rb:83:in `block in autorun'
... snip ...
Finished in 0.569273s, 177.4192 runs/s, 739.5396 assertions/s.
101 runs, 421 assertions, 0 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
48985,`warning: instance variable @has_query_constraints not initialized`,yahonda,"activerecord, ci issues",2023-08-20T00:40:21Z,2023-08-21T23:38:00Z,2023-08-21T16:01:47Z,"### Steps to reproduce

Managed to reproduce CI failure https://buildkite.com/rails/rails/builds/98819#018a0ab6-fa5c-4db8-89e3-b6d140173e92

1. Install Ruby 2.7

```ruby
git clone https://github.com/rails/rails
cd rails/activerecord
bundle install
RAILS_STRICT_WARNINGS=1 bin/test test/cases/base_test.rb -n test_connection_in_local_time
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ ruby -v
ruby 2.7.8p225 (2023-03-30 revision 1f4d455848) [x86_64-linux]
$ RAILS_STRICT_WARNINGS=1 bin/test test/cases/base_test.rb -n test_connection_in_local_time
Using sqlite3
Run options: -n test_connection_in_local_time --seed 9334

# Running:

/home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/persistence.rb:496: warning: instance variable @has_query_constraints not initialized
E

Error:
BasicsTest#test_connection_in_local_time:
RuntimeError: /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/persistence.rb:496: warning: instance variable @has_query_constraints not initialized

    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/strict_warnings.rb:32:in `warn'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/persistence.rb:496:in `has_query_constraints?'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/reflection.rb:810:in `association_primary_key'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/reflection.rb:820:in `join_primary_key'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_row.rb:162:in `block in resolve_sti_reflections'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_row.rb:150:in `each_value'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_row.rb:150:in `resolve_sti_reflections'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_row.rb:92:in `fill_row_model_attributes'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_row.rb:70:in `initialize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_rows.rb:36:in `new'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_rows.rb:36:in `block in build_table_rows_from'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_rows.rb:35:in `each'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_rows.rb:35:in `map'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_rows.rb:35:in `build_table_rows_from'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixture_set/table_rows.rb:18:in `initialize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:691:in `new'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:691:in `table_rows'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:625:in `block (2 levels) in insert'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:624:in `each'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:624:in `block in insert'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:621:in `each'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:621:in `insert'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:607:in `read_and_insert'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/fixtures.rb:552:in `create_fixtures'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:255:in `load_fixtures'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:142:in `setup_fixtures'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:10:in `before_setup'


bin/test test/cases/base_test.rb:1184



Finished in 0.019610s, 50.9954 runs/s, 0.0000 assertions/s.
1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 2.7.8p225 (2023-03-30 revision 1f4d455848) [x86_64-linux]
"
48975,rails-ujs ignores submission value of form-associated custom elements,khuston,stale,2023-08-18T18:08:52Z,2023-11-23T19:31:20Z,2023-11-23T19:31:20Z,"### Preface

Best practice when designing a form-associated custom element would be to have interface parity with `HTMLInputElement`, especially the value attribute's behavior (e.g. only null when disabled, otherwise null is converted to empty string). I am submitting this issue in part to document a potential pitfall of form-associated custom elements that don't follow this best practice and suggest that rails-ujs could use `FormData` and `URLSearchParams` to avoid the pitfall altogether.

### Steps to reproduce
Include a [form-associated custom element](https://html.spec.whatwg.org/multipage/custom-elements.html#form-associated-custom-element) that deviates from `HTMLInputElement` behavior by not having a value attribute at all or having a `.value` property that returns null. (The form-associated custom element sets its [submission value](https://html.spec.whatwg.org/multipage/custom-elements.html#face-submission-value) through the [ElementInternals API](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/setFormValue)).

Use `remote: true` and `multipart: false` (default multipart value) when creating the form.

Fire a submit event on the form to trigger rails-ujs ajax.

Observe that rails-ujs serializes the parameters into `x-www-form-urlencode` without regard to the submission value.

```html.erb
<script>
    class MyControl extends HTMLElement {

        static formAssociated = true;

        constructor() {
            super();
            this.internals_ = this.attachInternals();
            this.value_ = null;
        }

        // HTMLInputElement has a ""value"" property. We do too,
        // but sometimes ours is null despite being enabled.
        get value() { return this.value_; }
        set value(v) { this.value_ = v; }

        // More properties which aren't required by the standard but recommended.
        get form() { return this.internals_.form; }
        get name() { return this.getAttribute('name'); }
    }
    customElements.define('null-value', NullValueControl);
</script>

<%= form_with url: ""/things"", method: :get, remote: true do |form| %>
  <null-value name=""some_value""></null-value>
  <%= form.submit %>
<% end %>

```

### Expected behavior

The serialized parameters should match those given by `FormData`, which constructs the entry list following the [standard procedure](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#constructing-form-data-set) that supports form-associated custom elements. The parameters can then be URL encoded, e.g.

```js
const formData = new FormData(form)
const params = new URLSearchParams(formData)
// params is populated with parameters based on the submission value of form-associated custom elements
// in the above code example, the submission value of the field is null, so it doesn't appear in params at all
```

Note: `multipart: true` on the form already results in `FormData` being correctly used to serialize as `multipart/form-data`

### Actual behavior
rails-ujs serializes parameters into `x-www-form-urlencode` by scanning for value attributes on form controls. A form-associated custom element may not have a value attribute or may return the property as null.

Example 1: If the form-associated custom element has no value attribute, it is missed altogether, even if a submission value is contributed to the form.

Example 2: If the form-associated custom element has a `.value` property that is null, it is serialized to the literal string 'null'.

https://github.com/rails/rails/blob/main/actionview/app/assets/javascripts/rails-ujs.esm.js#L283

### System configuration
**Rails version**: 7.0.7

**Ruby version**: 3.1.2"
48973,Webdrivers::VersionError: Unable to find latest point release version for 115.0.5790,jasonfb,"railties, With reproduction steps",2023-08-18T17:38:49Z,2023-08-19T16:29:13Z,2023-08-19T16:27:38Z,"### Steps to reproduce

• Create a brand new rails app
• Create a basic home page + capybara home page test (feature or system spec)
• run the test, you will get an error:
```
Webdrivers::VersionError: Unable to find latest point release version for 115.0.5790
```


to quickly make a repo app, copy & paste the following code blocks into your terminal:
```
echo ""please give your new Importmap Rails app a TitleCase name:"" && read APP_NAME && rails new $APP_NAME --database=postgresql && cd $APP_NAME && git add . && git commit -m ""initial commit with $(rails -v), Ruby $(more ./.ruby-version)"" && printf ""Ruby version is in \`.ruby-version\`.\n\n# Setup\n\n\`bin/setup\`\n\n# Start Rails\n\n\`bin/rails s\`\n\n# Run Specs\n\nrun with \`bin/rake\`"" > README.md  && sed -i '' -e 's/ruby-//g' .ruby-version && RUBY_STRING=""ruby \""$(more ./.ruby-version)\"""" && sed -i '' -e ""s/$RUBY_STRING/ruby File.read('.ruby-version').strip/g"" Gemfile  && git add . && git commit -m ""fixes .ruby-version file and set Gemfile to use .ruby-version file"" && ./bin/setup && git add . && git commit -m ""adds schema file""
```

```
bundle add rspec-rails rspec-wait factory_bot_rails ffaker vcr simplecov dotenv-rails webmock --group ""development, test"" && bundle add simplecov-rcov launchy --group ""test"" &&
rails generate rspec:install &&
git add . && git commit -m ""adds rspec, factory bot, ffaker, vcr, simplecov, and launchy"" && printf ""\n.env\n.env.local\n.env.*.local\n\ncoverage/"" >> .gitignore && printf """" >> .env.local && git add . && git commit -m ""adds .env, etc and coverage/ to .gitignore file"" && sed -i '' -e 's/RSpec.configure do |config|/RSpec.configure do |config|\n  config.include FactoryBot::Syntax::Methods\n/g' spec/rails_helper.rb && sed -i '' -e ""s/RSpec.configure do |config|/require 'simplecov'\nrequire 'simplecov-rcov'\nclass SimpleCov::Formatter::MergedFormatter\n  def format(result)\n    SimpleCov::Formatter::HTMLFormatter.new.format(result)\n    SimpleCov::Formatter::RcovFormatter.new.format(result)\n  end\nend\nSimpleCov.formatter = SimpleCov::Formatter::MergedFormatter\nSimpleCov.start 'rails' do\n  add_filter \""\/vendor\""\nend\n\nVCR.configure do |config|\n  config.cassette_library_dir = \""spec\/fixtures\/vcr_cassettes\""\n  config.hook_into :webmock\n  config.ignore_request do |request|\n    [\""127.0.0.1\"", \""chromedriver.storage.googleapis.com\""].include? URI(request.uri).host\n  end\nend\n\n\nRSpec.configure do |config|/g"" spec/rails_helper.rb  &&  git add . && git commit -m ""adding factorybot and simplecov to Rspec config"" && sed -i '' -e 's/< Rails::Application/< Rails::Application\n	config.generators do |generate|\n      generate.helper false\n\n      generate.assets false\n      generate.helper false\n      generate.stylesheets false\n      generate.test_framework :rspec,\n                              request_specs: false,\n                              view_specs: false,\n                              controller_specs: false,\n                              helper_specs: false,\n                              routing_specs: false,\n                              fixture: false,\n                              fixture_replacement: ""factory_bot""\n    end\n/g' config/application.rb && git add . && git commit -m ""disables extraneous generators""
```
add rspec (but I think it will happen in minitest too)
```
mkdir spec/features  && printf ""require 'rails_helper'\n\ndescribe 'homepage' do\n  it 'can load' do\n    visit '/'\n    expect(page).to have_content('Hello World')\n  end\nend"" >>  spec/features/homepage_spec.rb && printf ""Capybara.register_driver :selenium do |app|\n  options = Selenium::WebDriver::Chrome::Options.new(\n    # It's the headlese arg that make Chrome headless\n    # + you also need the disable-gpu arg due to a bug\n    args: ['headless', 'disable-gpu window-size=1366,1200'],\n    )\n\n  Capybara::Selenium::Driver.new(\n    app,\n    browser: :chrome,\n    options: options\n  )\nend\n\nCapybara.default_driver = :selenium"" >> spec/rails_helper.rb && git add . && git commit -m ""basic capybara example""
```
```
rails generate controller Welcome &&
sed -i '' -e 's/class WelcomeController < ApplicationController/class WelcomeController < ApplicationController\n  def index\n\n  end/g' app/controllers/welcome_controller.rb &&
printf ""Hello World"" > app/views/welcome/index.html.erb &&
sed -i '' -e  's/# root ""articles#index""//g' config/routes.rb &&
sed -i '' -e  's/Rails.application.routes.draw do/Rails.application.routes.draw do\n  root to: ""welcome#index""/g' config/routes.rb && git add . && git commit -m ""generates Welcome controller""
```




The best fix is to remove the `webdrivers` gem completely, as it is no longer needed if you are using `selenium-webdriver` v 4.10.0 or above

see this discussion:
https://github.com/titusfortner/webdrivers/issues/247#issuecomment-1684191351

(Note if you are using an older version of webdrivers and cannot upgrade `selenium-webdriver`, you can fix to the older webdriver using ` Webdrivers::Chromedriver.required_version = '114.0.5735.90'`)

Either way, it seems like with `webdrivers` gem no longer being necessary for *newly created Rails apps*, this gem can simply be removed from `rails new` so as to not re-create the problem for new Rails apps and people in a learning/education environment. 

### Expected behavior
`rails new` works out of the box

### Actual behavior
`rails new` creates a Gemfile where the bug will show up the first time you create a JS-driven capybara spec.

"
48968,ActiveRecord - Dependent destroy relies on cached ActiveRecord::Relation,sergioisidoro,"activerecord, With reproduction steps",2023-08-17T18:50:35Z,2023-12-08T04:30:23Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby

class ThingsTodo < ApplicationRecord
   belongs_to :task # without FK constraint

class Task < ApplicationRecord
   has_many :things_todo, dependent: :destroy

   after_create :init_things_todo
   
   def init_things_todo
       # call service that creates things to do
       InitializeTodo.call(self)

@todo = Todo.create()
@todo.id  # 123
@todo.things_todo.count  # Zero, Expected
ThingsTodo.count # Not Zero, Expected

@todo.destroy!
ThingsTodo.count # Not Zero, NOT expected?
ThingsTodo.first.id # 123

ThingsTodo.destroy_all

@todo = Todo.create()
@todo.reload
@todo.destroy!
ThingsTodo.count # Zero 

```
### Expected behavior
Although I do not expect the just created object to contain the initialised related objects - created by the `after_save` callback, I was expecting the the `dependent: :destroy` to make a query to delete the related records, instead of using the cached ActiveRecord::Relation. 

### Actual behavior
Dependent destroy calls destroy on the cached ActiveRecord::Relation (which is empty). This might be by design as a way to avoid one extra query, but it took me a while to realise because in this case there was no foreign key constraint. I was also getting a fk_constraint error on another case, and didn't realise why I was getting it until I found this.

Also note that this makes the behaviour of destroy and destroy async different, as destroy async will make a separate query with `find_by`.

### Going forward 
A) make dependent destroy make a query, with a performance penalty.
B) Expand on the warning in the documentations - https://guides.rubyonrails.org/association_basics.html#options-for-belongs-to-dependent - to include this caveat. 

### System configuration
**Rails version**: 7.0.4
**Ruby version**: 3.2.2
"
48965,Upgrading to Rails 7.0 changes precision when changing column type to datetime,willnet,"activerecord, attached PR, With reproduction steps",2023-08-17T10:11:05Z,2023-08-22T08:28:42Z,2023-08-22T08:28:42Z,"In Rails 6.1 and below, precision is nil when using `change_column` to set the column type to datetime without explicit option. In Rails 7.0, precision is 6 even if the migration version is specified as `ActiveRecord::Migration[6.1]`. This will result in different schemas when running `rails db:migrate` in Rails 6.1 and Rails 7.0.


https://github.com/rails/rails/pull/42297 changed the default datetime precision to 6. In Rails7.0, `ActiveRecord::Migration[6.1]` or lower version includes the following support to maintain the original behavior.
- https://github.com/rails/rails/blob/2fa54931cf3fee16cc1e7f1fad851078910f83e5/activerecord/lib/active_record/migration/compatibility.rb#L204 
- https://github.com/rails/rails/blob/2fa54931cf3fee16cc1e7f1fad851078910f83e5/activerecord/lib/active_record/migration/compatibility.rb#L174 

but there seems to be no support for `change_column`

### Steps to reproduce

Using PostgreSQL because I can't reproduce with sqlite3

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# docker run --rm -e POSTGRES_PASSWORD=postgres -p 9999:5432 postgres
ActiveRecord::Base.establish_connection(""postgres://postgres:postgres@localhost:9999/postgres"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema[6.1].define do
  create_table :posts, force: true do |t|
    t.date :published_at
  end
end

class ChangePublishedAt < ActiveRecord::Migration[6.1]
  def change
    change_column :posts, :published_at, :datetime
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_precision_when_change_column_to_datetime
    ChangePublishedAt.migrate(:up)
    Post.reset_column_information
    published_at_column = Post.columns.find { |c| c.name == ""published_at"" }
    assert_nil published_at_column.precision # fail. Expected 6 to be nil.
  end
end
```

### Expected behavior

the test pass

<!-- Tell us what should happen -->

### Actual behavior

the test fails.
<!-- Tell us what happens instead -->

### System configuration
**Rails version**:
7.0.7
**Ruby version**:
3.2.2
"
48960,ActiveModel Validations - DEPRECATION WARNING Time#to_s to Time#to_fs actioncable,magni-,"activesupport, With reproduction steps",2023-08-17T01:18:18Z,2023-08-21T17:44:21Z,2023-08-21T17:44:21Z,"### Steps to reproduce

The error message for comparison validations involving dates and times triggers a deprecation message (related to #48555)

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activemodel"", ""7.0.7""
end

require ""active_model""
require ""active_support/core_ext/time/conversions""
require ""active_support/core_ext/time/deprecated_conversions""
require ""minitest/autorun""

Time::DATE_FORMATS[:default] = ""%F %T""

class Reproduction
  include ActiveModel::API

  attr_accessor :first, :second

  validates_comparison_of :first, less_than: :second
end

class ReproductionTest < Minitest::Test
  def test_error_message_does_not_trigger_deprecation_warning
    invalid = Reproduction.new(first: Time.at(2), second: Time.at(1))
    assert invalid.valid? == false

    assert_output(nil, """") { invalid.errors.full_messages.to_sentence }
  end
end
```

### Expected behavior
No deprecation warning should be raised.

### Actual behavior
A deprecation warning is raised.

### System configuration
**Rails version**: 7.0.7
**Ruby version**: 3.2.2

6.1 defaults are loaded (so `disable_to_s_conversion` is `false`) and `Time::DATE_FORMATS[:default]` is set.
"
48953,Action Cable - DEPRECATION WARNING Time#to_s to Time#to_fs,kemaldemirgil,"attached PR, actioncable",2023-08-16T16:10:49Z,2023-08-21T18:01:57Z,2023-08-21T18:01:57Z,"### Steps to reproduce
When executing a system spec that involves an action through the cable, the following deprecation warning will be logged:

```
DEPRECATION WARNING: Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. (called from finished_request_message at .../local/share/gem/ruby/3.2.0/gems/actioncable-7.0.7/lib/action_cable/connection/base.rb:248)
```

Even though this system spec is designed for my app, a similar one could be created easily.
```ruby
require 'spec_helper'

describe 'Test Spec', type: :system, js: true do
  before do
    visit login_path

    fill_in 'login', with: 'test@gmail.com'
    fill_in 'password', with: '123_password'

    click_button 'Log In'
  end

  it 'logs a deprecation message' do
    expect(page).not_to have_selector('.test')
  end
end
```

### Expected behavior
The logs shouldn't contain a deprecation warning message.

### Actual behavior
It will log the following deprecation message:

```
DEPRECATION WARNING: Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. (called from finished_request_message at .../.local/share/gem/ruby/3.2.0/gems/actioncable-7.0.7/lib/action_cable/connection/base.rb:248)
  logs a deprecation message

Top 1 slowest examples (5.25 seconds, 99.9% of total time):
  Test Spec logs a deprecation message
    5.25 seconds ./spec/system/test_spec.rb:16

Finished in 5.25 seconds (files took 3.53 seconds to load)
1 example, 0 failures
```

### System configuration
**Rails version**:
Rails 7.0.7

**Ruby version**:
ruby 3.2.2 (2023-07-23 revision 0b3ed6043c) [x86_64-linux]"
48946,Regression in Postgres aggregate function data type inference/casting in Rails >= 7.0.5,midnightmonster,"activerecord, attached PR, With reproduction steps",2023-08-15T19:41:45Z,2023-10-18T07:40:53Z,,"### Steps to reproduce
```sql
-- Create Postgres database, required to reproduce
CREATE DATABASE type_inference_test;
```

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", tag: ""v7.0.4.3"" # OK
  # gem ""rails"", github: ""rails/rails"", tag: ""v7.0.5""   # Fail
  # gem ""rails"", github: ""rails/rails"", tag: ""v7.0.7""   # Fail
  gem ""rails"", github: ""rails/rails"", branch: ""main""    # Fail
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# The issue appears appears with Postgres, not with SQLite. I have not tested other adapters.
# ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
# N.b., in sqlite3 .pluck(""sum(decimal_column)"").first returns a Float instead of a BigDecimal. Though that arguably is a bug, AFAICT it is _not_ a regression.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""type_inference_test"", encoding: ""unicode"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :line_items, force: true do |t|
    t.integer :unit_count
    t.decimal :subtotal
  end
end

class LineItem < ActiveRecord::Base
end

class TypeInferenceBug < Minitest::Test
  def setup
    LineItem.create! unit_count: 5, subtotal: 47.98
    LineItem.create! unit_count: 1, subtotal: 13.13
  end

  # This works correctly
  def test_single_column
    assert_kind_of Integer, LineItem.sum(:unit_count)
    assert_kind_of Integer, LineItem.pluck(""sum(unit_count)"").first
    assert_kind_of BigDecimal, LineItem.sum(:subtotal)
    assert_kind_of BigDecimal, LineItem.pluck(""sum(subtotal)"").first
  end

  # All these fail starting in 7.0.5. ActiveRecord seems to apply the type of the last item to all numeric(?) columns.
  def test_two_column_decimal_last
    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3
    assert_kind_of Integer, LineItem.pluck(""sum(unit_count)"", ""sum(subtotal)"").first.first
  end

  def test_two_column_integer_last
    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3
    assert_kind_of BigDecimal, LineItem.pluck(""sum(subtotal)"", ""sum(unit_count)"").first.first
  end

  def test_same_problem_with_another_aggregate_function
    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3
    assert_kind_of BigDecimal, LineItem.pluck(""max(subtotal)"", ""max(unit_count)"").first.first
  end
end

```

### Expected behavior
Type of values returned from `pluck(""aggregate_function(column)"",...)` depends on database's data type and does not change if additional values are also plucked. Up through Rails 7.0.4.3, this worked as expected.

### Actual behavior
When plucking sums (or other aggregate functions) of more than one numeric column, `pluck` coerces all numeric(?) values to the type of the last column, at least when using the postgresql adapter. In our use, this results in integers inconveniently cast to BigDecimals and (more perniciously) decimal values representing dollars and cents being truncated to integers—and the data type of existing columns of a `pluck` call changing based on order or from adding an additional column.

### System configuration
**Rails version**: 7.0.7

**Ruby version**: 3.1.1p18
"
48945,Broken table alias referencing in Rails 7.0.7,kaoru,"activerecord, attached PR, With reproduction steps",2023-08-15T16:11:26Z,2023-10-26T00:53:17Z,,"### Steps to reproduce

We're using a combination of ""where missing"" and ""or + scope"" to find goals without a state, either because they have no state record or because they have a state record with a NULL state column on it.

The behaviour has changed in Rails 7.0.7 to throw an ActiveRecord::StatementInvalid error, because on 7.0.6 the left joined table was not given an alias but on 7.0.7 it is given an alias and that alias is then not consistently used in the where clauses produced.

Note this looks a lot like https://github.com/rails/rails/issues/48334 but that bug is fixed on 7.0.6 and 7.0.7.

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem 'rails', '~> 7.0', '= 7.0.6'
  gem 'rails', '~> 7.0', '= 7.0.7'
  # gem 'rails', github: 'rails/rails'
  gem 'sqlite3'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
#ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :goals, force: true do |t|
  end

  create_table :goal_states, force: true do |t|
    t.integer :goal_id
    t.string :state
  end
end

class Goal < ActiveRecord::Base
  has_one :state, class_name: 'GoalState', dependent: :destroy

  scope :no_state, -> { where.missing(:state).or(left_joins(:state).merge(GoalState.not_set)) }
end

class GoalState < ActiveRecord::Base
  belongs_to :goal

  scope :set, -> { where.not(state: nil) }
  scope :not_set, -> { where(state: nil) }
end

class BugTest < Minitest::Test
  def setup
    @g1 = Goal.create

    @g2 = Goal.create
    @g2.create_state(state: nil)

    @g3 = Goal.create
    @g3.create_state(state: 'cool')
  end

  # This works on Rails 7.0.6 and gives an ActiveRecord::StatementInvalid on
  # Rails 7.0.7 because the table alias behaviour has changed.
  def test_no_state
    puts
    puts Goal.no_state.to_sql
    puts

    assert_equal 2, Goal.no_state.count
    assert_equal Goal.no_state, [@g1, @g2]
  end
end
```

### Expected behavior

On Rails 7.0.6 the SQL produced is:

```sql
SELECT ""goals"".* FROM ""goals"" LEFT OUTER JOIN ""goal_states"" ON ""goal_states"".""goal_id"" = ""goals"".""id"" WHERE (""goal_states"".""id"" IS NULL OR ""goal_states"".""state"" IS NULL)
```

### Actual behavior

On Rails 7.0.7 (and on the main branch of `rails/rails`) the SQL produced is:

```sql
SELECT ""goals"".* FROM ""goals"" LEFT OUTER JOIN ""goal_states"" ""state"" ON ""state"".""goal_id"" = ""goals"".""id"" WHERE (""state"".""id"" IS NULL OR ""goal_states"".""state"" IS NULL)
```

Which throws an error:

```
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: goal_states.state
```

Because the missing gives the left join an alias of ""state"" but the check produced by the ""OR"" uses the table name ""goal_states"".

I've fixed this in our codebase by changing the code to `scope :no_status, -> { left_joins(:status).merge(Goals::Status.not_set) }` because technically with a left join the missing check is redundant anyway! But I thought I'd report the bug in case it's affecting other people with harder-to-fix query cases.

### System configuration

**Rails version**: 7.0.7

**Ruby version**: 3.2.2"
48944,Order of `id` column in `select` changes loaded record ID,conzett,"activerecord, With reproduction steps",2023-08-15T15:44:05Z,2023-10-25T20:48:54Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""                                                         
                                                                                 
gemfile(true) do                                                                 
  source ""https://rubygems.org""                                                  
                                                                                 
  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }                
                                                                                 
  # Activate the gem you are reporting the issue against.                        
  gem ""activerecord"", ""~> 7.0.0""                                                 
  gem ""sqlite3""                                                                  
end                                                                              
                                                                                 
require ""active_record""                                                          
require ""minitest/autorun""                                                       
require ""logger""                                                                 
                                                                                 
# This connection will do for database-independent bug reports.                  
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)                                   
                                                                                 
ActiveRecord::Schema.define do                                                   
  create_table :posts, force: true do |t|                                        
  end                                                                            
                                                                                 
  create_table :comments, force: true do |t|                                     
    t.integer :post_id                                                           
  end                                                                            
end                                                                              
                                                                                 
class Post < ActiveRecord::Base                                                  
  has_many :comments                                                             
end                                                                              
                                                                                 
class Comment < ActiveRecord::Base                                               
  belongs_to :post                                                               
end                                                                              
                                                                                 
class BugTest < Minitest::Test                                                   
  def test_select_order_with_join                                                
    10.times { |i| Post.create! id: i + 1 }                                      
                                                                                 
    Post.first.comments << Comment.create!                                       
                                                                                 
    join_last = Post.left_joins(:comments).select ""posts.*, comments.id""         
    join_first = Post.left_joins(:comments).select ""comments.id, posts.*""        
                                                                                 
    assert_equal (1..10).to_a, join_last.map(&:id)                               
    assert_equal join_last.map(&:id), join_first.map(&:id)                       
  end                                                                            
end                                                                              
```

### Expected behavior
- Post records should have correct `id` and not the ID of the join record(s)
- Order of what is being selected should not matter?

### Actual behavior
The ID if the join record appears to be assigned to the main record

### System configuration
**Rails version**: 7.0.0

**Ruby version**: 3.2.2

Also tested with Rails 6 and Ruby 2.7
"
48939,HABTM Silently ignores :dependent option,nhorton,"activerecord, attached PR",2023-08-14T18:35:22Z,2023-09-27T01:45:57Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :categories, force: true do |t|
  end

  create_join_table :posts, :categories
end

class Post < ActiveRecord::Base
  has_and_belongs_to_many :categories
end

class Category < ActiveRecord::Base
  has_and_belongs_to_many :posts, dependent: :destroy
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    category = Category.create!
    post.categories << category
    assert post.persisted?
    assert category.posts.include?(post)

    # Now the bug
    category.destroy!
    refute Post.find_by_id(post.id) # Post should be gone
  end
end

```

### Expected behavior
HABTM should either destroy the associated resource when it is destroyed, or the declaration should error when you try to set the `:dependent` option should trigger an error

### Actual behavior
It silently accepts the `:dependent` option then ignores it

### System configuration
**Rails version**: 7.0.7

**Ruby version**: 3.1.4
"
48931,`undefine_attribute_methods` now clears alias attribute methods,nvasilevski,activemodel,2023-08-11T20:16:07Z,2023-09-06T20:53:44Z,2023-09-06T20:53:44Z,"In https://github.com/rails/rails/pull/48533 we made a deliberate decision to use `generated_attribute_methods` module
https://github.com/rails/rails/blob/008db52a0694d36ae47be7a8ab79bf838d79079d/activemodel/lib/active_model/attribute_methods.rb#L376
to define both attribute and alias attribute methods. 

This lead to the `undefine_attribute_methods` method now cleaning up alias attribute methods along with attribute methods. 
We may want to reconsider this decision since this behavior may be found confusing since there is no clear guidance on how to explicitly re-generate alias method attributes after clearing them. 

Also it may lead to some libraries being broken since those libraries won't be aware of the new behavior. 

For example `frozen_record` undefines attributes under certain circumstances and frozen records may end up not having alias attributes since the library doesn't bring the alias attribute methods back. 

https://github.com/byroot/frozen_record/blob/1c809bcdc603759728ec0923c4ba5a23f1466101/lib/frozen_record/compact.rb#L11


If we think this behavior is intended we should at least change documentation of the `undefine_attribute_methods`. Otherwise we may want to use a different module specifically for alias attribute methods or even define methods directly on the model class as it was being done in Active Model prior our change.

cc: @byroot "
48925,"Make ""class_name"" option for polymorphic `has_many` relation to STI required",loqimean,activerecord,2023-08-10T17:20:59Z,2023-09-27T01:29:29Z,2023-09-01T10:07:33Z,"### Steps to reproduce
Models:
```ruby
class Product < ApplicationRecord
  has_many :requests, as: :requestable, dependent: :destroy
end

# STI tables
class Request < ApplicationRecord
  belongs_to :requestable, polymorphic: true

  validate :request_type, presence: true
end

class ProductRequest < Request
  belongs_to :user
end
```
Then running in your console:
```ruby
Product.joins(requests: :user).where(requests: { user: { role: ""admin"" } })
```
Raises you an error:
```ruby
/Users/some/.rvm/gems/ruby-3.1.1/gems/activerecord-7.0.4/lib/active_record/table_metadata.rb:22:in `has_column?': undefined method `key?' for nil:NilClass (NoMethodError)
```

### Expected behavior
To raise a detailed error, like ""provide a `class_name` option to use joins on STI table with polymorphic, or make required option `class_name` for polymorphic relation with STI"", like:
```ruby
class Product < ApplicationRecord
  has_many :requests, as: :requestable, class_name: ""ProductRequest"", dependent: :destroy
end

# STI tables
class Request < ApplicationRecord
  belongs_to :requestable, polymorphic: true

  validate :request_type, presence: true
end

class ProductRequest < Request
  belongs_to :user
end
```

### Actual behavior
Unknown error 🙂 
```ruby
/Users/some/.rvm/gems/ruby-3.1.1/gems/activerecord-7.0.4/lib/active_record/table_metadata.rb:22:in `has_column?': undefined method `key?' for nil:NilClass (NoMethodError)
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1.1
"
48922,Helper `encrypted_attribute?` does not honour the context properties passed to `encrypts`,maximerety,"activerecord, attached PR, encryption",2023-08-10T15:09:33Z,2023-09-21T06:24:26Z,,"### Steps to reproduce

1. Pass a custom encryptor (or other context properties) to the `encrypts` helper, e.g.
https://github.com/rails/rails/blob/e6d59cdebbd0ddaf88029a7b9f03f5d642780e0a/activerecord/test/cases/encryption/encryption_schemes_test.rb#L198-L202
1. Create a record and test a supposedly encrypted attribute with `encrypted_attribute?`:

    ```ruby
    author = EncryptedAuthor1.create name: ""1""
    assert author.encrypted_attribute? :name
    ```

### Expected behavior

The attribute is expected to be encrypted, i.e. `encrypted_attribute?` should return `true`.

### Actual behavior

The attribute appears to be unencrypted, i.e. `encrypted_attribute?` returns `false`, despite the actual value being encrypted.

### System configuration

**Rails version**: 7.0.7 / main
**Ruby version**: 3.2.2
"
48915,"Not obvious how to customize ActiveStorage routing, and undocumented in API docs and guide",technicalpickles,"docs, With reproduction steps, activestorage",2023-08-09T16:46:50Z,2023-11-25T09:18:49Z,,"While setting up ActiveStorage in an existing app, we found ourselves needing to make sure that it's only available on a specific subdomain. We use this snippet in `config/routes.rb` when we are applying this to our application code:

```ruby
defaults(subdomain: app_subdomain) do
  # routes here
end
```

The [ActiveStorage Overview guide](https://guides.rubyonrails.org/active_storage_overview.html) doesn't mention it at all.

I dug around active_storage, and found this:

https://github.com/rails/rails/blob/8ec27a4529e37cff77abe54573bb8923d9fe8e9a/activestorage/config/routes.rb#L4

https://github.com/rails/rails/blob/8ec27a4529e37cff77abe54573bb8923d9fe8e9a/activestorage/lib/active_storage.rb#L359

When I found that it was using `scope`, I realized we could pass in a Hash with options instead of a string to use as a prefix:

```ruby
# config/initializers/active_storage.rb
Rails.application.config.active_storage.routes_prefix = {path: 'rails/active_storage', subdomain: app_subdomain}
```

Seeing it written out this way, `routes_prefix` doesn't seem as an accurate a name for what it allows.

This might be a few tasks actually:

- document `routes_prefix` in rdoc
- document `routes_prefix` on the guide
- maybe rename `routes_prefix` w/ a deprecation?

### Steps to reproduce

n/a
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
```

### Expected behavior
<!-- Tell us what should happen -->

Should be able to find out how to customize ActiveStorage routing on either API docs or ActiveStorage guide

### Actual behavior

Had to read the code to find out how to do this

### System configuration
**Rails version**: 7-0-stable (fabd0b5827a3af1f189d726fbc7669f9fbdeef5e)

**Ruby version**: 3.2.2
"
48910,If multiple after_commits are defined with the same callback only the last one is evaluated,melefabrizio,activerecord,2023-08-09T09:17:02Z,2023-08-27T04:13:23Z,2023-08-27T04:13:23Z,"### Steps to reproduce
When two after_commit hooks with the same callback are defined, i.e. on different conditions, only the last one is evaluated.
```rb
class Post < ActiveRecord::Base
  has_many :comments
  after_commit :do_something, on: :create
  after_commit :do_something, on: :update

  def do_something
    comments << Comment.new
  end
end
```
In this case, a `Post.create!` action does not fire the `do_something` method. An update does.

[Here is the standard test case](https://gist.github.com/melefabrizio/07f52d7c55bb7d1ae651bd35cb620785)

### Expected behavior
Both hooks should be evaluated and executed.

### Actual behavior
Only the last one is evaluated.

### System configuration
**Rails version**:  7.0.6

**Ruby version**: 3.2.1
"
48909,Google Storage Service Error when uploading attachments,matiassalles99,"stale, activestorage",2023-08-08T20:17:01Z,2023-12-11T06:33:06Z,2023-12-11T06:33:06Z,"- We have been running into these kinds of errors lately when attaching multiple images to a model:
`Google::Cloud::AlreadyExistsError conflict: The metadata for object ""...."" was edited during the operation. Please try again.`
- After digging into both the google cloud gem and active storage I noticed that google cloud is the only one that implements the `update_metadata` method within the `class Service::GCSService` which makes me wonder why is that the case.
- I saw that the `identify` method call in `ActiveStorage::Blob` within `upload(io, identify: true)` updates the metadata, and the analyze job also. Google Storage gem does some threads execution when calling the API which I don't fully understand, but I was wondering if there might be a race condition here, or get more info from people who have a deeper understanding of Active Storage with GCS

The code looks as simple as:
``` ruby
   class A
      has_many :media
   end

   class Media
      belongs_to :user
      has_one_attached :image
    end

    # In the controller
    attach_to = A.first

    # We get an array of directly uploaded images
    array_of_signed_ids = params[:images]
    media = array_of_signed_ids.map { |image| attach_to.media.build(image: image) }
    media.each { |m| m.save! }
    
    respond_to ... 
```

### Expected behavior
- Shouldn't raise Google::Cloud::AlreadyExistsError since we are just following the normal flow of attaching images to a model 

### Actual behavior
- Intermittently raises Google::Cloud::AlreadyExistsError 

### System configuration
**Rails version**:
7.0.4

**Ruby version**:
3.2.2
"
48908,ActiveRecord::RecordInvalid silently ignored during create! with associations and after_create callbacks,eric-christian,"activerecord, With reproduction steps",2023-08-08T13:38:43Z,2023-08-10T13:45:13Z,,"Hello,

we noticed some inconsistent data in our database and came to the conclusion that data created within an `after_create` hook is not always present.
Our audit tool hooks itself into some of our models by using the `after_*` callbacks.
And on a rare occasion, it produced an invalid record. Causing an `ActiveRecord::RecordInvalid` to be raised within the callback.
If that happens while the audited model is used solely, everything works as intended. A rollback is issued and no incomplete data is persisted. The exception is also re-raised, which is correct in my opinion, but not what the documentation claims: https://guides.rubyonrails.org/active_record_callbacks.html#halting-execution

However, something different happens, if we try this with associated models. Both models are saved, no rollback happens, no exception bubbels up. Incomplete data is persisted because everything but the audit was commited. There is no indication that the callback failed at all. 🤷‍♂️ 

I was unable to find any documentation explaining this behavior.

### Steps to reproduce
```ruby
### Schema

class CreateTestAs < ActiveRecord::Migration[7.0]
  def change
    create_table :test_as do |t|
      t.timestamps
    end
  end
end

class CreateTestBs < ActiveRecord::Migration[7.0]
  def change
    create_table :test_bs do |t|
      t.references :test_a
      t.timestamps
    end
  end
end

### Models

class TestA < ApplicationRecord
  has_one :test_b
end

class TestB < ApplicationRecord
  after_create(-> { raise ActiveRecord::RecordInvalid }) # simulating the broken audit-tool behavior
end
```

### Expected behavior
The expectation is that `TestA.create!(test_b: TestB.new)` issues a rollback and raises the same exception as `TestB.create!` does. No data should be persisted.

### Actual behavior
While `TestB.create!`, as expected, raises an `ActiveRecord::RecordInvalid` exception and issues a rollback. `TestA.create!(test_b: TestB.new)` does not. Instead, both instances of TestA and TestB are persisted. The exception is silently ignored!

```bash
[1] pry(main)> TestB.create!
  TRANSACTION (0.5ms)  BEGIN
  TestB Create (1.8ms)  INSERT INTO ""test_bs"" (""test_a_id"", ""created_at"", ""updated_at"") VALUES ($1, $2, $3) RETURNING ""id""  [[""test_a_id"", nil], [""created_at"", ""2023-08-08 12:29:45.686484""], [""updated_at"", ""2023-08-08 12:29:45.686484""]]
  TRANSACTION (0.6ms)  ROLLBACK
ActiveRecord::RecordInvalid: Record invalid

[2] pry(main)> TestA.create!(test_b: TestB.new)
  TRANSACTION (1.4ms)  BEGIN
  TestA Create (7.6ms)  INSERT INTO ""test_as"" (""created_at"", ""updated_at"") VALUES ($1, $2) RETURNING ""id""  [[""created_at"", ""2023-08-08 12:30:30.200175""], [""updated_at"", ""2023-08-08 12:30:30.200175""]]
  TestB Create (1.3ms)  INSERT INTO ""test_bs"" (""test_a_id"", ""created_at"", ""updated_at"") VALUES ($1, $2, $3) RETURNING ""id""  [[""test_a_id"", 13], [""created_at"", ""2023-08-08 12:30:30.208412""], [""updated_at"", ""2023-08-08 12:30:30.208412""]]
  TRANSACTION (7.7ms)  COMMIT
```

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2
"
48900,Rails 7.0.6 cannot update credentials from files,m2wasabi,railties,2023-08-06T18:59:55Z,2023-08-08T19:03:09Z,2023-08-08T19:03:08Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

```shell
EDITOR=""cat .config_development.yml >"" bundle exec rails credentials:edit -e development
```

### Expected behavior
<!-- Tell us what should happen -->

`.config_development.yml` is encrypted into `config/credentials/development.yml.enc`

This works successful up to Rails 7.0.5.1 .

### Actual behavior
<!-- Tell us what happens instead -->

Encrypt task finish with error.

> cat: '>': No such file or directory

Decrypted content is deferent from input file.

```shell
bundle exec rails credentials:edit -e development
```

```yaml
# aws:
#   access_key_id: 123
#   secret_access_key: 345
```

### System configuration
**Rails version**:
7.0.6

**Ruby version**:
3.0.4"
48878,"ActionController::PermissionsPolicy does not define ""Permissions-Policy"" but ""Feature-Policy""",mikevoets,"actionpack, attached PR",2023-08-03T21:14:55Z,2023-08-03T21:20:00Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# config/initializers/permissions_policy.rb

Rails.application.config.permissions_policy do |f|
  f.camera      :none
  f.gyroscope   :none
  f.microphone  :none
  f.usb         :none
  f.fullscreen  :self
  f.payment     :self
end
```

### Expected behavior
This adds the following to the response headers:

Permissions-Policy: camera=(), gyroscope=(), microphone=(), usb=(), fullscreen=(self), payment=(self)

### Actual behavior
This adds the following to the response headers:

Feature-Policy: camera 'none'; gyroscope 'none'; microphone 'none'; usb 'none'; fullscreen 'self'; payment 'self'

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.0.6p216
"
48875,"AbstractController::DoubleRenderError:        Render and/or redirect were called multiple times in this action. Please note that you may only call render OR redirect, and at most once per action. Also note that neither redirect nor render terminate execution of the action, so if you want to exit an action after redirecting, you need to do something like ""redirect_to(...) and return"".",karantomar-aretove,more-information-needed,2023-08-02T21:45:12Z,2023-08-19T22:14:27Z,2023-08-16T22:42:21Z,"I recently upgraded our application to Rails 6 and while running Rspec I am getting this below error

`AbstractController::DoubleRenderError: Render and/or redirect were called multiple times in this action. Please note that you may only call render OR redirect, and at most once per action. Also, note that neither redirect nor render terminate execution of the action, so if you want to exit an action after redirecting, you need to do something like ""redirect_to(...) and return"".`

```
     # --- Caused by: ---
     # Example::RecordNotFound:
     #   Example::RecordNotFound
     #   ./app/controllers/api/v1/dummy_controller.rb:75:in `find_test_by_email'
```
```
      def find_test_by_email
        @abc = Test.find_by_email(email)
        fail Example::RecordNotFound unless @abc
      end
```
      
Below is the def of that specific action and I can see there is only a single render used 
        
     def rescue_example_action(type, status_code)
        render json: {
          errors: [
            JSONAPI::Error.new(
              title: I18n.t(type),
              code: status_code,
              status: :forbidden
            )]
        }, status: status_code || 422
      end`"
48867,Repeated calls to `read_multi` on `NullStore` cache causes a NoMethodError,JBKahn,"activesupport, attached PR",2023-08-01T22:47:27Z,2023-08-01T23:34:58Z,2023-08-01T23:34:58Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
Using a local cache block with the NullStore causes an exception. I dug a little deeper to discover that somehow the local cache has an explicitly stored `nil` for the missing value *after* the first call. And then when the second call is made, that is what causes it to break.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activesupport"", ""~> 7.0.6""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_two_calls_to_read_multi
    cache = ActiveSupport::Cache::NullStore.new
    cache.with_local_cache do 
      cache.write(""1"", ""one"")
      cache.write(""2"", ""two"")
      keys = [""1"", ""2"", ""3""]

      assert(cache.read_multi(*keys) == { ""1"" => ""one"", ""2"" => ""two"" })
      assert(cache.read_multi(*keys) == { ""1"" => ""one"", ""2"" => ""two"" })
    end
  end
end

```

### Expected behavior
The cache retrieves the values the second time

### Actual behavior

```
BugTest#test_two_calls_to_read_multi:
NoMethodError: undefined method `value' for nil:NilClass
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache/strategy/local_cache.rb:127:in `block in read_multi_entries'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache/strategy/local_cache.rb:126:in `transform_values!'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache/strategy/local_cache.rb:126:in `read_multi_entries'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache.rb:400:in `block in read_multi'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache.rb:783:in `block in instrument'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/notifications.rb:208:in `instrument'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache.rb:783:in `instrument'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache.rb:399:in `read_multi'
    bug_test.rb:27:in `block in test_two_calls_to_read_multi'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache/strategy/local_cache.rb:178:in `use_temporary_local_cache'
    .gem/ruby/3.2.2/gems/activesupport-7.0.6/lib/active_support/cache/strategy/local_cache.rb:64:in `with_local_cache'
    bug_test.rb:21:in `test_two_calls_to_read_multi'
```

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2
"
48866,Direct Routes aren't reflected in list of available routes via `bin/rails routes`,dylanfisher,actionpack,2023-08-01T21:00:03Z,2023-08-04T20:43:10Z,2023-08-04T20:43:09Z,"Adding [direct routes](https://guides.rubyonrails.org/routing.html#direct-routes) to your application don't seem to be reflected in the list of available routes. I'm not sure if this is intentional or not, but it seems counterintuitive in my first time using the `direct` route option.

### Steps to reproduce

```ruby
# routes.rb

direct :homepage do
  ""http://www.rubyonrails.org""
end
```

```
bin/rails routes | grep homepage
=> no results
```

The direct route helpers do work in the app, but they aren't reflected in the list of routes.

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2
"
48862,ActiveRecord::QueryMethods#select with Hash does not match syntax for #where,leejarvis,activerecord,2023-08-01T07:50:12Z,2023-08-26T09:34:44Z,2023-08-26T09:34:44Z,"https://github.com/rails/rails/pull/45612 recently added support for passing a Hash to `ActiveRecord::QueryMethods#select`, however it does not pick up table aliases in the same way that `#where` does. I think this behaviour is incorrect.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""select_hash_test"")
# ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end

  create_table :authors, force: true do |t|
    t.string :name
  end

  create_table :post_authors, force: true do |t|
    t.belongs_to :post
    t.belongs_to :author
  end

  create_table :comments, force: true do |t|
    t.belongs_to :post
    t.belongs_to :author
    t.string :text
  end
end

class Post < ActiveRecord::Base
  has_many :post_authors
  has_many :authors, through: :post_authors

  has_many :comments
  has_many :comment_authors, through: :comments, source: :author
end

class PostAuthor < ActiveRecord::Base
  belongs_to :post
  belongs_to :author
end

class Author < ActiveRecord::Base
  has_many :post_authors
  has_many :posts, through: :post_authors
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
  belongs_to :author
end

# test

class BugTest < Minitest::Test
  def setup
    Author.delete_all
    Post.delete_all

    author_1 = Author.create!(name: ""Author 1"")
    author_2 = Author.create!(name: ""Author 2"")

    post = author_1.posts.create!(title: ""Post 1"")
    post.comments.create! text: ""Comment 1"", author: author_2
    post.comments.create! text: ""Reply"", author: author_1

    author_2.posts.create!(title: ""Post 2"")
  end

  # This test correctly picks up the `comment_authors` alias
  #
  # SELECT ""posts"".* FROM ""posts""
  # INNER JOIN ""post_authors"" ON ""post_authors"".""post_id"" = ""posts"".""id""
  # INNER JOIN ""authors"" ON ""authors"".""id"" = ""post_authors"".""author_id""
  # INNER JOIN ""comments"" ON ""comments"".""post_id"" = ""posts"".""id""
  # INNER JOIN ""authors"" ""comment_authors"" ON ""comment_authors"".""id"" = ""comments"".""author_id""
  # WHERE ""comment_authors"".""name"" = 'Author 2'
  def test_where_with_select_hash
    posts = Post.joins(:authors, :comment_authors).where(comment_authors: { name: ""Author 2"" })

    assert_equal 1, posts.count
    assert_equal ""Post 1"", posts.take.title
  end

  # This test fails because the `comment_authors` alias is not picked up, instead
  # We would need to know that Rails has generated a different alias: `comment_authors_posts`
  #
  # PG::UndefinedTable: ERROR:  missing FROM-clause entry for table ""comment_authors""
  def test_select_with_hash
    posts = Post.joins(:authors, :comment_authors).select(comment_authors: { name: :commentor_name })

    assert_equal [""Author 1"", ""Author 2""], posts.map(&:commentor_name).sort
  end
end

```

### Expected behavior

`ActiveRecord::QueryMethods#select` should be able to determine the alias for `comment_authors` like `where` does.

### Actual behavior

`ActiveRecord::QueryMethods#select` raises an error because the alias table does not match the one that Rails generates

### System configuration
**Rails version**: `main` from GitHub, currently https://github.com/rails/rails/commit/35a614c227620a62d7a2a242e375a43e7e2affc5

**Ruby version**: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin21]
"
48841,`after_destroy` callback should not run on non `persisted?` records,smtlaissezfaire,activerecord,2023-07-28T18:08:02Z,2023-08-05T05:45:58Z,2023-08-02T15:15:15Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

Non persisted objects should not run callbacks (especially `after_destroy`) after calling `destroy` or `destroy!`

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

Example with test case:
https://gist.github.com/smtlaissezfaire/262f05a54b4c568dc1310f3b52006d61

```
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""

require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|; end
end

class User < ActiveRecord::Base
  class CallbackRanError < StandardError; end

  after_destroy :raise_an_error

  def raise_an_error
    raise CallbackRanError
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_non_persisted_destroy_should_not_run_callbacks
    # an persisted? user should run after destroy callbacks
    persisted_user = User.create!
    assert_raises(User::CallbackRanError) { persisted_user.destroy! }

    # a non persisted user should NOT run callbacks
    non_persisted_user = User.new
    assert_nothing_raised { non_persisted_user.destroy! }
  end
end
```

### Expected behavior

It should not run the callbacks.

### Actual behavior

It does run the callbacks.

Without this, all callbacks that might touch other objects have to check persisted? (and might also have to check valid?) which seems to violate the principle of least surprise.

### System configuration
**Rails version**: 

```
>> Rails::VERSION::STRING
=> ""7.0.6""
```

although same seems to be present in 7.x, 6.x and 5.x series

**Ruby version**:

```
>> RUBY_VERSION
=> ""3.1.2""
```

"
48836,ActiveStorage: Support AWS IAM Roles when using S3,tbmetcalfe,activestorage,2023-07-28T14:56:59Z,2023-09-04T16:53:47Z,2023-09-04T16:53:47Z,"### Description

Currently, it is mandatory to use AWS Access Keys when using ActiveStorage. However, it is considered best practice to use AWS IAM roles where possible if operating within AWS. Currently, this does not appear possible when using ActiveStorage.

### Current behavior
If you do not set these fields, `access_key_id` and `secret_access_key`, when configuring to use S3, then even when you set the other methods of setting AWS credentials, the service will fail as it cannot locate the credentials. 

### Desired behavior
If the `access_key_id` and `secret_access_key` are set, then use these fields. If, however, these fields are not set, it will then try to locate the default AWS credentials (as defined in the AWS SDK) such as from environment variables (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`) or the IAM role assigned to the resource (e.g. if it's running on an EC2 instance)

This behavior is already implemented in the AWS SDK for all programming languages.

### System configuration
**Rails version**: `6.1.3`

**Ruby version**: `3.0.5`
"
48826,`ApplicationTests::BinSetupTest#test_bin_setup_output` fails against Ruby 3.3.0dev,yahonda,"railties, ci issues",2023-07-27T09:29:05Z,2023-07-29T03:20:32Z,2023-07-29T03:20:32Z,"Managed to reproduce https://buildkite.com/rails/rails/builds/98279#01899424-9e26-4fb8-a685-84607e46d279

### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
bin/test test/application/bin_setup_test.rb:30
```

### Expected behavior
It should pass.

### Actual behavior
It fails.

```ruby
$ rm ../Gemfile.lock ; bundle ; RUBYOPT=-W:deprecated bin/test test/application/bin_setup_test.rb:30
Fetching https://github.com/github/trilogy.git
Fetching https://github.com/matthewd/websocket-client-simple.git
Fetching gem metadata from https://rubygems.org/.........
Resolving dependencies...
Bundle complete! 81 Gemfile dependencies, 215 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
mutex_m is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
drb is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
base64 is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
base64 is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
mutex_m is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
Run options: --seed 1511

# Running:

F

Failure:
ApplicationTests::BinSetupTest#test_bin_setup_output [/home/yahonda/src/github.com/rails/rails/railties/test/application/bin_setup_test.rb:51]:
--- expected
+++ actual
@@ -2,10 +2,16 @@
 The Gemfile's dependencies are satisfied

 == Preparing database ==
+mutex_m is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
+base64 is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
 Created database 'app_development'
 Created database 'app_test'

 == Removing old logs and tempfiles ==
+mutex_m is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
+base64 is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.

 == Restarting application server ==
+mutex_m is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
+base64 is not part of the default gems since Ruby 3.4.0. Add it to your Gemfile.
 ""



bin/test test/application/bin_setup_test.rb:30



Finished in 5.598662s, 0.1786 runs/s, 0.1786 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.3.0dev (2023-07-26T19:59:59Z master 9bdd485972) [x86_64-linux]
"
48815,CSP Middleware wrongly uses upper case header names,andrepiske,"actionpack, attached PR",2023-07-26T14:30:17Z,2023-07-29T00:01:21Z,2023-07-29T00:01:21Z,"`ActionDispatch::ContentSecurityPolicy::Middleware#policy_present` wrongly checks if a policy is already defined in the headers because it checks for a `Content-Security-Policy` header but won't check for `content-security-policy`.
This leads to the middleware then replacing a previously existing policy.

For instance, when using Rails 7.0.6 and Sidekiq 7.1.2 and a strict CSP is configured in rails (e.g. one that requires nonces in inline `script` tags), sidekiq dashboard UI breaks because it contains inline script tags. Those script tags should be affected by Sidekiq's own CSP which is set in https://github.com/sidekiq/sidekiq/blob/b3225ce/lib/sidekiq/web/application.rb#L353 but they're set with a lower case header name, which then gets ignored by rails' CSP middleware.

[Rack 2 & 3 compatibility guidelines](https://github.com/rack/rack/blob/main/UPGRADE-GUIDE.md#rack-2--rack-3-compatibility) states:

> Response header keys can no longer include uppercase characters.

Thus I believe rails CSP middleware should check & set only lowercase characters.

I'm happy to provide a PR with a fix, but I'm unsure if just changing those to lowercase wouldn't impact other things too much.

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2"
48874,Rack::Lint on Rails,skipkayhil,"actionpack, pinned",2023-07-26T12:30:45Z,2023-09-18T23:15:02Z,,"Meta issue for adding `Rack::Lint` to Rails middleware tests.

As Rack 3 can now be used with Rails main, it is necessary to ensure that all of the middleware defined in Rails adhere to the Rack SPEC. While existing test coverage was able to find many of the incompatibilities, I've seen multiple examples of mixed case header usage left that need to be fixed. Instead of trying to `grep` or otherwise manually find these middleware that aren't adhering to the SPEC, I'd like to add Rack::Lint to (every?) middleware's unit test in Rails so that we can be sure they follow the Rack 3 SPEC programmatically."
48802,`ActiveModel::Type::DateTime#cast_value` can cause silent data loss,elebow,"activemodel, attached PR",2023-07-25T17:36:11Z,2023-08-02T21:38:16Z,2023-08-01T23:10:38Z,"`ActiveModel::Type::DateTime#cast_value` relies on Ruby's `Date._parse` to convert a String to a Hash of date components. The Ruby documentation notes that this function does no validation, and a string that does not represent a valid date causes unpredictable behavior.

This causes some undesired behavior in Rails:

```ruby
Article.where(date: ""pizza"").to_sql
=> ""SELECT \""articles\"".* FROM \""articles\"" WHERE \""articles\"".\""date\"" = NULL""
```

```ruby
Article.first.update!(date: ""pizza"")
  Article Load (0.1ms)  SELECT ""articles"".* FROM ""articles"" ORDER BY ""articles"".""id"" ASC LIMIT ?  [[""LIMIT"", 1]]
  TRANSACTION (0.1ms)  begin transaction
  Article Update (0.8ms)  UPDATE ""articles"" SET ""date"" = ?, ""updated_at"" = ? WHERE ""articles"".""id"" = ?  [[""date"", nil], [""updated_at"", ""2023-07-25 17:13:31.934971""], [""id"", 1]]
  TRANSACTION (1.4ms)  commit transaction
=> true

Article.first.date
  Article Load (0.1ms)  SELECT ""articles"".* FROM ""articles"" ORDER BY ""articles"".""id"" ASC LIMIT ?  [[""LIMIT"", 1]]
=> nil
```

I suggest using Ruby's `DateTime.parse` instead of `Date._parse`. It has the same warning about undefined behavior, but it also instantiates a `DateTime` object, which raises an `ArgumentError` if the input is not a datetime—note the test changes in the below diff.

```diff
diff --git a/activemodel/lib/active_model/type/date_time.rb b/activemodel/lib/active_model/type/date_time.rb
index e85dc67a20..03b1576641 100644
--- a/activemodel/lib/active_model/type/date_time.rb
+++ b/activemodel/lib/active_model/type/date_time.rb
@@ -53,27 +53,21 @@ def type
       private
         def cast_value(value)
           return apply_seconds_precision(value) unless value.is_a?(::String)
-          return if value.empty?
 
           fast_string_to_time(value) || fallback_string_to_time(value)
         end
 
-        # '0.123456' -> 123456
-        # '1.123456' -> 123456
-        def microseconds(time)
-          time[:sec_fraction] ? (time[:sec_fraction] * 1_000_000).to_i : 0
-        end
-
         def fallback_string_to_time(string)
-          time_hash = begin
-            ::Date._parse(string)
-          rescue ArgumentError
-          end
-          return unless time_hash
-
-          time_hash[:sec_fraction] = microseconds(time_hash)
+          datetime = ::DateTime.parse(string)
 
-          new_time(*time_hash.values_at(:year, :mon, :mday, :hour, :min, :sec, :sec_fraction, :offset))
+          new_time(datetime.year,
+                   datetime.mon,
+                   datetime.mday,
+                   datetime.hour,
+                   datetime.min,
+                   datetime.sec,
+                   datetime.sec_fraction * 1_000_000, # new_time expects microseconds
+                   datetime.offset * 3600 * 24) # DateTime#offset is fraction of day, but new_time expects seconds
         end
 
         def value_from_multiparameter_assignment(values_hash)
diff --git a/activemodel/test/cases/type/date_time_test.rb b/activemodel/test/cases/type/date_time_test.rb
index bee7da7124..c7c9d5d520 100644
--- a/activemodel/test/cases/type/date_time_test.rb
+++ b/activemodel/test/cases/type/date_time_test.rb
@@ -8,10 +8,11 @@ class DateTimeTest < ActiveModel::TestCase
       def test_type_cast_datetime_and_timestamp
         type = Type::DateTime.new
         assert_nil type.cast(nil)
-        assert_nil type.cast("""")
-        assert_nil type.cast(""  "")
-        assert_nil type.cast(""ABC"")
-        assert_nil type.cast("" "" * 129)
+
+        assert_raises(ArgumentError) { type.cast("""") }
+        assert_raises(ArgumentError) { type.cast(""  "") }
+        assert_raises(ArgumentError) { type.cast(""ABC"") }
+        assert_raises(ArgumentError) { type.cast("" "" * 129) }
 
         datetime_string = ::Time.now.utc.strftime(""%FT%T"")
         assert_equal datetime_string, type.cast(datetime_string).strftime(""%FT%T"")
@@ -21,7 +22,7 @@ def test_string_to_time_with_timezone
         [""UTC"", ""US/Eastern""].each do |zone|
           with_timezone_config default: zone do
             type = Type::DateTime.new
-            assert_equal ::Time.utc(2013, 9, 4, 0, 0, 0), type.cast(""Wed, 04 Sep 2013 03:00:00 EAT"")
+            assert_equal ::DateTime.new(2013, 9, 4, 0, 0, 0.005, 0), type.cast(""Wed, 04 Sep 2013 03:00:00.0050 EAT"")
           end
         end
       end
```

I did not measure performance implications. If this change is desirable, I can put together a more complete PR."
48801,ActiveStorage: Convert has no effect on content_type in the variants Options,vincent-the,activestorage,2023-07-25T17:12:16Z,2023-08-05T10:37:33Z,2023-08-05T10:37:33Z,"### Steps to reproduce

In Model:
```ruby
class User < ApplicationRecord
  has_one_attached :image do |attachable|
    attachable.variant :medium, {resize_to_limit: [500, 500], convert: :webp}
  end
end
```
In View:

```ruby
<%= image_tag user.image.variant(:medium) %>
```


### Expected behavior
The content_type should be set to image/webp, and the filename extension should be changed to .webp as well.

### Actual behavior
The image is converted to webp, but content_type and extension remains jpeg.

### System configuration
**Rails version**: 7.0.4
**Ruby version**: 3.2.2
"
48797,Changing Encryption Field to Deterministic Causes Encryption Errors,aveedibya,"stale, encryption",2023-07-24T19:52:06Z,2023-11-01T00:59:43Z,2023-11-01T00:59:43Z,"Wondering if there is a way to read an encrypted field after changing its encryption to `deterministic`? Seems like currently there is no way in Rails to read the field's value if the field was set to `non-deterministic` (default way)  and then changed to `deterministic`.

<div class=""message mb-1"" style=""box-sizing: border-box; margin: 0px 12px; font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; color: rgb(33, 37, 41); font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"">ActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption</div>

56 | uncompress_if_needed(cipher.decrypt(message, key: keys.collect(&:secret), **cipher_options), message.headers.compressed)
-- | --
57 | rescue *(ENCODING_ERRORS + DECRYPT_ERRORS)
58 | raise Errors::Decryption
59 | end

Versions in use:
ruby ""3.1.2""
gem ""rails"", ""~> 7.0.3""
"
48794,Incorrect determination from `ActiveRecord::Persistence#previously_new_record?` after create-then-destroy,eizengan,activerecord,2023-07-24T17:27:12Z,2023-08-02T21:20:14Z,2023-08-02T02:50:21Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
- create a record
- destroy the record

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :records, force: true do |t|
    t.string :text
  end
end

class Record < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_previously_new_record
    destroyed_record = Record.create(text: ""a record we will destroy"")
    updated_record = Record.create(text: ""a record we will update"")

    destroyed_record.destroy!
    updated_record.update!(text: ""a record we have updated"")

    assert_equal updated_record.previously_new_record?, destroyed_record.previously_new_record?
  end
end

```

### Expected behavior
`ActiveRecord::Persistence#previously_new_record?` should be false after create and subsequent destroy, as it would be e.g. after create and subsequent update.

### Actual behavior
`ActiveRecord::Persistence#previously_new_record?` is true after create and subsequent destroy.

This causes callbacks such as the following to unexpectedly fire twice for the destroyed record during the test above:

```ruby
on_commit :do_something_with_the_record, if: :previously_new_record?
```

There is, however, a semantic argument to be made about what ""previously new"" means. Depending on interpretation, this behavior could be intentional. 

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2
"
48790,URL of attachments inside ActionText content are wrong when content is rendered within background jobs,Benratelade,"stale, actiontext",2023-07-24T00:48:22Z,2023-11-14T07:59:50Z,2023-11-14T07:59:50Z,"### Steps to reproduce
I couldn't figure out how to use the scripts to replicate the issue, since I had to include background jobs and ActionText with ActiveRecord. Instead, I put together a simple Rails app with a test case that shows the problem. Hopefully that's enough. 

You can find the app here: https://github.com/Benratelade/rails-workers-routing-bug 

### Expected behavior
The `src` of images inside the ActionText should match that of the rest of the Rails app when the content is rendered within a Sidekiq job. 

### Actual behavior
The `src` of images inside the ActionText uses `http://example.org` and ignores the Rails app config, but only when the content is rendered synchronously. 

### System configuration
**Rails version**: 7.0.3

**Ruby version**: 3.2.2
"
48789,Behavior changed when passing an array to `form_for` in Rails 7.0,krororo,actionview,2023-07-23T10:18:07Z,2023-08-27T04:00:36Z,2023-08-27T04:00:36Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

When passing an array of objects that can be call `to_model` to `form_for`, the `method: patch` is not included.
This issue is similar to #44326. However, it seems that nested routes have not been fixed.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  # gem ""rails"", ""6.1.7.4""
  gem ""rails"", ""7.0.6""
end

require ""rack/test""
require ""active_model""
require ""action_view""
require ""minitest/autorun""

class Post
  include ActiveModel::Model

  attr_reader :id

  def initialize(persisted: false)
    @persisted = persisted
    @id = 1 if persisted
  end

  def persisted?
    @persisted
  end
end

class PostForm
  include ActiveModel::Model

  def initialize(post)
    @post = post
  end

  def to_model
    @post
  end
end

class BugTest < ActionView::TestCase
  tests ActionView::Helpers::FormHelper

  routes = ActionDispatch::Routing::RouteSet.new
  routes.draw do
    namespace :admin do
      resources :posts
    end
  end
  include routes.url_helpers

  def test_form_for_namespaced_routes_new_model
    assert_dom_equal(
      '<form class=""new_post"" id=""new_post"" action=""/admin/posts"" accept-charset=""UTF-8"" method=""post"">' \
      '<input name=""utf8"" type=""hidden"" value=""&#x2713;"" autocomplete=""off"" />' \
      '</form>',
      form_for([:admin, PostForm.new(Post.new)]) {}
    )
  end

  def test_form_for_namespaced_routes_edit_model
    assert_dom_equal(
      '<form class=""edit_post"" id=""edit_post_1"" action=""/admin/posts/1"" accept-charset=""UTF-8"" method=""post"">' \
      '<input name=""utf8"" type=""hidden"" value=""&#x2713;"" autocomplete=""off"" />' \
      '<input name=""_method"" type=""hidden"" value=""patch"" autocomplete=""off"" />' \
      '</form>',
      form_for([:admin, PostForm.new(Post.new(persisted: true))]) {}
    )
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
These tests are passed in Rails 6.1 and Rails main branch. So it should work on Rails 7.0 as well.

```
# Running:

..

Finished in 0.069481s, 28.7847 runs/s, 28.7847 assertions/s.
2 runs, 2 assertions, 0 failures, 0 errors, 0 skips
```

### Actual behavior
<!-- Tell us what happens instead -->
`test_form_for_namespaced_routes_edit_model` fails in Rails 7.0.
The `_method` of the hidden field is not included.

```
# Running:

F

Failure:
BugTest#test_form_for_namespaced_routes_edit_model [actionview_test.rb:68]:
Expected: <form class=""edit_post"" id=""edit_post_1"" action=""/admin/posts/1"" accept-charset=""UTF-8"" method=""post""><input name=""utf8"" type=""hidden"" value=""&#x2713;"" autocomplete=""off"" /><input name=""_method"" type=""hidden"" value=""patch"" autocomplete=""off"" /></form>
Actual: <form class=""edit_post"" id=""edit_post_1"" action=""/admin/posts/1"" accept-charset=""UTF-8"" method=""post""><input name=""utf8"" type=""hidden"" value=""&#x2713;"" autocomplete=""off"" /></form>


rails test actionview_test.rb:67

.

Finished in 0.036721s, 54.4642 runs/s, 54.4642 assertions/s.
2 runs, 2 assertions, 1 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**:
7.0.6
**Ruby version**:
3.1.4"
48787,Combing tagged logger without block and with block leaks tags across threads,erikbelusic,"activesupport, With reproduction steps",2023-07-22T13:24:34Z,2023-09-07T16:15:43Z,,"Using the tagged logger without a block does not appear to have the same threaded isolation that tagging with a block has. The documentation doesn't make it clear if its intended or not, but from a user's perspective, it is unexpected. From the existing tests, it looks like some of this is expected, but the inconsistency is confusing. I left a comment on the original PR to try and get some insight.

This could be in some ways related to https://github.com/rails/rails/issues/46084 - however the focus of that is broadcast logging and not threading, however the issues seem similar - tag leak.

### Steps to reproduce
This example currently relies on identical setup to what is in `activesupport/test/tagged_logging_test.rb` which should make it easy to add these tests or some modified versions if its agreed this is a bug.
```
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  # Copied from activesupport/test/tagged_logging_test.rb
  class MyLogger < ::ActiveSupport::Logger
    def flush(*)
      info ""[FLUSHED]""
    end
  end

  # Copied from activesupport/test/tagged_logging_test.rb
  def setup
    @output = StringIO.new
    @logger = ActiveSupport::TaggedLogging.new(MyLogger.new(@output))
  end

  # Copied from activesupport/test/tagged_logging_test.rb:80
  def test_keeps_each_tag_in_their_own_thread
    @logger.tagged(""BCX"") do
      Thread.new do
        @logger.info ""Dull story""
        @logger.tagged(""OMG"") { @logger.info ""Cool story"" }
      end.join
      @logger.info ""Funky time""
    end
    assert_equal ""Dull story\n[OMG] Cool story\n[BCX] Funky time\n"", @output.string
  end
  # PASS output:
  # Dull story
  # [OMG] Cool story
  # [BCX] Funky time

  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block
    logger1 = @logger.tagged(""BCX"")
    Thread.new do
      logger1.info ""Dull story""
      logger2 = logger1.tagged(""OMG"")
      logger2.info ""Cool story""
    end.join
    logger1.info ""Funky time""

    assert_equal ""Dull story\n[OMG] Cool story\n[BCX] Funky time\n"", @output.string
  end
  # FAIL output:
  # [BCX] Dull story
  # [BCX] [OMG] Cool story
  # [BCX] Funky time

  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block
    logger1 = @logger.tagged(""BCX"")
    Thread.new do
      logger1.info ""Dull story""
      logger1.tagged(""OMG"") { logger1.info ""Cool story"" }
    end.join
    logger1.info ""Funky time""

    assert_equal ""Dull story\n[OMG] Cool story\n[BCX] Funky time\n"", @output.string
  end
  # FAIL output:
  # [BCX] Dull story
  # [BCX] [OMG] Cool story
  # [BCX] Funky time

  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block_nested
    logger = @logger.tagged(""BASE_TAG"")
    logger.tagged(""BCX"") do
      Thread.new do
        logger.info ""Dull story""
        logger.tagged(""OMG"") { logger.info ""Cool story"" }
      end.join
      logger.info ""Funky time""
    end
    assert_equal ""[BASE_TAG] Dull story\n[BASE_TAG] [OMG] Cool story\n[BASE_TAG] [BCX] Funky time\n"", @output.string
  end
  # FAIL output:
  # [BASE_TAG] [BCX] Dull story
  # [BASE_TAG] [BCX] [OMG] Cool story
  # [BASE_TAG] [BCX] Funky time
end
```

### Expected behavior
I would expect that if `#tagged` has a certain level of thread isolation, it should always have that isolation and behave consistently. At a minimum `test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block_nested` should pass. It seems awkward that depending on how your current logger instance was created, the behavior of tagging with a block could change. I think it is worth a conversation on the correct behavior here, as maybe my first two failures should remain failures due to some context or intent I am unaware of.

### Actual behavior
1. When using a new logger created from `#tagged`, tags are shared across threads
2. When tagging with a block from a logger instance created from `#tagged`, all tags are shared

### System configuration
**Rails version**: main

**Ruby version**: 3.0.0
"
48775,"Arel table alias breaks insert, update, and delete statements",lavoiesl,"activerecord, attached PR",2023-07-20T21:10:55Z,2023-10-18T07:41:52Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string ""name""
  end
end

class Post < ActiveRecord::Base
end


class BugTest < Minitest::Test
  def setup
    Post.arel_table.table_alias = nil
  end

  def test_select
    assert_equal('SELECT ""posts"".* FROM ""posts""', Post.all.to_sql)
  end

  def test_select_alias
    Post.arel_table.table_alias = ""p""
    assert_equal('SELECT ""p"".* FROM ""posts"" ""p""', Post.all.to_sql)
  end

  def test_insert
    post = Post.create!
    refute_nil(post)
  end

  def test_insert_alias
    Post.arel_table.table_alias = ""p""
    e = assert_raises(ActiveRecord::StatementInvalid) do
      Post.create!
    end
    assert_equal('INSERT INTO ""posts"" ""p"" DEFAULT VALUES', e.sql)
    assert_equal('SQLite3::SQLException: near """"p"""": syntax error', e.message)
  end

  def test_update
    post = Post.create!
    refute_nil(post)
    post.name = ""foo""
    post.save!
  end

  def test_update_alias
    post = Post.create!
    refute_nil(post)

    Post.arel_table.table_alias = ""p""
    e = assert_raises(ActiveRecord::StatementInvalid) do
      post.name = ""foo""
      post.save!
    end
    assert_equal('UPDATE ""posts"" ""p"" SET ""name"" = ? WHERE ""p"".""id"" = ?', e.sql)
    assert_equal('SQLite3::SQLException: near """"p"""": syntax error', e.message)
  end

  def test_delete
    post = Post.create!
    refute_nil(post)
    post.delete
  end

  def test_delete_alias
    post = Post.create!
    refute_nil(post)

    Post.arel_table.table_alias = ""p""
    e = assert_raises(ActiveRecord::StatementInvalid) do
      post.delete
    end
    assert_equal('DELETE FROM ""posts"" ""p"" WHERE ""p"".""id"" = ?', e.sql)
    assert_equal('SQLite3::SQLException: near """"p"""": syntax error', e.message)
  end
end
```

### Expected behavior
The table alias is valid on SELECTs, but not on INSERT, UPDATE, or DELETE statements.
The example is with sqlite, but [MySQL has similar rules where it specifically asks for a table _name_](https://dev.mysql.com/doc/refman/8.0/en/insert.html).

I would expect Arel to _NOT_ use the alias on insert, update, and delete statements

### System configuration
**Rails version**:
6.1.7.4

**Ruby version**:
3.2.2

**MySQL**:
MySQL 5.7, using the mysql2 0.5.5 gem"
48771,`belongs_to` validating the presence of object and not the object's ID,tejanium,activerecord,2023-07-20T15:57:19Z,2023-07-27T08:55:49Z,2023-07-27T08:55:49Z,"### Steps to reproduce

Given I have

```ruby
class Post < ActiveRecord::Base
  validates :title, presence: true

  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, optional: false
end
```

then I do

```ruby
comment = Comment.new(post: Post.new)
```

I expect

```ruby
comment.invalid?
```

to be true and see a validation error either in `post` or `post_id`

### Reproducible script

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""mysql2""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""mysql2"", user: 'root', host: 'localhost')

ActiveRecord::Base.connection.execute(""DROP DATABASE IF EXISTS bug_test"")
ActiveRecord::Base.connection.execute(""CREATE DATABASE bug_test"")

ActiveRecord::Base.establish_connection(adapter: ""mysql2"", database: ""bug_test"", user: 'root', host: 'localhost')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end

  create_table :comments, force: true do |t|
    t.references :post, foreign_key: true
  end
end

class Post < ActiveRecord::Base
  validates :title, presence: true

  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, optional: false
end

class BugTest < Minitest::Test
  def test_default_belongs_to_validation
    comment = Comment.new(post: Post.new)

    assert_predicate comment, :invalid?
    assert_equal comment.errors[:post], [""must exist""]
  end

  def test_default_belongs_to_validation_with_id
    comment = Comment.new(post_id: Post.new.id)

    assert_predicate comment, :invalid?
    assert_equal comment.errors[:post_id], [""can’t be blank""]
  end
end
```

### Expected behavior

Since Rails 5.0 the default for `belongs_to` is `optional: false` (or `required: true` now), which means the presence validator is added automatically.

So that when we do `Comment.new(post: Post.new)` it will validate the presence of `post`, however it doesn't translates as `validates :post_id, presence: true`

We can explicitly `validates :post_id, presence: true` so it became

```ruby
class Comment < ActiveRecord::Base
  belongs_to :post, optional: false
  
  validates :post_id, presence: true
end
```

But I think it defeats the purpose of `optional: false` (`require: true`) (and the default behavior of `belongs_to`)

Also, Rubocop has this check https://www.rubydoc.info/gems/rubocop-rails/RuboCop/Cop/Rails/RedundantPresenceValidationOnBelongsTo which complains if devs explicitly validating `association` or `association_id` of a `belongs_to`

```ruby
# bad
belongs_to :user
validates :user, presence: true

# bad
belongs_to :user
validates :user_id, presence: true

# bad
belongs_to :author, foreign_key: :user_id
validates :user_id, presence: true

# good
belongs_to :user

# good
belongs_to :author, foreign_key: :user_id
```

Which warn me if I have both `belongs_to :post` and `validates :post_id, presence: true`

While I understand this probably is a Rubocop issue, this behavior is perhaps somehow unexpected since there's no point in automatically validating the presence of the association of `belongs_to`, if the association itself is invalid/incomplete (without `id`) 

Therefore, would it be better for `belongs_to :post, optional: false` actually to automatically add `validates :post_id, presence: true` instead?

### Actual behavior

It persists the broken `comment` without `post_id`

### System configuration

**Rails version**: 7.1.0.alpha from https://github.com/rails/rails.git

**Ruby version**: ruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]
"
48770,HashWithIndifferentAccess#to_proc does not map keys to values as Hash#to_proc does,jasonkarns,"activesupport, attached PR",2023-07-20T15:13:09Z,2023-11-17T19:54:59Z,2023-10-04T07:56:59Z,"`Hash#to_proc` returns a proc that maps key to its value in the hash.

`HashWithIndifferentAccess#to_proc` however, does not generate a proc that behaves similarly.

There are two distinct behaviors that deviate from expections. Firstly, since HWIA normalizes symbol keys to strings internally, then HWIA#to_proc will _only_ work with string keys. (symbol keys map to nil). If a HWIA is constructed with symbol keys, then it should be expected that `#to_proc` honor that form.

The more general behavior, I think, is that one would expect a HWIA#to_proc to still map keys indifferently. So even if the HWIA were constructed with string keys, it should still accept symbols as well, since that is the point of HWIA (and since the proc is intended to essentially equate to `#[]`).

### Steps to reproduce

Repro gist: https://gist.github.com/jasonkarns/b8cfea9d681f3754648d807dc6710d63

```ruby
regular_hash = {a: 1, b: 2}
indifferent_hash = regular_hash.with_indifferent_access

keys = regular_hash.keys # symbol keys

keys.map(&indifferent_hash)
```

### Expected behavior

I would expect the result to be `[1,2]` just as `keys.map(&regular_hash)` would return.

### Actual behavior

Actual result is `[nil, nil]`

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.1.3
"
48769,after_commit runs before transaction committed after upgrade Rails from 6.0.4.8 to 6.1.7.4,ikarpov-lohika,more-information-needed,2023-07-20T10:36:50Z,2023-08-04T00:58:46Z,2023-08-04T00:58:46Z,"### Steps to reproduce
Class for reproduction:
```
class Redemption < ApplicationRecord
  not_sharded
  self.table_name = ""coupon_redemptions""
  self.primary_key = ""id""

  after_commit :find_created_record,
      on: :create

  def find_created_record
    puts ""in after commit""
    r = ::Redemption.find(id)
    puts r.inspect
  end
end
```
Execution example:
`redemption = Redemption.new(account_id: 101, coupon_id: 101, active: true).save(validate:false)`

Started reproducing after the upgrade Rails from 6.0.4.8 to 6.1.7.4

Used properties in application:
```
config.active_record.has_many_inversing = false
config.active_record.legacy_connection_handling = true 
```

### Expected behavior
```
D, [2023-07-20T09:17:22.308552 #4138] DEBUG -- :   TRANSACTION (2.0ms)  BEGIN
D, [2023-07-20T09:17:22.316227 #4138] DEBUG -- :   Redemption Create (1.9ms)  INSERT INTO coupon_redemptions` (`account_id`, `coupon_id`, `active`, `created_at`, `updated_at`) VALUES (12000, 12000, TRUE, '2023-07-20 09:17:22', '2023-07-20 09:17:22')
D, [2023-07-20T09:17:22.322090 #4138] DEBUG -- :   TRANSACTION (3.3ms)  COMMIT

in after commit

D, [2023-07-20T09:17:22.328713 #4138] DEBUG -- :   Redemption Load (2.8ms)  SELECT `coupon_redemptions`.* FROM `coupon_redemptions` WHERE `coupon_redemptions`.`id` = 1006 LIMIT 1
#<Redemption id: 1006, account_id: 12000, coupon_id: 12000, active: true, created_at: ""2023-07-20 09:17:22.000000000 +0000"", updated_at: ""2023-07-20 09:17:22.000000000 +0000"", fact_snapshot: nil, discount_starts_at: nil, discount_ends_at: nil>

=> true
```
### Actual behavior
```
D, [2023-07-20T09:17:22.308552 #4138] DEBUG -- :   TRANSACTION (2.0ms)  BEGIN
D, [2023-07-20T09:17:22.316227 #4138] DEBUG -- :   Redemption Create (1.9ms)  INSERT INTO `coupon_redemptions` (`account_id`, `coupon_id`, `active`, `created_at`, `updated_at`) VALUES (12000, 12000, TRUE, '2023-07-20 09:17:22', '2023-07-20 09:17:22')
D, [2023-07-20T09:17:22.322090 #4138] DEBUG -- :   TRANSACTION (3.3ms)  COMMIT

in after commit

D, [2023-07-20T09:17:22.328713 #4138] DEBUG -- :   ActiveRecord::RecordNotFound Couldn't find Redemption with 'id'=14674
```

### NOTE:
If add `sleep` for 1 sec before `find`, code will work fine with 6.1.7.4:
```
 def find_created_record
    puts ""in after commit""
    sleep(1)
    r = ::Redemption.find(id)
    puts r.inspect
  end
```

### System configuration
**Rails version**: 6.1.7.4

**Ruby version**: 2.7.7
"
48764,Encrypted columns are not decrypted when used in group operations across joins,TikiTDO,"activerecord, stale, encryption",2023-07-19T19:10:23Z,2023-10-24T20:33:52Z,2023-10-24T20:06:32Z,"### Steps to reproduce

1. Create a DB entry with an encrypted deterministic column as per: https://guides.rubyonrails.org/active_record_encryption.html#deterministic-and-non-deterministic-encryption

Run the following code on a server with the encryption key:

```ruby
Article.joins(:author).group(:email).count
```

### Expected behavior

```ruby
=> {""email@example.com""=>111,
 ""email@example.com""=>222}
```

### Actual behavior

```ruby
=> {""{\""p\"":\""tHc=\"",\""h\"":{\""iv\"":\""AUAnaod3vn4ThiCq\"",\""at\"":\""tNCqVTXFXsTu/7b22+KJkQ==\""}}""=>111,
 ""{\""p\"":\""vXw=\"",\""h\"":{\""iv\"":\""GzjQbfA1erPDJGcG\"",\""at\"":\""cSCrtBxMJuJI/belpvaGtQ==\""}}""=>222}
```


### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2
"
48759,Intermediate table's record is not created when using has_one through association for creation,ohbarye,activerecord,2023-07-19T09:47:49Z,2023-08-02T22:48:22Z,2023-08-02T22:48:21Z,"As the title says, an intermediate table's record is not created when using `has_one through` association for creation.

Upon performing a git bisect, I found that it started to fail from the following commit: https://github.com/rails/rails/commit/bdbe58b50461dc44c42df4d5427fa78aeb1debcb

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->


```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'activerecord', '7.0.5'
  # gem 'activerecord', '7.0.4.3'
  gem 'sqlite3'
end

require 'active_record'
require 'minitest/autorun'
require https://github.com/ruby/logger

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table 'foos', force: :true do |t|
  end

  create_table 'bars', force: :true do |t|
  end

  create_table 'prefix_middles', force: :true do |t|
    t.bigint 'foo_id'
    t.bigint 'bar_id'
  end
end

class Foo < ActiveRecord::Base
  has_one :prefix_middle, class_name: 'Prefix::Middle'
  has_one :bar, through: :prefix_middle
end

class Bar < ActiveRecord::Base
  has_one :prefix_middle, class_name: 'Prefix::Middle'
  has_one :foo, through: :prefix_middle
end

module Prefix
  class Middle < ActiveRecord::Base
    def self.table_name_prefix
      'prefix_'
    end

    belongs_to :foo
    belongs_to :bar

    validates :bar_id, presence: true
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    foo = Foo.create!

    foo.create_bar!
    # The value of `foo.prefix_middle.bar_id` differs between the two versions after executing `foo.create_bar!`
    # Once I insert `foo.prefix_middle.bar_id = foo.bar.id` here, it passes.
    foo.save! # <= This creates the intermediate table's  record at 7.0.4.3, but not at 7.0.5

    assert_equal 1, Prefix::Middle.count
  end
end
```

### Expected behavior

It creates (persists) the intermediate table's record when calling `foo.save!`. This was the behavior until version 7.0.4.3

### Actual behavior

It does not create (persist) the intermediate table's record when calling `foo.save!`.

### System configuration

**Rails version**: 7.0.5

**Ruby version**: 3.2.2
"
48758,ActiveRecord::Base#attribute_names and ActiveRecord::Base#table_exist? to work without connection,kirs,activerecord,2023-07-18T23:35:10Z,2023-07-19T17:33:32Z,2023-07-19T17:33:32Z,"In the app I'm working on, we take resiliency very seriously and we have a hard requirements for the app to boot and be able to access model's `attribute_names` even when the database connection is down. For that, we employ schema cache for each connection.

We employ a bunch of patches of connection & connection pooling to make that happen. It would be great to have Rails support that from the box when schema cache is available.

A snippet to illustrate the idea:

```ruby
require ""active_record""

class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
  connects_to database: { writing: :mydb }
end

class Post < ApplicationRecord
end

# on boot, load and set the cache to pool
cache = ActiveRecord::ConnectionAdapters::SchemaCache.load_from(""./stored_schema_cache.yml"")
ApplicationRecord.connection_pool.set_schema_cache(cache)

# pretend that connection is ""down""
module ActiveRecord
  module ConnectionHandling
    def retrieve_connection
      raise ""should not be called""
    end
  end
end

puts Post.attribute_names.inspect
=> expect this to return attribute names based on info from the schema cache, without retrieve_connection being called at all
```

I believe this could be achieved by changing calls like `connection.schema_cache.columns_hash` and `connection.schema_cache.data_source_exists?(table_name)` into something that can access schema cache without invoking the connection."
48744,Unable to use named variants for blob preview,matiassalles99,activestorage,2023-07-17T15:11:51Z,2023-07-18T01:55:11Z,2023-07-18T01:54:57Z,"### Steps to reproduce

1. Create a record with named variants

<img width=""570"" alt=""Screenshot 2023-07-17 at 12 05 47"" src=""https://github.com/rails/rails/assets/57004457/50ab402e-1cdc-433b-b8ee-2ea33e69c63e"">

2. Upload a previewable file to the record

3. Try to show the blob preview using named variants

<img width=""263"" alt=""Screenshot 2023-07-17 at 12 06 23"" src=""https://github.com/rails/rails/assets/57004457/731c4234-2014-4950-9325-06be359aeb20"">

### Expected behavior
Should decode the transformations based on the symbol passed to preview

### Actual behavior
Gives undefined method deep_symbolize_keys when running into this line

<img width=""665"" alt=""Screenshot 2023-07-17 at 12 08 37"" src=""https://github.com/rails/rails/assets/57004457/6832d8ee-58fe-40a6-b1e1-89f30db4b841"">

Open to help coding in order to resolve this issue, from what I saw we don't have a clear way to the attachment variants.
I was thinking of grabbing the attachments from the has_many relationship in the blob and, if all of them belong to the same model type (eg: User) then grab the variants from there, if not, raise an error.

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.2.2
"
48721,"Calling model.decrypt saves the unencrypted entity, which breaks further access to it",dsusviela,"activerecord, stale, encryption",2023-07-12T15:25:26Z,2023-10-21T16:48:06Z,2023-10-21T16:48:06Z,"### Steps to reproduce

1. Create a model with AR encryption on one of the fields
2. Make sure the chosen field has deterministic encryption
3. Go into the rails console
4. Create an entity of this model, and save it
5. Call `#decrypt`
6. Do `Model.find(:id).inspect`
7. You should get an error

Any interaction with this record will result in errors

### Executable use case:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem 'rails'
  gem ""sqlite3""
  gem ""pry""
  gem ""byebug""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Encryption.configure(
  primary_key: SecureRandom.alphanumeric(32),
  deterministic_key: SecureRandom.alphanumeric(32),
  key_derivation_salt: SecureRandom.alphanumeric(32),
  extend_queries: true,
  )

ActiveRecord::Schema.define do
  create_table :users, force: :true do |t|
    t.string :secret
  end
end

class User < ActiveRecord::Base
  encrypts :secret, deterministic: true
end

class BugTest < Minitest::Test
  def test_decrypt_breaks_access_to_model
    model = User.create(secret: ""my_test_string"")
    id = model.id
    model.decrypt

    assert_raises(ActiveRecord::Encryption::Errors::Decryption) do
      User.find(id).inspect
    end
  end
end
```

### Expected behavior
I can still interact with the entity, at the very least I should be able to recover it

### Actual behavior
Any method calls on this record yield in the after mentioned exception

### My 2 cents

I found this behavior when playing around with some records, and called `decrypt` on some of them because I was playing around. My issue is probably the intended behavior (that the record gets updated) and I understand that we get an exception since the record is not in the expected json string format anymore. However I think that we can improve the experience with any of: 

- Improving the documentation; adding a warning that this will result in an `update` of your record
- Changing the implementation so that the `ActiveRecord::Encryption::NullEncryptor.new` returns a string with a single string

I'm okay with providing any solution that it may be okay

### System configuration
**Rails version**: 7.0.6

**Ruby version**: 3.2.2
"
48714,accepts_nested_attributes_for does not work with non `id` primary_key,fanantoxa,"activerecord, attached PR",2023-07-11T15:18:06Z,2023-11-30T13:26:53Z,,"### Steps to reproduce
Currently `accepts_nested_attributes_for` when it's trying to find existing records in relation it's hardcoded to take a look on `id` column. 
Problem is that `id` is not alway a primary key. In our case we have one of tables does not have `id` column at all but uses `uuid` is primary key. 
We've set `self.primary_key = 'uuid'` but `accepts_nested_attributes_for` does not uses this value to use in matching existing records.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true, id: false do |t|
    t.integer :uuid, primary_key: true
    t.integer :post_id
    t.string :name
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  accepts_nested_attributes_for :comments, allow_destroy: true
end

class Comment < ActiveRecord::Base
  self.primary_key = 'uuid'

  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    post.comments << Comment.create!(name: 'wonderfull')

    post.reload

    assert_equal 1, post.comments.count
    assert_equal 1, Comment.count
    assert_equal post.id, Comment.first.post.id

    update_posts_data = {
      'id' => post.id,
      'comments_attributes' => [
        {
          'uuid' => Comment.first.uuid,
          'name' => 'Even Better'
        },
        {
          'name' => 'Another comment'
        }
      ]
    }

    post.assign_attributes(update_posts_data)

    post.save

    post.reload
    assert_equal 2, post.comments.count
    assert_equal 2, Comment.count

    assert_equal post.id, Comment.first.post.id
    assert_equal post.id, Comment.last.post.id

    assert_equal 'Even Better', Comment.first.name
    assert_equal 'Another comment', Comment.last.name
  end
end

```

### Expected behavior
Existing records are updated and new created.

### Actual behavior
It always trying to create new records and hit violation on primary key:
```
ActiveRecord::RecordNotUnique: SQLite3::ConstraintException: UNIQUE constraint failed: comments.uuid
```

### System configuration
**Rails version**: 7.1.0.alpha 
But present in any Rails version

**Ruby version**: 3.1.2 
But present in any Ruby version
"
48712,Enumerator::Lazy#sum and Enumerator#sum behave differently after Rails 7 update if block relies on side effect,goalaleo,"regression, activesupport, attached PR",2023-07-11T12:47:55Z,2023-07-20T22:28:19Z,2023-07-20T22:28:18Z,"### Steps to reproduce
I'm doing an update from rails `6.1.7.2` to `7.0.6` and some of our tests failed. This seems related to the deprecation of `Enumerable#sum` in Rails 7.

Basically the problem is that `Enumerator::Lazy#sum` and `Enumerator#sum` - when used without initial value - behave differently if the block relies on a side effect.
```ruby
input1 = ""\xEF\xBB\xBFinput1""
input2 = ""\xEF\xBB\xBFinput2""

# returns a lazy enumerator
remove_first_bom = proc do |enum|
  # external state
  first = true
  
  enum.lazy.map do |str|
    if first
      # side effect
      first = false
      str[1..]
    else
      str
    end
  end
end

# when using deprecated Enumerator::Lazy#sum the BOM bytes [239, 187, 191] are not removed.
remove_first_bom.call([input1, input2]).sum.bytes
=> [239, 187, 191, 105, 110, 112, 117, 116, 49, 239, 187, 191, 105, 110, 112, 117, 116, 50]

# when using deprecated Enumerator#sum the BOM bytes are removed as expected when
# lazy enumerator is forced to evaluate before using sum
remove_first_bom.call([input1, input2]).force.sum.bytes
=> [105, 110, 112, 117, 116, 49, 239, 187, 191, 105, 110, 112, 117, 116, 50]

# when the initial value for sum is provided this seems to work, so in that sense not using the deprecated behaviour fixes the issue
remove_first_bom.call([input1, input2]).sum("""").bytes
 => [105, 110, 112, 117, 116, 49, 239, 187, 191, 105, 110, 112, 117, 116, 50] 
```
I suspect that there might be some peeking behaviour which has the side effect of setting `first = false`. I'm pretty sure I saw this when adding `puts` into the conditional.

I confirmed that this doesn't happen in `6.1.7.2`.

### Expected behavior
`Enumerator::Lazy#sum` and `Enumerator#sum` should return the same result.

### Actual behavior
`Enumerator::Lazy#sum` and `Enumerator#sum` return different values if the block relies on a side effect

### System configuration
**Rails version**: `7.0.6`

**Ruby version**:  `3.1.2`
"
48710,`PooledConnectionsTest#test_pooled_connection_checkin_one` fails,yahonda,"activerecord, ci issues",2023-07-10T23:34:52Z,2023-07-11T17:09:56Z,2023-07-11T17:09:56Z,"Managed to reproduce CI failure https://buildkite.com/rails/rails/builds/97935#01893f03-cf32-468a-b1f2-c963b9092bfe

### Steps to reproduce
```ruby
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
cd activerecord
bin/test test/cases/connection_adapters/connection_handler_test.rb test/cases/pooled_connections_test.rb -n ""/^(?:ActiveRecord::ConnectionAdapters::ConnectionHandlerTest#(?:test_remove_connection_with_name_argument_is_deprecated)|PooledConnectionsTest#(?:test_pooled_connection_checkin_one))$/"" --seed 9221
```

### Expected behavior
It should pass.

### Actual behavior
It gets the error as follows.

```ruby
$ bin/test test/cases/connection_adapters/connection_handler_test.rb test/cases/pooled_connections_test.rb -n ""/^(?:ActiveRecord::ConnectionAdapters::ConnectionHandlerTest#(?:test_remove_connection_with_name_argument_is_deprecated)|PooledConnectionsTest#(?:test_pooled_connection_checkin_one))$/"" --seed 9221
Using sqlite3
Run options: -n ""/^(?:ActiveRecord::ConnectionAdapters::ConnectionHandlerTest#(?:test_remove_connection_with_name_argument_is_deprecated)|PooledConnectionsTest#(?:test_pooled_connection_checkin_one))$/"" --seed 9221

# Running:

.E

Error:
PooledConnectionsTest#test_pooled_connection_checkin_one:
NoMethodError: undefined method `configuration_hash' for nil:NilClass
    /home/yahonda/src/github.com/rails/rails/activerecord/test/cases/pooled_connections_test.rb:13:in `setup'

Error:
PooledConnectionsTest#test_pooled_connection_checkin_one:
ActiveRecord::AdapterNotSpecified: The `test` database is not configured for the `test` environment.

  Available database configurations are:

  arunit
arunit2
arunit_without_prepared_statements

    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/database_configurations.rb:229:in `resolve_symbol_connection'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/database_configurations.rb:179:in `resolve'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_handling.rb:354:in `resolve_config_for_connection'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_handling.rb:52:in `establish_connection'
    /home/yahonda/src/github.com/rails/rails/activerecord/test/cases/pooled_connections_test.rb:18:in `block in <class:PooledConnectionsTest>'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:448:in `instance_exec'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:448:in `block in make_lambda'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:274:in `block in simple'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:602:in `block in invoke_after'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:602:in `each'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:602:in `invoke_after'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:111:in `run_callbacks'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:46:in `after_teardown'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/test_fixtures.rb:15:in `after_teardown'


bin/test test/cases/pooled_connections_test.rb:53



Finished in 0.015183s, 131.7268 runs/s, 263.4535 assertions/s.
2 runs, 4 assertions, 0 failures, 1 errors, 0 skips
$
```


### System configuration
**Rails version**: main branch

**Ruby version**:ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
48704,`filter_parameters` used by `active_record.set_filter_attributes` initializer before it is set,nicholasdower,activerecord,2023-07-10T13:27:37Z,2023-07-13T17:54:24Z,2023-07-13T17:54:24Z,"A sample project which demonstrates this issue can be found here: https://github.com/nicholasdower/filter_parameters_issue

### Steps to reproduce

- Set `filter_parameters` in a Rails app to prevent a field in an `ActiveRecord` class from being logged.
- Start the application.
- Log an instance of the `ActiveRecord` class.

### Expected behavior

The ActiveRecord object should be filtered based on the `filter_parameters`.

### Actual behavior

The ActiveRecord object is not filtered based on the `filter_parameters`.

### Potential Cause

Afaict, this is due to the fact that:

- `active_record/railtie` requires `rails` (See [here](https://github.com/rails/rails/blob/7b52f56/activerecord/lib/active_record/railtie.rb#L4))
- `rails` requires `rails/application` (See [here](https://github.com/rails/rails/blob/7b52f569c1a05d3c988540a2fc1ccef40165a59c/railties/lib/rails.rb#L15))
- `rails/application` requires `rails/engine` (See [here](https://github.com/rails/rails/blob/7b52f569c1a05d3c988540a2fc1ccef40165a59c/railties/lib/rails/application.rb#L12))
- `rails/engine` adds the initializer `load_config_initializers` (See [here](https://github.com/rails/rails/blob/7b52f569c1a05d3c988540a2fc1ccef40165a59c/railties/lib/rails/engine.rb#L634))
- `active_record/railtie` then adds the initializer `active_record.set_filter_attributes` (See [here](https://github.com/rails/rails/blob/7b52f56/activerecord/lib/active_record/railtie.rb#L339))

This means `active_record.set_filter_attributes` will run before `load_config_initializers`. But `active_record.set_filter_attributes` uses `Rails.application.config.filter_parameters` (See [here](https://github.com/rails/rails/blob/7b52f56/activerecord/lib/active_record/railtie.rb#L341)) which is supposed to be set by a config initializer (per https://guides.rubyonrails.org/configuring.html#config-filter-parameters).

### System configuration
**Rails version**: `7.0.4.3`

**Ruby version**: `3.2.2`
"
48701,Rails CI `activesupport (3.1)` runs `3.3.0p-1 (2023-07-06 revision 75f8781c08da421d6bcfb2c3c8b7b74efea3bec2) [x86_64-linux]`,yahonda,ci issues,2023-07-09T22:52:52Z,2023-07-10T23:40:40Z,2023-07-10T23:15:05Z,"While investigating CI failure https://buildkite.com/rails/rails/builds/97870#01892cc9-5038-4065-a6d5-56e973eda905 , it should run Ruby 3.1 as it says  `activesupport (3.1)`, it actually run `3.3.0p-1 (2023-07-06 revision 75f8781c08da421d6bcfb2c3c8b7b74efea3bec2) [x86_64-linux]`

### Steps to reproduce
Open one of the recent failed build https://buildkite.com/rails/rails/builds/97870#01892cc9-5038-4065-a6d5-56e973eda905

### Expected behavior
It should pass and it should use the Ruby 3.1.

### Actual behavior
The Ruby version is `Ruby          3.3.0p-1 (2023-07-06 revision 75f8781c08da421d6bcfb2c3c8b7b74efea3bec2) [x86_64-linux]`

### System configuration
**Rails version**: main

**Ruby version**:3.3.0p-1 (2023-07-06 revision 75f8781c08da421d6bcfb2c3c8b7b74efea3bec2) [x86_64-linux]
"
48696,Line filtering doesn't work for plugin tests,lewispb,"railties, more-information-needed",2023-07-09T08:29:24Z,2023-11-08T00:37:27Z,2023-11-08T00:37:27Z,"### Steps to reproduce

- Checkout [rails/kredis](https://github.com/rails/kredis)
- Run `bin/test test/attributes_test.rb:82`

### Expected behavior

Only one test runs

### Actual behavior

All tests in test/attributes_test.rb run

### More info

I've fixed this for Kredis only, in this PR: https://github.com/rails/kredis/pull/122

Kredis has a standard `require ""rails/plugin/test""` in `bin/test`.

[`rails/plugin/test`](https://github.com/rails/rails/blob/main/railties/lib/rails/plugin/test.rb) does not support line filtering in the same way line filtering is installed for Rails apps or [Rails itself](https://github.com/rails/rails/blob/main/tools/test.rb#L9).

"
48689,Custom serialization & storage in ActiveRecord::Encryption (beyond strings),maximerety,"activerecord, stale, encryption",2023-07-07T17:17:19Z,2023-12-20T11:03:04Z,2023-12-20T11:03:04Z,"### Steps to reproduce

In https://guides.rubyonrails.org/active_record_encryption.html#supported-types, it is clearly stated:

> **`active_record.encryption` will serialize values using the underlying type before encrypting them, but they must be serializable as strings**. Structured types like serialized are supported out of the box.

As long as you only have string values, a `text`/`varchar` column in the database, and a message serializer that emits and consumes strings (the situation currently described in the docs), everything works just fine.

But I'd like to propose to support a wider range of use cases by **allowing custom serializers that output another type than strings**.

A typical use case would be to use a binary column in the database (e.g. `bytea` in PostgreSQL) and serialize encrypted values using a compact binary format such as the one provided by [MessagePack](https://github.com/msgpack/msgpack-ruby) (example given below), instead of the default JSON string format provided by the default message serializer.

Setting a custom serializer via `config.active_record.encryption.message_serializer` is already supported (https://guides.rubyonrails.org/active_record_encryption.html#encryption-contexts). Unfortunately, it's not possible to make your custom serializer produce binary values and have things work right out of the box.

One small inconvenience is the problem described in https://github.com/rails/rails/issues/48685 (quite straitghforward to fix: https://github.com/rails/rails/pull/48686), but a bigger problem lies in the current design of `ActiveRecord::Encryption::EncryptedAttributeType`.

To make my explanation a bit visual, this is what we have today:

```plaintext
Attribute without encryption:
                          ┌──────┐     
  user-provided value ───►┤ cast ├───► value for the db
                          └──────┘     
                                        
                          ┌──────┐     
   value for the user ◄───┤ cast ├◄─── db-provided value
                          └──────┘     


Attribute with encryption:
                          ┌────────┐    ┌─────────┐    ┌─────────────┐    ┌────────┐     
  user-provided value ───►┤ cast A ├───►┤ encrypt ├───►┤  serialize  ├───►┤ cast B ├───► value for the db
                          └────────┘    └─────────┘    └─────────────┘    └────────┘     
                                                                                         
                          ┌────────┐    ┌─────────┐    ┌─────────────┐    ┌────────┐     
   value for the user ◄───┤ cast A ├◄───┤ decrypt ├◄───┤ deserialize ├◄───┤ cast B ├◄─── db-provided value
                          └────────┘    └─────────┘    └─────────────┘    └────────┘     
```

As of today, the default implementation of `ActiveRecord::Encryption::EncryptedAttributeType` uses the type of the database column as `cast_type` to perform the `cast A` step in the figure, and there is no `cast B` step.

When a value is extracted from the database, there is no type casting before sending it to the message serializer for deserialization. Conversely, a value serialized with the message serializer is sent directly to the database without any further type casting. So, by default, there is no `cast B` step, and only strings are expected to be sent to/received from the database.

As long as you only have string values, a `text`/`varchar` column in the database, and a message serializer that emits and consumes strings (the situation currently described in the docs), everything works just fine.

But with this model, you can't easily switch to a `bytea` column and serialize in database-compatible binary format, because you have no built-in way to perform a `cast B` (binary) which is different from `cast A` (strings).

I think we should recognize the need for two distinct types of casting:

* Casting clear values before encryption (e.g. ensuring correct type/encoding), and;
* Casting encrypted+serialized values before sending them to the database (e.g. sending a message that is serialized in binary format).

Ideally, the framework should allow developers to specify the type of casting they need in a particular place, instead of using the database column type for `cast A` (not always appropriate), and providing no support for `cast B`.

**If you think this could be a good addition to the framework, I would volunteer to help make this happen.**

For completeness, a possible workaround is:

1. To declare the attribute as a string (despite the attribute being stored in a binary format in the database) in order to trick the framework to use a `:string` attribute type when performing `cast A` (see figure above):

    ```diff
      create_table(:records, force: true) do |t|
        t.bytea :some_attribute
      end

      class Record < ActiveRecord::Base
    +   attribute :some_attribute, :string
        encrypts :some_attribute
      end
    ```

2. To perform `cast B` yourself in the serializer, here an example of a binary message serializer using [MessagePack](https://github.com/msgpack/msgpack-ruby) (some details omitted - don't use this in your project):

    ```ruby
    class ByteaSerializer < ActiveRecord::Encryption::MessageSerializer
      def load(escaped_content)  
        encoded_content = binary_type.deserialize(escaped_content)
        parse_message(MessagePack.unpack(encoded_content), 1)
      end
    
      def dump(message)
        encoded_content = MessagePack.pack message_to_json(message)
        binary_type.serialize(encoded_content)
      end
    
      private
    
      def encode_if_needed(value) = value
      def decode_if_needed(value) = value
    
      def binary_type
        @binary_type ||= ActiveRecord::Type.lookup(:binary, adapter: :postgresql)
      end
    end
    ```

Although this gives us a picture of what we're trying to achieve, I think we'd do better to make `ActiveRecord::Encryption::EncryptedAttributeType` more versatile so that it's possible to achieve this goal without using dangerous tricks.

### Expected behavior

Various database column types and message serializers are supported for encrypted attributes.

### Actual behavior

You can only have string values, a `text`/`varchar` column in the database, and a message serializer that emits and consumes strings.

### System configuration

**Rails version**: 7.0.6

**Ruby version**: 3.2.2

---------

**Edit on `2023-07-10`**

I reworded the explanations around `cast B`, which is a step that does not exist in the default implementation, but which is needed in custom ones."
48688,Callbacks called twice when child accepts_nested_attributes_for parent,jakemiller13,"activerecord, attached PR",2023-07-07T16:25:45Z,2023-10-30T14:23:22Z,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :name
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :name
  end
end

class Post < ActiveRecord::Base
  has_one :comment

  before_validation :before_validation_callback_post
  after_validation :after_validation_callback_post

  before_save :before_save_callback_post
  after_save :after_save_callback_post

  before_create :before_create_callback_post
  after_create :after_create_callback_post

  def before_validation_callback_post
    puts 'Post: before_validation_callback'
  end

  def after_validation_callback_post
    puts 'Post: after_validation_callback'
  end

  def before_save_callback_post
    puts 'Post: before_save_callback'
  end

  def after_save_callback_post
    puts 'Post: after_save_callback'
  end

  def before_create_callback_post
    puts 'Post: before_create_callback'
  end

  def after_create_callback_post
    puts 'Post: after_create_callback'
  end
end

class Comment < ActiveRecord::Base
  belongs_to :post

  accepts_nested_attributes_for :post

  before_validation :before_validation_callback_comment
  after_validation :after_validation_callback_comment

  before_save :before_save_callback_comment
  after_save :after_save_callback_comment

  before_create :before_create_callback_comment
  after_create :after_create_callback_comment

  def before_validation_callback_comment
    puts 'Comment: before_validation_callback'
  end

  def after_validation_callback_comment
    puts 'Comment: after_validation_callback'
  end

  def before_save_callback_comment
    puts 'Comment: before_save_callback'
  end

  def after_save_callback_comment
    puts 'Comment: after_save_callback'
  end

  def before_create_callback_comment
    puts 'Comment: before_create_callback'
  end

  def after_create_callback_comment
    puts 'Comment: after_create_callback'
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    Comment.create!(name: 'foo', post_attributes: {name: 'bar'})
  end
end

```

### Expected behavior
`before_validation`, `after_validation`, `before_save`, `after_save` callbacks should only be called once when saving a parent record that accepts nested attributes for a child record. Note that `before_create`, `after_create` callbacks **are** only called once, so this inconsistency is especially confusing.

### Actual behavior
`before_validation`, `after_validation`, `before_save`, `after_save` are all called twice on parent record.

```
(base) m-apd-jmiller:models jmiller$ ruby active_record_main.rb 
Fetching https://github.com/rails/rails.git
Fetching gem metadata from https://rubygems.org/......
Resolving dependencies...
Using rake 13.0.6
Using connection_pool 2.4.1
Using minitest 5.18.1
Using webrick 1.8.1
Using erubi 1.12.0
Using rack 3.0.8
Using websocket-extensions 0.1.5
Using marcel 1.0.2
Using rack-test 2.1.0
Using bundler 2.4.7
Using websocket-driver 0.7.5
Using nio4r 2.5.9
Using zeitwerk 2.6.8
Using date 3.3.3
Using timeout 0.4.0
Using builder 3.2.4
Using io-console 0.6.0
Using racc 1.7.1
Using crass 1.0.6
Using thor 1.2.2
Using sqlite3 1.6.3 (x86_64-darwin)
Using rack-session 2.0.0
Using mini_mime 1.1.2
Using rackup 2.1.0
Using concurrent-ruby 1.2.2
Using net-protocol 0.2.1
Using reline 0.3.5
Using i18n 1.14.1
Using net-imap 0.3.6
Using nokogiri 1.15.3 (x86_64-darwin)
Using net-pop 0.1.2
Using net-smtp 0.3.3
Using loofah 2.21.3
Using irb 1.7.1
Using rails-html-sanitizer 1.6.0
Using tzinfo 2.0.6
Using mail 2.8.1
Using activesupport 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using activemodel 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using rails-dom-testing 2.1.1
Using activerecord 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actionview 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using globalid 1.1.0
Using actionpack 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using activejob 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actioncable 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using activestorage 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actionmailer 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actionmailbox 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using actiontext 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using railties 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
Using rails 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)
-- create_table(:posts, {:force=>true})
D, [2023-07-07T12:17:20.483607 #2897] DEBUG -- :    (0.1ms)  DROP TABLE IF EXISTS ""posts""
D, [2023-07-07T12:17:20.485077 #2897] DEBUG -- :    (1.1ms)  CREATE TABLE ""posts"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""name"" varchar)
   -> 0.0286s
-- create_table(:comments, {:force=>true})
D, [2023-07-07T12:17:20.485698 #2897] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""comments""
D, [2023-07-07T12:17:20.486042 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE ""comments"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""post_id"" integer, ""name"" varchar)
   -> 0.0009s
D, [2023-07-07T12:17:20.488263 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE ""schema_migrations"" (""version"" varchar NOT NULL PRIMARY KEY)
D, [2023-07-07T12:17:20.490839 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE ""ar_internal_metadata"" (""key"" varchar NOT NULL PRIMARY KEY, ""value"" varchar, ""created_at"" datetime(6) NOT NULL, ""updated_at"" datetime(6) NOT NULL)
D, [2023-07-07T12:17:20.532633 #2897] DEBUG -- :   ActiveRecord::InternalMetadata Load (2.7ms)  SELECT * FROM ""ar_internal_metadata"" WHERE ""ar_internal_metadata"".""key"" = ? ORDER BY ""ar_internal_metadata"".""key"" ASC LIMIT 1  [[nil, ""environment""]]
D, [2023-07-07T12:17:20.533215 #2897] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.1ms)  INSERT INTO ""ar_internal_metadata"" (""key"", ""value"", ""created_at"", ""updated_at"") VALUES ('environment', 'development', '2023-07-07 16:17:20.532735', '2023-07-07 16:17:20.532743')
Run options: --seed 61519

# Running:

Comment: before_validation_callback
Post: before_validation_callback
Post: after_validation_callback
Comment: after_validation_callback
Post: before_save_callback
Post: before_create_callback
D, [2023-07-07T12:17:20.661392 #2897] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2023-07-07T12:17:20.661656 #2897] DEBUG -- :   Post Create (0.4ms)  INSERT INTO ""posts"" (""name"") VALUES (?)  [[""name"", ""bar""]]
Comment: before_validation_callback
Comment: after_validation_callback
Comment: before_save_callback
Comment: before_create_callback
D, [2023-07-07T12:17:20.662908 #2897] DEBUG -- :   Comment Create (0.1ms)  INSERT INTO ""comments"" (""post_id"", ""name"") VALUES (?, ?)  [[""post_id"", 1], [""name"", ""foo""]]
Comment: after_create_callback
Comment: after_save_callback
Post: after_create_callback
Post: after_save_callback
Comment: before_save_callback
Comment: after_save_callback
D, [2023-07-07T12:17:20.663528 #2897] DEBUG -- :   TRANSACTION (0.1ms)  commit transaction
```

### System configuration
**Rails version**: 5.2.8.1, 7.0.6 (tested both)

**Ruby version**: 2.7.6, 3.2.1 (tested both)
"
48687,ActiveRecord time not included in request logs when `shard_resolver`  is used,pospieszynski,activerecord,2023-07-07T16:01:39Z,2023-07-25T13:43:21Z,2023-07-10T15:44:36Z,"### Steps to reproduce
1. Create Rails 7.0.4.3 app in `api_only` mode
2. Configure database for multi-shards as described [here](https://edgeguides.rubyonrails.org/active_record_multiple_databases.html)
3. Add sample `shard_resolver` to `application.rb` file.
3. Implement sample endpoint that calls any db query and observe to last line of logs processing.
4. Put the code below to the initializer.

```
ActiveSupport::Notifications.subscribe ""process_action.action_controller"" do |event|
  Rails.logger.info ""Duration: #{event.duration}; DB: #{event.payload[:db_runtime].to_i}""
  # Notice that event.payload[:db_runtime] is always nil here
end
```

### Expected behaviour
The log line that summarises the request completion should contain `ActiveRecord` time. Also, the instrumentation hook for `process_action.action_controller` event should have `event.payload[:db_runtime]` not being nil. Please see SS below:

<img width=""540"" alt=""image"" src=""https://github.com/rails/rails/assets/15077823/29574765-0dfd-4d14-b044-d4fb1528ffc4"">


### Actual behavior
Rails doesn't seem to correctly keep track of database time throughout the request lifecycle for multi-db setup resulting in missing ActiveRecord time in logs. Please see SS below:

<img width=""388"" alt=""image"" src=""https://github.com/rails/rails/assets/15077823/722cf567-3e1e-4651-884f-96853c2aa35a"">

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.0.2
"
48685,Make ActiveRecord Encryptor agnostic of the type of serialized data to be decrypted,maximerety,"activerecord, attached PR, encryption",2023-07-07T13:11:02Z,2023-10-30T07:43:41Z,,"### Steps to reproduce

I am using [ActiveRecord Encryption](https://guides.rubyonrails.org/active_record_encryption.html) with latest Rails `7.0.*`, and a custom serializer instead of the default one.

This custom serializer outputs binary values that are stored in a `bytea` column in PostgreSQL, instead of a JSON value in a `text` column, as the default MessageSerializer would do.

It works pretty well except that the `ActiveRecord::Encryption::Encryptor#deserialize_message` prevents `ActiveModel::Type::Binary::Data` objects to be passed to the custom serializer for decryption. (Note: we get this type of data for user inputs subsequently decrypted, e.g. during attribute validation).

I would expect the `Encryptor` to be agnostic about the type of values to decrypt, and let the underlying serializer assert the actual types that it supports.

Note that the default `MessageSerializer` is already able to reject any input which is not a `String`:

1. A  `TypeError` is raised by `JSON.parse` (not caught here)
https://github.com/rails/rails/blob/a5fc471b3f4bbd02e6be38dae023526a49e7d049/activerecord/lib/active_record/encryption/message_serializer.rb#L24-L29
2. The `TypeError` is caught and replaced by an `Encoding` error:
https://github.com/rails/rails/blob/a5fc471b3f4bbd02e6be38dae023526a49e7d049/activerecord/lib/active_record/encryption/encryptor.rb#L102-L107
3. And finally caught again and replaced by  a `Decryption` error:
https://github.com/rails/rails/blob/a5fc471b3f4bbd02e6be38dae023526a49e7d049/activerecord/lib/active_record/encryption/encryptor.rb#L52-L59

So there is no need for this duplicate preventive check at `Encryptor` level in step 2.:

https://github.com/rails/rails/blob/a5fc471b3f4bbd02e6be38dae023526a49e7d049/activerecord/lib/active_record/encryption/encryptor.rb#L103

When I remove that duplicate check, the behavior is unchanged when using the default `MessageSerializer`, but I am able to use a custom serializer too.

### Expected behavior

I would expect the `Encryptor` to be agnostic about the type of values to decrypt, and let the underlying serializer assert the actual types that it supports.

### Actual behavior

The `Encryptor` assumes that the input to be deserialized/decrypted is always a `String` when it could be something else. This unnecessarily prevents the use of custom serializers.

### System configuration

**Rails version**: 7.0.6 / 7.1

**Ruby version**: 3.2.2
"
48675,Potential bug with use of `create_#{association}!` method.,rishijain,"activerecord, With reproduction steps",2023-07-06T06:01:08Z,2023-08-08T13:32:50Z,2023-08-08T13:32:50Z,"### Steps to reproduce
```
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", ""7.0.5""
  gem ""debug""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.references :totp_setting
  end

  create_table :totp_settings, force: true do |t|
    t.references :user
  end
end

class User < ActiveRecord::Base
  belongs_to :totp_setting, optional: true

  after_create :setup_totp_setting

  def setup_totp_setting
    create_totp_setting!(user: self)
  end
end

class TotpSetting < ActiveRecord::Base
  belongs_to :user, touch: true

  before_create :set_parent

  def set_parent
    puts '1'*100
    puts user.totp_setting
  end
end

class BugTest < Minitest::Test
  def test_bug
    @user = User.create!
  end
end
```
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
```

### Expected behavior

If you set the rails version to '7.0.4.3' and run the script, the puts statements would print
```
  1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
  nil
```

If you set the rails version to '7.0.5' and run the script, the puts statements would print
```
  1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
  #<TotpSetting:0x00007fcd86d0da80>
```


### Actual behavior
I don't know what behaviour is broken, is the Rails 7.0.4.3 correct or 7.0.5?

### System configuration
**Rails version**:
7.0.4.3 & 7.0.5

**Ruby version**:
2.7.7

### My analysis:
The difference in behaviour was introduced with this commit: https://github.com/rails/rails/commit/bdbe58b50461dc44c42df4d5427fa78aeb1debcb

Specifically this line https://github.com/rails/rails/blob/bdbe58b50461dc44c42df4d5427fa78aeb1debcb/activerecord/lib/active_record/associations/singular_association.rb#L58

If I change that to `build_record` instead of using `build` in Rails 7.0.5 code, it works the same way as 7.0.4.3.
I understand the `build` method calls `build_record` internally and does an additional step `set_new_record` here https://github.com/rails/rails/blob/bdbe58b50461dc44c42df4d5427fa78aeb1debcb/activerecord/lib/active_record/associations/singular_association.rb#L22C8-L22C8.


"
48671,Loading a CollectionAssociation is not threadsafe in all contexts,mullican,"activerecord, attached PR",2023-07-05T21:13:21Z,2023-07-24T17:33:57Z,,"### Steps to reproduce
The superclass `CollectionAssociation` applies to `has_many` and HABTM relations. Its implementation of the `load_target` method relies on the value of an instance variable `@target` which is initialized in `reset` to an empty array. When a given association has not been loaded, this variable is passed as an argument to the method `merge_target_lists`, where database results are compared to the current copy of the records held in memory.

This presents two potential race conditions in threaded code:
1. The `reset` method calls `super` before assigning the empty array to `@target`. On the `Association` superclass, `@target` is assigned as `nil`, so there is a brief moment between the two assignments where it may evaluate as `nil`. Many methods on `CollectionAssociation` assume that its value is always an array and will throw a `NoMethodError` exception if called in this state.
2. The implementation of `merge_target_lists` mutates the value of the passed argument by calling `delete` on its elements before subsequently returning a final result back to the caller, where it is reassigned to the `@target` variable. Thus, there is also a brief moment, while this method is iterating over a result set, where `@target` may contain either partial data or no data. If another thread relies on the value of `@target` at this point in time, it will see inconsistent results.

Consider the following scenario:
```ruby
class Post < ApplicationRecord
  has_many :comments
end

@post = Post.find(1)
Thread.new { @post.comments.do_some_work }
Thread.new { @post.comments.do_other_work }
```

### Expected behavior
Because the call to `comments` will lazily load the association, and there is no guaranteed order of execution, either thread, or both, may load records from the database, depending on when the value of `@loaded` is read and written. However, the load should occur atomically, so that if both threads evaluate `@loaded` as false, they both fetch and return the correct records consistently. In the current implementation, a thread in this scenario may see no data, partial data, or throw an exception.

### Actual behavior
For example:
```ruby
@post = Post.first
expected_result_count = @post.comments.count
thread_count = @post.class.connection_pool.size-1

1_000.times { |i|
  @post.association(:comments).reset
  thread_count.times.map { |j|
    Thread.new {
      begin
        actual_count = @post.comments.load.size
        if actual_count != expected_result_count
          STDOUT.puts ""Thread ##{j}[#{i}]: Expected #{expected_result_count}, found #{actual_count}""
        end
      rescue => e
        STDOUT.puts ""Thread ##{j}[#{i}]: Caught exception #{e}""
      end
    }
  }.each(&:join)
}
```

Output of an example run on my hardware, using 50 threads with 1K iterations — 14 of the 50K loads returned inconsistent data or errors:
```
Thread #5[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #20[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #29[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #40[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #41[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #36[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #49[246]: Caught exception undefined method `persisted?' for nil:NilClass
Thread #45[268]: Expected 500, found 468
Thread #42[268]: Expected 500, found 468
Thread #39[268]: Expected 500, found 468
Thread #49[268]: Expected 500, found 468
Thread #46[495]: Expected 500, found 469
Thread #46[533]: Expected 500, found 454
Thread #47[810]: Caught exception undefined method `persisted?' for nil:NilClass
```

### System configuration
**Rails version**: 6.1, 7.0
**Ruby version**: 3.0, 3.2
"
48652,ActiveRecord serialize stripping obj's attributes before sending the data to the serializer on rails 7.0.5,TopRoupi,activerecord,2023-07-04T23:23:54Z,2023-07-13T10:03:44Z,2023-07-13T09:58:35Z,"upgrading from rails **7.0.4.3** to **7.0.5** causes activerecord models with serialized params to break since the data sent to the serializer on **7.0.5** is now being passed to `deep_dup` before being sent to the serializer, and this makes activerecord objs passed inside the parameters to lose attributes.
this was changed on this commit [activerecord/lib/active_record/relation/predicate_builder.rb](https://github.com/rails/rails/commit/213972e1ef8b50d5a930fed52780846f674eb808#diff-b8fadd6d1ec091c30f94738b9b193b78ec90681790dd3a6aa79938b4dacbe904)

example of a case that this change is causing problems https://github.com/excid3/noticed/issues/296 

### Steps to reproduce
```ruby
#!/usr/bin/env ruby

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '= 7.0.5'
  # gem 'rails', '= 7.0.4.3'
  gem 'sqlite3'
  gem 'byebug'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :notifications do |t|
    t.json :params
  end

  create_table :comments do |t|
    t.string :body
  end
end

class DummyCoder
  def self.load(data)
    return if data.nil?
    puts ""load""
    p data
    ""dummy""
  end

  def self.dump(data)
    return if data.nil?
    puts ""dump""
    p data
    raise ""object has no id"" if data[:comment].id.nil?
    ""dummy""
  end
end

class Notification < ActiveRecord::Base
  serialize :params, DummyCoder
end

class Comment < ActiveRecord::Base
end

class TestWhereQueryWithSerializedParam < Minitest::Test
  def test_where_query_with_serialized_param
    comment = Comment.create(body: ""1"")
    notifications = Notification.where(params: {comment: comment}).last
    assert_equal notifications, nil
  end
end
```

### Expected behavior
calling Notification.where(params: {comment: comment}).last should not raise since the `data` variable on `DummyCoder.dump(data)`  method will have an id: `{:comment=>#<Comment id: 1, body: ""1"">}`

this was the behavior on rails 7.0.4.3 

### Actual behavior
calling Notification.where(params: {comment: comment}).last will raise since the `data` variable on `DummyCoder.dump(data)`  method wont have an id: `{:comment=>#<Comment id: nil, body: ""1"">}`
which is cause by this new change [activerecord/lib/active_record/relation/predicate_builder.rb](https://github.com/rails/rails/commit/213972e1ef8b50d5a930fed52780846f674eb808#diff-b8fadd6d1ec091c30f94738b9b193b78ec90681790dd3a6aa79938b4dacbe904)

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.0.0
"
48651,Behaviour of `where.missing` changed in rails 7.0.6,robingram,"activerecord, attached PR",2023-07-04T22:08:21Z,2023-07-27T18:19:28Z,2023-07-27T18:19:28Z,"### Steps to reproduce

Create a model called `Publisher` that has an enum on the `name` attribute.

```ruby
class Publisher < ApplicationRecord
  belongs_to :listing

  enum name: {
    foo: 0,
    bar: 1
  }
end
```

Create another model named `Listing` that has a `has_many` association and scoped `has_one` associations to `Publisher`.

```ruby
class Listing < ApplicationRecord
  has_many :publishers, dependent: :destroy
  has_one :foo_listing, -> { foo }, class_name: Publisher.name
  has_one :bar_listing, -> { bar }, class_name: Publisher.name
end
```

Create an instance of Listing that has a `foo` publisher but not a `bar` publisher (using Factory Bot here for brevity).

```ruby
create(:listing, publishers: [build(:publisher, :foo)])
```

Run a query using `where.missing` to select listings with a `foo` publisher but not a `bar` publisher.

```ruby
Listing.joins(:foo_listing).where.missing(:bar_listing)
```

### Expected behavior

The query should return the listing created above. This works in Rails 7.0.5.1.

### Actual behavior

No records are returned in Rails 7.0.6.

The table alias seems to have changed in the generated SQL.

Rails 7.0.5.1:

```sql
SELECT listings.*
FROM listings
    INNER JOIN publishers ON publishers.name = 0 AND publishers.listing_id = listings.id
    LEFT OUTER JOIN publishers bar_listing ON bar_listing.name = 1
        AND bar_listing.listing_id = listings.id
WHERE bar_listing.id IS NULL
```

Rails-7.0.6:

```sql
SELECT listings.*
FROM listings
    INNER JOIN publishers ON publishers.name = 0 AND publishers.listing_id = listings.id
    LEFT OUTER JOIN publishers bar_listings_listings ON bar_listings_listings.name = 1
        AND bar_listings_listings.listing_id = listings.id
WHERE publishers.id IS NULL
```

Explicitly creating the left join and checking for blank ID works in 7.0.6:

```ruby
Listing.joins(:foo_listing).left_joins(:bar_listing).where(bar_listing: {id: nil})
```

### System configuration

**Rails version**: 7.0.6

**Ruby version**: 3.2.2
"
48633,Throwing abort on an autosaved `has_one` association does not raise an exception,wata727,"activerecord, attached PR",2023-07-03T10:16:56Z,2023-07-05T04:06:07Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.0.6""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :suppliers, force: true do |t|
  end
  create_table :accounts, force: true do |t|
    t.integer :supplier_id
  end
end

class Supplier < ActiveRecord::Base
  has_one :account, autosave: true
end

class Account < ActiveRecord::Base
  before_save { throw(:abort) }
end

class BugTest < Minitest::Test
  def test_has_one
    supplier = Supplier.new
    supplier.build_account
    assert_raises(ActiveRecord::RecordNotSaved) { supplier.save! }

    assert_equal 0, Supplier.count
    assert_equal 0, Account.count
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

The tests should pass without errors.

### Actual behavior
<!-- Tell us what happens instead -->

`ActiveRecord::RecordNotSaved` is not raised.

```
# Running:

Finished in 0.004507s, 221.8771 runs/s, 221.8771 assertions/s.

  1) Failure:
BugTest#test_has_one [has_one_abort_autosave.rb:43]:
ActiveRecord::RecordNotSaved expected but nothing was raised.

1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
```

### Detailed description

When I first encountered this issue, I wasn't sure if this was a bug or intended behavior. So, I investigated the behavior of `has_many`, `has_one`, `belongs_to`. Below is the test:

<details>

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.0.6""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
  create_table :comments, force: true do |t|
    t.integer :post_id
    t.text :content
  end

  create_table :suppliers, force: true do |t|
  end
  create_table :accounts, force: true do |t|
    t.integer :supplier_id
    t.string :name
  end

  create_table :books, force: true do |t|
    t.integer :author_id
  end
  create_table :authors, force: true do |t|
    t.string :name
  end
end

class Post < ActiveRecord::Base
  has_many :comments
  has_many :autosave_comments, class_name: 'Comment', autosave: true
  has_many :abort_comments
  has_many :abort_autosave_comments, class_name: 'AbortComment', autosave: true
  has_many :invalid_comments
  has_many :invalid_autosave_comments, class_name: 'InvalidComment', autosave: true
end

class Comment < ActiveRecord::Base; end
class AbortComment < Comment
  before_save { throw(:abort) }
end
class InvalidComment < Comment
  validates :content, presence: true
end

class Supplier < ActiveRecord::Base
  has_one :account
  has_one :autosave_account, class_name: 'Account', autosave: true
  has_one :abort_account
  has_one :abort_autosave_account, class_name: 'AbortAccount', autosave: true
  has_one :invalid_account
  has_one :invalid_autosave_account, class_name: 'InvalidAccount', autosave: true
end

class Account < ActiveRecord::Base; end
class AbortAccount < Account
  before_save { throw(:abort) }
end
class InvalidAccount < Account
  validates :name, presence: true
end

class Book < ActiveRecord::Base
  belongs_to :author
  belongs_to :autosave_author, class_name: 'Author', foreign_key: 'author_id', autosave: true
  belongs_to :abort_author, foreign_key: 'author_id'
  belongs_to :abort_autosave_author, class_name: 'AbortAuthor', foreign_key: 'author_id', autosave: true
  belongs_to :invalid_author, foreign_key: 'author_id'
  belongs_to :invalid_autosave_author, class_name: 'InvalidAuthor', foreign_key: 'author_id', autosave: true
end

class Author < ActiveRecord::Base; end
class AbortAuthor < Author
  before_save { throw(:abort) }
end
class InvalidAuthor < Author
  validates :name, presence: true
end

class BugTest < Minitest::Test
  def teardown
    Post.delete_all
    Comment.delete_all
    Supplier.delete_all
    Account.delete_all
    Book.delete_all
    Author.delete_all
  end

  def test_has_many
    post = Post.new
    post.comments.build
    assert post.save!

    assert_equal 1, Post.count
    assert_equal 1, Comment.count
  end

  def test_has_many_autosave
    post = Post.new
    post.autosave_comments.build
    assert post.save!

    assert_equal 1, Post.count
    assert_equal 1, Comment.count
  end

  def test_has_many_abort
    post = Post.new
    post.abort_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_many_abort_autosave
    post = Post.new
    post.abort_autosave_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_many_invalid
    post = Post.new
    post.invalid_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_many_invalid_autosave
    post = Post.new
    post.invalid_autosave_comments.build
    assert_raises(ActiveRecord::RecordInvalid) { post.save!}

    assert_equal 0, Post.count
    assert_equal 0, Comment.count
  end

  def test_has_one
    supplier = Supplier.new
    supplier.build_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 1, Account.count
  end

  def test_has_one_autosave
    supplier = Supplier.new
    supplier.build_autosave_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 1, Account.count
  end

  def test_has_one_abort
    supplier = Supplier.new
    supplier.build_abort_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 0, Account.count
  end

  def test_has_one_abort_autosave
    supplier = Supplier.new
    supplier.build_abort_autosave_account
    assert_raises(ActiveRecord::RecordNotSaved) { supplier.save! }

    assert_equal 0, Supplier.count
    assert_equal 0, Account.count
  end

  def test_has_one_invalid
    supplier = Supplier.new
    supplier.build_invalid_account
    assert supplier.save!

    assert_equal 1, Supplier.count
    assert_equal 0, Account.count
  end

  def test_has_one_invalid_autosave
    supplier = Supplier.new
    supplier.build_invalid_autosave_account
    assert_raises(ActiveRecord::RecordInvalid) { supplier.save! }

    assert_equal 0, Supplier.count
    assert_equal 0, Account.count
  end

  def test_belongs_to
    book = Book.new
    book.build_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 1, Author.count
  end

  def test_belongs_to_autosave
    book = Book.new
    book.build_autosave_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 1, Author.count
  end

  def test_belongs_to_abort
    book = Book.new
    book.build_abort_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 0, Author.count
  end

  def test_belongs_to_abort_autosave
    book = Book.new
    book.build_abort_autosave_author
    assert_raises(ActiveRecord::RecordNotSaved) { book.save! }

    assert_equal 0, Book.count
    assert_equal 0, Author.count
  end

  def test_belongs_to_invalid
    book = Book.new
    book.build_invalid_author
    assert book.save!

    assert_equal 1, Book.count
    assert_equal 0, Author.count
  end

  def test_belongs_to_invalid_autosave
    book = Book.new
    book.build_invalid_autosave_author
    assert_raises(ActiveRecord::RecordInvalid) { book.save! }

    assert_equal 0, Book.count
    assert_equal 0, Author.count
  end
end
```

</details>

This test describes the consistent behavior of each association, but when I run it the test fails only in the case of `has_one` + abort + autosave:

```
Finished in 0.073115s, 246.1875 runs/s, 711.2084 assertions/s.

  1) Failure:
BugTest#test_has_one_abort_autosave [test.rb:191]:
ActiveRecord::RecordNotSaved expected but nothing was raised.

18 runs, 52 assertions, 1 failures, 0 errors, 0 skips
```

Also, in Active Record's documentation on callbacks, you'll find something like this:

> If a before_* callback cancels the action a ROLLBACK is issued. You can also trigger a ROLLBACK raising an exception in any of the callbacks, including after_* hooks. Note, however, that in that case the client needs to be aware of it because an ordinary [#save](https://api.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-save) will raise such exception instead of quietly returning false.

https://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/callbacks.rb#L268-L272

The current behavior of `has_one` seems to contradict this explanation.

Note that this behavior has been around for a long time and is not a regression. As far as I can see, https://github.com/rails/rails/issues/22184 mentions the same issue.

A possible fix would be to `throw(:abort)` if `save_has_one_association` returns `false`, as with `belongs_to`, but we need to investigate whether it works correctly under multiple conditions.
https://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/autosave_association.rb#L198
https://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/autosave_association.rb#L210

### System configuration
**Rails version**:
```
7.0.6
```

**Ruby version**:
```
ruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]
```"
48632,Uniqueness validation not triggering when calling create_association,rcpj,activerecord,2023-07-03T09:54:09Z,2023-09-27T01:19:36Z,2023-09-27T01:17:58Z,"From Rails version v7.0.5 onwards, the uniqueness validation stopped working when calling the create_association method from the model with the _has_one_. This doesn't happen if the create method is issued directly from the association model instead.

### Steps to reproduce
```ruby
#!/usr/bin/env ruby

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  gem 'rails', '~> 7.0.5'
  gem 'sqlite3'
  gem 'byebug'
end

require 'active_record'
require 'minitest/autorun'
require 'logger'

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :invoices do |t|
    t.string :name
  end

  create_table :payments do |t|
    t.string :name
    t.references :invoice
  end
end

class Invoice < ActiveRecord::Base
  has_one :payment, dependent: :destroy
end

class Payment < ActiveRecord::Base
  belongs_to :invoice, optional: true
  validates :invoice_id, uniqueness: true
end

class TestUniquenessValidationNotTriggering < Minitest::Test
  def test_uniqueness_validation_not_triggering
    assert_raises ActiveRecord::RecordInvalid do
      invoice = Invoice.create(name: 'Example invoice')
      invoice.create_payment!(name: ""Alice's payment"")
      assert_equal ""Alice's payment"", invoice.payment.name

      invoice.create_payment!(name: ""Bob's payment"")
    end
  end
end
```

### Expected behavior
It should raise ActiveRecord::RecordInvalid due to uniqueness validation

### Actual behavior
It creates the record successfully not raising the ActiveRecord::RecordInvalid exception

### System configuration
**Rails version**: ~> 7.0.5

**Ruby version**: 3.2.1
"
48629,Rails 7.0.6 label_for translations not working in index views,augustosamame,stale,2023-07-03T01:29:09Z,2023-10-09T22:44:03Z,2023-10-09T22:44:03Z,"### Steps to reproduce

generate a new rails project
generate a scaffold: `rails g scaffold Post title body`
run migrations
modify i18n `en.yml` file with the following content:

```
en:
  hello: ""Hello world""
  activerecord:
    attributes:
      post:
        title: ""Title from i18n""
        body: ""Body from i18n""
```

Replace the labels in both index and show views with `<%= label(:post, :body) %>`
Or you can even do the replace in the single `posts` shared partial

```
<div id=""<%= dom_id post %>"">
  <p>
    <strong>Title:</strong>
    <%= post.title %>
  </p>

  <p>
    <strong><%= label(:post, :body) %>:</strong>
    <%= post.body %>
  </p>

</div>

```

### Expected behavior

The body label should show 'Body from i18n' in all views

### Actual behavior

All views show correct translated label. Index view shows the incorrect (default) `body` label

I did some testing and all views are fine, but for some reason, index view fails.


### System configuration

**Rails version 7.0.6**:

**Ruby version 3.2.2**:
"
48611,Error loading cached data after upgrade to 7.1 `dump format error`,matthutchinson,activesupport,2023-06-29T09:40:29Z,2023-10-20T14:02:37Z,2023-07-06T09:03:08Z,"We have a Rails `7.0.5.1` app set with `config.load_defaults 6.0`

When attempting to upgrade to 7.1.0-alpha, with cached data already present in the app (Redis cache) I'm getting an error when Rails attempts to read the data with `Marshal.load` in `Marshal61WithFallback` ([here](https://github.com/rails/rails/blob/main/activesupport/lib/active_support/cache/serializer_with_fallback.rb#L147)). 

```
Argument Error 
dump format error (user class)
```

The cached data is correctly identified as 6.1 with `Marshal61WithFallback::MARSHAL_SIGNATURE` but fails to load.  


I've created an [example app](https://github.com/matthutchinson/rails-caching-example) where you can easily replicate this, (see reproduction instructions below).

From reading recent commits and the [CHANGELOG](https://github.com/rails/rails/blob/main/activesupport/CHANGELOG.md), I can see that @jonathanhefner did make some --recent changes in here, but from what I can see, this should just work, without any necessary cache migration.  

### Steps to reproduce

```
git clone https://github.com/matthutchinson/rails-caching-example
cd rails-caching-example
bin/setup
rails db:seed
rails dev:cache
rails server
open https://localhost:3000

# visit page, causing partials to be cached
# stop server
# edit Gemfile, set to use edge rails from gh master

bundle update rails
rails server
open https://localhost:3000
# page errors when loading cached data with dump format error (user class)

```

Here's a what the [dumped var](https://github.com/rails/rails/blob/main/activesupport/lib/active_support/cache/serializer_with_fallback.rb#L26) looks like in my [example app](https://github.com/matthutchinson/rails-caching-example) and I'm caching partials in `high_scores#index` with;

`<%= render partial: ""high_score"", collection: @high_scores, cached: true %>`

```
""\u0004\bo: ActiveSupport::Cache::Entry\t:\v@valueIC:\u001DActionView::OutputBuffer\""\u0001\xAB<div id=\""high_score_1\"">\n  <p>\n    <strong>Game:</strong>\n    <a href=\""/high_scores/1\"">Tetris</a>\n  </p>\n\n  <p>\n    <strong>Score:</strong>\n    100000\n  </p>\n\n</div>\n<hr/>\n\a:\u0006ET:\u000F@html_safeT:\r@versionI\""\u001920230628145327125454\u0006;\bT:\u0010@created_atf\u00060:\u0010@expires_in0""
```

### Expected behavior

Cached partial data should be loaded and displayed without error

### Actual behavior

Error raised when loading cached data from `Marshal.load`

```
Argument Error 
dump format error (user class)
```

<img width=""1010"" alt=""Screenshot 2023-06-28 at 16 35 43"" src=""https://github.com/rails/rails/assets/2095/a06d95ed-7f35-42a0-97d4-0e2170bd21d3"">


### System configuration

**Rails version**: `7.1.0-alpha` (migrating from `7.0.5.1`)
**Ruby version**: `3.1.2` and `3.2.0` 


#### Other Notes:

* I thought [this commit](https://github.com/jonathanhefner/rails/commit/e2524e574b2f8f157190c00e7c2d1377995d2fdd) might have been the cause, but reverting to the commit before that, I get the same issue.
* Clearing the cache will fix the issue, but in production, we'd really prefer not to have to do that.  
* If clearing the cache _is a requirement_, we should update the docs and upgrade guide to explain that.

cc @jonathanhefner "
48609,No way to configure `Strict-Transport-Security` not to be added on `config.force_ssl = true`?,r7kamura,actionpack,2023-06-29T06:55:34Z,2023-08-03T20:58:02Z,2023-08-03T20:58:02Z,"### Steps to reproduce

I would like to use `config.force_ssl = true` for secure cookie and https URL generation. However, my application already has a reverse proxy configured to add `Strict-Transport-Security` header.

### Expected behavior

So I want to use `config.force_ssl = true`, but not add `Strict-Transport-Security` header on the Rails application side, by setting `config.ssl_options`.

### Actual behavior

There appears to be no way to set it up that way. The result is that `Strict-Transport-Security` header is added twice.

As a workaround, I have solved this problem by adding some Rack middleware on the outside that removes this header.

### System configuration
**Rails version**: 7.0.5.1

**Ruby version**: 3.2.1
"
48605,`ActiveRecord::Encryption` tests fail,yahonda,"activerecord, ci issues",2023-06-29T01:12:32Z,2023-07-05T09:48:08Z,2023-07-05T09:48:08Z,"Managed to reproduce https://buildkite.com/rails/rails/builds/97615#018903f3-48a6-47cc-bd25-df5ae58f3810

### Steps to reproduce

```ruby
ARCONN=mysql2 bin/test test/cases/encryption/encryption_schemes_test.rb test/cases/encryption/encrypted_fixtures_test.rb test/cases/encryption/encryptable_record_api_test.rb test/cases/encryption/encryptable_record_test.rb --seed 28123 -n ""/^(?:ActiveRecord::Encryption::EncryptionSchemesTest#(?:test_use_global_previous_schemes_to_decrypt_data_encrypted_with_previous_schemes_with_unencrypted_data)|ActiveRecord::Encryption::EncryptableFixtureTest#(?:test_fixtures_get_encrypted_automatically|test_preserved_columns_due_to_ignore_case:_true_gets_encrypted_automatically)|ActiveRecord::Encryption::EncryptableRecordApiTest#(?:test_ciphertext_for_returns_the_ciphertext_for_a_given_attribute|test_ciphertext_for_returns_the_ciphertext_of_a_decrypted_value|test_ciphertext_for_returns_the_ciphertext_of_a_new_value|test_ciphertext_for_returns_the_ciphertext_of_a_value_when_the_record_is_new|test_encrypt_will_preserve_case_when_:ignore_case_option_is_used|test_encrypt_won\\'t_force_encoding_for_deterministic_attributes_when_option_is_nil|test_encrypted_attribute\\?_returns_true_for_encrypted_attributes_which_content_is_encrypted|test_re-encrypting_will_preserve_case_when_:ignore_case_option_is_used)|ActiveRecord::Encryption::EncryptableRecordTest#(?:test_by_default,_it\\'s_case_sensitive|test_can_only_save_unencrypted_attributes_when_frozen_encryption_is_true|test_deterministic_attributes_can_be_created_by_passing_deterministic:_true|test_deterministic_attributes_can_be_searched_with_Active_Record_queries|test_forced_encoding_for_deterministic_attributes_can_be_disabled|test_forced_encoding_for_deterministic_attributes_will_replace_invalid_characters|test_forces_UTF-8_encoding_for_deterministic_attributes_by_default|test_forces_encoding_for_deterministic_attributes_based_on_the_configured_option|test_ignores_empty_values|test_support_encrypted_attributes_defined_on_columns_with_default_values|test_when_ignore_case:_true,_it_ignores_case_in_queries_but_keep_it_when_reading_the_attribute|test_when_ignore_case:_true,_it_keeps_both_the_attribute_and_the__original_counterpart_encrypted|test_when_ignore_case:_true,_it_lets_you_update_attributes_normally))$/""
```

### Expected behavior
It should pass.

### Actual behavior
It always fail.

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
48601,Test Fixture Not Decrypting Properly with store_accessor,donnfelker,"activerecord, With reproduction steps, encryption",2023-06-28T16:07:31Z,2023-09-29T20:29:14Z,,"### Steps to reproduce
1. Create new rails app with postgresql as db
2. Add jsonb field to model via migration with name `settings`
3. Add store_accessor to model
4. encrypt store_accessor field with `encrypts` 
5. Add encryption keys to envs as per [docs](https://guides.rubyonrails.org/active_record_encryption.html#setup)
6. Add `config.active_record.encryption.encrypt_fixtures = true` to `test.rb`
7. Add data to test fixture (posts.yml) with the field that needs to be encrypted
8. Write test to obtain test fixture and ensure it is being encrypted/decrypted properly
9. Test fails with `Minitest::UnexpectedError: ActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption`

### Executable Test Case
You will also need a value in the `posts.yml` file as such: 
```yml
one:
  name: Hello World
  settings:
    public_key: ""some-fake-public-key""
```

Test Case
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""jsonb-test"")
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Encryption.configure \
      primary_key: ""nYlllafgBdhQ7Vn37dlWAoqfDbTPl4Fl"",
      deterministic_key: ""CK7x2oUEeu06bKehhKGiKYAHoytPaOPg"",
      key_derivation_salt: ""Fol1dR03ZXnL8k4hEUYj7IMr0UlgOMHC""

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.jsonb :settings
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  store_accessor :settings, [:public_key], suffix: :setting
  encrypts :settings
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = posts(:one)
    assert_equal ""some-fake-public-key"", post.public_key_setting
  end
end

```

### Expected behavior
The test should be able to store the value for the fixture, encrypted and then it should be able to retrieve it and decrypt it.

### Actual behavior
Test fails with error: `Minitest::UnexpectedError: ActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption`

### System configuration
**Rails version**: 7.0.5.1

**Ruby version**: 3.2.2
"
48590,Type of keys returned by grouped count on joined enum column inconsistent after 7.0.5,adamzapasnik,activerecord,2023-06-27T08:26:49Z,2023-06-27T18:05:46Z,2023-06-27T18:05:46Z,"### Steps to reproduce
```ruby
require 'bundler/inline'

gemfile do
  source ""https://rubygems.org""

  gem 'activerecord', ""7.0.4.3""
  # gem 'activerecord', ""7.0.5.0""
  gem 'sqlite3'
end

require 'active_record'
require 'sqlite3'

ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Base.establish_connection(
  adapter: 'sqlite3',
  database: ':memory:'
)


ActiveRecord::Base.connection.create_table :ufos do |t|
  t.integer :color
end

ActiveRecord::Base.connection.create_table :cows do |t|
  t.belongs_to :ufo
end

class Ufo < ActiveRecord::Base
  has_many :cows

  enum color: [:green, :blue]
end

class Cow < ActiveRecord::Base
  belongs_to :ufo
end

green_ufo = Ufo.create!(color: :green)
blue_ufo = Ufo.create!(color: :blue)

Cow.create!(ufo: green_ufo)
Cow.create!(ufo: green_ufo)
Cow.create!(ufo: green_ufo)
Cow.create!(ufo: blue_ufo)


puts Ufo.group(:color).count
puts Ufo.group(""color"").count
puts Ufo.group(""ufos.color"").count


puts Cow.joins(:ufo).group(:color).count
puts Cow.joins(:ufo).group(""color"").count
puts Cow.joins(:ufo).group(""ufos.color"").count

```

### Expected behavior
AR 7.0.4.3
```ruby
7.0.4.3
D, [2023-06-27T11:23:15.523050 #37544] DEBUG -- :   Ufo Count (0.4ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""ufos"" GROUP BY ""ufos"".""color""
{""green""=>1, ""blue""=>1}
D, [2023-06-27T11:23:15.523285 #37544] DEBUG -- :   Ufo Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""ufos"" GROUP BY ""ufos"".""color""
{""green""=>1, ""blue""=>1}
D, [2023-06-27T11:23:15.523499 #37544] DEBUG -- :   Ufo Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""ufos"" GROUP BY ""ufos"".""color""
{""green""=>1, ""blue""=>1}
D, [2023-06-27T11:23:15.536016 #37544] DEBUG -- :   Cow Count (0.1ms)  SELECT COUNT(*) AS ""count_all"", ""color"" AS ""color"" FROM ""cows"" INNER JOIN ""ufos"" ON ""ufos"".""id"" = ""cows"".""ufo_id"" GROUP BY ""color""
{0=>3, 1=>1}
D, [2023-06-27T11:23:15.536388 #37544] DEBUG -- :   Cow Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", color AS ""color"" FROM ""cows"" INNER JOIN ""ufos"" ON ""ufos"".""id"" = ""cows"".""ufo_id"" GROUP BY color
{0=>3, 1=>1}
D, [2023-06-27T11:23:15.536662 #37544] DEBUG -- :   Cow Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""cows"" INNER JOIN ""ufos"" ON ""ufos"".""id"" = ""cows"".""ufo_id"" GROUP BY ""ufos"".""color""
{0=>3, 1=>1}
```

### Actual behavior
AR 7.0.5
```ruby
7.0.5
D, [2023-06-27T11:23:31.090960 #37564] DEBUG -- :   Ufo Count (0.1ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""ufos"" GROUP BY ""ufos"".""color""
{""green""=>1, ""blue""=>1}
D, [2023-06-27T11:23:31.091140 #37564] DEBUG -- :   Ufo Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""ufos"" GROUP BY ""ufos"".""color""
{""green""=>1, ""blue""=>1}
D, [2023-06-27T11:23:31.091316 #37564] DEBUG -- :   Ufo Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""ufos"" GROUP BY ""ufos"".""color""
{""green""=>1, ""blue""=>1}
D, [2023-06-27T11:23:31.094997 #37564] DEBUG -- :   Cow Count (0.1ms)  SELECT COUNT(*) AS ""count_all"", ""color"" AS ""color"" FROM ""cows"" INNER JOIN ""ufos"" ON ""ufos"".""id"" = ""cows"".""ufo_id"" GROUP BY ""color""
{0=>3, 1=>1}
D, [2023-06-27T11:23:31.095297 #37564] DEBUG -- :   Cow Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", color AS ""color"" FROM ""cows"" INNER JOIN ""ufos"" ON ""ufos"".""id"" = ""cows"".""ufo_id"" GROUP BY color
{0=>3, 1=>1}
D, [2023-06-27T11:23:31.095528 #37564] DEBUG -- :   Cow Count (0.0ms)  SELECT COUNT(*) AS ""count_all"", ""ufos"".""color"" AS ""ufos_color"" FROM ""cows"" INNER JOIN ""ufos"" ON ""ufos"".""id"" = ""cows"".""ufo_id"" GROUP BY ""ufos"".""color""
{""green""=>3, ""blue""=>1}
```

I think the inconsistency is easy to spot ☝️ Not sure if a bug? but obviously the behavior has changed to an unpredictable one.

### System configuration
**Rails version**: 7.0.4.3 and 7.0.5.0

**Ruby version**: 3.1.4
"
48571,"`where:` clause of partial index requires doubled, escaped quoting of attributes, contradicting API docs",clairity,activerecord,2023-06-24T21:12:20Z,2023-06-29T14:15:29Z,2023-06-29T14:15:29Z,"### Steps to reproduce
the rails API docs on [partial indexes](https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index-label-Creating+a+partial+index
) provides a concise example of creating a partial index on a boolean value:

```ruby
add_index(:accounts, [:branch_id, :party_id], unique: true, where: ""active"")
```

### Actual behavior
however, this syntax fails with the following error:

```sh
StandardError: An error has occurred, this and all later migrations canceled:

PG::SyntaxError: ERROR:  syntax error at or near ""active""
LINE 1: ...ctive"" ON ""accounts"" (""branch_id"", ""party_id"") WHERE active
```

this may possibly be related to the attribute (here, `active`) not being quoted (although stackoverflow answers indicate that this syntax has worked in the past), because the following variation works:

```ruby
add_index(:accounts, [:branch_id, :party_id], unique: true, where: ""\""active\"""")
```

where we have to pass the attribute with double, escaped quotes, and results in the following output on migration:

```sh
CREATE UNIQUE INDEX ""index_accounts_on_branch_id_and_party_id"" ON ""accounts"" (""account_id"", ""party_id"") WHERE ""active""
```

the latest postgres (15) doesn't seem to require quoting such attributes either, as noted by their [example on creating a partial index](https://www.postgresql.org/docs/15/indexes-partial.html#INDEXES-PARTIAL-EX3).

### Expected behavior

as the docs indicate, we'd expect that a singly-quoted `where:` clause to generate our expected partial index:

```ruby
add_index(:accounts, [:branch_id, :party_id], unique: true, where: ""active""
```
or even (hopefully) a symbolized version: 

```ruby
add_index(:accounts, [:branch_id, :party_id], unique: true, where: :active
```

to result in

```sh
CREATE UNIQUE INDEX ""index_accounts_on_branch_id_and_party_id"" ON ""accounts"" (""account_id"", ""party_id"") WHERE ""active""
```

### System configuration
**Rails version**: 7.1.alpha

**Ruby version**: 3.2.2

**PostgreSQL version**: 15.3
"
48554,Why is credentails.to_h/to_json empty when there are credentials?,dorianmariefr,"activesupport, attached PR",2023-06-22T02:25:54Z,2023-06-22T08:16:04Z,2023-06-22T08:16:04Z,"```ruby
>> Rails.application.credentials.to_h
=> {}
>> Rails.application.credentials.to_json
=> ""{}""
```

ruby 3.2.2 (2023-03-30 revision e51014f9c0) +YJIT [arm64-darwin22]

Rails 7.1.0.alpha"
48550,Render from before_action does not respect request format,mikerobe,"actionpack, stale",2023-06-21T19:36:57Z,2023-10-01T08:52:35Z,2023-10-01T08:52:35Z,"### Steps to reproduce
See https://github.com/rails/rails/issues/32179

When a call to `render` is made from within a `before_action` in a controller, it does not respect the request format. This issue recently led to an unexpected behavior where incorrect HTML templates were being rendered for JSON requests.

Here are the steps from the ticket above (created in 2018 then auto closed as stale). 

1. Create before_action function and run render within it:

```
class BeforeController < ApplicationController
  before_action :before_index

  def index
  end

  private
  def before_index
    render partial: 'test'
  end
end
```

2. Create templates for html and js format: `_test.html.erb` and `_test.json.erb`
3. Open index action url.

### Expected behavior
Render uses the format specified in the request, so if open `http://localhost:3000/before/index.html` you see _test.html.erb rendered, and if open `http://localhost:3000/before/index.json` you see _test.json.erb rendered.

### Actual behavior
Default format (_test.html.erb) is being rendered. If make same render execution within index action, format specified in the request is being used.

### System configuration
**Rails version**: 7.0.3

**Ruby version**: 3.2.2

"
48548,`unscope` on `through` associations fails to respect default scope of join models,philip-maina,attached PR,2023-06-21T16:24:31Z,2023-06-30T07:56:23Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
Reproduction script:
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
  end

  create_table :posts, force: true do |t|
    t.integer :user_id
    t.datetime :deleted_at
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.datetime :deleted_at
  end
end

class User < ActiveRecord::Base
  has_many :posts
  has_many :comments, through: :posts
end

class Post < ActiveRecord::Base
  default_scope -> { where deleted_at: nil }

  belongs_to :user
  has_many :comments, -> { with_deleted }
end

class Comment < ActiveRecord::Base
  default_scope -> { where deleted_at: nil }
  scope :with_deleted, -> { unscope where: :deleted_at }

  belongs_to :post
end

class BugTest < Minitest::Test
  def test_unscope_applied_on_correct_association
    user = User.create!

    active_post  = Post.create!(user: user)
    deleted_post = Post.create!(user: user, deleted_at: Time.now)


    active_post_active_comment   = Comment.create!(post: active_post)
    active_post_deleted_comment  = Comment.create!(post: active_post, deleted_at: Time.now)
    deleted_post_deleted_comment = Comment.create!(post: deleted_post, deleted_at: Time.now)

    # Should find only 2 comments (active_post_active_comment & active_post_deleted_comment) but finds all three
    assert_equal 2, user.comments.count
  end
end

```

### Expected behavior
The test should pass and return a count of 2

### Actual behavior
The test fails with a count of 3

### System configuration
**Rails version**: 7.0.4.3 / main

**Ruby version**: 3.1.3 / 3.2.2
"
48545,Deprecated conversion introduced in Rails 7.0 is incompatible with implicit default format,wata727,"regression, activesupport, attached PR",2023-06-21T12:08:17Z,2023-08-03T19:59:22Z,2023-08-03T19:59:22Z,"### Steps to reproduce

We are planning to upgrade an application running on Rails 6.1 to Rails 7.0. Among them, we are looking at the deprecated conversions introduced in #43772.

I'm guessing this was probably designed to be backwards compatible as of Rails 7.0, but if we've added `Date::DATE_FORMATS[:default]`, the result changed in Rails 7.0.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activesupport"", ""7.0.5""
end

require ""active_support""
require ""active_support/core_ext/date""
require ""minitest/autorun""

# Add default format
Date::DATE_FORMATS[:default] = '%Y/%m/%d'

class DateDeprecatedConversionsTest < Minitest::Test
  def test_implicit_default_conversions
    assert_equal Date.new(2023, 6, 21).to_s, '2023/06/21'
  end

  def test_explicit_default_conversions
    assert_equal Date.new(2023, 6, 21).to_s(:default), '2023/06/21'
  end
end
```

### Expected behavior

These tests are passed in Rails 6.1. So it should work on Rails 7.0 as well.

```diff
diff --git a/test.rb b/test.rb
index 187c8500dd6..9cb2e93c834 100644
--- a/test.rb
+++ b/test.rb
@@ -8,7 +8,7 @@ gemfile(true) do
   git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }
 
   # Activate the gem you are reporting the issue against.
-  gem ""activesupport"", ""7.0.5""
+  gem ""activesupport"", ""6.1.7.3""
 end
 
 require ""active_support""
```

```
# Running:

..

Finished in 0.001116s, 1792.1149 runs/s, 1792.1149 assertions/s.

2 runs, 2 assertions, 0 failures, 0 errors, 0 skips
```

### Actual behavior

Implicit default format does not work in Rails 7.0.

```
# Running:

DEPRECATION WARNING: Date#to_s(:default) is deprecated. Please use Date#to_fs(:default) instead. (called from test_explicit_default_conversions at test.rb:27)
.F

Finished in 0.101925s, 19.6223 runs/s, 19.6223 assertions/s.

  1) Failure:
DateDeprecatedConversionsTest#test_implicit_default_conversions [test.rb:23]:
--- expected
+++ actual
@@ -1,3 +1 @@
-# encoding: US-ASCII
-#    valid: true
-""2023-06-21""
+""2023/06/21""


2 runs, 2 assertions, 1 failures, 0 errors, 0 skips
```

Perhaps calling `to_formatted_s(:default)` instead of `to_default_s` here would keep compatibility.

https://github.com/rails/rails/blob/e88857bbb9d4e1dd64555c34541301870de4a45b/activesupport/lib/active_support/core_ext/date/deprecated_conversions.rb#L18

However, [this conversion has been removed](https://github.com/rails/rails/commit/e420c3380eb2b698a4fe84ed196f914d18f7844a) in the main branch, and adding the `Date::DATE_FORMATS[:default]` may be undesirable behaviour (In general, I understand that this is a bad practice). I just wanted to share this behavior and discuss whether it's worth fixing it in the Rails 7.0 branch.

### System configuration
**Rails version**:
6.1.7.3/7.0.5

**Ruby version**:
3.1.4
"
48543,ActionCable subscriptions are never created because welcome event is not received,Georgegriff,actioncable,2023-06-21T08:33:29Z,2023-09-27T01:31:22Z,,"### Steps to reproduce
I apologise upfront that i've not been able to produce a reproduction case, it involves some network conditions which breaks actioncable's default usage

We've been working with some of our customers who have reported our application not working as expected. The area relies on Action Cable subscriptions. We have observed the following behaviour.

1. We Create ActionCable in js
2. We immediately add a subscriber
```js
const consumer = ActionCable.createConsumer(""wss://..."");
consumer.subscriptions.create(
            ....
);
```
3. Server opens the connection and sends the welcome message (this is the rails code i've been looking at)
4. Websocket opens, but [welcome even](https://github.com/rails/rails/blob/e446ef82c8174a4bd6c98f670912bb395b3091d6/actioncable/lib/action_cable/connection/base.rb#L188)t is never received.

The result is that subscriptions are never  reloaded - (internal actioncable code)(https://github.com/rails/rails/blob/e446ef82c8174a4bd6c98f670912bb395b3091d6/actioncable/app/assets/javascripts/actioncable.esm.js#L253) when welcome is received, which should have created the subscription.

It's possible the reason this doesn't come up more is due to some specific network conditions, but we have enough diagnostics gathered in our system to show that this is the issue, we have open websockets but no subscriptions are established.

It is possible to workaround this by creating the subscriptions in the onOpen handler of the websocket instead, but this is circumventing the design of action cable.

In our logging we have collected we have no observed any connection instability.

> The logs are a combination of the action cable logs and some custom event handlers we have added to on message/open, to detect the issue.

```
  [
    ""[ActionCable]"",
    ""Opening WebSocket, current state is null, subprotocols: actioncable-v1-json,actioncable-unsupported"",
    1687331929209,
    ""Wed, 21 Jun 2023 07:18:49 GMT""
  ],
  [
    ""[ActionCable]"",
    ""ConnectionMonitor started. stale threshold = 6 s"",
    1687331929210,
    ""Wed, 21 Jun 2023 07:18:49 GMT""
  ],
  [
    ""[SUCCESS]"",
    ""WebSocket onopen event"",
    ""Wed, 21 Jun 2023 07:18:49 GMT""
  ],
  [
    ""[ActionCable]"",
    ""WebSocket onopen event, using 'actioncable-v1-json' subprotocol"",
    1687331929446,
    ""Wed, 21 Jun 2023 07:18:49 GMT""
  ],
   [
    ""[WARN]"",
    ""Welcome not received within 20s"",
    ""Wed, 21 Jun 2023 07:19:09 GMT""
  ]
```
(These are extracted from logs where we have put a work around in place, but we have alerting to detect if the welcome event was never received)

[It's a different library but its possible that something like this might describe the issue? I'd just be guessing though
](https://github.com/pocoproject/poco/issues/1212)

### Expected behavior
ActionCable subscriptions should be initialised once the websocket has opened. The welcome should not be ""lost""
<!-- Tell us what should happen -->

### Actual behavior
Subscriptions never establish, websocket just is left open doing nothing.

### System configuration
**Rails version**:
6.1.7.2

[Looks like the logic that linked is broadly the same for actioncable in the version im using.
](https://github.com/rails/rails/blob/8798a6f2aa95e12f37993ba3c5a80fd0ac813dbb/actioncable/lib/action_cable/connection/base.rb#L175)**Ruby version**:
3.1.3
**Action cable NPM version**:
    ""@rails/actioncable"": ""^7.0.4-3"",

"
48535,Change in ActiveRecord JSON/JSONB Query Behavior from Rails 6.0 to 6.1,JohnAnon9771,"activerecord, With reproduction steps",2023-06-20T22:03:23Z,2023-11-09T21:38:23Z,2023-11-09T21:38:23Z,"### Steps to reproduce
In Rails 6.0, create a query on a JSON/JSONB column in PostgreSQL using an array of hashes:

```ruby
store_ids = [{ ""store_id"" => 7 }, { ""store_id"" => 8 }]
where(dimensions: store_ids) # This works as expected in Rails 6.0
```

Then, run the same query in Rails 6.1:

```ruby
store_ids = [{ ""store_id"" => 7 }, { ""store_id"" => 8 }]
where(dimensions: store_ids) # This returns [] in Rails 6.1
```

### Expected behavior
The query should return the same results in Rails 6.1 as it did in Rails 6.0. The ActiveRecord should convert the array of hashes into a JSON representation that PostgreSQL can understand.

### Actual behavior
In Rails 6.1, the query returns an empty array. It appears that ActiveRecord is no longer converting the array of hashes into a JSON representation that PostgreSQL can understand.

As a workaround, I've had to convert the store IDs into strings and use PostgreSQL's `->>` operator syntax:

```ruby
store_ids = [7, 8].map(&:to_s)
where(""dimensions->>'store_id' in (?)"", store_ids) # This works as expected in Rails 6.1
```

### System configuration
**Rails version**: 6.1

**Ruby version**: 2.7.7"
48528,Should ActionDispatch::Executor be moved higher up the middleware stack?,KJTsanaktsidis,stale,2023-06-20T03:38:25Z,2023-12-24T13:32:41Z,2023-12-24T13:32:41Z,"### Steps to reproduce

Currently, the `ActionDispatch::HostAuthorization` and `ActionDispatch::Static` middlewares, amongst others, are ordered before `ActionDispatch::Executor`. Let's say we want to include a custom middleware to instrument requests. This middleware should go before `HostAuthorization` and `Static`, because we want to instrument requests which fail host authorization or hit static files; on the other hand, they should go after `Executor` because the [threading and code execution](https://guides.rubyonrails.org/threading_and_code_execution.html) rails guide says that user code should be wrapped in an Executor.

I suspect this might cause problems with the autoloader not working on such middleware, but actually there is another practical problem with including the instrumentation before `Executor`. If the instrumentation middleware wants to use a `ActiveSupport::CurrentAttributes` class, the values stored in there are cleared when the executor middleware calls the `run` callbacks.

### Expected behavior
I believe the Executor middleware should come first, perhaps? The only reason I can think of not to do this is an efficiency concern of booting up the executor unnecessarily for serving static files without user code intervention. 

* Is there any reason I shouldn't re-order this middleware in my own app?
* Would this be something that should be changed in Rails by default?


### Actual behavior
Any values stored in `ActiveSupport::CurrentAttributes` in middlewares before `Executor` are cleared when Executor is run."
48525,Action View `actionview: rake test:ujs` gets `ERROR: 127`,yahonda,"actionview, ci issues",2023-06-19T23:56:21Z,2023-06-21T02:13:20Z,2023-06-21T02:13:20Z,"Managed to reproduce CI error since https://buildkite.com/rails/rails/builds/97157#0188bbe5-70da-4702-8617-4de08ad34ece/1090-1091

### Steps to reproduce

```ruby
$ git clone https://github.com/rails/rails.git
$ cd rails
$ git clone https://github.com/rails/buildkite-config .buildkite/
$ RUBY_IMAGE=ruby:3.2 docker-compose -f .buildkite/docker-compose.yml build base \
&& CI=1 docker-compose -f .buildkite/docker-compose.yml run -e PRE_STEPS -e RACK --rm actionview runner actionview 'rake test:ujs'
```

### Expected behavior
It should finish successfully

### Actual behavior
It gets `ERROR: 127` . Here is the entire output.
https://gist.github.com/yahonda/8384471b51c204ffab363fa471eea25f

### System configuration
**Rails version**: main branch

**Ruby version**: 3.2.2p53 (2023-03-30 revision e51014f9c05aa65cbf203442d37fef7c12390015) [x86_64-linux]
"
48524,Usage of `id` enum key results in unexpected filter with joins and subqueries,nmichels,activerecord,2023-06-19T22:42:25Z,2023-06-20T02:36:44Z,2023-06-20T02:36:44Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""
require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :offers, force: true do |t|
    t.string :status
    t.integer :account_id
  end
  create_table :accounts, force: true do |t|
    t.string :name
    t.integer :group_id
  end
  create_table :groups, force: true do |t|
    t.string :name
    t.string :external_code
    t.integer :external_integration_attr
    t.integer :account_id
  end
  create_table :transactions, force: true do |t|
    t.integer :group_id
    t.decimal :amount
  end
end

class Offer < ActiveRecord::Base
  belongs_to :account
end

class Account < ActiveRecord::Base
  belongs_to :group
end


class Group < ActiveRecord::Base
  has_one :account
  enum external_integration_attr: [""id"", ""externalCode""]
end

class Transaction < ActiveRecord::Base
  belongs_to :group
end

class AddOfferAccountGroupAndTransactions < ActiveRecord::Migration[7.0]
  def change
    reversible do |dir|
      dir.up do
        Group.new(name: ""Foo"", external_integration_attr: ""externalCode"").save!
        Account.new(name: ""Bar"", group: Group.first).save!
        Offer.new(status: ""approved"", account: Account.first).save!
        Transaction.new(amount: 10, group: Group.first).save!
      end

      dir.down do
      end
    end
  end
end

class BugTest < Minitest::Test
  def test_migration_up
    
    AddOfferAccountGroupAndTransactions.migrate(:up)

    transactions = 
      Transaction
        .where(group_id: Group.joins(:account)
          .where(account: { id:  Offer.where(status: ""approved"").select(:account_id) })
          .select(:id))

    assert_equal 1, transactions.count
  end
end
```

### Expected behavior
Query `does not have` the following filter: `AND ""groups"".""external_integration_attr"" = ?` (`[""external_integration_attr"", 0]`)

### Actual behavior
Query has the following filter `AND ""groups"".""external_integration_attr"" = ?` (`[""external_integration_attr"", 0]`)

### System configuration
**Rails version**:
Current main branch and 6.1.7.3

**Ruby version**:
Ruby 3.1.0 (alongside main branch) and Ruby 2.7.7 + Rails 6.1.7.3"
48517,javascript_include_tag's implicit modulepreload Link header insertion breaks importmaps,aaronjensen,"actionview, attached PR",2023-06-19T01:23:52Z,2023-07-01T00:32:45Z,2023-06-30T20:40:04Z,"If you use importmaps along with something like `javascript_include(""some-module"", type: ""module"")` you end up with an error in the Chrome Devtools:

`An import map is added after module script load was triggered.`

This happens even if the import map is before the script tag. You may need to be running Puma or another server that supports early hints.

This behavior is opaque and overly presumptuous. I cannot find an obvious way to disable it other than to write script tags without the helper. Please provide a means for disabling the behavior or make it opt-in. "
48497,Not possible to use upsert_all with point type column,morgoth,"activerecord, attached PR",2023-06-16T09:05:13Z,2023-09-14T17:15:49Z,,"When using `upsert_all` with a table having column with a type `point` and the `updated_at` timestamp, the error is raised:
```
D, [2023-06-16T10:58:12.115714 #3553784] DEBUG -- :   Location Upsert (0.4ms)  INSERT INTO ""locations"" (""identifier"",""coordinates"",""created_at"",""updated_at"") VALUES ('test', '(1.1,1.2)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) ON CONFLICT (""identifier"") DO UPDATE SET updated_at=(CASE WHEN (""locations"".""coordinates"" IS NOT DISTINCT FROM excluded.""coordinates"") THEN ""locations"".updated_at ELSE CURRENT_TIMESTAMP END),""coordinates""=excluded.""coordinates"" RETURNING ""id""
E

Error:
BugTest#test_association_stuff:
ActiveRecord::StatementInvalid: PG::UndefinedFunction: ERROR:  operator does not exist: point = point
LINE 1: ... updated_at=(CASE WHEN (""locations"".""coordinates"" IS NOT DIS...
                                                             ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
```

It's possible to workaround the issue by including the ""updated_at"" timestamp manually.

The reproducible script is as follows:
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""upsert-bug"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :locations, force: true do |t|
    t.string :identifier
    t.point :coordinates
    t.timestamps
    t.index :identifier, unique: true
  end
end

class Location < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    assert Location.upsert_all([identifier: ""test"", coordinates: [1.1, 1.2], updated_at: Time.current], unique_by: [:identifier]) # Works fine

    assert Location.upsert_all([identifier: ""test"", coordinates: [1.1, 1.2]], unique_by: [:identifier]) # raises
  end
end
```"
48486,PostgreSQL Range adapter throws `NoMethodError` for an empty string value,clairity,"activerecord, attached PR",2023-06-15T17:44:31Z,2023-06-26T16:05:09Z,2023-06-26T16:05:08Z,"when trying to save a postgres `int4range` value that is an empty string (as would be submitted by a form post with a blank value), the postgresql adapter throws a `NoMethodError`. but when `nil` is passed, it handles that gracefully and inserts a `null` value into the field in postgres, as expected.

```sh
> User.new(my_int_range: """").save
NoMethodError: undefined method `split' for nil:NilClass
from .../activerecord/lib/active_record/connection_adapters/postgresql/oid/range.rb:70:in `extract_bounds'
> User.new(my_int_range: nil).save
=> true
```

it looks like there are safeguards in place to handle exceptional values like `nil`:

https://github.com/rails/rails/blob/dfc365949b1b18f8a25eb4eec696982442ed28f7/activerecord/lib/active_record/connection_adapters/postgresql/oid/range.rb#L20-L24

but an empty string is not handled gracefully. at the very least, the error returned is misleading, as it should really tell you that an empty string is an invalid value for range types. however, for range types, it seems empty strings should be handled the same way as `nil` values, given that they're always invalid (rather than indicating an empty value), and be converted to `null` for persistence rather than erroring out.
"
48485,`ActiveSupport::RangeWithFormat` fails for beginless and endless ranges,clairity,"activesupport, attached PR",2023-06-15T16:31:49Z,2023-06-17T14:22:27Z,2023-06-17T09:36:15Z,"### Steps to reproduce / Actual behavior
i stumbled across this issue while experimenting with Range support on the rails console:

```sh
> (0..1).to_fs(:db)
=> ""BETWEEN '0' AND '1'""
> (..1).to_fs(:db)
RangeError: cannot get the first element of beginless range
from .../activesupport/lib/active_support/core_ext/range/conversions.rb:33:in `first'
> (0..).to_fs(:db)
RangeError: cannot get the last element of endless range
from .../activesupport/lib/active_support/core_ext/range/conversions.rb:33:in `last'
```

### Expected behavior
```sh
> (0..1).to_fs(:db)
=> ""BETWEEN '0' AND '1'""
> (..1).to_fs(:db)
=> ""LESS THAN '1'""
> (0..).to_fs(:db)
=> ""GREATER THAN '0'""
```

### System configuration
**Rails version**: 7.1.alpha
**Ruby version**: 3.2.2

i realize that the expected messages here are arbitrary (and not part of the default formatter message), and a custom formatter can be added to `Range::RANGE_FORMATS`, but that still won't handle a beginless or endless range as input.

it seems the problem here is passing `first` and `last` rather than `begin` and `end` (which would instead return `nil` for endless/beginless endpoints) on this line of the `to_fs` method referenced in the error:

https://github.com/rails/rails/blob/dfc365949b1b18f8a25eb4eec696982442ed28f7/activesupport/lib/active_support/core_ext/range/conversions.rb#L33

it would be great to be able to format beginless/endless ranges using the built-in `ActiveSupport::RangeWithFormat` feature.
"
48483,Active Support unit tests fails against Ruby 3.1 and 3.2,yahonda,"activesupport, ci issues",2023-06-15T11:38:46Z,2023-06-16T04:57:53Z,2023-06-16T04:57:53Z,"### Steps to reproduce
https://buildkite.com/rails/rails/builds/97157#0188bbe5-7031-470f-a9ef-8c72d49e5116/1052-1061

https://buildkite.com/rails/rails/builds/97157#0188bbe5-70b9-47d2-b3b4-f8fbdd4cf611/1167-1176

### Expected behavior
Active Support unit tests should run against all Ruby versions 3.0, 3.1, 3.2 and 3.3.0dev

### Actual behavior
Active Support unit tests fail against Ruby 3.1 and 3.2, Ruby 3.0 and 3.3.0dev are fine.

### System configuration
**Rails version**: main branch

**Ruby version**:
Ruby          3.1.4p223 (2023-03-30 revision 957bb7cb81995f26c671afce0ee50a5c660e540e) [x86_64-linux]

Ruby          3.2.2p53 (2023-03-30 revision e51014f9c05aa65cbf203442d37fef7c12390015) [x86_64-linux]"
48479,Enhancements to the Rails Generate Command for Easier Setup,ptamarshall,"railties, stale",2023-06-15T00:48:31Z,2023-12-14T17:30:35Z,2023-12-14T17:30:35Z,"Dear Rails Development Team,

I'm writing to suggest potential improvements to the `rails generate` command, specifically around setting up complex model associations and setting default values.

1. **Complex Model Associations**: Currently, `rails generate model` can create a polymorphic association at the database level but doesn't specify the polymorphic association in the model files. It would be beneficial if the command could also update the model files with the appropriate association. 

    Consider a blogging platform where a Comment can belong to either a Post or another Comment:

    ```bash
    rails generate model Comment user:references commentable:references{polymorphic} content:text
    rails generate model Post user:references title:string content:text
    ```

    In this scenario, developers still need to manually edit the model files to add the correct associations. If `rails generate model` could also add these associations, it would save developers time and reduce potential errors.

2. **Default Values**: The `rails generate model` command does not currently provide an option to set default values for fields. If this functionality was added, developers could specify default values right in the `rails generate model` command.

    For example:

    ```sh
    rails generate model Post user:references title:string content:text views:integer{default:0}
    ```

    In this example, a `Post` model is generated with a `views` field that has a default value of `0`.

Thank you for considering these suggestions. Your work is greatly appreciated.

Best regards,

Pete Marshall
"
48469,Replacing an association removes entries even when the parent doesn't pass validations,Earlopain,activerecord,2023-06-14T09:13:46Z,2023-09-13T21:27:45Z,2023-09-13T21:27:45Z,"I've been investigating an issue in my app where an association doesn't correctly undo changes when the parent fails validation. This seems to be the case because I'm directly setting the association which then updates to the database before even calling save.

Adding to the association is not possible, however removing from the association goes through. Please see the attached reproduction script, that should hopefully make it a bit more clear what I'm talking about.

Edit: Initially I thought it had something to do with `autosave: true` but it's reproducable without that as well.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :title
  end

  create_table :groups, force: true do |t|
    t.integer :post_id
    t.text :text
  end
end

class Post < ActiveRecord::Base
  has_many :groups

  attr_accessor :fail_validation

  validate :always_fail, if: :fail_validation

  def always_fail
    errors.add(:base, ""Fail"")
  end

  def group_string
    groups.map { |a| a.text }.sort.join("" "")
  end

  def group_string=(string)
    self.groups = string.split("" "").map do |group|
      self.groups.find_or_initialize_by(text: group)
    end
  end
end

class Group < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(title: ""Hello!"")
    post.group_string = ""1 2""
    post.save

    assert_equal(""1 2"", post.group_string)
    assert_equal(""Hello!"", post.title)

    post.fail_validation = true

    post.group_string = ""1 2 3""
    post.title = ""Goodbye!""
    post.save

    post.reload
    assert_equal(""Hello!"", post.title, ""Title got changed despite failed validation"")
    assert_equal(""1 2"", post.group_string, ""Group '3' got added despite failed validation"")

    post.fail_validation = true

    post.group_string = ""1""
    post.title = ""Goodbye!""
    post.save

    post.reload
    assert_equal(""Hello!"", post.title, ""Title got changed despite failed validation"")
    assert_equal(""1 2"", post.group_string, ""Group '2' got removed despite failed validation"")
  end
end

```

### Expected behavior
Both adding and removing associations should fail if the parent fails validation.

### Actual behavior
Only added associations fail, removing is possible.

### System configuration
**Rails version**: master

**Ruby version**: 3.2.2
"
48463,Suggested CSP nonce generator doesn't work the first time a page is loaded,olbrich,"actionpack, attached PR",2023-06-13T20:24:17Z,2023-09-16T07:20:36Z,,"https://github.com/rails/rails/blob/d12f1a2f84128085ee0bdbbbe28df9ec27a9bc64/actiontext/test/dummy/config/initializers/content_security_policy.rb#L20

If a cookie containing the session ID doesn't exist when this suggested nonce generator is executed (usually the first time a page is loaded), then the generated nonce will be blank. This causes problems with turbo frames since the nonce won't be the same on the next request, causing any nonced JS to fail since it won't match the nonce on the page.

Since sessions are lazily initialized, there is no guarantee that the session exists at the time the nonce generator is called. If the session is not yet initialized, referring to its `id` returns `nil`.

An alternative would be something like 

```
config.content_security_policy_nonce_generator = ->(request) { request.session[:nonce] ||= SecureRandom.hex }
```

This will force the session cookie to be set earlier in the request cycle and will populate it with a random number instead of using the session id. 
"
48459,Rails should have `lib/generators` in autoload path.,bradgessler,stale,2023-06-12T18:43:33Z,2023-09-11T17:05:31Z,2023-09-11T17:05:31Z,"I believe Rails should have the following default configuration to fix the issue below:

```rb
 config.autoload_paths << ""#{root}/lib/generators""
```

### Steps to reproduce

1. Create a new Rails app: `rails new fizz`
2. Run `rails g generators Buzz::Install`
3. Run `rails g`

### Expected behavior

I should see the generator task `buzz:install' under the ""Buzz"" section.

### Actual behavior

I don't see the generator task

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.2.x
"
48453,`actioncacle integration` CI have been failing since https://buildkite.com/rails/rails/builds/97055,yahonda,"actioncable, ci issues",2023-06-11T23:29:46Z,2023-06-12T23:18:39Z,2023-06-12T23:18:39Z,"### Steps to reproduce
Rails CI `actioncacle integration` have been failing since https://buildkite.com/rails/rails/builds/97055

### Expected behavior
It should pass. 

### Actual behavior
There are some reasons why they have been failing.

https://buildkite.com/rails/rails/builds/97055#0188a23b-c197-4afd-bb36-a4360d1de807/1059-1072
> 09 06 2023 22:17:11.268:ERROR [launcher.sauce]: Can not start chrome 70
  Failed to start Sauce Connect:
  'create tunnel' request failed with: URL https://saucelabs.com/rest/v1/rubyonrails/tunnels - 400 (Bad Request) Error: HTTP request failed. Server response: 400: Too many active user tunnels: 10 >= 10 (ref: 8e9fd488).


https://buildkite.com/rails/rails/builds/97099#0188ac73-a004-43a2-84c1-66389d63bd58/1060-1090
> 11 06 2023 22:03:16.737:ERROR [launcher]: safari 12 (macOS 10.13) on SauceLabs failed 2 times (timeout). Giving up.


### System configuration
**Rails version**: main branch

**Ruby version**: Ruby 2.7, 3.0, 3.1, 3.2 and 3.3.0dev
"
48445,Additional Query incase of Uniqueness validation for Encrypted Attribute,iamradioactive,"activerecord, attached PR, encryption",2023-06-11T10:21:49Z,2023-09-25T11:50:08Z,2023-09-25T11:50:08Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

- Set Deterministic option to true for an Encrypted attribute
- Add uniqueness validation for the Same Encrypted attribute

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem 'rails', '~> 7.0.4.3'
  gem ""sqlite3""
  gem ""pry""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Encryption.configure(
  primary_key: SecureRandom.alphanumeric(32),
  deterministic_key: SecureRandom.alphanumeric(32),
  key_derivation_salt: SecureRandom.alphanumeric(32),
  extend_queries: true,
)

ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator.install_support

ActiveRecord::Schema.define do
  create_table :users, force: :true do |t|
    t.string :thing
  end
end

class User < ActiveRecord::Base
  encrypts :thing, deterministic: true#, downcase: true
  validates :thing, uniqueness: true
end

class BugTest < Minitest::Test
  def test_association_stuff
    User.create!(thing: ""my_test_string"")
    model = User.create(thing: ""my_test_string"")
   
    puts model.errors.inspect
    assert_equal 1, model.errors.size
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
- Single Query should be fired per encryption type for a uniqueness validation.
- Single validation error should be raised per encryption type.

### Actual behavior
**Case A - downcase: false or unset**

- Two queries will be fired when trying to validate the uniqueness of the attribute.
- Both the queries will be the same, validating encrypted strings against the database values.
- Two uniqueness validation errors will be raised.

**Case B - downcase: true**

- In this case, the number of queries will remain the same i.e. 2 but only a single validation error will be raised.
- This is because the encrypted_string is converted to downcase before comparison.

### Reason for the additional query
- This call in [extended_deterministic_uniqueness_validator](https://github.com/rails/rails/blob/main/activerecord/lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#L20) treats the encrypted value as an original value for the attribute and converts the value as per upon the options specified (for eg: downcase)



### Possible solution

The [loop](https://github.com/rails/rails/blob/main/activerecord/lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#L17) should be changed to only iterate over **[*encrypted_type.previous_types]**. In other words, it should exclude the current encrypted/ciphered value.

An additional query with the current encrypted/ciphered value should not be fired. I'm unable to think of any use case where this re-validation is needed. Additional queries for previous_types makes sense.

I need another set of eyes, maybe someone from the Core team or someone who has worked on the Encrypted module for confirmation. After that, I can go ahead and create a PR for the changes.

**Additional context:** https://github.com/rails/rails/issues/48248

### System configuration
**Rails version**: 7.0.4.3
**Ruby version**: 3.0.1
"
48441,Unexpected relation call after using reload method,SzymonJoszko,"activerecord, stale",2023-06-10T19:42:36Z,2023-09-30T20:56:33Z,2023-09-30T20:56:33Z,"### Steps to reproduce
# Classes:
```
class AObject < ApplicationRecord
    has_many :b_objects
    has_one :c_object, -> (obj) { puts ""called form has_one :c_object\n#{obj.inspect}"" }, class_name: 'CObject', foreign_key: :id, primary_key: :c_object_id
    # Gives the same resul as above
    # belongs_to :c_object, -> (obj) { puts ""called form belongs_to :c_object\n#{obj.inspect}"" }
end

class BObject < ApplicationRecord
    belongs_to :a_object, touch: true, inverse_of: :b_objects
    has_one :c_object, through: :a_object
end

class CObject < ApplicationRecord
    has_many :a_objects
    has_many :b_objects, through: :a_objects, source: :b_objects
end
```


# Execute following commands in rails console
```
b = BObject.find(1)

# If we use reload method without caling any relation before, it works as expected, no relation called.
 b.reload

# But if we call the relation and then we call reload method, unexpected relations are called.
# Additionaly argument of scope of relation (obj) is nil instead of instance of BObject class.
 b.c_object
# We see:
# called form has_one :c_object
#<BObject>

 b.reload
# We see:
# called form has_one :c_object
# nil
# called form has_one :c_object
#<AObject>
```


### Expected behavior
After calling b.reload, no relation should be called.

### Actual behavior
After calling b.reload, unexpected relations are called, and the argument of the relation's scope (obj) is nil instead of an instance of the BObject class.

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.1.0

# Application configuration:
 config.active_record.strict_loading_by_default = true
 config.active_record.action_on_strict_loading_violation = :log
 
 ### Link to demo
 https://github.com/SzymonJoszko/strict_loading_problem_demo
"
48423,Virtual stored columns should return new values on update,abaldwin88,"activerecord, attached PR",2023-06-08T14:02:05Z,2023-09-23T18:45:59Z,,"Follow-up from https://github.com/rails/rails/issues/45736
Same idea except this issue reflects the behavior on `update` rather than on `create`

### Steps to reproduce
Generate a model with a virtual stored column. Using Postgres as the database update a record and check the ActiveRecord attribute of the virtual stored column. It will not have the newly computed value from the database.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem 'pg', '~> 1.4'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection ""postgresql:///test""
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.integer :counter1, null: false, default: 7
    t.integer :counter2, null: false, default: 7
    t.virtual :counter_sum, type: :integer, as: ""counter1 + counter2"", stored: true
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_virtual_column_value_updated
    post = Post.create!
    post.update!(counter1: 2, counter2: 2)

    assert_equal 4, post.counter_sum
  end
end
```

```
Failure:
BugTest#test_virtual_column_value_updated [test.rb:38]:
Expected: 4
  Actual: 14
```

### Expected behavior
The SQL `UPDATE` statement sent to the database should include a `RETURNING` clause. ActiveRecord will then update the instance attributes on save with the returned values. The behavior should match between create and update.

### Actual behavior
The attribute's value from when the record was last read or inserted is reflected instead.

### System configuration
**Rails version**: edge
**Ruby version**: 3.2.1
**PostgreSQL version**: 14.7"
48422,ActiveRecord sends instrumentations to the wrong notifier,sled,stale,2023-06-08T12:01:28Z,2023-09-13T13:24:14Z,2023-09-13T13:24:14Z,"### Steps to reproduce

When `ActiveSupport::Notifications.notifier` is replaced, ActiveRecord sends instrumentations to the old notifier. The notifier is often replaced in tests, like here in the `ActiveSupport::LogSubscriber::TestHelper`:

https://github.com/rails/rails/blob/e37adfed4eff3b43350ec87222a922e9c72d9c1b/activesupport/lib/active_support/log_subscriber/test_helper.rb#L44-L46

The instrumenter seems to be cached in an instance variable inside `ActiveRecord::ConnectionAdapters::AbstractAdapter` here:

https://github.com/rails/rails/blob/7d4c88dde305bd6f7d14b68c43bdaedf06812f8d/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L156

and the instrumenter itself is directly bound to the notifier here:

https://github.com/rails/rails/blob/e3c73fd183f3199ec4178f0148d4cc877b245d27/activesupport/lib/active_support/notifications.rb#L268-L270

this meands that the SQL log events are sent to the old instrumenter, and thus the old notifier here:

https://github.com/rails/rails/blob/7d4c88dde305bd6f7d14b68c43bdaedf06812f8d/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L1128-L1142

Here's a simple script to reproduce the behaviour:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
end

class DummySubscriber < ActiveSupport::LogSubscriber
  def sql(event)
    info('DummySubscriber Received SQL event')
  end

  def logger
    ActiveRecord::Base.logger
  end
end

class BugTest < Minitest::Test
  # This test fails, the SQL events are sent to the old notifier after replacing. The DummySubscribers'
  # sql() event handler never gets called.
  def test_with_replaced_notifier
    old_notifier = ActiveSupport::Notifications.notifier
    old_logger   = ActiveRecord::Base.logger

    notifier = ActiveSupport::Notifications::Fanout.new
    ActiveSupport::Notifications.notifier = notifier

    io = StringIO.new
    logger = Logger.new(io)
    ActiveRecord::Base.logger = logger
    DummySubscriber.attach_to :active_record

    Post.where(id: 42).count
    notifier.wait

    assert_match /DummySubscriber/, io.string
  ensure
    DummySubscriber.detach_from(:active_record)
    ActiveSupport::Notifications.notifier = old_notifier
    ActiveRecord::Base.logger = old_logger
  end

  # This test works, because the notifier is not replaced
  def test_with_original_notifier
    old_logger = ActiveRecord::Base.logger

    io = StringIO.new
    logger = Logger.new(io)
    ActiveRecord::Base.logger = logger
    DummySubscriber.attach_to :active_record

    Post.where(id: 42).count
    assert_match /DummySubscriber/, io.string
  ensure
    DummySubscriber.detach_from(:active_record)
    ActiveRecord::Base.logger = old_logger
  end
end
```

### Expected behavior
I'd expect the SQL events being sent to the notifier set in `ActiveSupport::Notifications.notifier`

### Actual behavior
ActiveRecord keeps sending SQL events to the old notifier.

### System configuration
**Rails version**: 6.1.7.3 / edge
**Ruby version**: 2.7.8 / 3.2.1
"
48420,Type of keys returned by grouped count inconsistent after 7.0.5,thefloweringash,"activerecord, With reproduction steps",2023-06-08T09:36:12Z,2023-06-28T19:27:53Z,,"### Steps to reproduce
(Also available as a [gist](https://gist.github.com/thefloweringash/3f4deabebb7920fbae3898d175743dc2) with docker-compose configuration).
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true
#
# Requires a postgres database, for example
#
#     createdb group_by_test
#     DATABASE_URL=postgres://localhost/group-by-test ruby ./group-by-test.rb
#
# Also supports checking other Rails versions via the RAILS_VERSION
# environment variable. For example:
#
#     createdb group_by_test
#     RAILS_VERSION=7.0.4.3 DATABASE_URL=postgres://localhost/group-by-test ruby ./group-by-test.rb

begin
  require ""bundler/inline""
rescue LoadError => e
  $stderr.puts ""Bundler version 1.10 or later is required. Please update your Bundler""
  raise e
end

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  if (rails_version = ENV['RAILS_VERSION'])
    gem ""rails"", rails_version
  else
    gem ""rails"", github: ""rails/rails"", branch: ""main""
  end

  gem ""pg""

  gem 'timeout', '=0.3.2' # workaround for bundler/inline
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection
# ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :bookings, force: true
end

class Booking < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def setup
    Booking.create!
  end

  def teardown
    Booking.delete_all
  end

  def test_group_by
    grouped_count =
      Booking
        .group(""tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') "")
        .count(:id)

    assert_equal Range, grouped_count.keys.first.class # passes
  end

  def test_group_by_join
    grouped_count =
      Booking
        .joins(""JOIN (SELECT tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') AS range) ranges ON TRUE"")
        .group('ranges.range')
        .count(:id)

    assert_equal Range, grouped_count.keys.first.class # fails
  end
end
```

### Expected behavior
Ideally the type of the keys would be inferred based on the actual data and be converted to Ruby `Range`s.

### Actual behavior
The type of the keys is `String`.

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.2

---

The keys returned from a `.group(...).count(...)` have inconsistent type handling. In my case, I'm using a time range expression. If the expression is directly specified in the `.group(...)` call, the return type is `Range`, as expected. If the expression comes through a join, then the return type is `String`. On Rails 7.0.4.3, both of these returned `Range` keys.

More verbosely:

```ruby
# This produces a hash with Range keys on current master
Booking
  .group(""tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') "")
  .count(:id)

# This produces a hash with String keys on current master
Booking
  .joins(""JOIN (SELECT tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') AS range) ranges ON TRUE"")
  .group('ranges.range')
  .count(:id)
```

Obviously these are reduced examples to show the bug. In the actual code the joined values come from a postgres `generate_series` call.

Possibly related change: https://github.com/rails/rails/pull/46923

---

If I were to speculate, prior to #46923 the case where rails does not know anything about the column would fall through to the type of the returned data. After the change the unknown column's default ""Value"" type is used instead.

Breaking on the expression in `execute_grouped_calculation`

```ruby
        key_types = group_columns.each_with_object({}) do |(aliaz, col_name), types|
          types[aliaz] = col_name.try(:type_caster) ||
            type_for(col_name) do
              calculated_data.column_types.fetch(aliaz, Type.default_value)
            end
        end
```

I can see that
```
col_name.try(:type_caster)
 => #<ActiveModel::Type::Value:0x00000001291ff4a8 @precision=nil, @scale=nil, @limit=nil>

type_for(col_name) do
  calculated_data.column_types.fetch(aliaz, Type.default_value)
end
 => #<ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range:0x00000001295f9ba8 @subtype=#<ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Timestamp:0x0000000128ef68b0 @precision=nil, @scale=nil, @limit=nil>, @type=:tsrange>
```

The latter is more useful in this case.

I also observed that if the alias of the joined subquery matches the name of an existing table, it will use type information from that table, even if it's unrelated to the current query. This could lead to some surprising results.
"
48408,"""base"" included in errors.full_messages for autosave'd models",anthonykaufman,"activerecord, attached PR",2023-06-06T18:04:18Z,2023-06-30T17:39:18Z,2023-06-07T02:14:07Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :people, force: true do |t|
    t.text :name
  end

  create_table :pets do |t|
    t.text :name
    t.boolean :dog
    t.boolean :cat
    t.integer :person_id
  end
end

class Person < ActiveRecord::Base
  has_many :pets, autosave: true, dependent: :destroy
  validates :name, { presence: true }
end

class Pet < ActiveRecord::Base
  belongs_to :person
  validates :name, { presence: true }
  validate :not_both_dog_and_cat

  protected

  def not_both_dog_and_cat
    if dog? && cat?
      errors.add(:base, ""must be either dog or cat"")
    end
  end
end

class BugTest < Minitest::Test
  def test_base_error_message
    person = Person.new(name: 'John')
    person.pets.build(name: 'Paws', dog: true, cat: true)
    refute person.save
    assert_equal 1, person.errors.size
    error_message = person.errors.full_messages.first
    assert_equal ""Pets must be either dog or cat"", error_message
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
`errors.full_messages` shouldn't include ""base"" in the error messages for `has_many autosave`'d relationships. Though I'm admittedly unsure what the message should be, the word ""base"" is an expression that holds meaning for the developer but not the user.

### Actual behavior
<!-- Tell us what happens instead -->
`errors.full_messages` returns things like ""Pets base must be either dog or cat"".

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.0.4
"
48403,Incorrectly formed paths can be called in Integration tests,ghiculescu,actionpack,2023-06-06T04:18:22Z,2023-09-12T23:47:23Z,2023-09-12T23:47:23Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""rack"", ""~> 2.0""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    resources :reports, only: [:index] do
      get ""/:report"", to: ""test#index"", as: :show, on: :collection
    end
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers
  include ActionController::UrlFor

  def index
    @report = params[:report]
    render(plain: @report || ""no report param"")
  end
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < ActionDispatch::IntegrationTest
  def test_returns_success
    host! ""localhost""

    get show_reports_path(report: ""baz"")
    assert_equal ""baz"", response.body

    get show_reports_path(format: :csv)
    assert_equal ""no report param"", response.body
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior
The second request, to `show_reports_path(format: :csv)`, should raise this error:

```
ActionController::UrlGenerationError: No route matches {:action=>""index"", :controller=>""test"", :format=>:csv}, missing required keys: [:report]
```

### Actual behavior
The request is made.

```
BugTest#test_returns_success
Expected: ""no report param""
  Actual: ""baz""
```

This suggests that the `{ report: ""baz"" }` param from the first request is persisted to the second one.

I was able to get the expected behaviour with this change. But I'm not sure if it's correct. My understanding is `_recall` is meant to be used to make paths easier to call *within* a request, but should not leak outside of the request (ie. into the test). Is that right?

```diff
diff --git a/actionpack/lib/action_dispatch/testing/integration.rb b/actionpack/lib/action_dispatch/testing/integration.rb
index 43b606cda8..35736c7921 100644
--- a/actionpack/lib/action_dispatch/testing/integration.rb
+++ b/actionpack/lib/action_dispatch/testing/integration.rb
@@ -138,7 +138,7 @@ def initialize(app)

       def url_options
         @url_options ||= default_url_options.dup.tap do |url_options|
-          url_options.reverse_merge!(controller.url_options) if controller.respond_to?(:url_options)
+          url_options.reverse_merge!(controller.url_options.except(:_recall)) if controller.respond_to?(:url_options)

           if @app.respond_to?(:routes)
             url_options.reverse_merge!(@app.routes.default_url_options)
```

### System configuration
**Rails version**: `main`

**Ruby version**: any
"
48402,Link headers generated by Rails may exceed nginx's upstream limit,nateberkopec,"actionview, attached PR",2023-06-06T00:14:25Z,2023-06-07T09:19:36Z,2023-06-07T09:19:36Z,"### Steps to reproduce

1. Create a view with 100s of javascript_include_tags.
2. You now have a response with a fairly large Link header. 
3. If that Link header is over 4kb and you are using Nginx as a reverse proxy, Nginx serves an error with `upstream sent too big header while reading response header from upstream`.

Nginx requires that the _entire_ headers of an upstream response be less than the configured `proxy_buffer_size`, which is only 4kb by default on 64bit Linux. 

Currently, Rails can generate a Link header of unlimited size (split into 8kb field/value pairs). 

### Expected behavior

At some point, adding additional assets to the Link header is not really useful. The browser will only download so many assets at once.

Should we have a limit here?

cc @casperisfine 
"
48398,Should Active Record disable prepared statements if QueryLogs are enabled?,casperisfine,activerecord,2023-06-05T15:21:01Z,2023-07-03T10:39:35Z,2023-07-03T10:39:35Z,"Ref: https://github.com/rails/rails/pull/42240

`ActiveRecord::QueryLogs` was a direct port of Marginalia, and it just hit me that Marginalia was very purposely disabling prepared statements: https://github.com/basecamp/marginalia/blob/c02d3d8404b15004c3432783543b8fc04306927b/lib/marginalia.rb#L67

I think `AR::QueryLogs` should do the same to avoid generating tons of prepared statements, as with query logs each query has a high chance to be unique, making prepared statements a useless overhead.

cc @keeran @eileencodes "
48387,Action View: Failure: TranslationHelperTest#test_raise_arg_overrides_raise_config_option ,zzak,"actionview, attached PR",2023-06-02T22:42:08Z,2023-06-03T01:38:51Z,2023-06-03T01:38:51Z,"I was able to reproduce this CI failure on main:
https://buildkite.com/rails/rails/builds/96919#01887df9-b80d-4805-959b-2da508942ca7/1075-1083

### Steps to reproduce

```ruby
# Using Ruby 3.2.2
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
cd activeview
bin/test test/template/translation_helper_test.rb
```

### Expected behavior
It should pass.

### Actual behavior

```
Failure:
--
TranslationHelperTest#test_raise_arg_overrides_raise_config_option [/rails/actionview/test/template/translation_helper_test.rb:134]:
--- expected
+++ actual
@@ -1 +1,2 @@
-""translation missing: en.translations.missing""
+""Translation missing. Options considered were:
+- en.translations.missing""


bin/rails test /rails/actionview/test/template/translation_helper_test.rb:130
```
 
### System configuration

**Rails version**: main branch
**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]


"
48379,create_or_find_by not preventing race condition,mbajur,activerecord,2023-06-02T10:29:31Z,2023-06-06T13:45:55Z,2023-06-05T16:47:30Z,"### Steps to reproduce
I'm not really able to provide a reproduction steps nor failing test cases as this is caused by a specific race condition 

### Expected behavior
In one of my apps, i have an endpoint that receives a big amount of requests from an external service. For each incoming request, i have to check if record for incoming parameters exists and create it if it doesn't. If it's already there, code should just find it and operate on whatever is already there.

### Actual behavior

Code for that looks as follows:
```
Device.create_or_find_by!(
  identifier: params['device_identifier'],
  push_token: params['pushToken']
)
```

From what i found in the documentation, using `create_or_find_by!` should not be impacted by race condition i am facing **however I can see a following exception being reported**:

```
ActiveRecord::RecordInvalid
Validation failed: Identifier has already been taken, Push token has already been taken
```

Index defined for these two columns is:

```
t.index [""identifier"", ""push_token""], name: ""index_devices_on_identifier_and_push_token"", unique: true
```

### System configuration
**Rails version**: 6.1.4.2

**Ruby version**: 2.7.0
"
48377,New version of i18n is breaking action_view translation test,guilleiguaran,actionview,2023-06-02T08:00:06Z,2023-06-05T01:15:17Z,2023-06-05T01:15:17Z,"### Steps to reproduce

1. Upgrade to i18n v1.14.0

2. Run actionview tests:

```
Failure:
TranslationHelperTest#test_raise_arg_overrides_raise_config_option [/Users/guille/src/rails/actionview/test/template/translation_helper_test.rb:134]:
--- expected
+++ actual
@@ -1 +1,2 @@
-""translation missing: en.translations.missing""
+""Translation missing. Options considered were:
+- en.translations.missing""
```

### Expected behavior
Test passing

### Actual behavior
Test broken

### System configuration
**Rails version**: main
"
48375,Server-Timings reported for partials are incorrect (too high) when nested partials are used,tgaff,"actionpack, actionview, With reproduction steps",2023-06-02T07:06:49Z,2023-10-18T05:43:38Z,,"Server Timings reported for partials are longer than the entire request as reported by the browser.

### Steps to reproduce

1. Use an endpoint with a lot of nested-partials.
1. Look at server timings in browser network tabs
2. Observe that the timing for `render_partial.action_view` is longer than the entire duration the browser reports for the request. 
4. Observe that the timing for `render_partial.action_view` is longer than the duration reported in the Rails log

Example:
 Rails might report `Completed 200 OK in 2796ms` but in the Server-Timings you'll see a higher number for `render_partial.action_view` such as 3725.8ms

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

**Note: the test-case requires views.  Please see the repo https://github.com/tgaff/rails-server-timing-issue-demo/tree/main/executable_test_case** or add your own views.
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""rails"", '=7.0.4.3'
  gem ""rack"", ""~> 2.0""
  gem ""debug"", platforms: %i[ mri mingw x64_mingw ]
  gem ""pry""
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  secrets.secret_key_base = ""secret_key_base""
  config.server_timing = true

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/nested"" => ""test#nested""
    get ""/not_nested"" => ""test#not_nested""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def nested
    self.append_view_path('./views')
    @nesting = true
    render 'index'
  end

  def not_nested
    self.append_view_path('./views')
    @nesting = false
    render 'index'
  end
end

require ""minitest/autorun""
require ""rack/test""

class ServerTimingBugTest < Minitest::Test
  include Rack::Test::Methods

  def test_nested_response_ok
    get ""/nested""
    assert last_response.ok?
  end

  def test_nested_partial_timing_less_than_total_controller
    get ""/nested""
    assert_operator render_partial_timing_dur, :<, process_action_timing_dur, ""partial rendering should be less than total action time""
  end

  def test_not_nested_response_ok
    get ""/not_nested""
    assert last_response.ok?
  end

  def test_not_nested_partial_timing_less_than_total_controller
    get ""/not_nested""
    assert_operator render_partial_timing_dur, :<, process_action_timing_dur, ""partial rendering should be less than total action time""
  end

  private
    def app
      Rails.application
    end

    def reported_server_timings
      last_response.headers[""Server-Timing""]
    end

    def reported_timing_durations
      timings = {}
      reported_server_timings.split(',').each do |entry|
        k, almost_v = entry.strip.split(';')
        timings[k.strip] = almost_v.delete('dur=').to_f
      end
      timings
    end

    def render_partial_timing_dur
      reported_timing_durations['render_partial.action_view']
    end

    def process_action_timing_dur
      reported_timing_durations['process_action.action_controller']
    end
end
```

This is a little easier to understand in the browser where you can easily see the entire request time.  As such I've uploaded a demo app: https://github.com/tgaff/rails-server-timing-issue-demo
The executable test case is also in that repo in a sub-directory.


### Expected behavior
<!-- Tell us what should happen -->
* Server-timings reported for partials should be accurate.
* Server-timings reported for partials should be less than the total request time.


### Actual behavior
<!-- Tell us what happens instead -->
* Server timings reported to chrome, when partials are involved indicate a longer duration than the entirety of the request.

### System configuration
**Rails version**: 7.0.4.3 && main
**Ruby version**:  3.2.0

### screenshot

<img width=""572"" alt=""Screen Shot 2023-06-02 at 3 52 03 PM"" src=""https://github.com/rails/rails/assets/1916144/2ebada20-2d97-4244-9e86-0550a8ca9d71"">

Note in the above request:
* the browser says the request took 13.70 seconds.
* server reported that partials took 23.39 seconds.


#### other info / commentary

* I'm aware of https://github.com/rails/rails/issues/41452 and believe this is a separate issue.
* My guess is that if `_a` render's partial `_b`, then the timing info for `_a` includes `_b`'s render time, but `_b`'s timing is also added in the final sum.
* Reproducible with logging turned off (`ActionView::Base.logger = nil`)
* Manual wristwatch verification of browser total time shows it to be correct-ish.
* Partials aren't processed in parallel are they?"
48366,`where!(...)` condition is ignored when applied on a query started via association ,pjpires,"activerecord, stale",2023-06-01T12:28:08Z,2023-09-23T03:26:02Z,2023-09-17T11:37:52Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
I'm using `.where!(...)` (and a few other `bang!` methods) to make my queries composition process a bit more flexible/generic.

Calling `.where!` on top of an existing ""base query"" started by calling an association on top of a record (e.g. `post.comments`) returns different results from when the query is done via the model class including a where condition (`Comment.where(post: post)`).

I'm aware that these bang methods are currently undocumented (despite still accessible). In any case I thought I should report it as it appears to be an unexpected behavior.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :comment_type
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end


class BugTest < Minitest::Test
  def setup
    @post = Post.create!
    @comment1 = Comment.create!(comment_type: 'Good')
    @comment2 = Comment.create!(comment_type: 'Good')

    @post.comments << @comment1
    @post.comments << @comment2
    @post.comments << Comment.create!(comment_type: 'Bad')
  end

  def test_query_with_comment_where
    query = Comment.where(post: @post)
    query.where!('lower(comment_type) IN (?)', 'good')

    # works
    assert_equal [@comment1, @comment2], query
  end

  def test_query_through_post_association
    query = @post.comments
    query.where!('lower(comment_type) IN (?)', 'good')

    # fails: expected the 2 good comments only, got all 3 comments
    assert_equal [@comment1, @comment2], query
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
Both tests should run the same query, applying both conditions: `post_id` and `comment_type` and return the same results.

### Actual behavior
<!-- Tell us what happens instead -->
Applying `.where!` on top of `post.comments` ignores the `comment_type` condition.

### System configuration
**Rails version**:
7.0.5
**Ruby version**:
3.2.2"
48352,Type Conversion of Environment Variables in Redis Cache Configuration,okabe-yuya,activesupport,2023-05-31T14:09:11Z,2023-06-02T14:30:01Z,2023-06-02T14:30:01Z,"In my project, I am using Redis as a cache store.   
I have configured it to retrieve the settings from environment variables.   
However, I have encountered the following issue.

I have come here through [Rails Discussion](https://discuss.rubyonrails.org/t/type-conversion-of-environment-variables-in-redis-cache-configuration/82923).


### Steps to reproduce

```ruby
# config/environments/development.rb
config.cache_store = :redis_cache_store, {
  url: ENV.fetch('CACHE_REDIS_URL'),
  pool_size: ENV.fetch('CACHE_REDIS_POOL_SIZE', 5),
  :
}
```

IRB

```ruby
[1] pry(main)> Rails.cache.write(""/foo"", ""bar"")
```

### Expected behavior

The string value is specified as it is, but an error occurs during cache writing.  
 Therefore, when I discovered this issue, I initially thought that an error should occur during the startup of Rails.   
However, after discussions in the Rails Discussion, I have come to the conclusion that it should not impact the launch of Rails.

In Figaro, there is an implementation to output warning logs, and it would be desirable to have similar warning logs outputted in this case as well.

```ruby
# When Rails starts
WARNING: The cache_store(:pool_size) is specified as a string.
```

> reference: https://github.com/laserlemon/figaro/issues/248

### Actual behavior

```ruby
/usr/local/bundle/gems/connection_pool-2.3.0/lib/connection_pool/timed_stack.rb:67:in `+': String can't be coerced into Float (TypeError)
```

> https://github.com/mperham/connection_pool/blob/main/lib/connection_pool/timed_stack.rb:67

It seems that the values retrieved from the environment variables remain as strings, which causes the above error.   
Of course, the values retrieved from environment variables are of string type.   
This issue can be resolved by using to_i .

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.2.2

redis(gem): 5.0.6"
48351,[Question] any plan to support `load_async()` with `ActiveRecord::Base.connected_to` ?,r-plus,"activerecord, stale",2023-05-31T09:56:27Z,2023-12-15T21:50:43Z,2023-12-15T21:50:43Z,"Hi guys

Is it possible to use async query by `load_async()` inside the block of `ActiveRecord::Base#connected_to` method to connect to replica database?

In my investigation, currently no.
Because `connected_to` method immediately call `load` method if return value is `ActiveRecord::Relation`, as the result asynchronous query execution back to foreground.
https://github.com/rails/rails/blob/4e71edfca8525417597b079440d876310dd6290d/activerecord/lib/active_record/connection_handling.rb#L355

Do you have any plan to support `load_async()` support inside the `ActiveRecord::Base#connected_to` ?"
48346,Setting a postgres timestamptz attribute sets the value's timezone to UTC,stex,"activerecord, attached PR, PostgreSQL",2023-05-30T20:26:13Z,2023-08-02T11:18:29Z,2023-05-31T18:10:49Z,"After updating Rails from 7.0.4.3 to 7.0.5, I started getting weird errors in my tests. Every time I set a value to `my_attribute.tomorrow.beginning_of_day`, it would set it to one day earlier than I expected.

I figured out that setting an attribute would now erase the time zone, resp. set it to UTC instead of keeping the original one which lead to all ""00:00"" values to become ""22:00"" on the previous day.

### Steps to reproduce

1. Use a postgres database
2. Use `timestamptz` fields
3. Use a timezone other than UTC
4. Assign a time with zone to a `timestamptz` attribute

Running the same test with Rails 7.0.4.3 passes.

You'll need a postgres database, here's the docker compose file I used for the test below:

```yaml
version: ""3""

services:
  db:
    image: postgres:14
    command: postgres -c listen_addresses='*'
    shm_size: 1gb
    environment:
      POSTGRES_PASSWORD: postgres
    restart: no
    ports:
      - ""127.0.0.1:5432:5432""
```

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require ""active_record""
require ""active_support/all""
require ""minitest/autorun""
require ""logger""

Time.zone = ""Europe/Berlin""
ActiveRecord::Base.time_zone_aware_types |= [:timestamptz]

ActiveRecord::Base.establish_connection(
  adapter: ""postgresql"",
  host: ""127.0.0.1"",
  user: ""postgres"",
  password: ""postgres""
)

ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :timezone_models, force: true do |t|
    t.timestamptz :a_time
  end
end

class TimezoneModel < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    assert_includes ActiveRecord::Base.time_zone_aware_types, :timestamptz
    assert_equal ""timestamp with time zone"", TimezoneModel.columns.last.sql_type

    now = Time.zone.now
    assert_equal TimezoneModel.new(a_time: now).a_time.zone, now.zone
  end
end

```

### Expected behavior
The time's zone should not change after assigning it to an attribute

### Actual behavior
The time zone changes to UTC

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.1.2

If you need more information, please let me know!
I'll go back to 7.0.4.3 for the time being.
"
48343,ActiveSupport::Inflector.humanize changes it's behaviour in Rails 7+,senid231,activesupport,2023-05-30T08:42:22Z,2023-05-31T06:04:04Z,2023-05-31T06:04:04Z,"### Steps to reproduce

It looks like `ActiveSupport::Inflector.humanize` changes its behaviour and was not mentioned in any changelog.  
Previously `humanize` truncate only `""_id""`, but in rails 7 it truncates `"" id"" which is breaking change.

The change was introduced at https://github.com/rails/rails/commit/8e0f88d558cf5c509c4e980ceb4c1fd515a2015f

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  if ENV['RAILS_VERSION']
    gem ""activesupport"", ENV['RAILS_VERSION']
  else
    gem ""activesupport""
  end
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_stuff
    actual = ActiveSupport::Inflector.humanize(""caller id"")
    assert_equal 'Caller id', actual
  end
end
```

### Expected behaviour
`""caller id""` string should be humanized to `""Caller id""` (like it being done since rails 3)

### Actual behaviour
```
senid@senid-laptop:~/projects/didww/didww-api-3$ RAILS_VERSION=""~> 7.0"" ruby bug_reports/test_rails_humanize_bug.rb
Fetching gem metadata from https://rubygems.org/........
Resolving dependencies...
Using minitest 5.18.0
Using concurrent-ruby 1.2.2
Using bundler 2.3.11
Using i18n 1.13.0
Using tzinfo 2.0.6
Using activesupport 7.0.5
Run options: --seed 10373

# Running:

F

Finished in 0.000903s, 1107.5939 runs/s, 1107.5939 assertions/s.

  1) Failure:
BugTest#test_stuff [bug_reports/test_rails_humanize_bug.rb:24]:
Expected: ""Caller id""
  Actual: ""Caller""

1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
```

And this bug report test passes in Rails 6.1+
```
`""caller id""` is humanized to `""Caller""`
$ RAILS_VERSION=""~> 6.1"" ruby bug_reports/test_rails_humanize_bug.rb
Fetching gem metadata from https://rubygems.org/........
Resolving dependencies...
Using bundler 2.3.11
Using zeitwerk 2.6.8
Using minitest 5.18.0
Using concurrent-ruby 1.2.2
Using i18n 1.13.0
Using tzinfo 2.0.6
Using activesupport 6.1.7.3 (was 7.0.5)
Run options: --seed 12928

# Running:

.

Finished in 0.000873s, 1145.0426 runs/s, 1145.0426 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.1.2
"
48341,Rails cache prefix is not properly configured for isolated caching during parallel tests.,rbroemeling,"activesupport, pinned",2023-05-30T05:10:08Z,2023-09-30T06:21:01Z,,"I've been investigating why I am seeing a lot of transient test failures due to cache collisions with parallelized tests. I thought it was because Rails doesn't update the cache prefix to protect from collisions but after looking at it; it's looking like Rails _tries_ to do that (by appending `Process.pid` and `Thread.current.object_id` to the namespace), but that it isn't working properly.

For the moment I've worked around it by adding namespace delineation myself in the `parallelize_setup` block of the test helper, but it'd be better if Rails handled this automatically so that no-one has to worry about it.

### Steps to reproduce

Replace `test/test_helper.rb` contents with the following:

```ruby
module ActiveSupport
  class TestCase
    # Run tests in parallel with specified workers
    parallelize(workers: :number_of_processors)

    # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.
    fixtures :all

    parallelize_setup do |worker|
      puts ""#{worker.inspect}: #{Rails.cache.options[:namespace]}""
    end

    # Add more helper methods to be used by all tests here...
  end
end
```

### Expected Behavior

The namespaces listed should be unique per worker to isolate the test runners so that they do not collide during parallelization. It should look something like this (assuming that the cache prefix configured is `test:20230518:`, which is what mine is configured to be).


```
6: test:20230518:63512:3580:
5: test:20230518:63513:3580:
0: test:20230518:63514:3580:
3: test:20230518:63515:3580:
7: test:20230518:63516:3580:
4: test:20230518:63517:3580:
1: test:20230518:63518:3580:
2: test:20230518:63519:3580:
```

### Actual Behavior

Instead, the namespaces listed all share identical process identifiers and thread identifiers.

```
6: test:20230518:63512:3580:
5: test:20230518:63512:3580:
0: test:20230518:63512:3580:
3: test:20230518:63512:3580:
7: test:20230518:63512:3580:
4: test:20230518:63512:3580:
1: test:20230518:63512:3580:
2: test:20230518:63512:3580:
```

### System configuration
**Rails version**:

```
% fgrep rails Gemfile.lock
      rails-dom-testing (~> 2.0)
      rails-dom-testing (~> 2.0)
      rails-html-sanitizer (~> 1.0, >= 1.2.0)
      rails-dom-testing (~> 2.0)
      rails-html-sanitizer (~> 1.1, >= 1.2.0)
    importmap-rails (1.1.6)
    rails (7.0.5)
    rails-dom-testing (2.0.3)
    rails-html-sanitizer (1.6.0)
    sentry-rails (5.9.0)
    sprockets-rails (3.4.2)
    tailwindcss-rails (2.0.29-arm64-darwin)
    tailwindcss-rails (2.0.29-x86_64-darwin)
    tailwindcss-rails (2.0.29-x86_64-linux)
    turbo-rails (1.4.0)
  importmap-rails (~> 1.1)
  rails (~> 7.0.5)
  sentry-rails
  sprockets-rails
  tailwindcss-rails (~> 2.0)
  turbo-rails
```

**Ruby version**:

```
% ruby --version
ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]
```
"
48334,Unexpected alias added by where.missing(...) in v7.0.5,tmimura39,activerecord,2023-05-29T10:34:26Z,2023-05-30T13:27:50Z,2023-05-30T13:27:50Z,"### Steps to reproduce

Same problem as https://github.com/rails/rails/issues/47909.
The fixes have been incorporated into the main branch ([PR](https://github.com/rails/rails/pull/47940)), but the recently released v7.0.5 seems to still have some bugs due to being backported in a half-finished state([PR](https://github.com/rails/rails/pull/47660)).

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  if ARGV[0] == ""main""
    gem ""rails"", github: ""rails/rails"", branch: ""main""
  else
    gem ""activerecord"", ""7.0.5""
  end

  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table(:books, force: true) do |t|
    t.references :progress
  end

  create_table(:progresses, force: true) do |t|
    t.references :book
    t.integer :percentage, default: 0, null: false
  end
end

class Book < ActiveRecord::Base
  has_one :progress

  scope :without_progress, -> do
    where.missing(:progress)
  end

  scope :completed, -> do
    joins(:progress).merge(Progress.completed)
  end
end

class Progress < ActiveRecord::Base
  scope :completed, -> do
    where(percentage: 100)
  end
end

class BugTest < Minitest::Test
  def test_bug
    assert_equal 0, Book.completed.count
    assert_equal 0, Book.without_progress.count
    assert_equal 0, Book.without_progress.completed.count
  end
end
```

### Expected behavior

Rails 7.0.4.3 does not add alias for ""progresses"" table and returns 0:
```
SELECT COUNT(*) FROM ""books"" INNER JOIN ""progresses"" ON ""progresses"".""book_id"" = ""books"".""id"" WHERE ""progresses"".""id"" IS NULL AND ""progresses"".""percentage"" = ?
```

### Actual behavior

Rails main aliases ""progresses"" to ""progress"" and raises exception:
```
SELECT COUNT(*) FROM ""books"" INNER JOIN ""progresses"" ""progress"" ON ""progress"".""book_id"" = ""books"".""id"" WHERE ""progress"".""id"" IS NULL AND ""progresses"".""percentage"" = ?
```

Error: `ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: progresses.percentage`

### System configuration
**Rails version**: 7.0.5

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
"
48330,has_one relation start deleting existing record even when new record failed passing validation,nov,activerecord,2023-05-29T06:50:08Z,2023-06-30T03:11:14Z,2023-06-08T07:40:31Z,"### Steps to reproduce

```ruby
class User
  has_one :totp_setting
end

class TotpSetting
  belongs_to :user
  validates :user_id, presence: true, uniqueness: true
end

# in rails 7.0.4
@user.create_totp_setting! # => first record
@user.create_totp_setting! # => uniqueness error

# in rails 7.0.5
@user.create_totp_setting! # => first record
@user.create_totp_setting! # => delete first record and succeeds
```

### Expected behavior

```ruby
@user.create_totp_setting! # => first record
@user.create_totp_setting! # => uniqueness error
```
<!-- Tell us what should happen -->

### Actual behavior

```ruby
@user.create_totp_setting! # => first record
@user.create_totp_setting! # => delete first record and succeeds
```
<!-- Tell us what happens instead -->

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.1.4
"
48326,"SyntaxError in an autoloading class referenced from a view causes ""TypeError: Thread::Backtrace::Location object expected""",zarqman,"actionview, attached PR",2023-05-29T04:10:01Z,2023-12-05T20:00:07Z,2023-12-05T20:00:07Z,"If a view renders code that autoloads a class that has a syntax error, `DebugExceptions` fails with a `TypeError: Thread::Backtrace::Location object expected`.

<details>
<summary>Backtrace</summary>

```
TypeError: Thread::Backtrace::Location object expected
 <internal:ast>:112:in `node_id_for_backtrace_location'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionview/lib/action_view/template.rb:172:in `spot'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:252:in `spot'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:302:in `extract_source'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:206:in `block in source_extracts'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:205:in `map'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:205:in `source_extracts'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:125:in `create_template'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:77:in `render_for_browser_request'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:69:in `render_exception'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:44:in `rescue in call'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
```

</details>

### Steps to reproduce

`test.rb`:
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""rack"", ""~> 2.0""
end

require ""action_controller/railtie""

# since DebugExceptions throws its own exception, display it here
module ActionDispatch
  class ShowExceptions
    def call(env)
      @app.call(env)
    rescue Exception => exception
      request = ActionDispatch::Request.new env
      backtrace_cleaner = request.get_header(""action_dispatch.backtrace_cleaner"")
      wrapper = ExceptionWrapper.new(backtrace_cleaner, exception)
      puts ""[SE] #{exception.inspect}""
      puts ""[SE]   #{exception.backtrace.join(""\n[SE]  "")}""
      if wrapper.show?(request)
        render_exception(request, wrapper)
      else
        raise exception
      end
    end
  end
end

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  secrets.secret_key_base = ""secret_key_base""
  config.consider_all_requests_local = true

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers
  append_view_path '.'

  def index
    render '/view_test_1'
  end

  # simulate a syntax error in an external, auto-loading class
  def helper_1
    eval %(
      'abc' + pluralize 'def'
    )
  end
  helper_method :helper_1
end

require ""minitest/autorun""
require ""rack/test""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    get ""/""
    # expecting a DebugExceptions response
    assert_match %r{<header role=""banner"">|<main role=""main""}, last_response.body
  end

  private
    def app
      Rails.application
    end
end
```

`view_test_1.html.erb` (placed in same base dir as test.rb):
```erb
-view-
<%= helper_1 %>
```


### Expected behavior
A standard DebugExceptions response should display the initial `SyntaxError` exception.

### Actual behavior
DebugExceptions itself raises a `TypeError` with message `Thread::Backtrace::Location object expected`, in turn causing a generic 500 error to be returned.

### System configuration
**Rails version**: main

**Ruby version**: 3.2.2
"
48320,Decrementing counter_cache column fails when optimistic locking is enabled.,walterhorstman,activerecord,2023-05-28T11:28:07Z,2023-05-30T07:45:58Z,2023-05-30T07:45:58Z,"### Steps to reproduce
- Create a Post model with lock_version and comments_count columns and a has_many relation with :comments.
- Create a Comment model with lock_version column and a belongs_to relation with :post, using counter_cache = true
- post = Post.create
- comment = Comment.create(post:)
- comment.destroy

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
# ActiveRecord::Base.establish_connection(adapter: ""mysql2"", database: ""vacushop7"", username: ""developer"", password: ""developer"", socket: ""/tmp/mysql.sock"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.integer :lock_version, default: 0, null: false
    t.integer :comments_count, default: 0, null: false
  end

  create_table :comments, force: true do |t|
    t.integer :lock_version, default: 0, null: false
    t.integer :post_id, null: false
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, counter_cache: true
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    comment = Comment.create(post:)

    assert_equal 1, post.reload.comments_count
    Comment.last.destroy
    assert_equal 0, post.reload.comments_count
  end
end
```

### Expected behavior
After the comment is created, comments_count increases with 1.
After the comment is destroyed, comments_counts decreases with 1.

### Actual behavior
After the comment is created, comments_count increases indeed (correct behavior).
When the comment is destroyed, nothing happens with the comments_count column (incorrect behavior).

I've tried to locate the origin of the bug and I find in line 121 of lib/active_record/locking/optimistic.rb that when the unless-condition is removed out, it works. I don't know however if this impacts other things.

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.2.2"
48319,Exceptions in ERB templates not rendering correctly depending on surrounding context,zarqman,actionview,2023-05-28T00:24:48Z,2023-06-01T19:08:59Z,2023-06-01T19:08:59Z,"This is an extension of #48173 and the resulting PRs #48184 and #48294.

While those PRs address a failure to identify the source location in a template with spaces in front of the errant method, characters afterward can still cause DebugExceptions to error.

### Steps to reproduce

Modify `actionview/test/fixtures/test/unparseable_runtime_error.html.erb` to:
```ruby
  <% if true %>
    <%= method_that_does_not_exist %>a
  <% end %>
```
Note the added `a` at the end of the middle line. It seems a variety of characters (possibly all) in that location will cause the issue.

### Expected behavior
DebugExceptions renders its normal error page.

### Actual behavior
A generic 500 error type exception page is rendered to the browser.

Debugging the cause for the error shows `NoMethodError: undefined method `bytesize' for nil:NilClass`.
<details>
<summary>Backtrace</summary>

```
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/activesupport/lib/active_support/core_ext/erb/util.rb:169:in `tokenize'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionview/lib/action_view/template/handlers/erb.rb:45:in `translate_location'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionview/lib/action_view/template.rb:182:in `translate_location'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:258:in `spot'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:302:in `extract_source'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:206:in `block in source_extracts'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:205:in `map'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:205:in `source_extracts'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:125:in `create_template'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:77:in `render_for_browser_request'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:69:in `render_exception'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:44:in `rescue in call'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'
~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-66099147482e/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'
```

</details>

### System configuration
**Rails version**: main

**Ruby version**: 3.2.2
"
48318,Incorrect HTML generation when calling a partial recursively many times,pyridine,actionview,2023-05-27T20:44:00Z,2023-06-03T00:54:47Z,2023-06-03T00:54:43Z,"I'm seeing HTML generated incorrectly when a partial is called recursively many times in a view.

### Steps to reproduce
1. After creating a base project with `rails new`,
2. The route:
```rb
Rails.application.routes.draw do
  root ""application#nested_list""
end
```
3. The controller:
```rb
class ApplicationController < ActionController::Base
  def nested_list
    @index = 1
    @max = 520
  end
end
```
4. The view:
```html.erb
<%= render partial: 'nested_list', locals: {
  index: @index,
  max: @max
} %>
```
5. The partial. This calls itself over and over, creating a deeply nested list of `<ul>`s:
```html.erb
<ul>
  <li>
    <span><%= index %></span>
  </li>
  <% if index <= max %>
    <%= render partial: 'nested_list', locals: {
      index: index + 1,
      max: max
    } %>
  <% end %>
</ul>
```
6. Run rails and open localhost:3000 in a browser. To avoid a `stack level too deep` error when generating the view, I needed to increase the stack size:
```
RUBY_THREAD_VM_STACK_SIZE=10485760 ./bin/rails s
```

(Here is a repo with this set up: https://github.com/pyridine/rails_html_recursive_nesting_error)

### Expected behavior
The generated HTML should contain a deeply nested list of `<ul>`s. In fact, the first 509 are generated correctly:

```html
[...]
    <ul>
  <li>
    <span>1</span>
  </li>
    <ul>
  <li>
    <span>2</span>
  </li>
    <ul>
  <li>
    <span>3</span>
  </li>
    <ul>
  <li>
    <span>4</span>
  </li>
    <ul>
[....]
```

### Actual behavior
The 510th list and subsequent lists are not generated as expected.
```html
[...]
    <ul>
  <li>
    <span>509</span>
  </li>
    <ul>
  <li>
    
  </li><span>510</span>
    <ul>
  
    
</ul><li>
    
  </li><span>511</span><ul>
  
    
</ul><li>
    
  </li><span>512</span><ul>
  
    
</ul>
[...]
```
Note:
- The empty `<li></li>` elements
- The empty `<ul></ul>` elements
- The `<span>` elements no longer appear inside the `<li`> elements
- The whitespace is different

You would not expect the above to occur, looking at the partial.

The point at which incorrect generation starts is related to the number of nested elements. For example, if the partial has more nesting:
```html.erb
 <ul>
  <li>
    <span><%= index %></span>
  </li>
  <li>
    <ul>
      <li>
        <% if index <= max %>
          <%= render partial: 'nested_list', locals: {
            index: index + 1,
            max: max
          } %>
        <% end %>
      </li>
    </ul>
  </li>
</ul>
 ```
Then incorrect generation begins at the 128th list:
 ```html
 [...]
     <ul>
      <li>
          <ul>
  <li>
    <span>127</span>
  </li>
  <li>
    <ul>
      <li>
          <ul>
  <li>
    <span>128</span>
  </li>
  <li>
    <ul>
      
    </ul><li>
          
      </li><ul>
  
  
</ul><li>
    
  </li><span>129</span><li>
    
  </li><ul>
      
    </ul><li>
          
      </li><ul>
 [...]
 ```
In this case, I set `@max` to 130 in the controller and did not need to set `RUBY_THREAD_VM_STACK_SIZE` to avoid the `stack level too deep` error.

### System configuration
I've reproduced this with:
**OS**: Ubuntu 23.04
**Rails version**: 7.0.5
**Ruby version**: 3.2.2 +YJIT +Jemalloc
And:
**OS**: Ubuntu 22.04
**Rails version**: 7.0.5
**Ruby version**: 3.2.2
"
48313,SanitizeHelperTest#test_sanitized_allowed_tags_class_method and #test_sanitized_allowed_attributes_class_method failing,zzak,"actionview, attached PR, With reproduction steps, ci issues",2023-05-26T22:31:24Z,2023-05-28T03:28:25Z,2023-05-28T03:28:25Z,"Managed to reproduce the CI failure at https://buildkite.com/rails/rails/builds/96697#0188593a-e48d-488c-9e0e-7e9b33e078de/1176-1185

### Steps to reproduce

```ruby
# Using Ruby 3.2.2
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
cd activeview
bin/test test/sanitize_helper_test.rb
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
zzak@mbp16 rails % cd actionview
zzak@mbp16 actionview % bin/test test/template/sanitize_helper_test.rb
Running 9 tests in a single process (parallelization threshold is 50)
Run options: --seed 44838

# Running:

.....F

Failure:
SanitizeHelperTest#test_sanitized_allowed_tags_class_method [/private/var/folders/kg/6z9856y91t10b8nngbmf3pd40000gn/T/tmp.TcfAwtum/rails/actionview/test/template/sanitize_helper_test.rb:55]:
--- expected
+++ actual
@@ -1 +1 @@
-#<Set: {""strong"", ""em"", ""b"", ""i"", ""p"", ""code"", ""pre"", ""tt"", ""samp"", ""kbd"", ""var"", ""sub"", ""sup"", ""dfn"", ""cite"", ""big"", ""small"", ""address"", ""hr"", ""br"", ""div"", ""span"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"", ""ul"", ""ol"", ""li"", ""dl"", ""dt"", ""dd"", ""abbr"", ""acronym"", ""a"", ""img"", ""blockquote"", ""del"", ""ins""}>
+#<Set: {""a"", ""abbr"", ""acronym"", ""address"", ""b"", ""big"", ""blockquote"", ""br"", ""cite"", ""code"", ""dd"", ""del"", ""dfn"", ""div"", ""dl"", ""dt"", ""em"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"", ""hr"", ""i"", ""img"", ""ins"", ""kbd"", ""li"", ""ol"", ""p"", ""pre"", ""samp"", ""small"", ""span"", ""strong"", ""sub"", ""sup"", ""time"", ""tt"", ""ul"", ""var""}>



bin/test test/template/sanitize_helper_test.rb:50

.F

Failure:
SanitizeHelperTest#test_sanitized_allowed_attributes_class_method [/private/var/folders/kg/6z9856y91t10b8nngbmf3pd40000gn/T/tmp.TcfAwtum/rails/actionview/test/template/sanitize_helper_test.rb:60]:
--- expected
+++ actual
@@ -1 +1 @@
-#<Set: {""href"", ""src"", ""width"", ""height"", ""alt"", ""cite"", ""datetime"", ""title"", ""class"", ""name"", ""xml:lang"", ""abbr""}>
+#<Set: {""abbr"", ""alt"", ""cite"", ""class"", ""datetime"", ""height"", ""href"", ""lang"", ""name"", ""src"", ""title"", ""width"", ""xml:lang""}>



bin/test test/template/sanitize_helper_test.rb:58

.

Finished in 0.019089s, 471.4757 runs/s, 995.3376 assertions/s.
9 runs, 19 assertions, 2 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]

"
48304,Migration removes default_function,vinibispo,activerecord,2023-05-25T23:25:33Z,2023-05-26T14:23:18Z,2023-05-26T14:23:18Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :people, force: true do |t|
    t.timestamp :created
    t.timestamp :edited
  end
end

class Person < ActiveRecord::Base
end

class AddDefaultToCreatedInPeople < ActiveRecord::Migration[7.0]
  def change
    change_column_default :people, :created, from: nil, to: -> { ""datetime('now')"" }
  end
end

class AddDefaultToEditedInPeople < ActiveRecord::Migration[7.0]
  def change
    change_column_default :people, :edited, from: nil, to: -> { ""datetime('now')"" }
  end
end

class BugTest < Minitest::Test
  def test_migration_up
    AddDefaultToCreatedInPeople.migrate(:up)
    Person.reset_column_information

    assert_equal ""datetime('now')"", Person.columns_hash[""created""].default_function
    assert_nil Person.columns_hash[""edited""].default_function

    AddDefaultToEditedInPeople.migrate(:up)
    Person.reset_column_information

    assert_equal ""datetime('now')"", Person.columns_hash[""created""].default_function
    assert_equal ""datetime('now')"", Person.columns_hash[""edited""].default_function
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
The created column should have the default_function as ""datetime('now')""
The  edited column should have the default_function as ""datetime('now')""
### Actual behavior
<!-- Tell us what happens instead -->
The created column has the default_function as nil
The edited column has the default_function as ""datetime('now')""
### System configuration
**Rails version**: 7.0.0

**Ruby version**: 3.2.0
"
48301,attributes_before_type_cast is not working with accepts_nested_attributes_for and has_many association,mateusnava,stale,2023-05-25T19:57:11Z,2023-08-30T21:04:28Z,2023-08-30T21:04:28Z,"### Steps to reproduce
```ruby
class User < ApplicationRecord
  has_many :schools

  accepts_nested_attributes_for :schools
end

class School < ApplicationRecord
  belongs_to :user
end
```

- Create a User with a School:
```ruby
User.create!(name: ""user 1"")
User.first.schools.create!
```

- Assigns an attribute with the wrong format (degree_issued_at in my example):
```ruby
user.assign_attributes(school_attributes: [{id: 1, degree_issued_at: ""2020-30-30""}]
```

### Expected behavior
I expected to see `degree_issue_at: ""2020-30-30""` in the `attributes_before_type_cast`

### Actual behavior
```ruby
> user.schools.first.attributes_before_type_cast
=> {""user_id""=>1, ""id""=>1, ""name""=>nil, ""degree_issued_at""=>nil}
```

### System configuration
**Rails version**: 7.0.5

**Ruby version**: 3.0.1

### Possible fix
Change the method `ActiveModel::Type::Value#changed?`  to:
```ruby
  def changed?(old_value, new_value, new_value_before_type_cast)
    return true if old_value.nil? && new_value.nil? && new_value_before_type_cast.present?
    ...
  end

```

I only could reproduce this issue with `has_many`, `accepts_nested_attributes_for`, and  a persisted record with `nil` in the attribute."
48292,"ActionCable sporadically fails to confirm subscribe because the subscription ""already exists""",shoffing,actioncable,2023-05-24T17:43:44Z,2023-09-27T10:21:56Z,,"### Steps to reproduce

- Create a very basic channel that simply streams for the current user:

```rb
class PerfTestChannel < ApplicationCable::Channel
  def subscribed
    stream_for current_user
  end
end
```

- On page load, subscribe to the channel.

```js
App.cable.subscriptions.create('PerfTestChannel');
```

### Expected behavior

The ActionCable client should be able to reliably subscribe to a channel.

### Actual behavior

- On a development instance with browser network latency simulation, or any staging/production instance, the `subscribe` command will sporadically (varying from 5%-70% depending on load) fail to be confirmed. The `SubscriptionGuarantor` will repeatedly attempt to resubscribe every 500ms, but no confirmation will ever be received.

![image](https://github.com/rails/rails/assets/2903742/8dc591b4-ef3a-4d7b-867d-b92ee6f5b906)

- I wrote a JS script to assist in reproducing this error. It repeatedly disconnects & subscribes to the channel until the subscription fails to leave the pendingSubscriptions state in under 600ms. Running this in browser JS console reliably reproduces the issue on a staging/production instance:

```js
(async function() {
  let i = 0;
  while (true) {
    i++;
    App.cable.subscriptions.subscriptions.forEach(sub => App.cable.subscriptions.remove(sub));
    App.cable.disconnect();
    App.cable.subscriptions.create('PerfTestChannel');
    await new Promise(resolve => setTimeout(resolve, 600));
    const pendingSubs = App.cable.subscriptions.guarantor.pendingSubscriptions;
    if (pendingSubs.length > 0) {
      break;
    } else { console.log('...' + i); }
  }
})()
```

### Investigation

This bug was tricky to investigate as there was nothing useful in our logs. The `/cable` request was successfully being upgraded to websockets as expected. We saw some errors that might have been relevant, but none of them occurred reliably with the issue being observed. After digging through the ActionCable source code, we have determined the issue is caused by this line in `subscriptions.rb`: https://github.com/rails/rails/blob/0f5c8c5bc61b7e382e64cad4846406021bc8cd35/actioncable/lib/action_cable/connection/subscriptions.rb#L34

It returns silently if the subscription ""already exists"". We confirmed this is the source of the error by monkey-patching the class in a `config/initializers` to add some logging with the `return`:

```rb
# config/initializers/monkeypatch_actioncable.rb
# frozen_string_literal: true

require ""active_support/core_ext/hash/indifferent_access""

module ActionCable
  module Connection
    # Collection class for all the channel subscriptions established on a given connection. Responsible for routing incoming commands that arrive on
    # the connection to the proper channel.
    class Subscriptions # :nodoc:
      def add(data)
        id_key = data[""identifier""]
        id_options = ActiveSupport::JSON.decode(id_key).with_indifferent_access

        if subscriptions.key?(id_key)
          Rails.logger.info(""[Action Cable] Already subscribed to #{id_key}..."")
          return
        end

        subscription_klass = id_options[:channel].safe_constantize

        if subscription_klass && ActionCable::Channel::Base > subscription_klass
          subscription = subscription_klass.new(connection, id_key, id_options)
          subscriptions[id_key] = subscription
          subscription.subscribe_to_channel
        else
          logger.error ""Subscription class not found: #{id_options[:channel].inspect}""
        end
      end
    end
  end
end
```

We deployed the patch to staging and verified that when the error occurs and `subscribe` is being repeatedly attempted, our logs are filled with the ""Already subscribed..."" message. This appears to confirms that it's not an issue with our load balancer or nginx or something, the `subscribe` command is successfully making its way all the way to the Rails server. It's just being ignored, and failing silently.

### Possible Fix

Simply calling `subscribe_to_channel` if the subscription already exists seems to fix the issue:

```rb
return subscriptions[id_key].subscribe_to_channel if subscriptions.key?(id_key)
```

However, I'm not familiar enough with ActionCable to fully understand the implications of that logic. For example, I think that may result in multiple `subscribed` callbacks being invoked in some cases where multiple `subscribe` commands are sent from the client. There also seems to be some counting-semaphore logic wrapped around the connection to redis, which multiple subscribes could maybe interfere with.

### Impact

This bug is blocking our team's adoption of ActionCable. We cannot rely on the system if it fails to connect with even the most basic of setups.

### System configuration

**Rails version**: 7.0.4.3

**Ruby version**: 3.2.1
"
48289,`delegate` does not allow setters with multiple arguments,richard-kramer,activesupport,2023-05-24T11:46:43Z,2023-05-25T12:10:38Z,2023-05-25T12:04:29Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

Using `ActiveSupport`s `delegate`, it is not possible, to delegate setter methods, which accept more than one argument.

This is used for example with [mobility](https://github.com/shioyama/mobility/tree/master#getting-started) to set the value for a specific locale.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require 'active_support/core_ext/module/delegation'

class A
  def foo=(value, option:)
    ""Setting foo to '#{value}' with option '#{option}'""
  end
end

class B
  attr_reader :a

  def initialize(a:)
    @a = a
  end

  delegate(:foo=, to: :a)
end

a = A.new
b = B.new(a:)

a.public_send(:foo=, 'bar', option: :baz) # => works: ""Setting foo to 'bar' with option 'baz'""
b.public_send(:foo=, 'bar', option: :baz) # => wrong number of arguments (given 2, expected 1) (ArgumentError)
```

### Expected behavior
<!-- Tell us what should happen -->

It does not matter, if a ""normal"" method or a setter method (`method=`) is delegated. I am free to use as many arguments as I like

### Actual behavior
<!-- Tell us what happens instead -->

Delegated setter methods [explicitly only get one argument](https://github.com/rails/rails/blob/0f5c8c5bc61b7e382e64cad4846406021bc8cd35/activesupport/lib/active_support/core_ext/module/delegation.rb#L205).

Is there a reason for this and wouldn't it be possible to delegate them the same way, as any other method?

### System configuration
**Rails version**: 6.1.0

**Ruby version**: 3.1.2
"
48278,Rails new succeeds (exit status zero) even when it does not bundle install Redis,schneems,"railties, With reproduction steps",2023-05-22T20:33:14Z,2023-05-22T22:35:53Z,,"### Steps to reproduce

```term
$ gem install rails --no-document
Successfully installed rails-7.0.4.3
1 gem installed
```

Uninstall all redis gems:

```
$ gem uninstall redis --all
```

Create a Rails app:

```term
$ rails new myapp --database=postgresql
...
$ echo $?
0
$ cd myapp
```

Fails to boot:

```
$ rails c
Could not find redis-4.8.1 in locally installed gems
```

### Expected behavior

After `rails new` returns a zero status code I expect that everything is installed correctly and that I can use it.

### Actual behavior

Rails fails to install the redis gem, but continues anyway

```
$ rails new myapp --database=postgresql
      create  
      create  README.md
      create  Rakefile
      create  .ruby-version
      create  config.ru
      create  .gitignore
      create  .gitattributes
      create  Gemfile
         run  git init from "".""
Initialized empty Git repository in /Users/rschneeman/Documents/projects/rundoc/test/fixtures/rails_7/tmp/myapp/.git/
      create  app
      create  app/assets/config/manifest.js
      create  app/assets/stylesheets/application.css
      create  app/channels/application_cable/channel.rb
      create  app/channels/application_cable/connection.rb
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/jobs/application_job.rb
      create  app/mailers/application_mailer.rb
      create  app/models/application_record.rb
      create  app/views/layouts/application.html.erb
      create  app/views/layouts/mailer.html.erb
      create  app/views/layouts/mailer.text.erb
      create  app/assets/images
      create  app/assets/images/.keep
      create  app/controllers/concerns/.keep
      create  app/models/concerns/.keep
      create  bin
      create  bin/rails
      create  bin/rake
      create  bin/setup
      create  config
      create  config/routes.rb
      create  config/application.rb
      create  config/environment.rb
      create  config/cable.yml
      create  config/puma.rb
      create  config/storage.yml
      create  config/environments
      create  config/environments/development.rb
      create  config/environments/production.rb
      create  config/environments/test.rb
      create  config/initializers
      create  config/initializers/assets.rb
      create  config/initializers/content_security_policy.rb
      create  config/initializers/cors.rb
      create  config/initializers/filter_parameter_logging.rb
      create  config/initializers/inflections.rb
      create  config/initializers/new_framework_defaults_7_0.rb
      create  config/initializers/permissions_policy.rb
      create  config/locales
      create  config/locales/en.yml
      create  config/master.key
      append  .gitignore
      create  config/boot.rb
      create  config/database.yml
      create  db
      create  db/seeds.rb
      create  lib
      create  lib/tasks
      create  lib/tasks/.keep
      create  lib/assets
      create  lib/assets/.keep
      create  log
      create  log/.keep
      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/apple-touch-icon-precomposed.png
      create  public/apple-touch-icon.png
      create  public/favicon.ico
      create  public/robots.txt
      create  tmp
      create  tmp/.keep
      create  tmp/pids
      create  tmp/pids/.keep
      create  tmp/cache
      create  tmp/cache/assets
      create  vendor
      create  vendor/.keep
      create  test/fixtures/files
      create  test/fixtures/files/.keep
      create  test/controllers
      create  test/controllers/.keep
      create  test/mailers
      create  test/mailers/.keep
      create  test/models
      create  test/models/.keep
      create  test/helpers
      create  test/helpers/.keep
      create  test/integration
      create  test/integration/.keep
      create  test/channels/application_cable/connection_test.rb
      create  test/test_helper.rb
      create  test/system
      create  test/system/.keep
      create  test/application_system_test_case.rb
      create  storage
      create  storage/.keep
      create  tmp/storage
      create  tmp/storage/.keep
      remove  config/initializers/cors.rb
      remove  config/initializers/new_framework_defaults_7_0.rb
         run  bundle install
Fetching gem metadata from https://rubygems.org/...........
Resolving dependencies...
Using rake 13.0.6
Using concurrent-ruby 1.2.2
Using minitest 5.18.0
Using builder 3.2.4
Using racc 1.6.2
Using rack 2.2.7
Using websocket-extensions 0.1.5
Using marcel 1.0.2
Using mini_mime 1.1.2
Using public_suffix 5.0.1
Using bindex 0.8.1
Using bundler 2.4.13
Using erubi 1.12.0
Using crass 1.0.6
Using nio4r 2.5.9
Using date 3.3.3
Using timeout 0.3.2
Using msgpack 1.7.1
Using matrix 0.4.2
Using regexp_parser 2.8.0
Using io-console 0.6.0
Using method_source 1.0.0
Using thor 1.2.2
Using zeitwerk 2.6.8
Using pg 1.5.3
Using rexml 3.2.5
Using rubyzip 2.3.2
Using websocket 1.2.9
Using tzinfo 2.0.6
Using i18n 1.13.0
Using nokogiri 1.15.1 (x86_64-darwin)
Using rack-test 2.1.0
Using websocket-driver 0.7.5
Using sprockets 4.2.0
Using addressable 2.8.4
Using bootsnap 1.16.0
Using activesupport 7.0.4.3
Using puma 5.6.5
Using reline 0.3.4
Using globalid 1.1.0
Using activemodel 7.0.4.3
Using irb 1.6.4
Using activerecord 7.0.4.3
Using debug 1.8.0
Using net-protocol 0.2.1
Using activejob 7.0.4.3
Using selenium-webdriver 4.9.1
Using rails-dom-testing 2.0.3
Using loofah 2.21.3
Using xpath 3.2.0
Using webdrivers 5.2.0
Using rails-html-sanitizer 1.5.0
Using capybara 3.39.1
Using actionview 7.0.4.3
Using net-smtp 0.3.3
Using net-imap 0.3.4
Using net-pop 0.1.2
Using jbuilder 2.11.5
Using actionpack 7.0.4.3
Using mail 2.8.1
Using actioncable 7.0.4.3
Using activestorage 7.0.4.3
Using railties 7.0.4.3
Using sprockets-rails 3.4.2
Using actionmailer 7.0.4.3
Using actionmailbox 7.0.4.3
Using actiontext 7.0.4.3
Using importmap-rails 1.1.6
Using stimulus-rails 1.2.1
Using turbo-rails 1.4.0
Using web-console 4.2.0
Using rails 7.0.4.3
Bundle complete! 15 Gemfile dependencies, 72 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
         run  bundle binstubs bundler
       rails  importmap:install
Add Importmap include tags in application layout
      insert  app/views/layouts/application.html.erb
Create application.js module as entrypoint
      create  app/javascript/application.js
Use vendor/javascript for downloaded pins
      create  vendor/javascript
      create  vendor/javascript/.keep
Ensure JavaScript files are in the Sprocket manifest
      append  app/assets/config/manifest.js
Configure importmap paths in config/importmap.rb
      create  config/importmap.rb
Copying binstub
      create  bin/importmap
       rails  turbo:install stimulus:install
Import Turbo
      append  app/javascript/application.js
Pin Turbo
      append  config/importmap.rb
Enable redis in bundle
        gsub  Gemfile
         run  bundle install
/Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:290:in `raise_not_found!': Could not find gem 'redis (~> 4.0)' in locally installed gems. (Bundler::GemNotFound)

The source contains the following gems matching 'redis':
  * redis-5.0.5
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:343:in `block in prepare_dependencies'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `each'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `map'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `prepare_dependencies'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:53:in `setup_solver'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:28:in `start'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:554:in `start_resolution'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:289:in `resolve'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:507:in `materialize'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:197:in `specs'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:254:in `specs_for'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/runtime.rb:18:in `setup'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler.rb:162:in `setup'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `block in <top (required)>'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:159:in `with_level'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:111:in `silence'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `<top (required)>'
	from <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'
	from <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'
Switch development cable to use redis
        gsub  config/cable.yml
/Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:290:in `raise_not_found!': Could not find gem 'redis (~> 4.0)' in locally installed gems. (Bundler::GemNotFound)

The source contains the following gems matching 'redis':
  * redis-5.0.5
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:343:in `block in prepare_dependencies'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `each'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `map'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `prepare_dependencies'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:53:in `setup_solver'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:28:in `start'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:554:in `start_resolution'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:289:in `resolve'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:507:in `materialize'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:197:in `specs'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:254:in `specs_for'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/runtime.rb:18:in `setup'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler.rb:162:in `setup'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `block in <top (required)>'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:159:in `with_level'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:111:in `silence'
	from /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `<top (required)>'
	from <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'
	from <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'
$ echo $?
0
```

Slightly different (not sure why):

```
$ rails new myapp --database=postgresql
      create
      create  README.md
      create  Rakefile
      create  .ruby-version
      create  config.ru
      create  .gitignore
      create  .gitattributes
      create  Gemfile
         run  git init from "".""
Initialized empty Git repository in /private/tmp/myapp/.git/
      create  app
      create  app/assets/config/manifest.js
      create  app/assets/stylesheets/application.css
      create  app/channels/application_cable/channel.rb
      create  app/channels/application_cable/connection.rb
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/jobs/application_job.rb
      create  app/mailers/application_mailer.rb
      create  app/models/application_record.rb
      create  app/views/layouts/application.html.erb
      create  app/views/layouts/mailer.html.erb
      create  app/views/layouts/mailer.text.erb
      create  app/assets/images
      create  app/assets/images/.keep
      create  app/controllers/concerns/.keep
      create  app/models/concerns/.keep
      create  bin
      create  bin/rails
      create  bin/rake
      create  bin/setup
      create  config
      create  config/routes.rb
      create  config/application.rb
      create  config/environment.rb
      create  config/cable.yml
      create  config/puma.rb
      create  config/storage.yml
      create  config/environments
      create  config/environments/development.rb
      create  config/environments/production.rb
      create  config/environments/test.rb
      create  config/initializers
      create  config/initializers/assets.rb
      create  config/initializers/content_security_policy.rb
      create  config/initializers/cors.rb
      create  config/initializers/filter_parameter_logging.rb
      create  config/initializers/inflections.rb
      create  config/initializers/new_framework_defaults_7_0.rb
      create  config/initializers/permissions_policy.rb
      create  config/locales
      create  config/locales/en.yml
      create  config/master.key
      append  .gitignore
      create  config/boot.rb
      create  config/database.yml
      create  db
      create  db/seeds.rb
      create  lib
      create  lib/tasks
      create  lib/tasks/.keep
      create  lib/assets
      create  lib/assets/.keep
      create  log
      create  log/.keep
      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/apple-touch-icon-precomposed.png
      create  public/apple-touch-icon.png
      create  public/favicon.ico
      create  public/robots.txt
      create  tmp
      create  tmp/.keep
      create  tmp/pids
      create  tmp/pids/.keep
      create  tmp/cache
      create  tmp/cache/assets
      create  vendor
      create  vendor/.keep
      create  test/fixtures/files
      create  test/fixtures/files/.keep
      create  test/controllers
      create  test/controllers/.keep
      create  test/mailers
      create  test/mailers/.keep
      create  test/models
      create  test/models/.keep
      create  test/helpers
      create  test/helpers/.keep
      create  test/integration
      create  test/integration/.keep
      create  test/channels/application_cable/connection_test.rb
      create  test/test_helper.rb
      create  test/system
      create  test/system/.keep
      create  test/application_system_test_case.rb
      create  storage
      create  storage/.keep
      create  tmp/storage
      create  tmp/storage/.keep
      remove  config/initializers/cors.rb
      remove  config/initializers/new_framework_defaults_7_0.rb
         run  bundle install
Fetching gem metadata from https://rubygems.org/...........
Resolving dependencies...
Using rake 13.0.6
Using minitest 5.18.0
Using builder 3.2.4
Using racc 1.6.2
Using crass 1.0.6
Using rack 2.2.7
Using nio4r 2.5.9
Using marcel 1.0.2
Using zeitwerk 2.6.8
Using mini_mime 1.1.2
Using bundler 2.4.13
Using rexml 3.2.5
Using concurrent-ruby 1.2.2
Using websocket 1.2.9
Using websocket-extensions 0.1.5
Using date 3.3.3
Using public_suffix 5.0.1
Using msgpack 1.7.1
Using regexp_parser 2.8.0
Using sprockets 4.2.0
Using method_source 1.0.0
Using thor 1.2.2
Using timeout 0.3.2
Using bindex 0.8.1
Using pg 1.5.3
Using matrix 0.4.2
Using rubyzip 2.3.2
Using erubi 1.12.0
Using selenium-webdriver 4.9.1
Using rack-test 2.1.0
Using puma 5.6.5
Using i18n 1.13.0
Using tzinfo 2.0.6
Using io-console 0.6.0
Using websocket-driver 0.7.5
Using addressable 2.8.4
Using bootsnap 1.16.0
Using net-protocol 0.2.1
Using nokogiri 1.15.1 (x86_64-darwin)
Using activesupport 7.0.4.3
Using reline 0.3.4
Using net-smtp 0.3.3
Using net-imap 0.3.4
Using irb 1.6.4
Using loofah 2.21.3
Using xpath 3.2.0
Using webdrivers 5.2.0
Using activemodel 7.0.4.3
Using rails-dom-testing 2.0.3
Using globalid 1.1.0
Using activerecord 7.0.4.3
Using debug 1.8.0
Using activejob 7.0.4.3
Using capybara 3.39.1
Using net-pop 0.1.2
Using rails-html-sanitizer 1.5.0
Using mail 2.8.1
Using actionview 7.0.4.3
Using actionpack 7.0.4.3
Using jbuilder 2.11.5
Using actioncable 7.0.4.3
Using activestorage 7.0.4.3
Using actionmailer 7.0.4.3
Using railties 7.0.4.3
Using actiontext 7.0.4.3
Using web-console 4.2.0
Using sprockets-rails 3.4.2
Using actionmailbox 7.0.4.3
Using importmap-rails 1.1.6
Using stimulus-rails 1.2.1
Using rails 7.0.4.3
Using turbo-rails 1.4.0
Bundle complete! 15 Gemfile dependencies, 72 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
         run  bundle binstubs bundler
       rails  importmap:install
Add Importmap include tags in application layout
      insert  app/views/layouts/application.html.erb
Create application.js module as entrypoint
      create  app/javascript/application.js
Use vendor/javascript for downloaded pins
      create  vendor/javascript
      create  vendor/javascript/.keep
Ensure JavaScript files are in the Sprocket manifest
      append  app/assets/config/manifest.js
Configure importmap paths in config/importmap.rb
      create  config/importmap.rb
Copying binstub
      create  bin/importmap
       rails  turbo:install stimulus:install
Import Turbo
      append  app/javascript/application.js
Pin Turbo
      append  config/importmap.rb
Enable redis in bundle
        gsub  Gemfile
         run  bundle install
Could not find gem 'redis (~> 4.0)' in locally installed gems.
Run `bundle install` to install missing gems.
Switch development cable to use redis
        gsub  config/cable.yml
Could not find gem 'redis (~> 4.0)' in locally installed gems.
Run `bundle install` to install missing gems.
$ echo $?
0
```

### System configuration
**Rails version**: 

```
$ rails -v
Rails 7.0.4.3
```

**Ruby version**:

```
$ ruby -v
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-darwin22]
```"
48277,Add 'back to top' links to all linked headings,msucorey,good first issue,2023-05-22T20:25:59Z,2023-06-01T16:12:14Z,2023-06-01T08:54:12Z,"### Steps to reproduce
1 . Enter into Rails Guides from a link like https://guides.rubyonrails.org/active_record_migrations.html#references.
2. Observe you are at the 'active_record_migrations' page with scroll to 'references'.
3. Observe there is no 'back to top' or similar link available to quickly get to the top of the page where the table of contents is.

### Expected behavior
A 'back to top' or similar navigation link is available.

### Actual behavior
No 'back to top' or similar navigation ink is available.

### Suggested implementation
`<a class=""anchorlink"" href=""#feature"">Back to Top</a>`

### System configuration
N/A
"
48276,Inconsistency between route helpers and url_for expectation in nested routes for resources with the same namespace,vzelenko,"actionpack, stale",2023-05-22T14:57:57Z,2023-12-17T19:11:14Z,2023-12-17T19:11:14Z,"> I'm not sure if this is actually an issue with rails or my misunderstanding of it.  To demonstrate the problem I would have to build a small version of the full application, and I'm happy to do that if requested.
>
> If the rails core team agrees this to be an actual issue, I'd be happy to make a PR.

### Problem Description
I have a model (RealEstate::Deal) that has another model (RealEstate::Payment) associated to it via `has_many`.  They both are stored in directory `app/real_estate/***` and have corresponding controllers.

I use nested routes like this:

```ruby
# config/routes.rb
Rails.application.routes.draw do
  namespace :real_estate do
    resources :deals do
      resources :payments
    end
  end
end
```

In the form for entering payment I must generate the `url` myself:

```erb
<!-- app/views/real_estate/payments/_form.html.erb -->
<% 
  url = @payment.persisted? ? 
          real_estate_deal_payment_path(@deal, @payment) : 
          real_estate_deal_payemnts_path(@deal) 
%>
<%= form_for [@deal, @payment], url: url do %>
  <%# irrelevant code %>
<% end %>
```


### Expected behavior
<!-- Tell us what should happen -->
```ruby
# url_helper generated from the route definition (`namespace :real_estate { resources :deals { resources :payments } }`):
real_estate_deal_payments_path(@deal) || real_estate_deal_payment_path(@deal, @payment) 

# url_helper EXPECTED by `url_for(@deal) || url_for(@deal, @payment)` (more specifically, form_for([@deal, @payment]):
real_estate_deal_payments_path(@deal) || real_estate_deal_payment_path(@deal, @payment) 
```

That is, when the namespace is the same for both objects, only apply it once to the generated url helper.

### Actual behavior
<!-- Tell us what happens instead -->

```ruby
# url_helper generated from the route definition (`namespace :real_estate { resources :deals { resources :payments } }`)
real_estate_deal_payments_path(@deal) || real_estate_deal_payment_path(@deal, @payment) 

# url_helper EXPECTED by `url_for(@deal) || url_for(@deal, @payment)` (more specifically, form_for([@deal, @payment]):
real_estate_deal_real_estate_payments_path(@deal) || real_estate_deal_real_estate_payment_path(@deal, @payment) 
```

### System configuration
**Rails version**:
Rails 7.0.4.3
**Ruby version**:
ruby 2.7.8p225 (2023-03-30 revision 1f4d455848) [x86_64-darwin22]
"
48255,Serialized columns with Hashes that contain Unicode characters have `changed?==true` without changes.,brphelps,"activerecord, attached PR",2023-05-19T20:15:54Z,2023-05-22T12:46:57Z,2023-05-22T12:44:21Z,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.blob :blob
  end
end

class Post < ActiveRecord::Base
  serialize :blob
end

UNICODE_CHAR = ""\u2022""

class BugTest < Minitest::Test
  def test_dirtiness
    post = Post.create!({blob: {thing: UNICODE_CHAR}})
    refute post.changed?
    post.blob
    refute post.changed?, ""reading a property should not cause the model to become dirty""
  end
end
```

### Expected behavior
The test should pass -- Namely, a model object should have `post.changed? == false` after reading a serialized column from the DB

### Actual behavior
`post.changed? == true`. 

This appears to be because reading the value causes the second part of https://github.com/rails/rails/blob/7c70791470fc517deb7c640bead9f1b47efb5539/activemodel/lib/active_model/attribute.rb#L68 to be hit (` type.changed_in_place?(original_value_for_database, value)`).   

It looks like this code (from [serialized.rb](https://github.com/rails/rails/blob/main/activerecord/lib/active_record/type/serialized.rb#LL66C10-L66C72)): 

Is not properly forcing encoding on the old value before comparison, and Unicode values result in escaped values on the newly encoded value but not on the old one. We end up comparing unencoded Unicode with encoded Unicode, and that always results in a `changed? == true` (as long as the property is read from the DB).  

I applied the following prepend in a monkey patch in an attempt to fix it, I don't know if there are side effects as a result: 
```ruby
  module InstanceMethods
    def changed_in_place?(raw_old_value, value)
      unless value.nil?
        raw_new_value = encoded(value)
        false if raw_old_value.nil? != raw_new_value.nil?
        if raw_new_value.present? && raw_new_value.encoding == Encoding::BINARY && raw_old_value.is_a?(ActiveModel::Type::Binary::Data)
          raw_old_value_s = raw_old_value.to_s
          raw_old_value_s.force_encoding(Encoding::BINARY) if raw_old_value_s.encoding == Encoding::UTF_8
        end
      end
      super(raw_old_value, value)
    end
  end
```

This code is mostly just trying to force binary encoding on the raw_old_value as well as the new, and is a little uglier because it's happening outside the native `changed_in_place?`

### System configuration
**Rails version**: 7.1.0.alpha

**Ruby version**: 3.1.3
"
48248,Rails 7.0: Double validation error for `validates_uniqueness_of` when attribute is encrypted,john-999,"activerecord, attached PR, encryption",2023-05-18T09:42:48Z,2023-09-25T11:50:09Z,2023-09-25T11:50:09Z,"### Steps to reproduce
In the `User` model, I have an attribute (`User.thing`) that is encrypted and has a uniqueness validation:

``` ruby
class User < ApplicationRecord

  encrypts :thing, deterministic: true, downcase: true
  
  validates :thing, uniqueness: true

end
```

When I attempt to trigger this validation error (by submitting a `User` with a value for this attribute that already exists in a different `User`), the uniqueness error message is displayed 2 times, instead of only once.

When I output and inspect this `User`'s errors in the log file, I see that 1 error message contains the **unencrypted** value, and 1 additional error messages are added for the **encrypted** value.

It looks like this:

``` ruby
#<ActiveModel::Errors [

#<ActiveModel::Error attribute=thing, type=taken, options={:value=>""my_test_string""}>, 
#<ActiveModel::Error attribute=thing, type=taken, options={:value=>""{\""p\"":\""35Q9AxGPf1w9uWS3lAkbXZULHiU=\"",\""h\"":{\""iv\"":\""XYR33B22apwOsVwP\"",\""at\"":\""on8mfHa5ePMUCgVjjn81oQ==\""}}""}>

]>
```
### Actual behavior
2 ""duplicate"" error messages are generated/displayed.

### Expected behavior
Only 1 error message should be generated/displayed.


### System configuration
- Ruby **3.0.1p64**
- Rails **7.0.4.3**
"
48242,Passing object with `id` in `where` parameters behaves differently in Rails 6.1 ,rahul342,"activerecord, stale",2023-05-17T04:56:30Z,2023-08-30T00:18:43Z,2023-08-30T00:18:43Z,"In Rails 6.1, if you have a PORO with a attr_reader `:id`, Rails will pick up the `id` as a parameter to SQL conditional clause vs using the defined serialization method (like defining `value_for_database`?), but for `inserts` it will still use your overridden serialization method.
This wasn't the case in Rails 6.0.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

Let's say I have this class
```ruby

#
# Table name: purchasable_items
#
#  id                  :integer          not null, primary key
#  name                :string(191)      not null
#  price_cents         :integer          not null
#  currency            :string(191)      not null
# index_purchasable_items_on_name_and_currency  (name,currency) UNIQUE
class PurchasableItem < ApplicationRecord
  enumerize :currency, in: [""USD"", ""KRW""], predicates: true
end
```
When the running the following code 

```ruby
2.times do |_|
 amount = Money.new(5000, 'KRW')
 PurchasableItem.find_or_create_by!(
      price_cents: amount.cents,
      currency: amount.currency,
      name: ""some_name"",
  )
end

```

In Rails 6.0, the following SQL queries are issued for mysql2 adapter
```sql
  [master] PurchasableItem Load (2.1ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'KRW' AND `purchasable_items`.`name` = 'some_name' LIMIT 1
  [master] (1.7ms)  BEGIN
  [master] PurchasableItem Create (2.4ms)  INSERT INTO `purchasable_items` (`name`, `price_cents`, `currency`) VALUES ('some_name', 5000, 'KRW')
  [master] (3.8ms)  COMMIT
  [master] PurchasableItem Load (1.8ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'KRW' AND `purchasable_items`.`name` = 'some_name' LIMIT 1
```
In Rails 6.1, the following SQL queries are issued for mysql2 adapter

```sql
PurchasableItem Load (4.9ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'krw' AND `purchasable_items`.`name` = 'some_name' LIMIT 1
TRANSACTION (2.1ms)  BEGIN
PurchasableItem Create (2.3ms)  INSERT INTO `purchasable_items` (`name`, `price_cents`, `currency`) VALUES ('some_name', 5000, 'KRW')
TRANSACTION (5.6ms)  COMMIT
PurchasableItem Load (1.8ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'krw' AND `purchasable_items`.`name` = 'some_name' LIMIT 1 
TRANSACTION (1.8ms)  BEGIN
PurchasableItem Create (4.4ms)  INSERT INTO `purchasable_items` (`name`, `price_cents`, `currency`) VALUES ('some_name', 5000, 'KRW')
TRANSACTION (2.8ms)  ROLLBACK
ActiveRecord::RecordNotUnique: Mysql2::Error: Duplicate entry 'some_name-KRW' for key 'index_purchasable_items_on_name_and_currency'
```
This example uses [enumerize](https://github.com/brainspec/enumerize) and [money](https://github.com/RubyMoney/money)
Here's the stacktrace from my local for Rails 6.0
```ruby
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/money-6.13.2/lib/money/currency.rb:364:in `to_s'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/enumerize-2.3.1/lib/enumerize/attribute.rb:44:in `find_value'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/enumerize-2.3.1/lib/enumerize/activerecord.rb:102:in `serialize'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activemodel-6.0.6.1/lib/active_model/attribute.rb:55:in `value_for_database'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/relation/query_attribute.rb:13:in `value_for_database'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/statement_cache.rb:53:in `map'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/statement_cache.rb:53:in `sql_for'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/statement_cache.rb:132:in `execute'"",
 ""/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/core.rb:214:in `find_by'""
```

I am not sure if this is internal API that was not supposed to be used.

### Expected behavior
<!-- Tell us what should happen -->
Ideally, IMO, for non-rails types Rails should either error or simply allow the user to define a way to cast value for database. I tried to read through the code and documentation, but couldn't find a recommended way to be able to pass custom objects to ActiveRecord methods.
Irrespectively, it looks the behavior varies for insert vs selects.

### Actual behavior
In Rails 6.1, if you have a PORO which has attr reader `:id`, Rails will pick up the `id` as a parameter to SQL conditional clause vs using the defined serialization method (like defining `value_for_database`), but for `inserts` it will still use your overridden serialization method.

### System configuration
**Rails version**:
Rails 6.0.6.1
enumerize-2.3.1
money-6.13.2

**Ruby version**:
ruby 3.0.5p211 (2022-11-24 revision ba5cf0f7c5) [x86_64-darwin22]"
48239,"1816 runs, 13154 assertions, 0 failures, 0 errors, 16 skips Using Zoneinfo DataSource: C:/projects/tzinfo/test/zoneinfo Run options: --verbose --seed 55622",Gutodotado24,more-information-needed,2023-05-16T18:30:26Z,2023-05-17T20:28:16Z,2023-05-17T20:28:16Z,"
### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
```

### Expected behavior
<!-- Tell us what should happen -->

### Actual behavior
<!-- Tell us what happens instead -->

### System configuration
**Rails version**:

**Ruby version**:
"
48236,Allow overriding of hard-coded `postgres` database in public schema configuration and improve error message when `postgres` database does not exist,tjjjwxzq,"activerecord, stale",2023-05-16T15:08:06Z,2023-08-28T22:38:49Z,2023-08-28T22:38:49Z,"### Context
In the event that you need to run rails db tasks against a postgresql server that does not have a `postgres` database, `rails db:drop` and `db:create` and any other db tasks that depend on them will fail and complain with misleading and confusing error messages. 

The root cause is the database `postgres` being hardcoded in the connection configuration: https://github.com/rails/rails/blob/d137b10f946ff78fac8fe203d5aeaf2bb4c3a1d9/activerecord/lib/active_record/tasks/postgresql_database_tasks.rb#L102-L104

when a `drop` or `create` is being attempted, but the error messages shown, especially for the `drop` command, are misleading and confusing since they either suggest a database that is actually present does not exist, or that the fault lies in the user's `config/database.yml` file, when neither is the case.

A proposal to fix this behaviour is:

1. When the `ActiveRecord::NoDatabaseError` is thrown because the connection to the `postgres` database fails, and not because the connection to the user's specified database to drop/create fails, improve the error message being shown to the user (this [line](https://github.com/rails/rails/blob/d137b10f946ff78fac8fe203d5aeaf2bb4c3a1d9/activerecord/lib/active_record/tasks/database_tasks.rb#L121-L124) for `create` and this [line](https://github.com/rails/rails/blob/d137b10f946ff78fac8fe203d5aeaf2bb4c3a1d9/activerecord/lib/active_record/tasks/database_tasks.rb#L208-L209) for `drop`)
 a. For `create`, the `ActiveRecord::NoDatabaseError` message ends up showing something like `We could not find your database: postgres. Which can be found in the database configuration file located at config/database.yml.` which is confusing to the user as the problem is not with anything in `config/database.yml`, but with the fact that the `postgres` database which rails assumes always exists does not exist
b. For `drop`, the messaage shown after `ActiveRecord::NoDatabaseError` is rescued misleads the user into thinking that the database that they tried to drop doesn't exist, when the error is actually raised because the code tries to connect to a non-existent `postgres` database
2. Allow users to override the default database these tasks connect to instead of hardcoding `postgres`. The improved error messages can then prompt the user to either 1) ensure that the `postgres` database exists, or 2) override the default database name when running those tasks. 

### Steps to reproduce for `db:drop`

Set up a PostgreSQL database that does not have a default `postgres` database. This can be done by explicitly dropping the `postgres` database with SQL commands, or using database providers such as DigitalOcean who do not create a `postgres` database by default (their default database is named `defaultdb`).

Attempt to run `./bin/rails db:drop` passing in the appropriate `DATABASE_URL`, say with a database called `my-db`. 

### Expected behavior
Complain that the `postgres` database does not exist and prompt user to create it or override the default database that the task connects to to carry out the drop operation on the specified database.

### Actual behaviour
This will complain: `Databse 'my-db' does not exist` and the database will fail to be dropped 

### Steps to reproduce for `db:create`
Attempt to run `./bin/rails db:create`, passing in the appropriate `DATABASE_URL`, say with a database called `my-db`. 

### Expected behavior
Complain that the `postgres` database does not exist and prompt user to create it or override the default database that the task connects to to carry out the create operation for the specified database, instead of suggesting that there is an error in the users `config/database.yml`

### Actual behaviour
This will throw an error:

```
We could not find your database: postgres. Which can be found in the database configuration file located at config/database.yml.

To resolve this issue:

- Did you create the database for this app, or delete it? You may need to create your database.
- Has the database name changed? Check your database.yml config has the correct database name.

To create your database, run:

        bin/rails db:create
Couldn't create 'my-db database. Please check your configuration.
rails aborted!
```

### System configuration
**Rails version**: 7.0.2.3

**Ruby version**: 3.1.1
"
48227,Wrong query generated when merging unscoping scopes with eager_loaded associations,pzac,"activerecord, With reproduction steps",2023-05-15T10:24:54Z,2023-08-27T23:11:02Z,,"Merging a scope that unscopes a default_scope also unscopes the conditions on eager_loaded associations with the same column name.

### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.datetime :deleted_at
  end

  create_table :posts, force: true do |t|
    t.integer :user_id
    t.datetime :deleted_at
  end
end

class User < ActiveRecord::Base
  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :user
  default_scope -> { where deleted_at: nil }
  scope :with_deleted, -> { unscope(where: :deleted_at) }
end

class BugTest < Minitest::Test
  def test_association_stuff
    active_user = User.create!
    former_user = User.create!(deleted_at: Time.new)

    active_user_post = Post.create!(user: active_user)
    active_user_deleted_post = Post.create!(user: active_user, deleted_at: Time.new)
    former_user_post = Post.create!(user: former_user)
    former_user_deleted_post = Post.create!(user: former_user, deleted_at: Time.new)

    assert_equal [active_user_post, former_user_post].to_set, Post.all.to_set # default_scope
    assert_equal [active_user, former_user].to_set, User.all.to_set

    assert_equal [active_user_post, former_user_post].to_set, Post.eager_load(:user).to_set
    assert_equal 4, Post.with_deleted.eager_load(:user).count


    # only current posts of active user
    assert_equal [active_user_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).to_set

    # all posts of active users - works
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.with_deleted.eager_load(:user).where(users: {deleted_at: nil}).to_set
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.unscope(where: :deleted_at).eager_load(:user).where(users: {deleted_at: nil}).to_set

    # with a left join - works
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.with_deleted.left_outer_joins(:user).merge(User.where(deleted_at: nil)).to_set

    # all posts of active users - doesn't work: removes the deleted_at condition from users
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).merge(Post.with_deleted).to_set
    # all posts of active users - doesn't work: removes the deleted_at condition from users
    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).merge(Post.unscope(where: :deleted_at)).to_set
  end
end

```

### Expected behavior
It should generate this SQL
```sql
SELECT ""posts"".""id"" AS t0_r0, ""posts"".""user_id"" AS t0_r1, ""posts"".""deleted_at"" AS t0_r2, 
""users"".""id"" AS t1_r0, ""users"".""deleted_at"" AS t1_r1 
FROM ""posts"" LEFT OUTER JOIN ""users"" ON ""users"".""id"" = ""posts"".""user_id"" WHERE ""users"".""deleted_at"" IS NULL
```

### Actual behavior
But actually generates
```sql
SELECT ""posts"".""id"" AS t0_r0, ""posts"".""user_id"" AS t0_r1, ""posts"".""deleted_at"" AS t0_r2, 
""users"".""id"" AS t1_r0, ""users"".""deleted_at"" AS t1_r1 
FROM ""posts"" LEFT OUTER JOIN ""users"" ON ""users"".""id"" = ""posts"".""user_id""
```
### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.2.2
"
48225,Duplicated `content-type` header with `rack` 2 (not with `rack` 3),stac47,"actionpack, attached PR",2023-05-14T15:25:14Z,2023-06-09T23:10:57Z,2023-06-09T23:10:27Z,"Hello,

Recently I opened a bug report (https://github.com/rails/rails/issues/47456) about duplicated HTTP headers when running with `RAILS_ENV=production`. At that time, a workaround was to downgrade rack from 3.x to 2.x.

After upgrade to the tip of main, now I can see duplicated headers `Content-Type` and `content-type` with different values.

If I upgrade from rack 2.x to 3.x, only the lower case `content-type` is filled. More precisely, at the time of writing, I have the bug with `rack` 2.2.7 and not with `rack` 3.0.7.

### Steps to reproduce

Create a new application:

```
%  rails new . --main
```
Add `gem ""rack"", ""< 3.0.0""` in the Gemfile and install:

```
% bundle install
```

Add a dummy controller and a view:

```
% bundle exec rails g controller posts
% cat app/controllers/posts_controller.rb
class PostsController < ApplicationController
  def index
  end
end
% cat app/views/posts/index.html.erb
<div>Hello World</div>
```

Also add a route to the index action of the posts_controller:

```
root ""posts#index""
```

Now let's run this in production mode:

```
% SECRET_KEY_BASE_DUMMY=1 RAILS_ENV=production bundle exec rails assets:precompile
I, [2023-05-14T16:41:07.031499 #97949]  INFO -- : Writing /Users/stac/development/reproducer-rails-headers/public/assets/application-37f365cbecf1fa2810a8303f4b6571676fa1f9c56c248528bc14ddb857531b95.js
[...]
% SECRET_KEY_BASE_DUMMY=1 RAILS_ENV=production bundle exec rails s
[...]
```

### Expected behavior

There should not be any duplicated `Content-Type`, `content-type` whatever the version of `rack` (well I think: I don't whether Rails 7.1.0 is planned to be rack 3.x only).

### Actual behavior

When no `Accept-Encoding` is passed, we have a duplicate `Content-Type` with same value:

```
% curl -I http://127.0.0.1:3000/assets/application-37f365cbecf1fa2810a8303f4b6571676fa1f9c56c248528bc14ddb857531b95.js
HTTP/1.1 200 OK
Last-Modified: Sun, 14 May 2023 14:41:07 GMT
Content-Type: application/javascript
content-type: application/javascript
vary: accept-encoding
Content-Length: 158
```

When we accept compression:

```
% curl -I http://127.0.0.1:3000/assets/application-37f365cbecf1fa2810a8303f4b6571676fa1f9c56c248528bc14ddb857531b95.js -H ""Accept-Encoding: gzip""
HTTP/1.1 200 OK
Last-Modified: Sun, 14 May 2023 14:41:07 GMT
Content-Type: application/x-gzip
content-type: application/javascript
vary: accept-encoding
content-encoding: gzip
Content-Length: 133
```

### System configuration
**Rails version**: Head of main branch
From the `Gemfile.lock`:
```
GIT
  remote: https://github.com/rails/rails.git
  revision: d1028617c5875c2da08007c5db37425481db6737
  branch: main
```

**Ruby version**: MRI 3.2.2
"
48219,Avoid database query if querying a not_null constrained column provided a nil value,wahabmangat,"activerecord, stale",2023-05-13T12:19:19Z,2023-09-16T08:16:19Z,2023-09-16T08:16:19Z,"Database queries should be avoided, if possible. One of the scenario is when we query a `not_null` constrained `column` to find let's say all the `users` with `id` null, `activerecord` should return `none` relation right away instead of first querying database underlying, avoiding unnecessary query. Similarly if the developer has added not_null constraint to any other column, the similar behaviour should be expected. 
### Steps to reproduce

`User.where(id: nil)` -> should return `User.none`
`User.find_by(id: nil)` -> should return `nil`


### System configuration
**Rails version 7.0.3**:
**Ruby version 3.0.1**:
"
48204,Upgrade to Rails 7.1 alpha breaks ActiveRecord attribute encryption (deterministic),bforma,"regression, activerecord, encryption",2023-05-12T08:53:47Z,2023-11-13T15:27:32Z,2023-06-26T11:25:40Z,"### Steps to reproduce
In Rails 7.0:

```ruby
create_table ""my_models"", force: :cascade do |t|
  t.string ""my_attribute""
end

class MyModel < ApplicationRecord
  encrypts :my_attribute, deterministic: true
end

MyModel.create!(my_attribute: ""my value"")

model = MyModel.last
model.my_attribute == ""my value"" # true
```

Upgrade to Rails 7.1-alpha and run:

```ruby
model = MyModel.last # raises exception
```

ActiveRecord encryption configuration has not changed in the meanwhile. I don't know with what version of Rails the ActiveRecord encryption configuration has been created. Only deterministically encrypted attributes seem to be affected by this. We also have non-deterministically encrypted attributes and those still work after upgrading to Rails 7.1-alpha.

### Expected behavior

Deterministically encrypted attribute should be decrypted properly.

### Actual behavior

An error is raised while attribute is being decrypted:

```ruby
/Users/someuser/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-403e4e5b5639/activerecord/lib/active_record/encryption/encryptor.rb:58:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/someuser/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-403e4e5b5639/activerecord/lib/active_record/encryption/cipher/aes256_gcm.rb:79:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)
/Users/someuser/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/bundler/gems/rails-403e4e5b5639/activerecord/lib/active_record/encryption/cipher/aes256_gcm.rb:75:in `final': OpenSSL::Cipher::CipherError
```

### System configuration
**Rails version**: 7.1.0-alpha

**Ruby version**: 3.2.1
"
48195,Cookies are being set incorrectly,obie,more-information-needed,2023-05-11T20:23:00Z,2023-12-02T18:58:51Z,2023-05-30T21:45:46Z,"Cookies are being sent wrapped in an array string, not in the correct format. Results in keys to cookies including an extraneous `[""` prefix that breaks querying later. First practical effect is breaking the establishment of current user identity in `ActionCable::Channel`

### Steps to reproduce
Set any cookie. Inspect response headers and cookie store in browser. Compare to behavior witih literally any other site on the web.

### Expected behavior

![image](https://github.com/rails/rails/assets/3908/65db8ab9-a8a9-4cca-b688-3fdbafb698c0)

### Actual behavior

![image](https://github.com/rails/rails/assets/3908/7e4f1d3d-5f1f-47a1-9d2f-8be1532b174f)

### System configuration
**Rails version**: 7.1.0.alpha

**Ruby version**: 3.2.2
"
48190,"attr_accessor conflicts with virtual attributes, clearing their value on queries",pjpires,activerecord,2023-05-11T12:22:53Z,2023-05-22T14:43:54Z,2023-05-22T14:43:54Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
Declaring an `attr_accessor` on a model makes it conflict with virtual attributes coming from an alias in a query made by ActiveRecord.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :users, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.integer :user_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class User < ActiveRecord::Base
  has_many :comments

  attr_accessor :comments_count
end

class Comment < ActiveRecord::Base
  belongs_to :post
  belongs_to :user
end

class BugTest < Minitest::Test
  def test_no_attr_accessor__works
    post = Post.create!
    post.comments << Comment.create!
    post.comments << Comment.create!

    posts = Post.joins(:comments)
                .select('COUNT(distinct comments.id) AS comments_count')
                .group(:id)

    assert_equal 2, posts.first.attributes['comments_count']
    assert_equal 2, posts.first.comments_count
  end

  def test_overlapping_attr_accessor__fails
    user = User.create!
    user.comments << Comment.create!
    user.comments << Comment.create!

    users = User.joins(:comments)
                .select('COUNT(distinct comments.id) AS comments_count')
                .group(:id)

    # works!
    assert_equal 2, users.first.attributes['comments_count']
    # fails!
    assert_equal 2, users.first.comments_count
  end
end

```

In our app this is making it impossible to mock a query object in a request spec, and return an array of built model instances with that field prefilled (because for that we would need an `attr_accessor`). It seems that declaring the `attr_accessor` nullifies the value returned by the virtual attribute - however, accessing it as `.attributes['my_alias']` will still work, despite being a more cumbersome way to read the value.

### Expected behavior
<!-- Tell us what should happen -->
Both ways of accessing the virtual attribute should return the aliased column value: `users.first.attributes['comments_count']` and `users.first.comments_count`.

### Actual behavior
<!-- Tell us what happens instead -->
Calling `users.first.comments_count` returns `nil` instead.

### System configuration
**Rails version**:
`main` / `7.0`

**Ruby version**:
`3.0`
"
48186,AnalyzeJob with vips fails (jpegload: parameter filename not set),kg-currenxie,"third party issue, stale",2023-05-10T12:56:56Z,2023-09-30T20:56:34Z,2023-09-30T20:56:34Z,"### Steps to reproduce
Upload a jpg file with a default ActiveStorage setup (but with AWS S3), with a normal form and `file_field`.

FYI: The image works fine to render after uploading in an `image_tag`

The blob's metadata becomes `{""identified"":true,""analyzed"":true}`

### Expected behavior
The analyze job should work, adding width and height metadata

### Actual behavior
Key line `
20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78] Skipping image analysis due to an Vips error: jpegload: parameter filename not set`
```
20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   S3 Storage (2705.0ms) Downloaded file from key: gmge8yk8zykhrtowf5shoi7hhpiz
20:23:53 web.1  |
20:23:53 web.1  | (process:53709): GLib-CRITICAL **: 20:23:53.676: g_datalist_id_set_data_full: assertion 'key_id > 0' failed
20:23:53 web.1  |
20:23:53 web.1  | (process:53709): GLib-GObject-CRITICAL **: 20:23:53.676: g_param_spec_pool_lookup: assertion 'pool != NULL' failed
20:23:53 web.1  |
20:23:53 web.1  | (process:53709): GLib-GObject-WARNING **: 20:23:53.676: g_object_set_is_valid_property: object class '(null)' has no property named 'filename'
20:23:53 web.1  |
20:23:53 web.1  | (process:53709): GLib-CRITICAL **: 20:23:53.676: g_datalist_id_set_data_full: assertion 'key_id > 0' failed
20:23:53 web.1  |
20:23:53 web.1  | (process:53709): GLib-GObject-CRITICAL **: 20:23:53.676: g_param_spec_pool_lookup: assertion 'pool != NULL' failed
20:23:53 web.1  |
20:23:53 web.1  | (process:53709): GLib-GObject-WARNING **: 20:23:53.676: g_object_set_is_valid_property: object class '(null)' has no property named 'access'
20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78] Skipping image analysis due to an Vips error: jpegload: parameter filename not set
20:23:53 web.1  |
20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   TRANSACTION (0.5ms)  BEGIN
20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   ActiveStorage::Blob Update (0.4ms)  UPDATE ""active_storage_blobs"" SET ""metadata"" = $1 WHERE ""active_storage_blobs"".""id"" = $2  [[""metadata"", ""{\""identified\"":true,\""analyzed\"":true}""], [""id"", ""f9d5e9e7-8882-4cc2-9078-e4cb878fae08""]]
20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   TRANSACTION (0.8ms)  COMMIT
20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78] Performed ActiveStorage::AnalyzeJob (Job ID: 2ab2d5d6-3997-415d-937e-19f6253b1e78) from Async(active_storage_analysis) in 4129.6ms
```

Looks like it comes from here:
https://github.com/rails/rails/blob/8d56a0e42f2dbee8c0d43db67501789c834fbc50/activestorage/lib/active_storage/analyzer/image_analyzer/vips.rb#L22

### System configuration
**Rails version**: 7.0.4.3
**Ruby version**: 3.1.4
**libvips**: vips-8.14.2 (brew install vips)
"
48173,Exception in ERB template does not render exception view properly,jasonkim,actionview,2023-05-09T02:36:42Z,2023-05-18T19:45:45Z,2023-05-18T19:45:45Z,"We've noticed that any error within the ERB template does not handle the error the same way as the error coming from controller. After some debugging, I noticed that there's an error thrown within [`create_template` call](https://github.com/rails/rails/blob/8226bba57f2dea0b97c02b4df4d0e9638644de03/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb#L77). From there, I found [this PR](https://github.com/rails/rails/pull/46171) that touched the relevant section. And validated the behavior with modified test below.

### Steps to reproduce

I've [changed the test scenario here](https://github.com/jasonkim/rails/commit/c7841c5e3acddaf046d0437a8011d1bd5e1573ae) to wrap the error case with noop if-statement, which should not change the behavior.
It changes the file `actionview/test/fixtures/test/runtime_error.html.erb` to
```erb
<h1>Oh no!</h1>
This template has a runtime error
<% if true %>
  <%= method_that_does_not_exist %>
<% end %>
Yikes!
```
This is used by the test `actionview/test/template/render_test.rb`

# Your reproduction script goes here
After making the above change (or checkout [this fork](https://github.com/jasonkim/rails)), run
```
cd actionview
bin/test test/template/render_test.rb
```

### Expected behavior
The test should pass

### Actual behavior
Test fails with error
```
Error:
LazyViewRenderTest#test_render_runtime_error:
RuntimeError: 
    /workspaces/rails/actionview/lib/action_view/template/handlers/erb.rb:113:in `find_offset'
    /workspaces/rails/actionview/lib/action_view/template/handlers/erb.rb:44:in `translate_location'
    /workspaces/rails/actionview/lib/action_view/template.rb:182:in `translate_location'
    /workspaces/rails/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:238:in `spot'
    /workspaces/rails/actionview/test/template/render_test.rb:220:in `test_render_runtime_error'


bin/test test/template/render_test.rb:212
```

### System configuration
**Rails version**:
main

**Ruby version**:
3.2
"
48172,"ActiveRecord::PredicateBuilder assumes all dot notation as ""table.column""",sholden,"activerecord, attached PR",2023-05-08T22:36:37Z,2023-05-11T04:34:18Z,2023-05-11T04:34:18Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""postgresql"", database: ""abp_backend_development"")

# This connection will do for database-independent bug reports.
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  drop_schema 'schema', if_exists: true
  create_schema 'schema'
  create_table 'schema.table', force: true do |t|
    t.string 'column'
  end
end

class Table < ActiveRecord::Base
  self.table_name = 'schema.table'
end

class BugTest < Minitest::Test
  def test_predicate_builder_reference
    assert_equal %w{schema.table}, ActiveRecord::PredicateBuilder.references(%w{schema.table.column})
  end

  def test_build_from_hash_with_schema
    builder = ActiveRecord::PredicateBuilder.new(Table.send(:table_metadata))
    assert_equal '""schema"".""table"".""column"" = ?', builder.build_from_hash(""schema.table.column"" => ""value"").first.to_sql
  end
end```

### Expected behavior
PredicateBuilder should recognize strings in the format ""schema.table.column""

### Actual behavior
The table name is recognized as ""schema""

### System configuration
**Rails version**: main

**Ruby version**: 3.2.0
"
48169,Unable to run rails from Procfile.dev,vasilevskykv,more-information-needed,2023-05-08T16:46:04Z,2023-06-23T22:56:50Z,2023-06-23T22:56:50Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
Install yarn
```npm install -g yarn```
```yarn set version berry```
Install rails
```gem install rails```
Create new rails project using command 
```rails new MyProject -T -css bootstrap -j esbuild```
Install bootstrap:
```rails css:install:bootstrap```

Create **start.cmd** file with the following contents:
```ruby
foreman start -f Procfile.dev
```
Run ```start.cmd``` 
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
**Procfile.dev**
```ruby
web: unset PORT && bin/rails server
js: yarn build --watch
css: yarn build:css --watch
```

### Expected behavior
Normal running of the rails server

### Actual behavior
<!-- Tell us what happens instead -->
19:33:13 web.1  | started with pid 25644
19:33:13 js.1   | started with pid 28396
19:33:13 css.1  | started with pid 20436
19:33:13 web.1  | ""unset"" �� ���� ����७��� ��� ���譥�
19:33:13 web.1  | ��������, �ᯮ��塞�� �ணࠬ��� ��� ������ 䠩���.
19:33:14 web.1  | exited with code 1
19:33:14 system | sending SIGTERM to all processes
C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/engine.rb:201:in `kill': Invalid argument (Errno::EINVAL)
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/engine.rb:201:in `kill_children'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/engine.rb:473:in `terminate_gracefully'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/engine.rb:439:in `wait_for_shutdown_or_child_termination'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/engine.rb:60:in `start'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/cli.rb:42:in `start'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/vendor/thor/lib/thor/command.rb:27:in `run'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/vendor/thor/lib/thor/invocation.rb:126:in `invoke_command'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/vendor/thor/lib/thor.rb:369:in `dispatch'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/lib/foreman/vendor/thor/lib/thor/base.rb:444:in `start'
        from C:/Ruby32-x64/lib/ruby/gems/3.2.0/gems/foreman-0.87.2/bin/foreman:7:in `<top (required)>'
        from C:/Ruby32-x64/bin/foreman:32:in `load'
        from C:/Ruby32-x64/bin/foreman:32:in `<main>'
### System configuration
**Operation system**:
Windows 10
**Rails version**:
7.0.4.3
**Ruby version**:
ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x64-mingw-ucrt]"
48164,ActiveRecord Transaction Unexpectedly Left Open,nicholasdower,activerecord,2023-05-08T05:51:18Z,2023-05-14T06:24:08Z,2023-05-14T02:48:33Z,"Dear Rails folks,

I recently encountered an issue where an error occurred during an ActiveRecord transaction and the transaction was not successfully rolled back. During subsequent requests which reused this connection, writes were silently added to the previous transaction without being committed. Eventually, the connection was closed and all of the writes were discarded.

I found that a similar issue was addressed in https://github.com/rails/rails/pull/40541, but I believe it is still possible for a connection to get into an unexpected state when, for instance:
- Committing a transaction raises, then rolling it back raises.
- Rolling back a transaction raises, then discarding the connection raises.
- Beginning a transaction succeeds but the begin method raises.

Once a connection gets into such a state, I believe the following unexpected outcomes are possible:
- Previous writes, which should have been rolled back, are actually committed.
- Subsequent writes on the connection appear to succeed but are eventually discarded when the connection is closed.
- Subsequent writes on the connection appear to succeed but are actually pending until a new transaction is committed.

FYI, I have proposed an improvement in #48200 (Previously #48165).

### Steps to reproduce
```ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'activerecord', '7.0.4.3'
  gem 'minitest-reporters'
  gem 'mysql2'
end

require 'active_record'
require 'logger'
require 'minitest/autorun'
require 'minitest/reporters'

Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new()]

# Using the MySQL DB used by the repo unit tests.
ActiveRecord::Base.establish_connection(
  adapter:             'mysql2',
  host:                '127.0.0.1',
  port:                3306,
  username:            'root',
  database:            'activerecord_unittest',
  prepared_statements: false
)

ActiveRecord::Base.logger = Logger.new(STDOUT)

class Topic < ActiveRecord::Base; end

class OpenTransactionsTest < Minitest::Test
  def self.test_order; :alpha;end

  def setup
    ActiveRecord::Schema.define do
      create_table :topics, force: true do |t|
         t.string :title
         t.string :author_name
      end
    end
    Topic.create(id: 1, title: 'Original title', author_name: 'Original author')
  end

  # Test for the case where a rollback fails, then we fail to discard the transaction. The
  # transaction is unexpectedly left open and will be committed if another transaction is
  # attempted on the same connection.
  #
  # Output:
  #   Topic Load (0.4ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   TRANSACTION (0.1ms)   BEGIN
  #   Topic Update (0.3ms)  UPDATE `topics` SET `topics`.`title` = 'Updated title' WHERE `topics`.`id` = 1
  #   Topic Load (0.1ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   SQL (11.6ms)          SELECT title from topics where id = 1
  #   TRANSACTION (0.5ms)   BEGIN
  #   Topic Update (0.9ms)  UPDATE `topics` SET `topics`.`author_name` = 'Updated author' WHERE `topics`.`id` = 1
  #   TRANSACTION (0.4ms)   COMMIT
  #   Topic Load (0.7ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  def test_aborted_transaction_committed_when_rollback_raises_and_throw_away_raises
    connection = Topic.connection
    topic = Topic.find(1)

    # Update rollback_db_transaction to raise.
    Topic.connection.singleton_class.class_eval do
      alias :real_rollback_db_transaction :rollback_db_transaction
      define_method(:rollback_db_transaction) do
        raise 'rollback failed'
      end
    end

    # Update throw_away! to raise. Maybe unlikely, but possible.
    Topic.connection.singleton_class.class_eval do
      alias :real_throw_away! :throw_away!
      define_method(:throw_away!) do
        raise 'throw away failed'
      end
    end

    # Start a transaction, update a record, then roll back. The rollback and connection removal will fail.
    exception = assert_raises(RuntimeError) do
      ActiveRecord::Base.transaction do
        topic.update(title: 'Updated title')
        raise ActiveRecord::Rollback
      end
    end
    assert_equal ""throw away failed"", exception.message
    assert connection.active?
    assert Topic.connection_pool.connections.include?(connection)

    # Any requests reusing the connection will see the uncommitted data.
    assert_equal 'Updated title', topic.reload.title

    # Any requests using a different connection will not see the uncommitted data.
    persisted_title = ActiveRecord::Base.connection_pool.checkout.exec_query(
      ""SELECT title from topics where id = #{topic.id}""
    ).first['title']
    assert_equal 'Original title', persisted_title

    # Perform a new transaction. This will also commit the previously uncommitted changes.
    ActiveRecord::Base.transaction do
      topic.update(author_name: 'Updated author')
    end

    # Discard the connection to ensure anything we read was actually written to the database.
    Topic.connection.real_throw_away!

    # Both transactions were committed.
    assert_equal 'Updated title', topic.reload.title
    assert_equal 'Updated author', topic.author_name
  ensure
    ActiveRecord::Base.connection_handler.clear_all_connections!(:all)
  end

  # Test for the case where a commit fails, then the rollback fails. The transaction is
  # unexpectedly left open and will be committed if another transaction is attempted on
  # the same connection.
  #
  # Output:
  #   Topic Load (0.4ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   TRANSACTION (0.1ms)   BEGIN
  #   Topic Update (0.8ms)  UPDATE `topics` SET `topics`.`title` = 'Updated title' WHERE `topics`.`id` = 1
  #   Topic Load (0.2ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   SQL (14.2ms)          SELECT title from topics where id = 1
  #   TRANSACTION (0.5ms)   BEGIN
  #   Topic Update (0.2ms)  UPDATE `topics` SET `topics`.`author_name` = 'Updated author' WHERE `topics`.`id` = 1
  #   TRANSACTION (0.4ms)   COMMIT
  #   Topic Load (0.2ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  def test_failed_transaction_committed_when_commit_raises_and_rollback_raises
    connection = Topic.connection
    topic = Topic.find(1)

    # Update commit_db_transaction to raise the first time it is called.
    Topic.connection.singleton_class.class_eval do
      alias :real_commit_db_transaction :commit_db_transaction
      define_method(:commit_db_transaction) do
        unless @ran_once
          @ran_once = true
          raise 'commit failed'
        end
        real_commit_db_transaction
      end
    end

    # Update rollback_transaction to raise.
    Topic.connection.transaction_manager.singleton_class.class_eval do
      alias :real_rollback_transaction :rollback_transaction
      define_method(:rollback_transaction) do |*_args|
        raise 'rollback failed'
      end
    end

    # Start a transaction and update a record. The commit and rollback will fail.
    exception = assert_raises(RuntimeError) do
      ActiveRecord::Base.transaction do
        topic.update(title: 'Updated title')
      end
    end
    assert_equal ""rollback failed"", exception.message
    assert connection.active?
    assert Topic.connection_pool.connections.include?(connection)

    # Any request reusing the connection will see the uncommitted data.
    assert_equal 'Updated title', topic.reload.title

    # Any requests using a different connection will not see the uncommitted data.
    persisted_title = ActiveRecord::Base.connection_pool.checkout.exec_query(
      ""SELECT title from topics where id = #{topic.id}""
    ).first['title']
    assert_equal 'Original title', persisted_title

    # Perform a new transaction. This will also commit the previously uncommitted changes.
    ActiveRecord::Base.transaction do
      topic.update(author_name: 'Updated author')
    end

    # Discard the connection to ensure anything we read was actually written to the databse.
    Topic.connection.throw_away!

    # Both transactions were committed.
    assert_equal 'Updated title', topic.reload.title
    assert_equal 'Updated author', topic.author_name
  ensure
    ActiveRecord::Base.connection_handler.clear_all_connections!(:all)
  end

  # Test for the case where a rollback fails, then we fail to discard the transaction. The
  # transaction is unexpectedly left open, allowing subsequent transactions to be silently
  # discarded.
  #
  # Output:
  #   Topic Load (0.2ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   TRANSACTION (0.1ms)   BEGIN
  #   Topic Update (0.2ms)  UPDATE `topics` SET `topics`.`title` = 'Updated title' WHERE `topics`.`id` = 1
  #   Topic Load (0.2ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   SQL (11.1ms)          SELECT title from topics where id = 1
  #   Topic Update (0.2ms)  UPDATE `topics` SET `topics`.`author_name` = 'Updated author' WHERE `topics`.`id` = 1
  #   Topic Load (0.3ms)    SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  def test_subsequent_transaction_silently_discarded_after_rollback_raises_and_throw_away_raises
    connection = Topic.connection
    topic = Topic.find(1)

    # Update rollback_transaction to raise.
    Topic.connection.transaction_manager.singleton_class.class_eval do
      alias :real_rollback_transaction :rollback_transaction
      define_method(:rollback_transaction) do
        raise 'rollback failed'
      end
    end

    # Update throw_away! to raise. Maybe unlikely, but possible.
    Topic.connection.singleton_class.class_eval do
      alias :real_throw_away! :throw_away!
      define_method(:throw_away!) do
        raise 'throw away failed'
      end
    end

    # Start a transaction, update a record, then roll back. The rollback and connection removal will fail.
    exception = assert_raises(RuntimeError) do
      ActiveRecord::Base.transaction do
        topic.update(title: 'Updated title')
        raise ActiveRecord::Rollback
      end
    end
    assert_equal ""throw away failed"", exception.message
    assert connection.active?
    assert Topic.connection_pool.connections.include?(connection)

    # Any request reusing the connection will see the uncommitted data.
    assert_equal 'Updated title', topic.reload.title

    # Any requests using a different connection will not see the uncommitted data.
    persisted_title = ActiveRecord::Base.connection_pool.checkout.exec_query(
      ""SELECT title from topics where id = #{topic.id}""
    ).first['title']
    assert_equal 'Original title', persisted_title

    # Perform a new transaction. This will not be committed because we are still in the previous transaction.
    ActiveRecord::Base.transaction do
      topic.update(author_name: 'Updated author')
    end

    # Discard the connection to ensure anything we read was actually written to the databse.
    Topic.connection.real_throw_away!

    # Nothing was committed.
    assert_equal 'Original title', topic.reload.title
    assert_equal 'Original author', topic.author_name
  ensure
    ActiveRecord::Base.connection_handler.clear_all_connections!(:all)
  end

  # Test for the case where beginning a transaction succeeds, but then the begin method
  # raises. The transaction is unexpectedly left open, allowing subsequent writes to
  # silently fail.
  #
  # Output:
  #   Topic Load (0.2ms)   SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   TRANSACTION (0.1ms)  BEGIN
  #    (0.2ms)             UPDATE topics SET title = 'Updated title' WHERE id = 1;
  #   Topic Load (0.2ms)   SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  #   SQL (12.6ms)         SELECT title from topics where id = 1
  #   Topic Load (0.3ms)   SELECT `topics`.* FROM `topics` WHERE `topics`.`id` = 1 LIMIT 1
  def test_write_silently_discarded_after_beginning_a_transaction_then_raising
    connection = Topic.connection
    topic = Topic.find(1)

    # Disable lazy transactions so that we will begin a transaction immediately, before writing.
    connection.disable_lazy_transactions!

    # Update begin_transaction to raise after successfully beginning a transaction.
    Topic.connection.transaction_manager.singleton_class.class_eval do
      alias :real_begin_transaction :begin_transaction
      define_method(:begin_transaction) do |*_args|
        real_begin_transaction
        raise 'begin failed'
      end
    end

    # Begin a transaction. This will raise but no rollback will be performed and the connection will not be removed.
    exception = assert_raises(RuntimeError) do
      ActiveRecord::Base.transaction { }
    end
    assert_equal ""begin failed"", exception.message
    assert connection.active?
    assert Topic.connection_pool.connections.include?(connection)

    # Use the connection to execute a statement. Since we are still in a transaction, this will not be committed.
    Topic.connection.execute(""UPDATE topics SET title = 'Updated title' WHERE id = #{topic.id};"")

    # Any request reusing the connection will see the uncommitted data.
    assert_equal 'Updated title', topic.reload.title

    # Any requests using a different connection will not see the uncommitted data.
    persisted_title = ActiveRecord::Base.connection_pool.checkout.exec_query(
      ""SELECT title from topics where id = #{topic.id}""
    ).first['title']
    assert_equal 'Original title', persisted_title

    # Discard the connection.
    Topic.connection.throw_away!

    # Nothing was committed.
    assert_equal 'Original title', topic.reload.title
  ensure
    ActiveRecord::Base.connection_handler.clear_all_connections!(:all)
  end
end
```

### Expected behavior
A connection should not be reused if an error occurs which may have left it in transaction.

### Actual behavior
A connection is reused after an error occurs which may have left it in a transaction.

### System configuration
**Rails version**: `7.1.0-alpha`

**Ruby version**: `ruby 3.0.5p211 (2022-11-24 revision ba5cf0f7c5) [x86_64-darwin22]`
"
48156,High allocation overhead due to details_cache_key,headius,actionview,2023-05-07T03:33:18Z,2023-05-08T04:18:46Z,2023-05-08T02:25:37Z,"I have been profiling JRuby on Rails, in particular looking for excess object allocations, and one method from Rails seems to consistently be in the top five allocation sites: the hash dup in `details_cache_key`.

https://github.com/rails/rails/blob/08a18c75ff1a2d8f20e64f9935dd118f47358662/actionview/lib/action_view/lookup_context.rb#L65-L71

If I'm understanding this code right, it's using a Hash as a key to look up the correct view for a given request. In my benchmarks, it appears to follow this ""formats"" path, duping the Hash and adding an additional format (I think?).

This dup accounts for anywhere from 10-15% of all object allocations in one profile I took. It varies, but it's clearly allocating a lot of objects.

Is there a lighter-weight way to generate such a key? Is there something I can change in my application or benchmark to avoid this `formats` dup? "
48149,`String#blank?` raises when called on strings with invalid encoding,ghiculescu,activesupport,2023-05-06T07:39:14Z,2023-05-16T08:17:34Z,2023-05-16T06:12:14Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_blank_encodings
    raised = Encoding.list.select do |encoding|
      s1 = (+""foo_#{encoding.name.underscore}"").force_encoding(encoding)
      s2 = (+"""").force_encoding(encoding)

      begin
        s1.blank?
        s2.blank?
        false
      rescue
        true
      end
    end

    assert_equal 0, raised.length, raised
  end
end
```

### Expected behavior
Test should pass. `String#blank?` shouldn't raise when trying to check a regex.

### Actual behavior
`String#blank?` raises with the following encodings:

`
[#<Encoding:UTF-16BE>, #<Encoding:UTF-16LE>, #<Encoding:UTF-32BE>, #<Encoding:UTF-32LE>, #<Encoding:UTF-16 (dummy)>, #<Encoding:UTF-32 (dummy)>, #<Encoding:IBM037 (dummy)>, #<Encoding:ISO-2022-JP (dummy)>, #<Encoding:ISO-2022-JP-2 (dummy)>, #<Encoding:CP50220 (dummy)>, #<Encoding:CP50221 (dummy)>, #<Encoding:UTF-7 (dummy)>, #<Encoding:ISO-2022-JP-KDDI (dummy)>]
`

My read of https://github.com/rails/rails/pull/31049 and https://github.com/rails/rails/issues/28953 is that we want the method to work with *any* encoding.

### System configuration
**Rails version**: `main`

**Ruby version**: Same results in 2.7.3 and 3.1.3
"
48135,Race condition with chmod when creating master.key file,hannob,"railties, attached PR",2023-05-05T07:28:41Z,2023-05-11T20:55:17Z,2023-05-11T20:55:17Z,"The file railties/lib/rails/generators/rails/encryption_key_file/encryption_key_file_generator.rb contains this code:
```
      def add_key_file_silently(key_path, key = nil)
        create_file key_path, key || ActiveSupport::EncryptedFile.generate_key
        key_path.chmod 0600
      end
```

This code is used to create the master.key file. This is insecure, as it first creates the file with the key world readable and only afterwards changes the permissions.

An unprivileged user on the same system may exploit this to read the master.key during creation. I have created a proof of concept to attack such vulnerabilities, which can be found here: https://github.com/hannob/fpracer

To exploit / illustrate the issue:

* As one user run something like:
  ```
  ./fpracer /tmp/test/blog/config/master.key
  ```
* As another user run:
  ```
  mkdir /tmp/test
  cd /tmp/test
  rails new blog
  ```

The fpracer script will output the content of the newly generated master.key.

Exploiting this requires a user account on the same system and knowledge by the attacker about the directory structure, and read access to the upper directory. So there are a few conditions needed for this to be exploitable, which reduces impact. Anyway, this is still obviously not right and should be fixed.

I originally reported this via Hackerone, but was asked to put it on the public issue tracker. I had a first patch using chmod, but that is, as I learned, problematic, as it would affect the whole process, potentially interferring with other threads."
48119,`add_column`/`remove_column` not reversing the `if_exists`/`if_not_exists` args.,silva96,activerecord,2023-05-03T13:46:55Z,2023-05-04T09:11:35Z,2023-05-04T09:11:34Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
class AddFooToBar < ActiveRecord::Migration[7.0]
  def change
    add_column :bar, :foo, :string, if_not_exists: true
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->
When migrating it calls the `add_column` command with `if_not_exists: true` argument.
When rollbacking the migration it should call `remove_column` with the argument `if_exists: true` 
### Actual behavior
<!-- Tell us what happens instead -->
It calls the `remove_column` command with the same  `if_not_exists: true` argument that was originally passed to `add_column`, which is not used by the `remove_column` command. 

This could lead to a database migration error if the column was already removed.

```
*** ActiveRecord::StatementInvalid Exception: Mysql2::Error: Can't DROP 'foo'; check that column/key exists
```

In general, when you add `if_not_exists: true` it is because you want to be sure the migration does not fail in certain fail scenarios, so the same should be the case when reverting the migrations.

### System configuration
**Rails version**:  7.0.4.3 

**Ruby version**: 3.2.2
"
48118,ActiveSupport::MessageEncryptor migration path to 7.1 defaults,etiennebarrie,activesupport,2023-05-03T13:22:44Z,2023-05-08T18:41:08Z,2023-05-08T18:41:07Z,"### Steps to reproduce
* With a 7.0 app, generate a encrypted message with ActiveSupport::MessageEncryptor.
* Upgrade the app 7.1 keeping 7.0 defaults: you can decode the message, generate a new message.
* Use the 7.1 defaults: you can't decode the message.

I created a [small example app](https://github.com/etiennebarrie/rails-app/tree/message-encryptor-7.1-compat) which you can clone with `git clone https://github.com/etiennebarrie/rails-app.git --single-branch --branch message-encryptor-7.1-compat`. With this app, the steps are:

```sh-session
$ bundle
$ bin/rails server
# navigate to http://127.0.0.1:3000/
# optionally click ""Verify"" to ensure the message roundtrip works on 7.0
# keep the window open to verify a 7.0 message with 7.1
$ BUNDLE_GEMFILE=Gemfile.main bundle
$ BUNDLE_GEMFILE=Gemfile.main bin/rails s
# now click ""Verify"" to verify the 7.0 generated message with 7.1 with 7.0 defaults
# it works!
# keep the window open
$ RAILS_71_DEFAULTS=1 BUNDLE_GEMFILE=Gemfile.main bin/rails s
# click ""Verify""
# verification failed
```

I know there are more steps mentioned in https://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html, but out-of-the-box this should work. Instead multiple steps are necessary.

### Expected behavior
The application is upgraded and the message should be verified.

### Actual behavior
Message verification fails.

---

For each line in these tables, you should check what is generated and the fact that it is verifiable by the line above and the line below.
The approach right now can be resumed to this:

| Application configuration | Generation | Can verify Marshal | Can verify JSON |
|--------|--------|--------|--------|
| 7.0 | Marshal | ✓ | 𐄂 |
| 7.1 with 7.0 defaults  | Marshal | ✓ | 𐄂 |
| 7.1 with 7.1 defaults | JSON | 𐄂 | ✓ | 

We can see the incompatibility by looking at what each steps generates and what each next step can verify. The step 2 to 3 is incompatible.

The approach recommended in the upgrading guide:

| Application configuration | Generation | Can verify Marshal | Can verify JSON |
|--------|--------|--------|--------|
| 7.0 | Marshal | ✓ | 𐄂 |
| 7.1 with 7.0 defaults, default_message_encryptor_serializer = :marshal | Marshal | ✓ | 𐄂 |
| 7.1 with 7.0 defaults, default_message_encryptor_serializer = :hybrid | Marshal | ✓ | ✓ |
| 7.1 with 7.1 defaults, default_message_encryptor_serializer = :hybrid, use_marshal_serialization = false | JSON | ✓ | ✓ | 
| 7.1 with 7.1 defaults | JSON | 𐄂 | ✓ | 

This shows it's compatible, but adds multiple steps to the upgrade. The second step is not necessary, but still described in the upgrading guide.

What I think we should do, in line with the way we usually use defaults:

| Application configuration | Generation | Can verify Marshal | Can verify JSON |
|--------|--------|--------|--------|
| 7.0 | Marshal | ✓ | 𐄂 |
| 7.1 with 7.0 defaults | Marshal | ✓ | ✓ |
| 7.1 with 7.1 defaults | JSON | ✓ | ✓ | 
| 7.1 with 7.1 defaults, default_message_encryptor_serializer = :json | JSON | 𐄂 | ✓ | 

That last line, with `default_message_encryptor_serializer = :json` can become the default in 7.2, and can be enabled earlier to make sure no Marshal is accepted before then.
"
48105,IRB can't save history with default Dockerfile file perms,northeastprince,attached PR,2023-05-01T23:17:12Z,2023-05-08T06:08:01Z,2023-05-08T06:08:01Z,"IRB (and as such `rails console`) tries to save commands run during a session to `.irb_history` upon exit. However, because of the [default Dockerfile](https://github.com/rubys/rails/blob/main/railties/lib/rails/generators/rails/app/templates/Dockerfile.tt) now included in new Rails apps, permissions are locked down to the extent that files can't be managed in the root directory, raising an error every time someone `exit`s a console."
48098,Request for documentation of PostgreSQL `numeric` type,peterbecich,"docs, more-information-needed",2023-04-30T05:30:05Z,2023-05-22T05:36:20Z,2023-05-22T05:36:20Z,"PostgreSQL supports a `numeric` datatype. It takes two optional arguments:

```
NUMERIC(precision, scale)
```
https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL

Active Record already supports this type:
https://github.com/rails/rails/blob/912096d4ce930b8e7e5d91e0c86bae2091fda0e4/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L646C7-L664

However, `numeric` is not included in the ""Active Record and PostgreSQL"" documentation: https://guides.rubyonrails.org/active_record_postgresql.html

Can it be included?

----------------------

I am not certain the Active Record support for this `NUMERIC(precision, scale)` type is working correctly. The arguments may be thrown away, and the PostgreSQL type created is the ""unconstrained numeric"" datatype. Or I may just be using Active Record incorrectly.

Thank you"
48094,unscope not working when where by tripe dot range,ippachi,"activerecord, attached PR",2023-04-29T07:34:00Z,2023-09-04T08:17:33Z,2023-09-04T08:17:32Z,"### Steps to reproduce
1. `where` by triple dot range
2. unscope 1.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_association_stuff
    Post.create!(id: 1)
    Post.create!(id: 2)
    Post.create!(id: 3)

    assert_equal 3, Post.where(id: 1..2).unscope(where: :id).count # double dot is working
    assert_equal 3, Post.where(id: 1...2).unscope(where: :id).count # triple dot is not working
  end
end
```

### Expected behavior
`Post.where(id: 1...2).unscope(where: :id)` returns `3`

### Actual behavior
`Post.where(id: 1...2).unscope(where: :id)` returns `1`

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.2.2
"
48080,Broken order(...).includes(...).ids in PostgreSQL,alpaca-tc,"activerecord, With reproduction steps",2023-04-27T15:40:02Z,2023-05-03T13:33:11Z,2023-05-03T13:33:11Z,"### Steps to reproduce

This bug was introduced by a change to exclude duplicate rows from the id. https://github.com/rails/rails/pull/46503
A `DISTINCT` clause has been added to avoid duplication, but this is an error because the implementation does not consider the case where an `ORDER(column_other_than_pk)` clause exists.

I tried to fix it, but couldn't figure out how to fix it.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""pg""
end

require 'active_record'
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
begin
  config = { adapter: ""postgresql"", encoding: 'unicode', url: ""postgresql://postgres@localhost:5432"", password: 'postgres', database: 'rails-test' }
  ActiveRecord::Base.establish_connection(config.except(:database))
  ActiveRecord::Base.connection.drop_database(config[:database]) rescue nil
  ActiveRecord::Base.connection.create_database(config[:database])
end

ActiveRecord::Base.establish_connection(config)

ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.timestamps
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_includes_ids
    Post.order(:created_at).includes(:comments).ids
  end
end
```

### Expected behavior

no exception

### Actual behavior

```
ActiveRecord::StatementInvalid: PG::InvalidColumnReference: ERROR: for SELECT DISTINCT, ORDER BY expressions must appear in select list
```

### System configuration
**Rails version**: main

**Ruby version**:
"
48077,has_one associated object saved twice and clears saved_changes ,briu,"activerecord, attached PR",2023-04-27T08:34:19Z,2023-11-13T18:10:58Z,,"### Steps to reproduce
```
begin
  require ""bundler/inline""
rescue LoadError => e
  $stderr.puts ""Bundler version 1.10 or later is required. Please update your Bundler""
  raise e
end

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users do |t|
    t.integer :published_posts_count, default: 0
    t.timestamps
  end

  create_table :posts do |t|
    t.integer :user_id
    t.integer :poll_id
    t.string :title
    t.string :status, default: 'unreleased'
    t.datetime :release_at
    t.timestamps
  end

  create_table :polls do |t|
    t.boolean :multiple
    t.timestamps
  end
end

class User < ActiveRecord::Base
  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :user
  belongs_to :poll

  after_commit :test_after_commit
  # after_save :test_after_commit saved_changes here are exists
  after_save :test_after_save

  attr_reader :after_save_counter

  def test_after_commit
    # saved_changes here are blank
    if saved_change_to_status?(to: 'published')
      user.increment(:published_posts_count)
    end
  end

  def test_after_save
    # invokes twice when saved with belongs_to association
    @after_save_counter ||= 0
    @after_save_counter += 1
  end
end

class Poll < ActiveRecord::Base
  has_one :post
end

class BugTest < Minitest::Test
  def setup
    Post.destroy_all
    Poll.destroy_all
  end

  def test_creating_post_with_poll_and_poll_options
    user = User.create

    post = Post.new(
      user: user,
      title: 'yoyo',
      status: 'published'
    )

    post.poll = Poll.new(multiple: true)

    post.save

    # after_save invokes twice
    assert_equal 2, post.after_save_counter
    assert_equal 1, user.published_posts_count
  end

  def test_creating_post_with_poll_only
    user = User.create

    post = Post.new(user: user, title: 'yoyo', status: 'published')
    post.save

    # after_save invokes once as expected
    assert_equal 1, post.after_save_counter
    assert_equal 1, user.published_posts_count
  end
end
```

### Expected behavior
`post.saved_changes` are available in `after_commit` callback, also after_save callback invokes only once

### Actual behavior
`post.saved_changes` are blank in `after_commit` callback

### System configuration
**Rails version**: main branch

**Ruby version**:  `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]`
"
48076,Rails new command not working with -j esbuild --css bootstrap,overdrivemachines,"asset pipeline, more-information-needed",2023-04-27T06:43:32Z,2023-06-07T08:42:33Z,2023-05-31T21:24:30Z,"### Steps to reproduce

```sh
rails new bs_demo -j esbuild --css bootstrap
```

### Expected behavior
New app should be created without any errors.

### Actual behavior

See the error in the last few lines:

```
      create  
      create  README.md
      create  Rakefile
      create  .ruby-version
      create  config.ru
      create  .gitignore
      create  .gitattributes
      create  Gemfile
         run  git init from "".""
Initialized empty Git repository in /home/dipen/Desktop/workspace/bs_demo/.git/
      create  app
      create  app/assets/config/manifest.js
      create  app/assets/stylesheets/application.css
      create  app/channels/application_cable/channel.rb
      create  app/channels/application_cable/connection.rb
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/jobs/application_job.rb
      create  app/mailers/application_mailer.rb
      create  app/models/application_record.rb
      create  app/views/layouts/application.html.erb
      create  app/views/layouts/mailer.html.erb
      create  app/views/layouts/mailer.text.erb
      create  app/assets/images
      create  app/assets/images/.keep
      create  app/controllers/concerns/.keep
      create  app/models/concerns/.keep
      create  bin
      create  bin/rails
      create  bin/rake
      create  bin/setup
      create  config
      create  config/routes.rb
      create  config/application.rb
      create  config/environment.rb
      create  config/cable.yml
      create  config/puma.rb
      create  config/storage.yml
      create  config/environments
      create  config/environments/development.rb
      create  config/environments/production.rb
      create  config/environments/test.rb
      create  config/initializers
      create  config/initializers/assets.rb
      create  config/initializers/content_security_policy.rb
      create  config/initializers/cors.rb
      create  config/initializers/filter_parameter_logging.rb
      create  config/initializers/inflections.rb
      create  config/initializers/new_framework_defaults_7_0.rb
      create  config/initializers/permissions_policy.rb
      create  config/locales
      create  config/locales/en.yml
      create  config/master.key
      append  .gitignore
      create  config/boot.rb
      create  config/database.yml
      create  db
      create  db/seeds.rb
      create  lib
      create  lib/tasks
      create  lib/tasks/.keep
      create  lib/assets
      create  lib/assets/.keep
      create  log
      create  log/.keep
      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/apple-touch-icon-precomposed.png
      create  public/apple-touch-icon.png
      create  public/favicon.ico
      create  public/robots.txt
      create  tmp
      create  tmp/.keep
      create  tmp/pids
      create  tmp/pids/.keep
      create  tmp/cache
      create  tmp/cache/assets
      create  vendor
      create  vendor/.keep
      create  test/fixtures/files
      create  test/fixtures/files/.keep
      create  test/controllers
      create  test/controllers/.keep
      create  test/mailers
      create  test/mailers/.keep
      create  test/models
      create  test/models/.keep
      create  test/helpers
      create  test/helpers/.keep
      create  test/integration
      create  test/integration/.keep
      create  test/channels/application_cable/connection_test.rb
      create  test/test_helper.rb
      create  test/system
      create  test/system/.keep
      create  test/application_system_test_case.rb
      create  storage
      create  storage/.keep
      create  tmp/storage
      create  tmp/storage/.keep
      remove  config/initializers/cors.rb
      remove  config/initializers/new_framework_defaults_7_0.rb
         run  bundle install
Fetching gem metadata from https://rubygems.org/...........
Resolving dependencies...
Using rake 13.0.6
Using concurrent-ruby 1.2.2
Using minitest 5.18.0
Using builder 3.2.4
Using bindex 0.8.1
Using timeout 0.3.2
Using msgpack 1.7.0
Using bundler 2.4.12
Using matrix 0.4.2
Using regexp_parser 2.8.0
Using method_source 1.0.0
Using thor 1.2.1
Using zeitwerk 2.6.7
Using io-console 0.6.0
Using rexml 3.2.5
Using rubyzip 2.3.2
Using websocket 1.2.9
Using sqlite3 1.6.2 (x86_64-linux)
Using i18n 1.13.0
Using tzinfo 2.0.6
Using erubi 1.12.0
Using net-protocol 0.2.1
Using bootsnap 1.16.0
Using reline 0.3.3
Using selenium-webdriver 4.9.0
Using net-smtp 0.3.3
Using irb 1.6.4
Using marcel 1.0.2
Using debug 1.7.2
Using mini_mime 1.1.2
Using date 3.3.3
Using public_suffix 5.0.1
Using net-imap 0.3.4
Using racc 1.6.2
Using crass 1.0.6
Using rack 2.2.7
Using net-pop 0.1.2
Using rack-test 2.1.0
Using sprockets 4.2.0
Using websocket-extensions 0.1.5
Using activesupport 7.0.4.3
Using websocket-driver 0.7.5
Using mail 2.8.1
Using nokogiri 1.14.3 (x86_64-linux)
Using addressable 2.8.4
Using rails-dom-testing 2.0.3
Using loofah 2.20.0
Using globalid 1.1.0
Using rails-html-sanitizer 1.5.0
Using activejob 7.0.4.3
Using xpath 3.2.0
Using webdrivers 5.2.0
Using nio4r 2.5.9
Using actionview 7.0.4.3
Using capybara 3.39.0
Using actionpack 7.0.4.3
Using jbuilder 2.11.5
Using puma 5.6.5
Using activemodel 7.0.4.3
Using sprockets-rails 3.4.2
Using activerecord 7.0.4.3
Using actionmailer 7.0.4.3
Using railties 7.0.4.3
Using actioncable 7.0.4.3
Using activestorage 7.0.4.3
Using actionmailbox 7.0.4.3
Using actiontext 7.0.4.3
Using cssbundling-rails 1.1.2
Using jsbundling-rails 1.1.1
Using stimulus-rails 1.2.1
Using turbo-rails 1.4.0
Using web-console 4.2.0
Using rails 7.0.4.3
Bundle complete! 16 Gemfile dependencies, 73 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
         run  bundle binstubs bundler
       rails  javascript:install:esbuild
Compile into app/assets/builds
      create  app/assets/builds
      create  app/assets/builds/.keep
      append  app/assets/config/manifest.js
      append  .gitignore
      append  .gitignore
Add JavaScript include tag in application layout
      insert  app/views/layouts/application.html.erb
Create default entrypoint in app/javascript/application.js
      create  app/javascript
      create  app/javascript/application.js
Add default package.json
      create  package.json
Add default Procfile.dev
      create  Procfile.dev
Ensure foreman is installed
         run  gem install foreman from "".""
Successfully installed foreman-0.87.2
1 gem installed
Add bin/dev to start foreman
      create  bin/dev
Install esbuild
         run  yarn add esbuild from "".""
➤ YN0000: ┌ Resolution step
➤ YN0000: └ Completed in 1s 962ms
➤ YN0000: ┌ Fetch step
➤ YN0013: │ esbuild@npm:0.17.18 can't be found in the cache and will be fetched from the remote registry
➤ YN0013: │ @esbuild/linux-x64@npm:0.17.18 can't be found in the cache and will be fetched from the remote registry
➤ YN0000: └ Completed
➤ YN0000: ┌ Link step
➤ YN0007: │ esbuild@npm:0.17.18 must be built because it never has been before or the last one failed
➤ YN0000: └ Completed in 0s 490ms
➤ YN0000: Done in 2s 546ms
Add build script
         run  npm pkg set scripts.build=""esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets"" from "".""
         run  yarn build from "".""

  app/assets/builds/application.js      62b 
  app/assets/builds/application.js.map  93b 

⚡ Done in 52ms
       rails  turbo:install stimulus:install
Import Turbo
      append  app/javascript/application.js
Install Turbo
         run  yarn add @hotwired/turbo-rails from "".""
➤ YN0000: ┌ Resolution step
➤ YN0000: └ Completed in 0s 545ms
➤ YN0000: ┌ Fetch step
➤ YN0013: │ @hotwired/turbo-rails@npm:7.3.0 can't be found in the cache and will be fetched from the remote registry
➤ YN0013: │ @hotwired/turbo@npm:7.3.0 can't be found in the cache and will be fetched from the remote registry
➤ YN0013: │ @rails/actioncable@npm:7.0.4 can't be found in the cache and will be fetched from the remote registry
➤ YN0000: └ Completed
➤ YN0000: ┌ Link step
➤ YN0000: └ Completed
➤ YN0000: Done in 0s 710ms
Run turbo:install:redis to switch on Redis and use it in development for turbo streams
Create controllers directory
      create  app/javascript/controllers
      create  app/javascript/controllers/index.js
      create  app/javascript/controllers/application.js
      create  app/javascript/controllers/hello_controller.js
Import Stimulus controllers
      append  app/javascript/application.js
Install Stimulus
         run  yarn add @hotwired/stimulus from "".""
➤ YN0000: ┌ Resolution step
➤ YN0000: └ Completed
➤ YN0000: ┌ Fetch step
➤ YN0013: │ @hotwired/stimulus@npm:3.2.1 can't be found in the cache and will be fetched from the remote registry
➤ YN0000: └ Completed
➤ YN0000: ┌ Link step
➤ YN0000: └ Completed
➤ YN0000: Done in 0s 330ms
       rails  css:install:bootstrap
Build into app/assets/builds
       exist  app/assets/builds
   identical  app/assets/builds/.keep
File unchanged! The supplied flag value not found!  app/assets/config/manifest.js
Stop linking stylesheets automatically
        gsub  app/assets/config/manifest.js
File unchanged! The supplied flag value not found!  .gitignore
File unchanged! The supplied flag value not found!  .gitignore
Remove app/assets/stylesheets/application.css so build output can take over
      remove  app/assets/stylesheets/application.css
Add stylesheet link tag in application layout
File unchanged! The supplied flag value not found!  app/views/layouts/application.html.erb
      append  Procfile.dev
Add bin/dev to start foreman
   identical  bin/dev
Install Bootstrap with Bootstrap Icons and Popperjs/core
      create  app/assets/stylesheets/application.bootstrap.scss
         run  yarn add sass bootstrap bootstrap-icons @popperjs/core from "".""
➤ YN0000: ┌ Resolution step
➤ YN0032: │ fsevents@npm:2.3.2: Implicit dependencies on node-gyp are discouraged
➤ YN0061: │ @npmcli/move-file@npm:2.0.1 is deprecated: This functionality has been moved to @npmcli/fs
➤ YN0000: └ Completed in 3s 498ms
➤ YN0000: ┌ Fetch step
➤ YN0013: │ util-deprecate@npm:1.0.2 can't be found in the cache and will be fetched from the remote registry
➤ YN0013: │ which@npm:2.0.2 can't be found in the cache and will be fetched from the remote registry
➤ YN0013: │ wide-align@npm:1.1.5 can't be found in the cache and will be fetched from the remote registry
➤ YN0013: │ wrappy@npm:1.0.2 can't be found in the cache and will be fetched from the remote registry
➤ YN0013: │ yallist@npm:4.0.0 can't be found in the cache and will be fetched from the remote registry
➤ YN0000: └ Completed in 0s 355ms
➤ YN0000: ┌ Link step
➤ YN0000: └ Completed in 0s 330ms
➤ YN0000: Done with warnings in 4s 226ms
      insert  config/initializers/assets.rb
Appending Bootstrap JavaScript import to default entry point
      append  app/javascript/application.js
Add build:css script
         run  npm pkg set scripts.build:css=""sass ./app/assets/stylesheets/application.bootstrap.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules"" from "".""
         run  yarn build:css from "".""
Error: Can't find stylesheet to import.
  ╷
1 │ @import 'bootstrap/scss/bootstrap';
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^
  ╵
  app/assets/stylesheets/application.bootstrap.scss 1:9  root stylesheet
```

Error is also seen after running 'bin/dev' in terminal:
```
23:41:32 web.1  | started with pid 132175
23:41:32 js.1   | started with pid 132176
23:41:32 css.1  | started with pid 132178
23:41:32 js.1   | [watch] build finished, watching for changes...
23:41:32 web.1  | => Booting Puma
23:41:32 web.1  | => Rails 7.0.4.3 application starting in development 
23:41:32 web.1  | => Run `bin/rails server --help` for more startup options
23:41:33 web.1  | Puma starting in single mode...
23:41:33 web.1  | * Puma version: 5.6.5 (ruby 3.2.2-p53) (""Birdie's Version"")
23:41:33 web.1  | *  Min threads: 5
23:41:33 web.1  | *  Max threads: 5
23:41:33 web.1  | *  Environment: development
23:41:33 web.1  | *          PID: 132177
23:41:33 web.1  | * Listening on http://127.0.0.1:3000
23:41:33 web.1  | * Listening on http://[::1]:3000
23:41:33 web.1  | Use Ctrl-C to stop
23:41:33 css.1  | Error: Can't find stylesheet to import.
23:41:33 css.1  |   ╷
23:41:33 css.1  | 1 │ @import 'bootstrap/scss/bootstrap';
23:41:33 css.1  |   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^
23:41:33 css.1  |   ╵
23:41:33 css.1  |   app/assets/stylesheets/application.bootstrap.scss 1:9  root stylesheet
23:41:33 css.1  | 
23:41:33 css.1  | Sass is watching for changes. Press Ctrl-C to stop.
23:41:33 css.1  |
```

### System configuration
**Rails version**: Rails 7.0.4.3

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
"
48074,ActiveRecord::Associations::CollectionProxy shovel method behaves different from rails 6.0.6.1 to 6.1.7.3,theobarango,activerecord,2023-04-26T22:15:14Z,2023-06-13T00:44:39Z,2023-06-13T00:44:39Z,"### Summary
Unlike in rails 6.0.6.1, `ActiveRecord::Associations::CollectionProxy` is behaving like a set in rails 6.1.7.3 where it no longer allows concating objects with the same object ID.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
class Person < ApplicationRecord
  has_many :friends
end

class Friend < ApplicationRecord
  belongs_to :person
end

p = Person.new # instantiate new Person memory object not persisted to db

p.friends
# => ActiveRecord::Associations::CollectionProxy []

friend = Friend.new # instantiate new Friend memory object not persisted to db

p.friends << friend

puts p.friends.size
# => 1

# add the same friend record again
p.friends << friend

puts p.friends.size
# in rails 6.0.6.1 the result will be 2
# in rails 6.1.7.3 the result is 1
```

### Expected behavior
<!-- Tell us what should happen -->
I expected that after adding the same friend object to the friends collection proxy twice, the size of the collection will increase by 2 as was the case in rails 6.0.6.1, especially as since this change was not documented in the changelog for Rails 6.1 😄 

### Actual behavior
<!-- Tell us what happens instead -->
In rails 6.1.7.3, the size remains at 1. Is `ActiveRecord::Associations::CollectionProxy` now behaving like a set and enforcing that its elements have unique object IDs?

### System configuration
**Rails version**: 6.1.7.3

**Ruby version**: 2.7.6
"
48072,Cannot query string columns that use `serialize` using array of values,evansalter,"activerecord, With reproduction steps",2023-04-26T18:02:47Z,2023-11-09T21:38:23Z,2023-11-09T21:38:23Z,"### Steps to reproduce

- Create a table with a string column
- Add a serializer on the column that transforms the string value
- Try to query the model with multiple values (i.e. `Model.where(serialized_field: ['value1', 'value2'])`)

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""6.1.7.3""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :user_id
  end
end

class Base64Coder
  def self.dump(value)
    return unless value
    Base64.encode64(value)
  end

  def self.load(value)
    return unless value
    Base64.decode64(value)
  end
end

class Post < ActiveRecord::Base
  serialize :user_id, Base64Coder
end

class BugTest < Minitest::Test
  p1 = Post.create!(user_id: '123')
  p2 = Post.create!(user_id: '456')

  def test_query_by_single_user_id
    assert_equal 1, Post.where(user_id: '123').count # Works - returns [p1]
  end

  def test_query_by_array_of_single_user_ids
    assert_equal 1, Post.where(user_id: ['123']).count, 1 # Works - returns [p1]
  end

  def test_query_by_array_of_user_ids
    assert_equal 2, Post.where(user_id: ['123', '456']).count # Doesn't work - returns []
  end

  def test_workaround
    assert_equal 2, Post.where(""user_id IN (?)"", ['123', '456'].map{|val| Base64.encode64(val)}).count # Works [p1, p2]
  end
end
```

### Expected behavior

`Post.where(user_id: ['123', '456'])` works (as it did in v6.0.6.1)

### Actual behavior

`Post.where(user_id: ['123', '456'])` returns an empty list.

If we look at the logs, we can see this is the query that is getting run:

```
 SELECT COUNT(*) FROM ""posts"" WHERE ""posts"".""user_id"" IN (?, ?)  [[""user_id"", ""TVRJego=\n""], [""user_id"", ""TkRVMgo=\n""]]
```

The issue is that the values are getting serialized twice before getting passed into the query:

```ruby
[15] pry(main)> user_id = '123'
=> ""123""
[16] pry(main)> Base64.encode64(user_id)
=> ""MTIz\n""
[17] pry(main)> Base64.encode64(""MTIz\n"")
=> ""TVRJego=\n""
```

### System configuration
**Rails version**: 6.1.7.3

**Ruby version**: 2.6
"
48058,Sidekiq background job refresh issue.,amolbudkhe,more-information-needed,2023-04-25T08:28:13Z,2023-04-25T18:23:13Z,2023-04-25T18:23:05Z,"### Expected behavior
In our project, we are using sidekiq to perform some background jobs. And we use the pusher to update the status of the background job to the front end. When the user starts the background job the web page is used to reload.

### Actual behavior
Now when the user starts the background job the page is not getting reloaded, User has to manually check the status of the background job.

### System configuration
Ruby version: ruby 2.7.4p191
Rails version: 6.1.7.3
Sidekiq : 6.5.3
"
48052,MIME type validation too strict,mak-dunkelziffer,actionpack,2023-04-24T14:33:36Z,2023-06-05T16:56:19Z,2023-06-05T16:56:19Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/object/blank""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_simple_mime_type_parameter_works
    Mime::Type.register(""application/vnd.api+json; profile=\""cursor-pagination\"""", :jsonapi)
  end
  
  def test_mime_type_parameter_with_url_fails
    Mime::Type.register(""application/vnd.api+json; profile=\""https://jsonapi.org/profiles/ethanresnick/cursor-pagination/\"""", :jsonapi)
  end
end
```

### Expected behavior

Rails should understand MIME types of the following form:
```
application/vnd.api+json; profile=""https://jsonapi.org/profiles/ethanresnick/cursor-pagination/"" ext=""https://jsonapi.org/ext/atomic""
```

Use case: creating a spec-conform implementation of the `JSON:API` spec with applied extensions and/or profiles:
- https://jsonapi.org/format/#media-type-parameter-rules
- https://jsonapi.org/extensions/

### Actual behavior

I was not able to register a MIME type with URLs as parameter values. The following error gets raised:
- `Mime::Type::InvalidMimeType: ""application/vnd.api+json; profile=\""https://jsonapi.org/profiles/ethanresnick/cursor-pagination/\"""" is not a valid MIME type`

Source: the following regex seems to be too strict and imposes the same limitations on parameter values that should only apply to parameter names:
- https://github.com/rails/rails/blob/3cca0d5205329e28a9879739bb2d3ae3cff1b14f/actionpack/lib/action_dispatch/http/mime_type.rb#L230

Maybe this is also a user error. Maybe the parameter value needs to be escaped or encoded in some manner. However, as even `\` and `%` are not allowed, I don't even know which escaping/encoding to use.

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.2.0
"
48051,Locals for partials not working on turbo streams as described in docs,chmich,stale,2023-04-24T13:18:07Z,2023-08-30T08:04:28Z,2023-08-30T08:04:28Z,"**Hi**

## Docs

on [issue 48050](https://github.com/rails/rails/issues/48050) i attached a test project.

is a different issue, but seems to be related:

regarding the [docs](https://guides.rubyonrails.org/layouts_and_rendering.html#passing-local-variables) syntax for passing locals to a partial would be like this: 

```
<%= render partial: ""form"", locals: {zone: @zone} %>
```

and then inside the partial, just call it by `zone`. 

## Regular rendering works

For the controller method `dashboard#control1`, the only way to get locals to run was:

```
@lam = ->{render partial: 'dashboard/test_partial2', locals: {content: 'replace-4'}}
```

and in the regarding partial just call it like described in the docs:

```
<%= content_tag :h1, content %>
```

and it works!

## Different behaviour on turbo-stream

If you click on `replace3` in the test project mentioned above, you will get the template `replace3.turbo_stream.erb` rendered, which contains:

```
<% lam = ->{render 'dashboard/test_partial', locals: { content: 'replace-3' }} %>
<%= turbo_stream.replace 'test-replace' do %>
  <%= lam.call %>
<% end %>
```

And the only way to access the locale inside the partial `test_partial' was this: 

```
    <%= content_tag :h1, locals[:content] %>
```

Just calling `content` did not work.

When I try to access it as described above, without turbo_stream, just by `content`, I get the error: 

```
undefined local variable or method `content' for #<ActionView::Base:0x0000000001ccf0>
```

## Next different behaviour on Turbo::StreamsChannel

Next, rendering the same partial on Turbo::StreamsChannel, the only way to get the locale to work was to fetch it by `local_assings[:content]` OR just by `content`. 

## hard to make a workaround

At the end i tried to build a helper like that: 

```
    def _locals(key)
       k  = key.to_sym
       (locals[k] rescue false) || local_assigns[k]  rescue nil
    end
```

But, Problem that not `locals` nor `local_assigns` can be fetched from a helper

## Please fix

For me it does not matter which way works, but it would be important that the way described in the docs would work in every case.

**Thanks, Chris**


"
48050,render not working on lambda/turbo,chmich,stale,2023-04-24T12:53:42Z,2023-08-24T13:14:37Z,2023-08-24T13:14:37Z,"Hi, 

To reproduce the error, I have attached a project.
Assuming the bug is more related to `render', I'll put this question here.

views/replace3.turbo_stream.erb
```
<% lam = ->{render 'dashboard/test_partial', locals: { content: 'replace-3' }} %>
<%= turbo_stream.replace 'test-replace' do %>
  <%= lam.call %>
<% end %>
```

works.

You can check it if you open the project, start it from foreman and click `replace-3` on the root page.

**The error**

If you click `replace-4` on the same page, you will see that it does not work:

The same lambda is set inside the `dashboard#replace4` controller method.

```@lam = ->{render partial: 'dashboard/test_partial', locals: { content: 'replace-4' }}```

and then within the view 

```
<%= turbo_stream.replace 'test-replace' do %>
  <%= @lam.call %>
<% end %>
```
breaks.

**Same works without Turbo**

If you click on `control1`, the same lambda is set on the controller and rendered in a partial, but without turbo, and `@lam.call` does what is expected.

**Thanks, Chris**
[test-render-lambda.zip](https://github.com/rails/rails/files/11310598/test-render-lambda.zip)
"
48049,Two `BasicsTest` fails with pg 1.5.0,yahonda,"activerecord, PostgreSQL, ci issues",2023-04-24T12:52:16Z,2023-04-24T23:37:24Z,2023-04-24T23:37:24Z,"According to https://github.com/rails/rails/pull/48048 Two of Active Record tests fails with pg gem 1.5.0 released on Apr 24, 2023 https://github.com/ged/ruby-pg/blob/master/History.md#v150-2023-04-24-lars-kanis-larsgreiz-reinsdorfde.

### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails 
rm Gemfile.lock
bundle install
cd activerecord
ARCONN=postgresql bin/test test/cases/base_test.rb -n /test_preserving_time_objects/
```

### Expected behavior
It should pass.

### Actual behavior
It fails as follows.

```ruby
$ bundle info pg
  * pg (1.5.0)
	Summary: Pg is the Ruby interface to the PostgreSQL RDBMS
	Homepage: https://github.com/ged/ruby-pg
	Documentation: http://deveiate.org/code/pg
	Source Code: https://github.com/ged/ruby-pg
	Changelog: https://github.com/ged/ruby-pg/blob/master/History.md
	Path: /home/yahonda/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/pg-1.5.0
	Reverse Dependencies:
		queue_classic (4.0.0) depends on pg (>= 1.1, < 2.0)
$ ARCONN=postgresql bin/test test/cases/base_test.rb -n /test_preserving_time_objects/
Using postgresql
PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
Run options: -n /test_preserving_time_objects/ --seed 27151

# Running:

PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
F

Failure:
BasicsTest#test_preserving_time_objects_with_time_with_zone_conversion_to_default_timezone_local [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/base_test.rb:324]:
--- expected
+++ actual
@@ -1 +1 @@
-Sat, 01 Jan 2000 00:00:00.000000000 CST -06:00
+2000-01-01 01:00:00 UTC



bin/test test/cases/base_test.rb:317

PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
...PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:1099:in `new'
F

Failure:
BasicsTest#test_preserving_time_objects_with_utc_time_conversion_to_default_timezone_local [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/base_test.rb:310]:
Expected: 2000-01-01 00:00:00 UTC
  Actual: 1999-12-31 19:00:00 UTC


bin/test test/cases/base_test.rb:304



Finished in 0.169755s, 29.4541 runs/s, 82.4716 assertions/s.
5 runs, 14 assertions, 2 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]"
48046,PG adapter deprecation in recent release,morgoth,"activerecord, PostgreSQL",2023-04-24T10:42:35Z,2023-04-28T15:34:47Z,2023-04-25T07:13:32Z,"With the recent release of pg gem (1.5.0) https://github.com/ged/ruby-pg/blob/master/History.md#v150-2023-04-24-lars-kanis-larsgreiz-reinsdorfde
the warning is logged:
```
PG::Coder.new(hash) is deprecated. Please use keyword arguments instead! Called from ../ruby/3.2.2/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/postgresql_adapter.rb:980:in `new'
```

```
ruby -v
ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]
rails -v
Rails 7.0.4.3
```
"
48038,Edge regression: Cannot `Marshal.dump` a model that uses Active Record Encryption,ghiculescu,"activerecord, attached PR",2023-04-23T21:36:43Z,2023-04-26T07:04:37Z,2023-04-26T07:04:37Z,"### Steps to reproduce

This is a regression on Rails `main`. In Rails 7 it did not crash.

Since you can't `Marshal.dump` you also can't do things that rely on it like `Rails.cache.write`.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""activerecord"", ""~> 7.0.0"" # <-- passes
  gem ""rails"", github: ""rails/rails"", branch: ""main"" # <-- raises
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :title
  end
end

class Post < ActiveRecord::Base
  encrypts :title
end

class BugTest < Minitest::Test
  def test_stuff
    post = Post.create!
    Marshal.dump(post)
  end
end
```

### Expected behavior

Test should pass.

### Actual behavior

```
TypeError: no _dump_data is defined for class Proc
```

I think this is the proc: https://github.com/rails/rails/blob/c5a91a3137b541f83c4d2ce203c58504c35e9879/activerecord/lib/active_record/encryption/encryptable_record.rb#L87

Relevant PRs: https://github.com/rails/rails/pull/45033 https://github.com/rails/rails/pull/45962

### System configuration
**Rails version**: `main`

**Ruby version**: Any version
"
48035,New find_or_create_by behaviour raises RecordNotFound in edge rails,jdelStrother,activerecord,2023-04-23T15:52:37Z,2023-04-25T09:58:26Z,2023-04-25T09:58:26Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""mysql2""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

opts = {
  database: ""unique_keys_test"",
  adapter: ""mysql2"",
  username: ""root""
}
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(opts.except(:database))
ActiveRecord::Base.connection.drop_database(opts[:database])
ActiveRecord::Base.connection.create_database(opts[:database])
ActiveRecord::Base.establish_connection(opts)

ActiveRecord::Schema.define do
  create_table :tags, force: true do |t|
    t.string :name
    t.index :name, unique: true
  end
end

class Tag < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_find_or_create_by
    concurrently do
      Tag.find_or_create_by(name: ""foo"")
    rescue ActiveRecord::RecordNotUnique
      # some app logic that handles RecordNotUnique
    end

    assert_equal 1, Tag.count
  end

  def concurrently(&block)
    2.times.map {
      Thread.new {
        Tag.transaction {
          block.call
        }
      }
    }.map(&:join)
  end
end
```

### Expected behavior

In Rails 7.0, one of the `find_or_create_by` calls raises RecordNotUnique (which we rescue and handle at the application-level).

### Actual behavior

In 7.1 alpha, it raises RecordNotFound: 

<details><summary>Backtrace</summary>

```
/Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation/finder_methods.rb:380:in `raise_record_not_found_exception!': Couldn't find Tag with [WHERE `tags`.`name` = ?] (ActiveRecord::RecordNotFound)
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation/finder_methods.rb:104:in `take!'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation/finder_methods.rb:87:in `find_by!'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:218:in `rescue in create_or_find_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:215:in `create_or_find_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:176:in `find_or_create_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/querying.rb:23:in `find_or_create_by'
	from uniquekeys.rb:43:in `block in test_association_stuff'
	from uniquekeys.rb:54:in `block (3 levels) in concurrently'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:490:in `block in within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:488:in `within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:327:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:212:in `transaction'
	from uniquekeys.rb:53:in `block (2 levels) in concurrently'
/Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:151:in `_query': Mysql2::Error: Duplicate entry 'foo' for key 'tags.index_tags_on_name' (ActiveRecord::RecordNotUnique)
	from /Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:151:in `block in query'
	from /Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:150:in `handle_interrupt'
	from /Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:150:in `query'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:742:in `block (2 levels) in raw_execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1011:in `block in with_raw_connection'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:983:in `with_raw_connection'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:740:in `block in raw_execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1121:in `log'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:739:in `raw_execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:232:in `execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:239:in `execute_and_free'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb:47:in `exec_query'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:142:in `exec_insert'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:177:in `insert'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:22:in `insert'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:583:in `_insert_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:1238:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/counter_cache.rb:177:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/locking/optimistic.rb:84:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/encryption/encryptable_record.rb:174:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/attribute_methods/dirty.rb:205:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:445:in `block in _create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:99:in `run_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:947:in `_run_create_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:445:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/timestamp.rb:114:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:1209:in `create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:441:in `block in create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:99:in `run_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:947:in `_run_save_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:441:in `create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/timestamp.rb:132:in `create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:709:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/validations.rb:49:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:309:in `block in save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:365:in `block in with_transaction_returning_status'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:325:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:361:in `with_transaction_returning_status'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:309:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/suppressor.rb:52:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:38:in `create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:891:in `_create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:103:in `block in create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:906:in `_scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:444:in `scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:103:in `create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:216:in `block in create_or_find_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:490:in `block in within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:488:in `within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:327:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:212:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation/delegation.rb:79:in `block in transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:906:in `_scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:444:in `scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation/delegation.rb:79:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:216:in `create_or_find_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:176:in `find_or_create_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/querying.rb:23:in `find_or_create_by'
	from uniquekeys.rb:43:in `block in test_association_stuff'
	from uniquekeys.rb:54:in `block (3 levels) in concurrently'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:490:in `block in within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:488:in `within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:327:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:212:in `transaction'
	from uniquekeys.rb:53:in `block (2 levels) in concurrently'
/Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:151:in `_query': Duplicate entry 'foo' for key 'tags.index_tags_on_name' (Mysql2::Error)
	from /Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:151:in `block in query'
	from /Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:150:in `handle_interrupt'
	from /Users/jon/Developer/web/vendor/bundle/nix-bundle/ruby/3.1.0/gems/mysql2-0.5.5/lib/mysql2/client.rb:150:in `query'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:742:in `block (2 levels) in raw_execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1011:in `block in with_raw_connection'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:983:in `with_raw_connection'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:740:in `block in raw_execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1121:in `log'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:739:in `raw_execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:232:in `execute'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:239:in `execute_and_free'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb:47:in `exec_query'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:142:in `exec_insert'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:177:in `insert'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:22:in `insert'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:583:in `_insert_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:1238:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/counter_cache.rb:177:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/locking/optimistic.rb:84:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/encryption/encryptable_record.rb:174:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/attribute_methods/dirty.rb:205:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:445:in `block in _create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:99:in `run_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:947:in `_run_create_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:445:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/timestamp.rb:114:in `_create_record'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:1209:in `create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:441:in `block in create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:99:in `run_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/callbacks.rb:947:in `_run_save_callbacks'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/callbacks.rb:441:in `create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/timestamp.rb:132:in `create_or_update'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:709:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/validations.rb:49:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:309:in `block in save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:365:in `block in with_transaction_returning_status'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:325:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:361:in `with_transaction_returning_status'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:309:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/suppressor.rb:52:in `save'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/persistence.rb:38:in `create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:891:in `_create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:103:in `block in create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:906:in `_scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:444:in `scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:103:in `create'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:216:in `block in create_or_find_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:490:in `block in within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:488:in `within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:327:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:212:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation/delegation.rb:79:in `block in transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:906:in `_scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:444:in `scoping'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation/delegation.rb:79:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:216:in `create_or_find_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/relation.rb:176:in `find_or_create_by'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/querying.rb:23:in `find_or_create_by'
	from uniquekeys.rb:43:in `block in test_association_stuff'
	from uniquekeys.rb:54:in `block (3 levels) in concurrently'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:490:in `block in within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:488:in `within_new_transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:327:in `transaction'
	from /Users/jon/Developer/web/vendor/cache/rails-ea7ac1594b4e/activerecord/lib/active_record/transactions.rb:212:in `transaction'
	from uniquekeys.rb:53:in `block (2 levels) in concurrently'
```

</details> 


though, apparently, only when there's a transaction wrapping the find_or_create call. Without the transaction, the new [find_or_create_by](https://github.com/rails/rails/pull/45720) improvements successfully return a tag in both threads.

(I'd happily remove our rescue block and leave Rails to handle the unique keys internally, if find_or_create can be fixed to do so)

cc @casperisfine 

### System configuration
**Rails version**: 7.1.0 alpha @ 719558c

**Ruby version**: 3.1.3
"
48016,Enum with `required: true` generates broken error,pehrlich2,"activerecord, more-information-needed",2023-04-21T22:26:03Z,2023-05-06T19:01:57Z,2023-05-06T19:01:57Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
class MyModel < ApplicationRecord
  enum reason: %i[asdfasdf], required: true
end
```

### Expected behavior
<!-- Tell us what should happen -->

An error which says `required` is not a valid argument

### Actual behavior
<!-- Tell us what happens instead -->

```
ArgumentError: You tried to define an enum named ""asdfasdf"" on the model ""MyModel"", but this will generate a instance method ""asdfasdf?"", which is already defined by another enum.
```

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 3.2.2
"
48013,Ambiguity in url_for,vovanmozg,stale,2023-04-21T19:17:06Z,2023-08-16T06:25:04Z,2023-08-16T06:25:04Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
1. Create controller
```ruby
class PagesController < ApplicationController
  def page
    url = url_for(lang: params[:lang], country: params[:country])
    render json: {
      params: params,
      url_for: url
    }
  end
end
```

2. Create two routes the same controller
```ruby
Rails.application.routes.draw do
  scope '(:lang-:country)' do
    get 'page1', to: 'pages#page'
  end

  scope 'subdomain' do
    get 'page2', to: 'pages#page'
  end
end
```

3. Visit http://localhost:3000/subdomain/page2?lang=en&country=au

### Expected behavior
`url_for` must return ""http://localhost:3000/subdomain/page2?lang=en&country=au""

### Actual behavior
`url_for` method returns ""http://localhost:3000/de-de/page1""

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

###  Test case for `url_for`
```ruby
def test_multiple_routes
  with_routing do |set|
    set.draw do
      scope ':lang-:country' do
        get 'page1', to: 'index#index'
      end

      scope 'subdomain' do
        get 'page2', to: 'index#index'
      end
    end

    kls = Class.new { include set.url_helpers }
    kls.default_url_options[:host] = ""www.basecamphq.com""

    assert_equal ""http://www.basecamphq.com/page2?lang=en&country=au"", kls.new.url_for(controller: ""index"", lang: ""en"", country: ""us"")
  end
end
```
changed file: https://github.com/vovanmozg/rails/commit/687d051ba4800b8d10cf93fc464b7eeb93470d1f

Maybe it's not really a bug, but it's unexpected behavior. url_for under the hood has to guess which route best matches the parameters passed. Most of the time it works well. But sometimes, when more than one route corresponds to one controller, errors can occur.

Could there be a way to avoid this problem? Maybe there is not enough information about the current route in the controller context?


### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.1.1
"
48011,Missing Postgres features in Postgres guide,ghiculescu,"docs, good first issue",2023-04-21T18:20:23Z,2023-04-22T15:43:43Z,2023-04-22T15:43:42Z,"https://edgeguides.rubyonrails.org/active_record_postgresql.html

There is no mention of the features added in these PRs:

- https://github.com/rails/rails/pull/47971
- https://github.com/rails/rails/pull/46192
- https://github.com/rails/rails/pull/47655
- https://github.com/rails/rails/pull/40224
- https://github.com/rails/rails/pull/44803

cc @alpaca-tc @agrobbin @steve-abrams  - thanks for adding these great features ❤️ . I've created this as an issue in case anyone else wants to make the docs PR."
48006,Forms with file input now default to accepting 0 files,shamas-,"docs, good first issue, activestorage",2023-04-21T01:58:20Z,2023-09-25T02:16:30Z,2023-09-25T02:16:29Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
<%= form.file_field name, multiple: true, direct_upload: true %>
```

### Expected behavior
```
<input multiple=""multiple"" data-direct-upload-url=""http://localhost:3000/rails/active_storage/direct_uploads"" type=""file"" name=""name1[name2][]"" id=""name1_name2_files"">
```

### Actual behavior
```
<input name=""name1[name2][]"" type=""hidden"" value="""" autocomplete=""off"">
<input multiple=""multiple"" data-direct-upload-url=""http://localhost:3000/rails/active_storage/direct_uploads"" type=""file"" name=""name1[name2][]"" id=""name1_name2_files"">
```

[The documentation](https://api.rubyonrails.org/v7.0.4/classes/ActionView/Helpers/FormBuilder.html#method-i-file_field) says that the hidden input is only output if `include_hidden: true` is present. However, it is also output even if the `include_hidden` key is entirely absent. The problem with this is that it turns forms that were designed to require 1+ files into forms that submit successfully with 0+.

`include_hidden` was not present in [6.1 documentation](https://api.rubyonrails.org/v6.1/classes/ActionView/Helpers/FormBuilder.html#method-i-file_field).

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.0
"
47976,inverse associations are not properly populated with a custom primary_key,brightredchilli,activerecord,2023-04-18T16:56:08Z,2023-04-20T18:50:43Z,2023-04-20T18:50:43Z,"It seems like specifying a custom primary_key with an association doesnt seem to populate inverses properly on Rails 6+. AFAICT, this is because setting an inverse fails because [inversable?](https://github.com/rails/rails/blob/732a4748b361bfdadb042fc62b4c608b1a6eef47/activerecord/lib/active_record/associations/association.rb#L142) is not true on an association defined below, and that is because this [matches_foreign_key?](https://github.com/rails/rails/blob/732a4748b361bfdadb042fc62b4c608b1a6eef47/activerecord/lib/active_record/associations/association.rb#L378-L385) uses reflection.foreign_key, as opposed to reflection.active_record_primary_key.

I'm happy to submit a PR that I think will fix this but want to confirm that this is seen as a bug. The records are created properly but inverse relationships are not populated properly.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", branch: ""v5.2.8.1"" # <-- This worked on Rails 5!
  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :name
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :post_name
  end
end

class Post < ActiveRecord::Base
  # has_many :comments <-- this works
  has_many :comments, foreign_key: :post_name, primary_key: :name, inverse_of: :post
end

class Comment < ActiveRecord::Base
  # belongs_to :post <-- this works  
  belongs_to :post, foreign_key: :post_name, primary_key: :name, inverse_of: :comments
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(name: 'hi')
    post.comments << Comment.create!

    assert_equal 1, post.comments.count
    assert_equal 1, Comment.count
    assert_equal post.id, Comment.first.post.id

    assert_equal post.object_id, post.comments.first.post.object_id # <— this fails
  end
end


```

### Expected behavior
Expect that object_id would be the same(ie, the inverse will be set up properly). *Note, this is working on: v5.2.8.1*

### Actual behavior
object_ids differ

### System configuration
**Rails version**:
Tested on main, and on branch v6.1.7

**Ruby version**:
2.7.7
"
47962,Rails::Generators::Actions error,rrmartins,more-information-needed,2023-04-17T16:20:54Z,2023-05-01T21:42:54Z,2023-05-01T21:42:54Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
bundle exec rails c

....

Traceback (most recent call last):
        64: from bin/rails:4:in `<main>'
        63: from bin/rails:4:in `require'
        62: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/commands.rb:18:in `<top (required)>'
        61: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/command.rb:48:in `invoke'
        60: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/command/base.rb:87:in `perform'
        59: from /usr/local/bundle/gems/thor-1.2.1/lib/thor.rb:392:in `dispatch'
        58: from /usr/local/bundle/gems/thor-1.2.1/lib/thor/invocation.rb:127:in `invoke_command'
        57: from /usr/local/bundle/gems/thor-1.2.1/lib/thor/command.rb:27:in `run'
        56: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/commands/console/console_command.rb:101:in `perform'
        55: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/command/actions.rb:15:in `require_application_and_environment!'
        54: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/command/actions.rb:28:in `require_environment!'
        53: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/application.rb:348:in `require_environment!'
        52: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
        51: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
        50: from /app/config/environment.rb:5:in `<top (required)>'
        49: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/railtie.rb:226:in `method_missing'
        48: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/railtie.rb:226:in `public_send'
        47: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/application.rb:372:in `initialize!'
        46: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/initializable.rb:60:in `run_initializers'
        45: from /usr/local/lib/ruby/2.7.0/tsort.rb:205:in `tsort_each'
        44: from /usr/local/lib/ruby/2.7.0/tsort.rb:226:in `tsort_each'
        43: from /usr/local/lib/ruby/2.7.0/tsort.rb:347:in `each_strongly_connected_component'
        42: from /usr/local/lib/ruby/2.7.0/tsort.rb:347:in `call'
        41: from /usr/local/lib/ruby/2.7.0/tsort.rb:347:in `each'
        40: from /usr/local/lib/ruby/2.7.0/tsort.rb:349:in `block in each_strongly_connected_component'
        39: from /usr/local/lib/ruby/2.7.0/tsort.rb:431:in `each_strongly_connected_component_from'
        38: from /usr/local/lib/ruby/2.7.0/tsort.rb:350:in `block (2 levels) in each_strongly_connected_component'
        37: from /usr/local/lib/ruby/2.7.0/tsort.rb:228:in `block in tsort_each'
        36: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/initializable.rb:61:in `block in run_initializers'
        35: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/initializable.rb:32:in `run'
        34: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/initializable.rb:32:in `instance_exec'
        33: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/application/finisher.rb:74:in `block in <module:Finisher>'
        32: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader.rb:295:in `eager_load_all'
        31: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader.rb:295:in `each'
        30: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader.rb:297:in `block in eager_load_all'
        29: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/eager_load.rb:10:in `eager_load'
        28: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/eager_load.rb:10:in `synchronize'
        27: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/eager_load.rb:16:in `block in eager_load'
        26: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/eager_load.rb:16:in `each'
        25: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/eager_load.rb:17:in `block (2 levels) in eager_load'
        24: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/eager_load.rb:164:in `actual_eager_load_dir'
        23: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/helpers.rb:25:in `ls'
        22: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/helpers.rb:25:in `each'
        21: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/helpers.rb:40:in `block in ls'
        20: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/eager_load.rb:169:in `block in actual_eager_load_dir'
        19: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/helpers.rb:135:in `cget'
        18: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/loader/helpers.rb:135:in `const_get'
        17: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:30:in `require'
        16: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:30:in `require'
        15: from /app/lib/generators/phx_reporting_migration_generator.rb:1:in `<top (required)>'
        14: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
        13: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
        12: from /usr/local/bundle/gems/activerecord-7.0.4.2/lib/rails/generators/active_record/migration/migration_generator.rb:3:in `<top (required)>'
        11: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
        10: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
         9: from /usr/local/bundle/gems/activerecord-7.0.4.2/lib/rails/generators/active_record.rb:3:in `<top (required)>'
         8: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
         7: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
         6: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/generators/named_base.rb:3:in `<top (required)>'
         5: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
         4: from /usr/local/bundle/gems/zeitwerk-2.6.7/lib/zeitwerk/kernel.rb:38:in `require'
         3: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/generators/base.rb:12:in `<top (required)>'
         2: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/generators/base.rb:13:in `<module:Rails>'
         1: from /usr/local/bundle/gems/railties-7.0.4.2/lib/rails/generators/base.rb:17:in `<module:Generators>'
/usr/local/bundle/gems/railties-7.0.4.2/lib/rails/generators/base.rb:19:in `<class:Base>': uninitialized constant Rails::Generators::Actions (NameError)
Did you mean?  ActionPack
```

### Expected behavior
<!-- Tell us what should happen -->

### Actual behavior
<!-- Tell us what happens instead -->

### System configuration
**Rails version**:  Rails 7.0.4.2

**Ruby version**: ruby 2.7.7p221
 "
47956,"Rails new generated config/locales.en.yml mentions surrounding specific keys with 'single quotes' while the example is presented with ""double quotes""",tomczak-mateusz,"docs, good first issue",2023-04-16T15:33:08Z,2023-04-19T08:52:43Z,2023-04-19T08:52:43Z,"### Subject
Hi :wave:,
The reported issue is a very minor one & comment related:
While generating the Rails app via `rails new`, the autogenerated `config/locales/en.yml` file template mentions surrounding specific keys with  `'single quotes'` while the example below is presented with `""double quotes""`

```ruby
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   ""true"": ""foo""
```

Back in April 2021 @ashiksp & @rafaelfranca have updated (https://github.com/rails/rails/pull/42064) the templates to use ""double quotes"" instead of 'single' ones but the comment in `config/locales/en.yml` [was missed](https://github.com/rails/rails/pull/42064/files#diff-e9731e50a226aac4e914118d2532dc91f784e90c452f924d100071d6fb8c7c68R24).

### Steps to reproduce
1. run `rails new XYZ `
2. rails app `XYZ` should be generated
3. checkout into `XYZ app`, verify if `config/locales/en.yml` file is present
4. verify if the comment `'Instead, surround them with single quotes.'` is present

### Expected behavior
comment should mention double quotes: `# Instead, surround them with double quotes.` 

### Actual behavior
comment mentions single quotes: `# Instead, surround them with single quotes.` 

### System configuration
**Rails version**: 7.0.4.3
**Ruby version**: 3.2.2
"
47941,Active Record Migrations Guide contains invalid syntax for SQLite3,matiaslagoevia,"docs, good first issue",2023-04-14T01:53:57Z,2023-04-28T22:14:15Z,2023-04-28T22:14:15Z,"### Steps to reproduce
1. Create a rails app that uses SQLite3 (on Rails 7, this happens by default for me by running `rails new`)
2. Visit one of the affected sections: [using reversible](https://guides.rubyonrails.org/active_record_migrations.html#using-reversible), [using the up down methods](https://guides.rubyonrails.org/active_record_migrations.html#using-the-up-down-methods), [reverting previous migrations](https://guides.rubyonrails.org/active_record_migrations.html#reverting-previous-migrations).

### Expected behavior
The guide's migrations should be able to be ran successfully.

### Actual behavior
Migrations fail due to `SQLite3::SQLException: near ""CONSTRAINT"": syntax error`. This is because SQLite3 does not support `ADD CONSTRAINT` within `ALTER TABLE`. References: [1](https://www.tutorialspoint.com/sqlite/sqlite_constraints.htm), [2](https://www.sqlite.org/lang_altertable.html).

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [arm64-darwin20]
"
47938,Unable to use actioncable with SSR build systems [w/ PR],sirwolfgang,"attached PR, actioncable",2023-04-13T22:25:26Z,2023-04-14T15:47:51Z,,"### Steps to reproduce
1. Create an App in something like NextJS that has SSR
2. Create a file that uses ActionCable
  ```typescript
    import { createConsumer } from '@rails/actioncable'

    const cable = createConsumer()
  ````
3. build for errors
```bash
Error occurred prerendering page ""/accounts"". Read more: https://nextjs.org/docs/messages/prerender-error
ReferenceError: self is not defined
```

### Expected behavior
Should not blow up when being used in SSR environments.

### Actual behavior
Blows up when being built in SSR environments

### System configuration
**Rails version**: All
**Ruby version**: All

### Solution
h/t @zubairaziz
```javascript
// actioncable/adapters.ts
export default {
  logger: typeof globalThis !== 'undefined' ? globalThis.console : undefined,
  WebSocket: typeof globalThis !== 'undefined' ? globalThis.WebSocket : undefined,
}
```"
47937,Current time for Tehran still uses +4:30 offset,thushw,activesupport,2023-04-13T21:11:12Z,2023-04-17T21:19:26Z,2023-04-17T21:19:05Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report
<img width=""477"" alt=""Screen Shot 2023-04-13 at 1 58 48 PM"" src=""https://user-images.githubusercontent.com/1197851/231881991-4529a181-3bad-4d0c-a963-ba5c404efe82.png"">
 are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
in a rails console do:
Time.now.in_time_zone(""Asia/Tehran"")

```

### Expected behavior
The time offset (at right end of output) should show 3:30
### Actual behavior
The offset shows 4:30
### System configuration
**Rails version**:
7.0.4.3
**Ruby version**:
3.1.2

<img width=""428"" alt=""Screen Shot 2023-04-13 at 2 07 57 PM"" src=""https://user-images.githubusercontent.com/1197851/231883175-b3ca26e1-c57b-4dd1-9e76-a9e75e008e9e.png"">

<img width=""700"" alt=""Screen Shot 2023-04-13 at 2 13 00 PM"" src=""https://user-images.githubusercontent.com/1197851/231884083-106de6ea-efb3-4972-94bf-de548417df36.png"">

"
47936,Rails 6 - you can't define an already defined column ,KauanCS,"regression, activerecord, attached PR",2023-04-13T20:36:45Z,2023-04-17T16:38:44Z,2023-04-16T11:27:12Z,"I'm trying to upgrade the rails `5.2` to `6.1`. All migrations works fine on 5.2, but I started to receive this error on 6.1

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

In my case, i'm using the postgres 9 but I tested in a new project with SQLite and has the same issue

- Create a new project with rails 6/7
- Create a new migration
- Add the code below:
- Run `rails db:migrate`

```ruby
class Test < ActiveRecord::Migration[6.1]
  def change
    create_table :question_options, id: false do |t|
      t.string :label, null: false
    end

    create_table :answers, id: false do |t|
      t.string :question_option_id
    end

    create_join_table :question_options, :answers do |t|
      t.references :question_option, foreign_key: true, null: false, index: { name: :question_option_id}
      t.references :answer, foreign_key: true, null: false, index: {name: :answer_id}
    end
  end
end
```

### Expected behavior
Run the migration without errors

### Actual behavior
```
rails aborted!
StandardError: An error has occurred, this and all later migrations canceled:

you can't define an already defined column 'question_option_id'.
```

### System configuration
**Rails version**: 6.1.7.1

**Ruby version**: 2.7.6
"
47930,ActiveSupport::MessagEncryptor.decrypt_and_verify,priyalorha,activesupport,2023-04-12T23:52:18Z,2023-06-25T20:08:30Z,2023-06-25T20:08:30Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

len   = ActiveSupport::MessageEncryptor.key_len
salt  = SecureRandom.random_bytes(len)
key   = ActiveSupport::KeyGenerator.new('password').generate_key(salt, len) # => ""\x89\xE0\x156\xAC...""
crypt = ActiveSupport::MessageEncryptor.new(key)                            # => #<ActiveSupport::MessageEncryptor ...>
encrypted_data = crypt.encrypt_and_sign('my secret data')                   # => ""NlFBTTMwOUV5UlA1QlNEN2xkY2d6eThYWWh...""
crypt.decrypt_and_verify(encrypted_data)                                    # => ""my secret data""
crypt.decrypt_and_verify(encrypted_data)   #=> ""should raise raise, key been now verified""

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Your reproduction script goes here
```

### Expected behavior
<!-- Tell us what should happen -->

if key is verified should raise an error

### Actual behavior
<!-- Tell us what happens instead -->

is returning the decrypter data

### System configuration
**Rails version**:
Rails 7.0.4.3
**Ruby version**:
ruby 3.2.0"
47918,ActiveStorage::MirrorService uploads to mirrors inline instead of using an async ActiveStorage::MirrorJob,feliperaul,activestorage,2023-04-11T18:23:25Z,2023-08-04T20:59:31Z,2023-08-04T20:59:31Z,"`ActiveStorage::Mirror`  is really nice to have. However, on Rails 7.0.4.3 (and `master` as well), I realized that when you define a `Mirror` service on `storage.yml` , the upload to the mirror actually happens inline, instead of using `ActiveStorage::MirrorJob`.

This actually slows down any uploads to the service, because it is performed n times (n being the number of mirrors), inline, instead of using the `ActiveStorage::MirrorJob`. 

I don't think this is by design, since the `ActiveStorage::MirrorJob` actually gets enqueued right away, but it's actually useless: when it runs, there are no more uploads left to do in any mirror service, and that's the only moment the job is enqueued. 

What actually happens is:

1. When a Blob is created,`ActiveStorage::Blob#upload` will be called, which calls the service's `#upload`, in this case, `ActiveStorage::MirrorService#upload`. 

2. The `ActiveStorage::MirrorService` `#upload` will do the upload inline for each service:

https://github.com/rails/rails/blob/be287ac0d5000e667510faba0dbf28ffdb7c5e35/activestorage/lib/active_storage/service/mirror_service.rb#L37-L42

That's why, on the Rails log, you see two uploads one right after the other:

```
S3 Storage (1159.8ms) Uploaded file to key: nqg705we2u70olmnplgfujbwpb63 (checksum: GE6tZIm49SutC3TY9kV4Uw==)
S3 Storage (898.7ms) Uploaded file to key: nqg705we2u70olmnplgfujbwpb63 (checksum: GE6tZIm49SutC3TY9kV4Uw==)
[ActiveJob] Enqueued ActiveStorage::MirrorJob (Job ID: 3eaeaa5e-6156-4a37-b048-1e9a96484867) to Sidekiq(low) with arguments: ""nqg705we2u70olmnplgfujbwpb63"", {:checksum=>""GE6tZIm49SutC3TY9kV4Uw==""}
```

As you can see, an `ActiveStorage::MirrorJob` was also enqueued, due to the `after_create_commit :mirror_blob_later` on `ActiveStorage::Attachment`. However, it's enqueued only after the 2 uploads were already performed.

And when that Job actually runs, it will simply invoke `#mirror` on the `ActiveStorage::MirrorService`, which has this code:

https://github.com/rails/rails/blob/be287ac0d5000e667510faba0dbf28ffdb7c5e35/activestorage/lib/active_storage/service/mirror_service.rb#L55-L67

By that moment in time, `mirrors_in_need_of_mirroring` will always be blank (I confirmed), unless in the edge-case that between the upload happening and the job actually running a new mirror was added to the service configuration, which is probably not the desired use case here.

In a nutshell, as it is:

- The mirror configuration slows down uploads, since it's performing all of them inline; if there are multiple mirrors configured, this compounds.
- An `ActiveStorage::MirrorJob` gets enqueued, but it's pretty much useless; and it's not even free, because it will aways fire S3 requests because it will check for the key presence in each one of the mirrors (which they will already be). 

The Mirror documentation already makes no promises of ensuring mirroring happens sucessfully:

> Mirroring is not atomic. It is possible for an upload to succeed on the primary service and fail on any of the subordinate services. Before going all-in on a new service, verify that all files have been copied.

If that's the case, shouldn't we just upload once to the primary, and let `ActiveStorege::MirrorService` do it's job and mirror asynchronously to the other storages later on?

Maybe only the `local` service could have its mirroring done inline. 

Mentioning @georgeclaghorn because he authored the original code and maybe I got this all wrong."
47917,Parent association is unavailable in overwritten attribute setters when using `#build`,Aesthetikx,"activerecord, stale",2023-04-11T15:07:07Z,2023-07-19T22:50:51Z,2023-07-19T22:50:51Z,"When using `#build`, e.g. `post.comments.build(attributes)`, `#post` is `nil` in any overwritten attribute setters. For example,
`post.comments.build(attributes)` may not work when `comment = post.comments.build; comment.assign_attributes(attributes)` would, if you define attribute setters that reference the parent `#post`.

Understandably, this is an edge case, but I was surprised by this behavior. Perhaps it is bad practice to access a parent record in an attribute setter anyway. I think it may be a harmless improvement to assign the relationships before assigning regular attributes, but I am not sure what impact this would have.

### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :body
  end
end

# Sample 'Fix', although I don't know if this would work with multiple associations?
#
# class ActiveRecord::Associations::Association
#   # Original Implementation:
#   #
#   #   reflection.build_association(attributes) do |record|
#   #     initialize_attributes(record, attributes)
#   #     yield(record) if block_given?
#   #   end
# 
#   def build_record(attributes)
#     # Initially pass {} for attributes...
#     reflection.build_association({}) do |record|
#       initialize_attributes(record, attributes)
#       # ...and then assign the attributes
#       record.assign_attributes(attributes)
#       yield(record) if block_given?
#     end
#   end
# end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post

  def body=(body)
    # #post is nil here, even though this was initialized from #comments#build
    new_body = ""Comment on '#{post.title}': #{body}""
    super(new_body)
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(title: ""My Post"")

    comment = post.comments.create!(body: ""My Comment"")

    assert_equal ""Comment on 'My Post': My Comment"", comment.body
  end
end
```

### Expected behavior
It would be nice if the parent relation was available in overwritten attribute setters, if it was built from a parent relation.

### Actual behavior
Parent attributes are assigned after regular attributes.

### System configuration
**Rails version**: main on 4/1/2023

**Ruby version**: 3.1.2
"
47914,"config.active_support.disable_to_s_conversion doesn't do anything (ENV[""RAILS_DISABLE_DEPRECATED_TO_S_CONVERSION""] does)",Hampei,more-information-needed,2023-04-11T08:21:12Z,2023-05-18T22:26:28Z,2023-05-18T22:26:28Z,"Setting `config.active_support.disable_to_s_conversion` in application.rb doesn't do anything and I see no code in activesupport reading from the setting.

Instead `ENV[""RAILS_DISABLE_DEPRECATED_TO_S_CONVERSION""]` is being used for this, but I can't find this in any of the documentation or change-logs. Setting that to anything at the very top of application.rb does the trick. 

Not quite sure if the changelog should just be changed or the code should be changed. 

I also can't see  `config.load_defaults 7.0` working, since the env-var is never set.

### Steps to reproduce

New rails 7.0 project with 

```
  class Application < Rails::Application
    config.load_defaults 6.1
    config.active_support.disable_to_s_conversion
```

### Expected behavior
expected `1.to_s(:db)` to throw an error

### Actual behavior
Gave me a `""1""`

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.2.1
"
47913,Automatic Filtering Params Named as Encrypted Columns does not filter params of child models or when params are nested,annettemmm,attached PR,2023-04-11T05:20:58Z,2023-04-12T21:01:47Z,,"Found two unexpected behaviors w/r/t automatic filtering of encrypted columns. Encrypted columns are configured to be [automatically filtered in Rails logs](https://edgeguides.rubyonrails.org/action_controller_overview.html#parameters-filtering) BUT
1. models that inherit from a model with encrypted columns do not have the corresponding parameters filtered in the Rails logs
2. when a model with encrypted columns is passed as_nested_paramaters, the parameters are not filtered in the Rails logs

## Case 1: inheritance
### Steps to reproduce
```ruby
class User < ActiveRecord::Base
  encrypts(:email)
end

class SpecialUser < User
end
```
post with params: {email: 'secret@shh.com'} 

### Expected behavior
email value would be filtered out in logs for User & SpecialUser

### Actual behavior
params for User will get correctly filtered in the logs, e.g. `Parameters: {""user""=>{""email""=>""[FILTERED]""}}`
params for Special will not e.g. `Parameters: {""special_user""=>{""email""=>""secret@shh.com""}}`

## Case 2: nested parameters
```ruby
class User < ActiveRecord::Base
  encrypts(:email)

  belongs_to :organization
end

class Organization < ActiveRecord::Base
  has_one :user
  accepts_nested_attributes_for :user
end
```
post to organizations with params: {users_attributes: {new0: {email: 'secret@shh.com'}}}

### Expected behavior
email value would be filtered out in Rail logs

### Actual behavior
email not filtered out e.g. `Parameters: {""organization""=>{""user_attributes""=>{""email""=>""secret@shh.com""}}}`

### System configuration
**Rails version**: Rails 7.0.4.3

**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [arm64-darwin21]

## Why Issue?
To address issues, one can explicitly add `special_user.email` & `user_attributes.email` to filtered parameters, but it was definitely unexpected for me that nested attributes & child models were not being filtered in the logs. If this is the intended behavior I think there should at least be a warning in the docs.

## Why Happening?
Both behaviors stem from the how encrypts add the encrypted columns to `application.config.filter_parameters`:
https://github.com/rails/rails/blob/7c41d97ccbff2feb98544de784cabdc9714773f8/activerecord/lib/active_record/encryption/configurable.rb#L52-L58
in the example above, when User encrypts(:email), 'user.email' will be added to `application.config.filter_parameters` and so will not match & filter `{""special_user"" => {""email""=>""secret@shh.com""}}` or `{""user_attributes""=>{""email""=> ""secret@shh.com""}}`

### my chill-enough local fix
I was able to generate the behavior I wanted with
```ruby
class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true

  extend MyFilteredParams
end

module MyFilteredParams
  def encrypts(*names, **options)
    Rails.application.config.filter_parameters += names.map { |x| /^#{x}$/ }
    super
  end
end
```
super for MyFilteredParams.encrypts: https://github.com/rails/rails/blob/b96ddea5f0b4ff8ed6e9dfe4df62f7571b147b11/activerecord/lib/active_record/encryption/encryptable_record.rb#L45-L53

This adds '/^email$/' to filter parameters, not scoped to anything, so it would correctly filter logs `{""special_user"" => {""email""=>""[FILTERED]""}}` or `{""user_attributes""=>{""email""=> ""[FILTERED]""}}` 
BUT
it would also filter any attribute 'email' on any model. For my purposes that's chill because I'd rather over- than under-filter, but it's not a perfect solution. 
"
47911,Merge Resolution Tools will save unencrypted output silently if using diff=rails_credentials,krainboltgreene,railties,2023-04-10T17:28:52Z,2023-07-19T15:40:22Z,2023-07-19T03:17:37Z,"### Steps to reproduce
1. Have encrypted credentials
2. Have the enrolled diff feature
3. Have a merge conflict in the credentials file
4. Use a merge resolution tool (Like visual studio code's default merge resolution tool)
5. Resolve the conflict
6. Look `config/credentials.enc.yml`

### Expected behavior
Users will expect it to be encrypted.

### Actual behavior
The contents is saved unencrypted

This isn't something that can be solved, but it absolutely should come with a warning label.
"
47909,Unexpected alias added by where.missing(...),zhuravel,"activerecord, attached PR",2023-04-10T16:19:54Z,2023-05-29T10:37:20Z,2023-05-26T03:04:39Z,"Hi. I've upgrading my project to use unreleased Rails from `main`, and got an error.

### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  if ARGV[0] == ""main""
    gem ""rails"", github: ""rails/rails"", branch: ""main""
  else
    gem ""activerecord"", ""7.0.4.3""
  end

  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table(:books, force: true) do |t|
    t.references :progress
  end

  create_table(:progresses, force: true) do |t|
    t.references :book
    t.integer :percentage, default: 0, null: false
  end
end

class Book < ActiveRecord::Base
  has_one :progress

  scope :without_progress, -> do
    where.missing(:progress)
  end

  scope :completed, -> do
    joins(:progress).merge(Progress.completed)
  end
end

class Progress < ActiveRecord::Base
  scope :completed, -> do
    where(percentage: 100)
  end
end

class BugTest < Minitest::Test
  def test_bug
    assert_equal 0, Book.completed.count
    assert_equal 0, Book.without_progress.count
    assert_equal 0, Book.without_progress.completed.count
  end
end
```

The last assertion passes on 7.0.4.3 and fails on `main` because `where.missing(:progress)` adds a table alias in `main`.
See query produced by `Book.where.missing(:progress)`:
```sql
-- Rails main
SELECT ""books"".* FROM ""books"" LEFT OUTER JOIN ""progresses"" ""progress"" ON ""progress"".""book_id"" = ""books"".""id"" WHERE ""progress"".""id"" IS NULL

-- Rails 7.0.4.3
SELECT ""books"".* FROM ""books"" LEFT OUTER JOIN ""progresses"" ON ""progresses"".""book_id"" = ""books"".""id"" WHERE ""progresses"".""id"" IS NULL
```

### Expected behavior
Rails 7.0.4.3 does not add alias for ""progresses"" table and returns 0:
```sql
SELECT COUNT(*) FROM ""books"" INNER JOIN ""progresses"" ON ""progresses"".""book_id"" = ""books"".""id"" WHERE ""progresses"".""id"" IS NULL AND ""progresses"".""percentage"" = ?
```

### Actual behavior
Rails `main` aliases ""progresses"" to ""progress"" and raises exception:
```sql
SELECT COUNT(*) FROM ""books"" INNER JOIN ""progresses"" ""progress"" ON ""progress"".""book_id"" = ""books"".""id"" WHERE ""progress"".""id"" IS NULL AND ""progresses"".""percentage"" = ?
```
Error: `ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: progresses.percentage`

### System configuration
**Rails version**: main (7.1.0.alpha)

**Ruby version**: `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]`
"
47907,"AppGenerator - ArgumentError: wrong number of arguments (given 2, expected 1)",gmq,"railties, attached PR",2023-04-10T16:07:50Z,2023-04-11T05:44:51Z,2023-04-11T05:44:51Z,"### Steps to reproduce
1. Extend a generator with a method that uses keyword arguments
2. Call this method in a builder

```ruby
require 'bundler/inline'

gemfile(true) do
  source 'https://rubygems.org'

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'rails', github: 'rails/rails', branch: 'main'
end

require 'active_support'
require 'active_support/core_ext/object/blank'
require 'minitest/autorun'
require 'rails/generators/rails/app/app_generator'

module GeneratorExt
  def after(action_name, wrap_in_action: false, &action)
    @after_executed = true
    puts ""after method received action_name: #{action_name}""
    puts ""after method received wrap_in_action: #{wrap_in_action}""
    instance_exec(&action) if wrap_in_action
  end
end

class MyBuilder < Rails::AppBuilder
  def create
    builder = self

    after(:some_action, wrap_in_action: true) do
      builder.do_something
    end
  end

  def do_something
    print 'something'
  end
end

class MyAppGenerator < Rails::Generators::AppGenerator
  source_root File.expand_path('railties/lib/rails/generators/rails/app/templates',
                               Gem.loaded_specs['rails'].full_gem_path)

  def finish_template
    extend(GeneratorExt)
    builder = MyBuilder.new(self)
    builder.create
    super
  end
end

class BugTest < Minitest::Test
  def setup
    @destination_root = File.expand_path('tmp/testapp', __dir__)
    FileUtils.mkdir_p(@destination_root)
  end

  def teardown
    FileUtils.rm_rf(@destination_root)
  end

  def test_stuff
    generator_options = {
      skip_bundle: true,
      skip_git: true,
      skip_test: true,
      minimal: true
    }
    generator = MyAppGenerator.new([@destination_root], generator_options)

    generator.invoke_all
    assert(generator.instance_variable_get(:@after_executed))
  end
end
```

### Expected behavior
It should run the method. Running the example test should return:
```bash
# >after method received action_name: some_action
# >after method received wrap_in_action: true
# >something.
```

### Actual behavior
It works in Ruby 2.7 but it fails to run in Ruby 3 with `ArgumentError: wrong number of arguments (given 2, expected 1)`

Updating `method_missing` to use triple-dot delegation solves the issue.

### System configuration
**Rails version**: 7.0.4.3 

**Ruby version**: 3.2
"
47906,"Missing ""@"" for form_with model: article",EE-hey,docs,2023-04-10T15:55:56Z,2023-04-10T18:30:58Z,2023-04-10T18:30:58Z,"In the documentation : ""https://guides.rubyonrails.org/getting_started.html"", it seems that there is a typo, the 
```@article ``` is missing



```
<%= form_with model: article do |form| %>
  <div>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
    <% article.errors.full_messages_for(:title).each do |message| %>
      <div><%= message %></div>
    <% end %>
  </div>

  <div>
    <%= form.label :body %><br>
    <%= form.text_area :body %><br>
    <% article.errors.full_messages_for(:body).each do |message| %>
      <div><%= message %></div>
    <% end %>
  </div>
  <div>
    <%= form.submit %>
  </div>
<% end %>
```
It should be changed : 

```
<%= form_with model: @article do |form| %>
  <div>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
    <% article.errors.full_messages_for(:title).each do |message| %>
      <div><%= message %></div>
    <% end %>
  </div>

  <div>
    <%= form.label :body %><br>
    <%= form.text_area :body %><br>
    <% article.errors.full_messages_for(:body).each do |message| %>
      <div><%= message %></div>
    <% end %>
  </div>
```

"
47904,Unable to disable triggers on a partitioned table in Rails,quynhethereal,"activerecord, stale, PostgreSQL",2023-04-10T03:27:45Z,2023-08-12T09:29:11Z,2023-08-12T09:29:10Z,"### Steps to reproduce

1. Create a table and its partition in Postgres
```sql
CREATE TABLE activities (
  id INT PRIMARY KEY,
  activity_name VARCHAR(50)
);

CREATE TABLE users (
  id INT,
  username VARCHAR(50),
  activity_id INT,
  FOREIGN KEY (activity_id) REFERENCES activities(id)
) PARTITION BY RANGE (id);

CREATE TABLE users_0 PARTITION OF users
  FOR VALUES FROM (0) TO (100);

CREATE TABLE users_1 PARTITION OF users
  FOR VALUES FROM (100) TO (200);

CREATE TABLE users_2 PARTITION OF users
  FOR VALUES FROM (200) TO (300);

CREATE TABLE users_3 PARTITION OF users
  FOR VALUES FROM (300) TO (MAXVALUE);
```

2. Attempt to disable triggers on the partitioned table using the following code:

```sql
ActiveRecord::Base.connection.execute(""DISABLE TRIGGER ALL ON users"")
```

### Expected behavior
The SQL command should succeed. It is the underlying command that Rails uses before it attempts to drop/insert the test fixtures into the test db. 

https://github.com/rails/rails/blob/c567850476dc443563b9be93a129eb09601e25af/activerecord/lib/active_record/connection_adapters/postgresql/referential_integrity.rb#L12

### Actual behavior

Rails is unable to execute the command due to the error: 

```sql
ERROR:  trigger ""RI_ConstraintTrigger_c_572918"" for table ""users_0"" does not exist
```
### System configuration
**Rails version**: 6.0.2

**Ruby version**: 2.7.4

**Postgres version:** 15.2

### Notes
This is a known bug in PostgreSQL 15+ and a patch will be released in May (https://postgrespro.com/list/id/980717.1680452426@sss.pgh.pa.us). I wonder if it is okay if we were to monkey patch this method so that it uses `SET CONSTRAINTS ALL DEFERRED;` or `ALTER TABLE ONLY users DISABLE TRIGGER ALLL;` instead. Is there any caveat that we should be aware of? 
"
47903,An improvement for an example from Ruby On Rails API website,emadjs,"docs, good first issue",2023-04-10T00:02:24Z,2023-04-13T02:25:46Z,2023-04-12T22:34:04Z,"From [Ruby on Rails API](https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-ids) website, there is an example for Calculations Method: `ids` that might have a minor mistake in its inline comment (the sql statement) which not make fully sense.

```ruby
Person.joins(:companies).ids # SELECT people.id FROM people INNER JOIN companies ON companies.person_id = people.id
```

Perhaps more appropriate to have it like this:


```ruby
Person.joins(:companies).ids # SELECT people.id FROM people INNER JOIN companies ON companies.id = people.company_id
```
"
47895,"find_each have different behavior for different batch_size, with illegitimate has_one association",yskkin,"activerecord, With reproduction steps",2023-04-08T13:07:39Z,2023-08-04T21:11:41Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
  end

  create_table :post_comments, force: true do |t|
    t.integer :post_id
    t.integer :comment_id
  end
end

class Post < ActiveRecord::Base
  has_one :post_comment, dependent: :destroy
  has_one :comment, through: :post_comment
end

class PostComment < ActiveRecord::Base
  belongs_to :post, dependent: :destroy
  belongs_to :comment, dependent: :destroy
end

class Comment < ActiveRecord::Base
  has_many :post_comments
  has_many :post, through: :post_comments
end

class BugTest < Minitest::Test
  def setup
    bad_post = Post.create!
    comment = Comment.create!
    # bad_post has inlegitimate has_one association with post_comment and comment
    2.times { PostComment.create!(post: bad_post, comment: comment) }

    3.times do
      post = Post.create!
      comment = Comment.create!
      PostComment.create!(post: post, comment: comment)
    end
  end

  def teardown
    Post.destroy_all
  end

  def test_post_find_each_l000_ok
    assert_equal 4, Post.includes({ post_comment: :post }, :comment).where(comments: { id: 1.. }).find_each.to_a.count
  end

  def test_post_find_each_2_ng
    assert_equal 4, Post.includes({ post_comment: :post }, :comment).where(comments: { id: 1.. }).find_each(batch_size: 2).to_a.count
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->
Both test case pass or fail.

I'm not sure this is a bug or not since there is multiple records in the database for has_one association.
This is hard to notice since things work fine when record volume is small with respect to batch_size.
Some mechanism like warning is desirable even if this is not a bug.

### Actual behavior
<!-- Tell us what happens instead -->
Only `test_post_find_each_l000_ok` pass.

### System configuration
**Rails version**:

**Ruby version**: 3.1.2
"
47887,after updating rails version My put endpoint is not working as expected ,mittal32,more-information-needed,2023-04-07T12:15:58Z,2023-04-26T01:06:15Z,2023-04-26T01:06:15Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
After updating rails version to 6.1.7.3  and mysql version 0.5. I am not able to get expected response and getting below error. 
In below code I am not getting all values in param: I am only getting id 
def post_params
    h = params.permit(:id, :careAwareSourceType, tenant: [:id])
    {
      id: h[:id],
      careaware_source_type: h[:careAwareSourceType],
      tenant_id: h[:tenant].present? ? h[:tenant][:id] : nil
    }
  end
My payload :
{
  ""tenant"": {
    ""id"": ""e92ca89f-8524-451a-9346-666d6ff39329""
  },
  ""careAwareSourceType"": ""RPM_BYOD""
}
```

### Expected behavior
1) Data Source Requests PUT /data-sources/{dataSourceId} when careAwareSourceType is not valid behaves like a bad request returns 400 with error message
     Failure/Error: expect(JSON.parse(response.body)).to eq({ code: 400, message: error_message }.as_json)

       expected: {""code""=>400, ""message""=>""Validation failed: Tenant can't be blank, Tenant should be UUID, Careaware ...' is not a valid careAwareSourceType. Accepted values are: [\""RPM_BYOD\"", \""CAREAWARE_ANALYTICS\""]""}
            got: {""code""=>400, ""message""=>""Validation failed: Tenant can't be blank, Careaware source type 'abc' is no...areSourceType. Accepted values are: [\""RPM_BYOD\"", \""CAREAWARE_ANALYTICS\""], Tenant should be UUID""}

       (compared using ==)

       Diff:
       @@ -1,3 +1,3 @@
        ""code"" => 400,
       -""message"" => ""Validation failed: Tenant can't be blank, Tenant should be UUID, Careaware source type 'abc' is not a valid careAwareSourceType. Accepted values are: [\""RPM_BYOD\"", \""CAREAWARE_ANALYTICS\""]"",
       +""message"" => ""Validation failed: Tenant can't be blank, Careaware source type 'abc' is not a valid careAwareSourceType. Accepted values are: [\""RPM_BYOD\"", \""CAREAWARE_ANALYTICS\""], Tenant should be UUID"",
     Shared Example Group: ""a bad request"" called from ./spec/requests/data_source_spec.rb:182
     # ./spec/support/shared_examples.rb:15:in `block (2 levels) in <top (required)>'


### System configuration
**rails version : 6.1.7.3**:

**Ruby version :3.0.3**:
"
47882,"""Run pending migrations"" button does not respect multiple migration paths",aedwardg,"activerecord, With reproduction steps",2023-04-07T00:09:35Z,2023-12-18T17:41:14Z,,"The ActionableError page to run pending migrations does not respect multiple migration paths that are otherwise respected by `bin/rails db:migrate`. 

We first became aware of this at my company because we use [packwerk](https://github.com/Shopify/packwerk) and [packs-rails](https://github.com/rubyatscale/packs-rails) to help modularize our Rails monolith app. When breaking the app apart into packs, it helps to have migrations live in the same pack as the models that they represent. We used the suggestions in [this issue](https://github.com/rubyatscale/packs-rails/issues/25) to dynamically add all the packs' migration paths to the application config. 

The `bin/rails db:migrate` command respects the application config changes, but the <kbd>Run pending migrations</kbd> button does not. 

This lack of feature parity between the CLI command and the UI button is confusing for developers and can lead to teams having different development environments depending on whether they ran the command or clicked the button.

I'd be happy to work on a PR to fix this 🙂 

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
1. Create new app
2. Create migration, e.g., generate a model with `bin/rails generate model Article title:string body:text`
3. Create a subdirectory where you would like other migrations to live, e.g., `packs/stories/db/migrate`
4. Create another migration and move it to that subdir. e.g., `bin/rails generate model Longform title:string body:text`
     and move xxxxx_create_longforms.rb from `db/migrate` -> `packs/stories/db/migrate`
5. Inside of your `Application` class in `config/application.rb` add the following line:
    ```rb
     config.paths[""db/migrate""] << ""packs/stories/db/migrate""
    ```
7. Check your migration status: `bin/rails db:migrate:status`
  a. See that you have 2 pending migrations
    ![Screenshot 2023-04-07 at 11 07 55 AM](https://user-images.githubusercontent.com/44326005/230656787-e6983592-e102-4e17-bd6a-0e574f3b84df.png)
8. Start Rails server and go to http://127.0.0.1:3000
  a. See that the ActionableError only tells you about one of your migrations
    ![Screenshot 2023-04-06 at 4 45 20 PM](https://user-images.githubusercontent.com/44326005/230513437-192e0009-8b20-4937-afa4-c5f003ea3484.png)
9. Run migrations with `bin/rails db:migrate`
  a. See that BOTH migrations are run
10. Rollback the migrations: `STEP=2 bin/rails db:rollback`
11. Restart Rails server and run migrations from the <kbd>Run pending migrations</kbd> button in the browser
  a. See that only the one migration in `db/migrate` gets run 


### Expected behavior
<!-- Tell us what should happen -->
- The actionable error page should list _all_ pending migrations that `bin/rails db:migrate:status` lists
- Clicking the <kbd>Run pending migrations</kbd> button should run all migrations that `bin/rails db:migrate` does

### Actual behavior
<!-- Tell us what happens instead -->
- The actionable error page only lists migrations under the top-level `db/migrate` directory, no matter how the application is configured.
- Clicking the <kbd>Run pending migrations</kbd> button only runs migrations located in top-level `db/migrate` directory

### System configuration
**Rails version**: 6.x, 7.x, `main` branch

**Ruby version**: 3.1.2, 3.2.0, 3.2.1
"
47881,Regression in setting multiple cookies.,ioquatix,more-information-needed,2023-04-06T23:42:54Z,2023-04-08T00:03:39Z,2023-04-08T00:03:39Z,"👋 hey @ioquatix

This change seems to have caused a regression when setting multiple cookies in a response. I haven't been able to come up with a reproducible test case (due to test harness shenanigans most likely), but it's easy to reproduce manually by setting multiple cookies.

When setting a single cookie, everything looks fine:

```
$ curl -I http://localhost:3000/session/new
HTTP/1.1 200 OK
...
Set-Cookie: a=1; path=/; SameSite=Lax
```

But when setting multiple cookies, the response contains a single `Set-Cookie` header with an Array-ified string:

```
$ curl -I http://localhost:3000/session/new
HTTP/1.1 200 OK
...
Set-Cookie: [""a=1; path=/; SameSite=Lax"", ""b=2; path=/; SameSite=Lax""]
```

The result is that browsers parse the first cookie's name as `[""name`. 

Prior to this, multiple cookies were set using individual headers:

```
Set-Cookie: a=1; path=/; SameSite=Lax
Set-Cookie: b=2; path=/; SameSite=Lax
```

_Originally posted by @packagethief in https://github.com/rails/rails/issues/47085#issuecomment-1499309508_
            "
47870,COPY ... TO cannot be executed on a readonly database connection (postgresql),kholbekj,"activerecord, attached PR, PostgreSQL",2023-04-05T16:11:29Z,2023-04-21T18:20:36Z,,"### Steps to reproduce
```
ActiveRecord::Base.connected_to(role: :reading) { ActiveRecord::Base.connection.execute('COPY (SELECT id FROM users WHERE id = 1) TO example.csv WITH CSV HEADER') }
#=> ActiveRecord::ReadOnlyError: Write query attempted while in readonly mode:
```

I guess the issue is that the regex simply considers COPY statements not read. But while COPY .. FROM _is_ a write query, COPY .. TO is not. It writes to a file in the filesystem, but only reads from the DB.

### Expected behavior
No error should be raised, the query should run.

### Actual behavior
`ActiveRecord::ReadOnlyError: Write query attempted while in readonly mode:` is raised

### System configuration
**Rails version**: 6.1.6.1 (but as far as I can tell the regex for rails 7 has the same issue)

**Ruby version**: 3.0.4p208
"
47868,issue with ENUM - incorrect activerecord condition result ,saviokmua,activerecord,2023-04-05T07:00:24Z,2023-05-07T08:49:35Z,2023-05-07T08:49:35Z,"### Steps to reproduce
example: 
we have model `Order` with the next enum
```ruby
enum status: { active: 0, canceled: 1 }
```
tried to select objects with incorrect status values

```ruby
Order.where(status: ""pending"")
```

### Expected behavior
Expected, that relation will be empty

### Actual behavior
Returns relation with records with `active` status

### System configuration
**Rails version**:
Rails 6.1.7.3
**Ruby version**:
ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]
"
47849,Incorrect handling of check constraints in MySQL 8.0.16+,stevehill1981,"activerecord, MySQL",2023-04-03T14:25:26Z,2023-04-04T18:44:44Z,2023-04-04T18:44:44Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

For our specific case, we have a MySQL 8.0 database that contains a table with a check constraint which validates a JSON column against a specific schema using the `json_schema_valid` function.

The structure.sql file was previously exported via `db:structure:dump`. I've attached a minimal version here.

1. Import the [attached SQL file](https://github.com/rails/rails/files/11139214/structure.sql.zip) into your test database (you'll need to unzip it first, GitHub doesn't allow SQL files to be attached).

```sql
DROP TABLE IF EXISTS `sample_table`;
CREATE TABLE `sample_table` (
                                `id` int NOT NULL AUTO_INCREMENT,
                                `test_column` json DEFAULT NULL,
                                PRIMARY KEY (`id`),
                                CONSTRAINT `non_empty_test_array` CHECK (json_schema_valid(_utf8mb4'\n        {\n          ""oneOf"": [\n            {\n              ""type"": ""null""\n            },\n            {\n              ""type"": ""array"",\n              ""minItems"": 1,\n              ""items"": {\n                ""type"": ""integer"",\n                ""minimum"": 0\n              }\n            }\n          ]\n        }',`test_column`))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
```

2. Dump the database again with `bin/rails db:schema:dump`. You'll find that the output for the check_constraint looks like this:

```ruby
ActiveRecord::Schema[7.1].define(version: 0) do
  create_table ""sample_table"", id: :integer, charset: ""utf8mb4"", collation: ""utf8mb4_0900_ai_ci"", force: :cascade do |t|
    t.json ""test_column""
    t.check_constraint ""son_schema_valid(_utf8mb4\\'\\\\n        {\\\\n          \""oneOf\"": [\\\\n            {\\\\n              \""type\"": \""null\""\\\\n            },\\\\n            {\\\\n              \""type\"": \""array\"",\\\\n              \""minItems\"": 1,\\\\n              \""items\"": {\\\\n                \""type\"": \""integer\"",\\\\n                \""minimum\"": 0\\\\n              }\\\\n            }\\\\n          ]\\\\n        }\\',`test_column`"", name: ""non_empty_test_array""
  end

end
```

3. If you try to import this back into a clean database now, with `bin/rails db:drop db:create db:schema:load`, it will fail:

```
bin/rails aborted!
ActiveRecord::StatementInvalid: Mysql2::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\'\\n        {\\n          ""oneOf"": [\\n            {\\n              ""type"": ""n' at line 1
/repro/db/schema.rb:14:in `block in <main>'
/repro/db/schema.rb:13:in `<main>'

Caused by:
Mysql2::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\'\\n        {\\n          ""oneOf"": [\\n            {\\n              ""type"": ""n' at line 1
```

4. You'll note that we also have weird escape characters in the constraint; these were present in the original SQL for the constraint but should probably also be stripped out.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

I couldn't get a reliably working reproduction script because I couldn't find any documentation on loading Rake tasks in for minimal scripts.

### Expected behavior
<!-- Tell us what should happen -->

When running the `db:schema:dump` task, we should expect that any tables with check constraints are dumped such that they can be imported with `db:schema:load`.

### Actual behavior
<!-- Tell us what happens instead -->

The first and last characters of the check constraint are stripped by the SchemaDumper. This is because of https://github.com/rails/rails/blob/bcd19d95d8b0e4a6239fb4a2437296547375563c/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L529 which checks to see if the database engine is MariaDB; support for proper check constraints appears to have been added in MySQL 8.0.16.

### System configuration
**Rails version**: Rails 7.1.0.alpha

**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]
"
47835,Active record not working properly locally with docker ( undefined method `body' for #<Rack::Files::Iterator ),parkournick2,"activestorage, more-information-needed",2023-03-31T16:03:22Z,2023-07-17T16:11:08Z,2023-07-17T16:11:08Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# 1 - Setup docker and docker compose
# 2 - upload any file with active record locally
# 3 - try to access the url generated by a code similar to this `paths.url_for(my_record.file)`
```

### Expected behavior
<!-- Tell us what should happen -->
Files should be correctly exposed by active record

### Actual behavior
<!-- Tell us what happens instead -->
When I try to access a link to a file in the active record locally, I can't download that file, this error only happens locally, not in production.

We ran our rails project using docker compose, but if the problem was docker compose then it would give the same error in production, wouldn't it?

![image](https://user-images.githubusercontent.com/61525227/229169109-deb87dcf-25ea-42f5-a144-44890f592745.png)

```
NoMethodError (undefined method `body' for #<Rack::Files::Iterator:0x00007f29e43b4d80 @path=""/app/storage/ba/em/baemxcgy086vcgbgk6azyv11otxv"", @ranges=[0..98186709], @options={:mime_type=>""text/plain"", :size=>98186710}>

       @stream.body
              ^^^^^):
```

this is my storage.yml
```yml
local:
  service: Disk
  root: <%= Rails.root.join(""storage"") %>
 
test:
  service: Disk
  root: <%= Rails.root.join(""tmp/storage"") %>
 
amazon:
  service: S3
  access_key_id: <%= ENV[""AWS_STORAGE_ACCESS_KEY_ID""] %>
  secret_access_key: <%= ENV[""AWS_STORAGE_SECRET_ACCESS_KEY""] %>
  bucket: <%= ENV[""AWS_STORAGE_BUCKET""] %>
  region: <%= ENV[""AWS_STORAGE_REGION""] %>
```

storage folder permissions
```bash
nicolas@nicolas:~/my-project$ sudo ls -l storage/
total 68
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 18:38 0g
drwxr-xr-x 3 nicolas nicolas 4096 mar 31 12:33 1o
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 18:35 1w
drw-rw-rw- 3 nicolas nicolas 4096 mar 31 11:57 38
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:08 9h
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:07 9x
drwxr-xr-x 3 nicolas nicolas 4096 mar 31 12:31 ba
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:15 bj
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 18:35 bm
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 18:35 ck
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:07 fy
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:07 ha
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:08 ob
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:09 xv
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:11 y3
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 18:02 yk
drw-rw-rw- 3 nicolas nicolas 4096 mar 30 17:19 yt
```

Dockerfile
```Dockerfile
# Dockerfile development version
FROM ruby:3.1.2-bullseye

# Install Postgresql 14
RUN apt-get update -y
RUN apt install curl ca-certificates gnupg libzmq5-dev -y
RUN curl https://www.postgresql.org/media/keys/ACCC4CF8.asc \
          | gpg --dearmor \
          | tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null
RUN sh -c 'echo ""deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main"" > /etc/apt/sources.list.d/postgresql.list'
RUN apt update
RUN apt-get -y install postgresql-14

# Install node
RUN curl -sL https://deb.nodesource.com/setup_16.x -o /tmp/nodesource_setup.sh
RUN bash /tmp/nodesource_setup.sh
RUN apt install nodejs

# Skip installing gem documentation
RUN set -eux; \
	mkdir -p /usr/local/etc; \
	{ \
		echo 'install: --no-document'; \
		echo 'update: --no-document'; \
	} >> /usr/local/etc/gemrc

# Install gems
WORKDIR /app
COPY Gemfile Gemfile.lock ./
RUN gem install bundler
RUN mkdir -p vendor/cache
ARG BUNDLE_WITHOUT=development:test
RUN bundle config set without ""$BUNDLE_WITHOUT""
RUN bundle check || bundle install --jobs $(nproc)
COPY . ./ 

# Start server
EXPOSE 3000
ENTRYPOINT [""/app/bin/docker-entrypoint.sh""]

CMD [""bin/rails"", ""server"", ""-b"", ""0.0.0.0""]

```

docker-compose.yml
```yml
version: ""3.9""

services:

  postgres:
    mem_limit: ${POSTGRES_CONTAINER_RAM_LIMIT:-0}
    image: postgres:14.2
    environment:
      POSTGRES_USER: nothing
      POSTGRES_PASSWORD: nothing
    ports: 
      - '5433:5432'
    volumes:
      - myApp-postgres:/var/lib/postgresql/data
      - .:/app
    profiles: [""dev""]
    env_file:
      - .env
      - .env.local

  redis:
    mem_limit: ${REDIS_CONTAINER_RAM_LIMIT:-0}
    image: redis:7.0
    ports:
      - '6380:6380'
    volumes:
      - .:/app
      - myApp-redis:/var/lib/redis/data
    command: redis-server --port 6380
    profiles: [""dev""]
    env_file:
      - .env
      - .env.local

  myApp:
    mem_limit: ${DEV_API_CONTAINER_RAM_LIMIT:-0}
    stdin_open: true
    tty: true
    build:
      context: .
      args:
        BUNDLE_WITHOUT: ''
    volumes:
      - .:/app
      - gem_cache:/vendor/bundle/gems
    links:
      - postgres
      - redis
    ports:
      # Rails Port
      - '3000:3000'
      # Debugger port
      - '12345:12345'
    environment:
      - DATABASE_URL=postgresql://myApp:myApp@postgres:5432/myApp?encoding=utf8&pool=5&timeout=5000
      - REDIS_URL=redis://redis:6380/0
    env_file:
      - .env.local
      - .env
    profiles: [""dev""]

  sidekiq:
    mem_limit: ${DEV_WORKER_CONTAINER_RAM_LIMIT:-0}
    build:
      context: .
      args:
        BUNDLE_WITHOUT: ''
    command: bundle exec sidekiq 
    volumes:
      - .:/app
    links:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://myApp:myApp@postgres:5432/myApp?encoding=utf8&pool=5&timeout=5000
      - REDIS_URL=redis://redis:6380/0
    env_file:
      - .env
      - .env.local
    profiles: [""dev""]

  api:
    mem_limit: ${CONTAINER_RAM_LIMIT:-0}
    stdin_open: true
    tty: true
    build:
      context: .
    volumes:
      - .:/app
    ports:
      - '80:3000'
    env_file:
      - .env
    profiles: [""api""]

  worker:
    mem_limit: ${CONTAINER_RAM_LIMIT:-0}
    build:
      context: .
    command: bundle exec sidekiq 
    volumes:
      - .:/app
    env_file:
      - .env
    profiles: [""worker""]

volumes:
  yuri-postgres:
  yuri-redis:
  gem_cache:
```

my model:
```Ruby
class CandidateCsv < ApplicationRecord
  belongs_to :user
  has_one_attached :file

  enum status: {
    pending: 'pending',
    finished: 'finished'
  }, _prefix: :status
end
```

### System configuration
**Rails version**:ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]

**Ruby version**:Rails 7.0.4
"
47833,rspec failing with undefined role_names with legacy_connection_handling = false in Rails 7,mmpeters75,"activerecord, more-information-needed",2023-03-31T14:10:37Z,2023-10-05T16:52:45Z,2023-04-14T15:48:07Z,"### Steps to reproduce
I set config.active_record.legacy_connection_handling = false in my application. I have only one database. The app is running fine (with puma) but I have config.use_transactional_fixtures = true set in my rails_helper.rb file for rspec, and setting that to true causes the following error:

```NoMethodError: undefined method `role_names' for #<ActiveRecord::ConnectionAdapters::LegacyPoolManager```

I could probably resolve this by setting use_transactional_fixtures to false and using database cleaner instead but this should work, either by some config I'm clearly missing or something else. 

database.yml

```test:
  min_messages: WARNING
  adapter: postgresql
  encoding: unicode
  host: <%= ENV['DATABASE_HOST'] || 'localhost' %>
  database: <%= ENV['DATABASE_NAME'] %><%= ENV['TEST_ENV_NUMBER'] %>
  pool: 5
  username: <%= ENV['DATABASE_UID'] %>
  password: <%= ENV['DATABASE_PWD'] %>
  template: template0
  checkout_timeout: 5
  connect_timeout: 120
  read_timeout: 30
```

### Expected behavior
Rspec test runs

### Actual behavior
```NoMethodError: undefined method `role_names' for #<ActiveRecord::ConnectionAdapters::LegacyPoolManager:0x00007fd8410e0a58 @name_to_pool_config={:default=>#<ActiveRecord::ConnectionAdapters::PoolConfig:0x00007fd8430c0008 @_mutex=#<Thread::Mutex:0x00007fd8430cbef8>, @connection_class=ActiveRecord::Base, @db_config=#<ActiveRecord::DatabaseConfigurations::HashConfig:0x00007fd8430c14f8 @env_name=""test"", @name=""primary"", @configuration_hash={:min_messages=>""WARNING"", :adapter=>""postgresql"", :encoding=>""unicode"", :host=>""localhost"", :database=>""spring-web_test"", :pool=>5, :username=>""spring_web"", :password=>""devpassword"", :template=>""template0"", :checkout_timeout=>5, :connect_timeout=>120, :read_timeout=>30}>, @role=:writing, @shard=:default, @pool=#<ActiveRecord::ConnectionAdapters::ConnectionPool:0x00007fd8430cb1b0 @mon_data=#<Monitor:0x00007fd8430cb070>, @mon_data_owner_object_id=20520, @query_cache_enabled=#<Concurrent::Map:0x00007fd8430cafa8 entries=0 default_proc=#<Proc:0x00007fd8430caeb8 /Users/matt.peters/git/klarna/spring-web/vendor/cache/ruby/3.0.0/gems/activerecord-7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb:32>>```

### System configuration
Rails version
7.0.4.

**Ruby version**:
3.0.3"
47832,test_iso8601_output_and_reparsing test fails on i686,Apteryks,"activesupport, stale",2023-03-31T12:23:25Z,2023-09-30T21:56:33Z,2023-09-30T21:56:33Z,"### Steps to reproduce
Run the test suite on a i686-linux machine.

### Expected behavior
All tests should pass.

### Actual behavior

The test_iso8601_output_and_reparsing test fails (just on i686, not x86_64):

```
starting phase `check'
/gnu/store/g6a33hmhk43dsd7a9kqcq1s1mcfc7ich-ruby-2.7.4/bin/ruby -w -I""lib"" -I""/gnu/store/g6a33hmhk43dsd7a9kqcq1s1mcfc7ich-ruby-2.7.4/lib/ruby/gems/2.7.0/gems/rake-13.0.1/lib"" ""/gnu/store/g6a33hmhk43dsd7a9kqcq1s1mcfc7ich-ruby-2.7.4/lib/ruby/gems/2.7.0/gems/rake-13.0.1/lib/rake/rake_test_loader.rb"" ""test/actionable_error_test.rb"" ""test/array_inquirer_test.rb"" ""test/autoload_test.rb"" ""test/benchmarkable_test.rb"" ""test/broadcast_logger_test.rb"" ""test/cache/cache_entry_test.rb"" ""test/cache/cache_key_test.rb"" ""test/cache/cache_store_logger_test.rb"" ""test/cache/cache_store_namespace_test.rb"" ""test/cache/cache_store_setting_test.rb"" ""test/cache/coder_test.rb"" ""test/cache/local_cache_middleware_test.rb"" ""test/cache/stores/null_store_test.rb"" ""test/callback_inheritance_test.rb"" ""test/callbacks_test.rb"" ""test/clean_backtrace_test.rb"" ""test/clean_logger_test.rb"" ""test/concern_test.rb"" ""test/concurrency/load_interlock_aware_monitor_test.rb"" ""test/configurable_test.rb"" ""test/configuration_file_test.rb"" ""test/core_ext/array/access_test.rb"" ""test/core_ext/array/conversions_test.rb"" ""test/core_ext/array/extract_options_test.rb"" ""test/core_ext/array/extract_test.rb"" ""test/core_ext/array/grouping_test.rb"" ""test/core_ext/array/wrap_test.rb"" ""test/core_ext/bigdecimal_test.rb"" ""test/core_ext/class/attribute_test.rb"" ""test/core_ext/class_test.rb"" ""test/core_ext/date_and_time_compatibility_test.rb"" ""test/core_ext/date_ext_test.rb"" ""test/core_ext/date_time_ext_test.rb"" ""test/core_ext/digest/uuid_test.rb"" ""test/core_ext/duration_test.rb"" ""test/core_ext/enumerable_test.rb"" ""test/core_ext/file_test.rb"" ""test/core_ext/hash/transform_values_test.rb"" ""test/core_ext/hash_ext_test.rb"" ""test/core_ext/integer_ext_test.rb"" ""test/core_ext/kernel/concern_test.rb"" ""test/core_ext/kernel_test.rb"" ""test/core_ext/load_error_test.rb"" ""test/core_ext/module/anonymous_test.rb"" ""test/core_ext/module/attr_internal_test.rb"" ""test/core_ext/module/attribute_accessor_per_thread_test.rb"" ""test/core_ext/module/attribute_accessor_test.rb"" ""test/core_ext/module/attribute_aliasing_test.rb"" ""test/core_ext/module/concerning_test.rb"" ""test/core_ext/module/introspection_test.rb"" ""test/core_ext/module/remove_method_test.rb"" ""test/core_ext/module_test.rb"" ""test/core_ext/name_error_test.rb"" ""test/core_ext/numeric_ext_test.rb"" ""test/core_ext/object/acts_like_test.rb"" ""test/core_ext/object/blank_test.rb"" ""test/core_ext/object/deep_dup_test.rb"" ""test/core_ext/object/duplicable_test.rb"" ""test/core_ext/object/inclusion_test.rb"" ""test/core_ext/object/instance_variables_test.rb"" ""test/core_ext/object/json_cherry_pick_test.rb"" ""test/core_ext/object/json_gem_encoding_test.rb"" ""test/core_ext/object/to_param_test.rb"" ""test/core_ext/object/to_query_test.rb"" ""test/core_ext/object/try_test.rb"" ""test/core_ext/pathname/existence_test.rb"" ""test/core_ext/range_ext_test.rb"" ""test/core_ext/regexp_ext_test.rb"" ""test/core_ext/secure_random_test.rb"" ""test/core_ext/string_ext_test.rb"" ""test/core_ext/symbol_ext_test.rb"" ""test/core_ext/time_ext_test.rb"" ""test/core_ext/time_with_zone_test.rb"" ""test/current_attributes_test.rb"" ""test/dependencies_test.rb"" ""test/deprecation/method_wrappers_test.rb"" ""test/deprecation/proxy_wrappers_test.rb"" ""test/deprecation_test.rb"" ""test/descendants_tracker_test.rb"" ""test/digest_test.rb"" ""test/encrypted_configuration_test.rb"" ""test/encrypted_file_test.rb"" ""test/error_reporter_test.rb"" ""test/execution_context_test.rb"" ""test/executor_test.rb"" ""test/file_update_checker_test.rb"" ""test/fork_tracker_test.rb"" ""test/gzip_test.rb"" ""test/hash_with_indifferent_access_test.rb"" ""test/i18n_test.rb"" ""test/inflector_test.rb"" ""test/isolated_execution_state_test.rb"" ""test/json/decoding_test.rb"" ""test/json/encoding_test.rb"" ""test/key_generator_test.rb"" ""test/lazy_load_hooks_test.rb"" ""test/log_subscriber_test.rb"" ""test/logger_test.rb"" ""test/message_encryptor_test.rb"" ""test/message_verifier_test.rb"" ""test/messages/rotation_configuration_test.rb"" ""test/multibyte_chars_test.rb"" ""test/multibyte_proxy_test.rb"" ""test/notifications/evented_notification_test.rb"" ""test/notifications/instrumenter_test.rb"" ""test/notifications_test.rb"" ""test/number_helper_i18n_test.rb"" ""test/number_helper_test.rb"" ""test/option_merger_test.rb"" ""test/ordered_hash_test.rb"" ""test/ordered_options_test.rb"" ""test/parameter_filter_test.rb"" ""test/per_thread_registry_test.rb"" ""test/reloader_test.rb"" ""test/rescuable_test.rb"" ""test/safe_buffer_test.rb"" ""test/secure_compare_rotator_test.rb"" ""test/security_utils_test.rb"" ""test/share_lock_test.rb"" ""test/silence_logger_test.rb"" ""test/string_inquirer_test.rb"" ""test/subscriber_test.rb"" ""test/tagged_logging_test.rb"" ""test/test_case_test.rb"" ""test/testing/after_teardown_test.rb"" ""test/testing/constant_lookup_test.rb"" ""test/testing/file_fixtures_test.rb"" ""test/testing/method_call_assertions_test.rb"" ""test/time_travel_test.rb"" ""test/time_zone_test.rb"" ""test/transliterate_test.rb"" ""test/xml_mini/jdom_engine_test.rb"" ""test/xml_mini/libxml_engine_test.rb"" ""test/xml_mini/libxmlsax_engine_test.rb"" ""test/xml_mini/nokogiri_engine_test.rb"" ""test/xml_mini/nokogirisax_engine_test.rb"" ""test/xml_mini/rexml_engine_test.rb"" ""test/xml_mini/xml_mini_engine_test.rb"" ""test/xml_mini_test.rb"" 
/gnu/store/1il0aqb2570nxh9yv3bgkmi6k26c56bb-ruby-libxml-3.0.0/lib/ruby/vendor_ruby/gems/libxml-ruby-3.0.0/lib/libxml/schema/type.rb:8: warning: method redefined; discarding old annotation
/gnu/store/1il0aqb2570nxh9yv3bgkmi6k26c56bb-ruby-libxml-3.0.0/lib/ruby/vendor_ruby/gems/libxml-ruby-3.0.0/lib/libxml/schema/element.rb:18: warning: method redefined; discarding old annotation
Running 3792 tests in parallel using 12 processes
Run options: --seed 12320

# Running:

could not load hiredis extension, using (slower) pure Ruby implementation.
....WARNING: could not load hiredis extension, using (slower) pure Ruby implementation.


Finished in 5.270397s, 719.4905 runs/s, 2324.6828 assertions/s.

  1) Error:
DurationTest#test_iso8601_output_and_reparsing:
Date::Error: invalid date
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/date/calculations.rb:115:in `>>'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/date/calculations.rb:115:in `advance'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/time/calculations.rb:193:in `advance'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:496:in `block in sum'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:488:in `each'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:488:in `inject'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:488:in `sum'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:431:in `since'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/time/calculations.rb:282:in `plus_with_duration'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/test/core_ext/duration_test.rb:664:in `block in test_iso8601_output_and_reparsing'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/test/core_ext/duration_test.rb:662:in `each'
    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/test/core_ext/duration_test.rb:662:in `test_iso8601_output_and_reparsing'

3792 runs, 12252 assertions, 0 failures, 1 errors, 55 skips

You have skipped tests. Run with --verbose for details.
rake aborted!
```

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 2.7.4
"
47817,"Difference in number of items retrieved in SQL query between ""'Nulls Last' && limit"" and ""Nulls First' && limit""",hatsu38,activerecord,2023-03-30T10:57:57Z,2023-04-03T08:25:42Z,2023-04-03T08:25:42Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

I discovered that the number of records retrieved changes when using ""nulls_last"" and ""Limit"" in the ""order by"" clause of an eager_loaded table and when using ""nulls_first"" and ""Limit"".
I thought the number of records retrieved would be the same in both cases. The following script can reproduce this problem.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""7.0.4.3""
  gem ""pg"", ""1.4.6""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.

ActiveRecord::Base.establish_connection(
  {adapter: 'postgresql', database: 'testing_db'}
)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :employees, force: true do |t|
    t.string :name
  end
  create_table :direct_message_rooms  do |t|
    t.datetime :last_message_posted_at
  end
  create_table :direct_message_room_and_employees do |t|
    t.references :direct_message_room,
                 null: false,
                 foreign_key: true,
                 index: { name: ""direct_message_room_fk_id"" }
    t.references :employee, null: false, foreign_key: true, index: true
  end
end

class Employee < ActiveRecord::Base
  has_many :direct_message_room_and_employees, dependent: :destroy
  has_many :direct_message_rooms, through: :direct_message_room_and_employees
end

class DirectMessageRoom < ActiveRecord::Base
  has_many :direct_message_room_and_employees, dependent: :destroy
  has_many :employees, through: :direct_message_room_and_employees
end

class DirectMessageRoomAndEmployee < ActiveRecord::Base
  belongs_to :direct_message_room
  belongs_to :employee
end

class BugTest < Minitest::Test
  def test_association_stuff
    seed
    employees = Employee.eager_load(:direct_message_rooms)
    rooms_desc = DirectMessageRoom.arel_table[:last_message_posted_at].desc
    
    assert_equal employees.order(rooms_desc.nulls_last).limit(10).count, employees.order(rooms_desc.nulls_first).limit(10).count
  end

  private

  def seed
    owner = Employee.create!(name: ""owner"")
    15.times do |i|
      employee = Employee.create!(name: ""employee_#{i}"")
      DirectMessageRoom.create!(
        last_message_posted_at: i.days.ago,
        employees: [owner, employee]
      )
    end
    15.times do |i|
      employee = Employee.create!(name: ""employee_#{i}"")
      DirectMessageRoom.create!(
        last_message_posted_at: nil,
        employees: [owner, employee]
      )
    end
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

I expected both 'employees.order(rooms_desc.nulls_last).limit(10).count' and 'employees.order(rooms_desc.nulls_first).limit(10).count' to return 10 items.

### Actual behavior
<!-- Tell us what happens instead -->
`employees.order(rooms_desc.nulls_last).limit(10).count` is 6
`employees.order(rooms_desc.nulls_first).limit(10).count` is 10.

```
  1) Failure:
BugTest#test_association_stuff [nulls_last.rb:63]:
Expected: 6
  Actual: 10

1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**:
7.0.4.3

**Ruby version**:
3.2.0"
47814,"Could not log ""sql.active_record"" event. NoMethodError: undefined method `round' for nil:NilClass",kvokka,activerecord,2023-03-30T04:13:07Z,2023-03-31T07:09:30Z,2023-03-31T07:09:30Z,"### Steps to reproduce

```bash
rails new app
cd app
bundle exec rails g scaffold user name
bundle exec rails db:migrate
bundle exec rails runner 'User.create name: :foo'
bundle exec rails runner 'User.create name: :bar'
bundle exec rails console
```

In the console:
```ruby
ApplicationRecord.connection.execute(User.limit(2).to_sql, async: true)

Could not log ""sql.active_record"" event. NoMethodError: undefined method `round' for nil:NilClass
[""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-7.0.4.3/lib/active_record/log_subscriber.rb:39:in `sql'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/subscriber.rb:149:in `finish'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/log_subscriber.rb:115:in `finish'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/fanout.rb:211:in `finish'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/fanout.rb:76:in `block in finish'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/fanout.rb:91:in `block in iterate_guarding_exceptions'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/fanout.rb:90:in `each'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/fanout.rb:90:in `iterate_guarding_exceptions'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/fanout.rb:76:in `finish'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/instrumenter.rb:49:in `finish_with_state'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/instrumenter.rb:30:in `instrument'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/abstract_adapter.rb:756:in `log'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/sqlite3/database_statements.rb:30:in `execute'"",
 ""(irb):4:in `<main>'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/workspace.rb:113:in `eval'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/workspace.rb:113:in `evaluate'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/context.rb:497:in `evaluate'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:587:in `block (2 levels) in eval_input'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:776:in `signal_status'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:566:in `block in eval_input'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/ruby-lex.rb:257:in `block (2 levels) in each_top_level_statement'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/ruby-lex.rb:239:in `loop'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/ruby-lex.rb:239:in `block in each_top_level_statement'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/ruby-lex.rb:238:in `catch'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb/ruby-lex.rb:238:in `each_top_level_statement'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:565:in `eval_input'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:499:in `block in run'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:498:in `catch'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:498:in `run'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/irb-1.6.3/lib/irb.rb:416:in `start'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/railties-7.0.4.3/lib/rails/commands/console/console_command.rb:70:in `start'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/railties-7.0.4.3/lib/rails/commands/console/console_command.rb:19:in `start'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/railties-7.0.4.3/lib/rails/commands/console/console_command.rb:102:in `perform'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/thor-1.2.1/lib/thor/command.rb:27:in `run'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/thor-1.2.1/lib/thor/invocation.rb:127:in `invoke_command'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/thor-1.2.1/lib/thor.rb:392:in `dispatch'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/railties-7.0.4.3/lib/rails/command/base.rb:87:in `perform'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/railties-7.0.4.3/lib/rails/command.rb:48:in `invoke'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/railties-7.0.4.3/lib/rails/commands.rb:18:in `<main>'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/bootsnap-1.16.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:32:in `require'"",
 ""/Users/mikeb/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/bootsnap-1.16.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:32:in `require'"",
 ""bin/rails:4:in `<main>'""]
```

With `async: false`  everything works as expected

```bash
$ ruby -v
ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [arm64-darwin22]
$ rails -v
Rails 7.0.4.3
```"
47811,Maintenance Policy chart,zzak,stale,2023-03-30T00:16:46Z,2023-07-23T16:30:25Z,2023-07-23T16:30:25Z,"Inspired by @gotoken's PR to ruby-lang: ruby/www.ruby-lang.org#2970, I'd love to see a similar chart for Rails maintenance policy.

I believe this should live on this page:
https://guides.rubyonrails.org/maintenance_policy.html

This document is important, and we still get asked about supported versions on a somewhat regular basis, so I think having an image that visualizes the current state will be very impactful.

I've just created a mock using Speadsheets:
![Screenshot 2023-03-30 at 9 08 30](https://user-images.githubusercontent.com/277819/228695864-ac76b5b6-533a-4e18-86ff-abddf0ef0896.png)

It would be great if this could be done in code, I've thought about maybe using a Gantt chart, but since we're not restricted by time (like Ruby releases on a schedule), it's a bit harder to do. The guides are published using markdown, so there might be something there -- or we can add something like Mermaid to the generator.

Open to ideas and suggestions there, last resort we just drop an image on the page."
47809,load_async on associations does not load the association,mikerobe,"activerecord, pinned",2023-03-29T22:00:33Z,2023-12-21T10:36:40Z,,"### Steps to reproduce

If you have a model called User that `has_many` notes for example,
``` ruby
class User < ApplicationRecord
  has_many :notes, dependent: :destroy, as: :notable
end
```

``` ruby
class Note < ApplicationRecord
  belongs_to :notable, polymorphic: true
end
```

and you then load the `notes` association using `load_async`,

``` ruby
user = User.find(1)
user.notes.load_async
user.notes.loaded? # false
sleep 3
puts user.notes # Kicks off another SELECT query
```

the asynchronously loaded data is not used on subsequent requests to the association.

The only way to get the async loaded association to be used is to save the result of `load_async` to a variable, and the result is then only usable from that variable rather than the association itself:
``` ruby
user = User.find(1)
notes = user.notes.load_async
notes.loaded? # true
sleep 3
puts notes # uses the async results
```

### Expected behavior
I would expect `user.notes` to use the result of the async load rather than kicking off another query, and I would expect `user.notes.loaded?` to be true after the call to `user.notes.load_async`.

### Actual behavior
It kicks off another query when accessing the association and `user.notes.loaded?` is false after `user.notes.load_async`.

### System configuration
**Rails version**: 7.0.4.3

**Ruby version**: 3.1.3
"
47795,ActiveRecord where does not use binds even though prepared_statements is true with mysql,yelvert,"activerecord, stale",2023-03-28T18:54:13Z,2023-08-17T00:10:45Z,2023-08-17T00:10:45Z,"### Steps to reproduce
Rails 6+ app with `prepared_statements: true` in database.yml

```ruby
> User.where(first_name: 'test')
  User Load (0.7ms)  SELECT `users`.* FROM `users` WHERE `users`.`first_name` = ?  [[""first_name"", ""test""]]

> User.where('first_name = ?', 'test')
  User Load (0.3ms)  SELECT `users`.* FROM `users` WHERE (first_name = 'test')
```

### Expected behavior
These two `where`s should use the same binds and be logged the same way.

### Actual behavior
The first way uses the correct binds and logs correctly, the second way does not.

### System configuration
**Rails version**: Verified this error in 6 and 7

**Ruby version**: 2.7.2
"
47792,ID is inserted is zero after create calllback when default function for ID is set uuid_short() in migration,jainankita90,activerecord,2023-03-28T15:57:32Z,2023-04-05T11:01:13Z,2023-04-05T11:01:11Z,"### Steps to reproduce
Create Migration As

```
# frozen_string_literal: true

class CreateAppUsers < ActiveRecord::Migration[7.0]
  def change
  create_table :app_users, id: false do |t|
      ## Database authenticatable
      t.bigint :id, primary_key: true, null: false, default: -> { ""(uuid_short())"" }
      t.string :email,              null: false, default: """"
      t.string :encrypted_password, null: false, default: """"
      t.timestamps null: false
    end

    add_index :app_users, :email,                unique: true

  end
end
```
Create Model for app_users table
```
class AppUser < ApplicationRecord
  after_create :show_user_id
  def show_user_id
    puts self.id
  end

end
```

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

### Run Script

Go to rails console
```
AppUser.create(email: 'email@new.com', encrypted_password: 'password')

```

### Expected behavior
#<AppUser:0x00007fad5631dd40
 id: 100243425718173704,
 email: ""email@new.com"",
 encrypted_password: ""[FILTERED]"",
 created_at: Tue, 28 Mar 2023 15:50:59.216980000 UTC +00:00,
 updated_at: Tue, 28 Mar 2023 15:50:59.216980000 UTC +00:00>

### Actual behavior
#<AppUser:0x00007fad5631dd40
 id: **0,**
 email: ""email@new.com"",
 encrypted_password: ""[FILTERED]"",
 created_at: Tue, 28 Mar 2023 15:50:59.216980000 UTC +00:00,
 updated_at: Tue, 28 Mar 2023 15:50:59.216980000 UTC +00:00>

### System configuration
**Rails version**: Rails 7.0.4.2  

**Ruby version**:
ruby 3.2.1 (2023-02-08 revision 31819e82c8) [x86_64-linux-musl]

"
47775,PostgreSQL's ActiveRecord adapter / Arel does not support the `ONLY` keyword,waymondo,activerecord,2023-03-26T23:51:31Z,2023-03-28T15:41:34Z,2023-03-28T15:41:28Z,"In Postgres, [the keyword `ONLY`](https://www.postgresql.org/docs/15/sql-select.html#SQL-FROM) can be used after `FROM` to specify that results should only be taken from the named table, and not any descendant tables that may exist, as in the case of [table inheritance](https://www.postgresql.org/docs/current/ddl-inherit.html). `ONLY` can also be used in a join statement in the same manner, i.e. ""INNER JOIN ONLY posts ON ..."".

It seems that the Postgres Arel Visitor class inherits the behavior of constructing the [`SELECT` statement from `Arel::Visitors::ToSql`](https://github.com/rails/rails/blob/beb43e0182a9ea83b1e18d353a54cabe300f98a8/activerecord/lib/arel/visitors/to_sql.rb#L146-L165), which only prepends `FROM` to the collector. `Arel::Nodes::SelectCore` doesn't seem to have an attribute that seems relevant to prefixing the keyword either.

### Expected behavior

As an ActiveRecord user, I would like to build an Arel-compatible query where I can opt-into prefixing the `ONLY` keyword when selecting and joining certain tables. I don't have a strong opinion on the API for this, but a naive example could be like:

```ruby
Post.table_name # => ""posts""

Post.from_only(true).where(status: 'draft').to_sql
# => SELECT posts.* FROM ONLY posts WHERE status = 'draft'

User.joins(:posts).merge(Post.from_only(true)).to_sql
# => SELECT users.* FROM users INNER JOIN ONLY posts ON posts.user_id = users.id
```

Does this sound feasible? I would be willing to help with creating a PR for the feature, but I would need guidance when it comes to the Arel implementation. Curious to hear thoughts about this.
"
47759,Transactions not working as expected with many actions inside,BlinovA25,"activerecord, more-information-needed",2023-03-24T09:30:12Z,2023-04-09T22:36:24Z,2023-04-09T22:36:24Z,"### Steps to reproduce

This bug is more about behavior of system using transactions and it can be caused by rails issue or some Heroku stuff. Described below actions(on screenshots) are surrounded by one ActiveRecord::Base.transaction block.

```Ruby
# updater.rb

ActiveRecord::Base.transaction do
    params[:obj_list].each do |obj|
        updater = ObjUpdater.new(some_params)
        updater.update(insert_list, delete_list)
    end
end
``` 

```Ruby
# obj_updater.rb

def update(insert_list, delete_list)
    insert_list.each do
        # somewhere here we started seeing own transactions for INSERT action
        create!(some_params)
    end

    delete_list.each do
        update!(deleted_at: DateTime.now)
    end
end
``` 

### Expected behavior
If you have one big transaction and have many actions(inserts and updates used without their own explicitly declared transactions) you expect that all changes inside the transaction will be rollbacked in case you raise the error. 

<img width=""1434"" alt=""Снимок экрана 2023-03-23 в 19 13 01"" src=""https://user-images.githubusercontent.com/70841471/227266709-8a1ace87-1bf9-4bfe-acb8-0787d2c79514.png"">

### Actual behavior
The described behavior works fine with a couple of actions, but after a lot of actions, the system automatically surrounds each new INSERT and UPDATE DB log with its own transaction logs:

<img width=""1432"" alt=""Снимок экрана 2023-03-23 в 19 08 39"" src=""https://user-images.githubusercontent.com/70841471/227266727-057531e1-a1aa-4d6e-9f43-da50a66d44cf.png"">

As a result rollback functionality doesn't works properly(system doesn't rollbacks all actions that have their own transaction).

### System configuration
**Rails version**: 6.0.3.4

**Ruby version**: 2.6.6

**PostgreSQL version**: 14

**Hosting**: Heroku


"
47750,update_all on ordered collection raises error for table without id,IngoAlbers,"activerecord, stale",2023-03-23T13:44:47Z,2023-08-08T18:49:17Z,2023-08-08T18:49:17Z,"### Steps to reproduce
When a table doesn't have an id or primary key column calling `update_all` on an ordered collection will raise an error.
For example something directly from the `update_all`examples. 
```ruby
# Update all books that match conditions, but limit it to 5 ordered by date
Book.where('title LIKE ?', '%Rails%').order(:created_at).limit(5).update_all(author: 'David')
```
I am aware this can be resolved by having an id or primary key column, but I still wouldn't expect an error and wrongly generated SQL.

Simple testcase:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, id: false do |t|
    t.string ""title""
    t.timestamps
  end
end

class Post < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_ordered_update_all
    post = Post.create!
    Post.order(:created_at).update_all(title: ""Title"")

    assert_equal ""Title"", post.reload.title
  end
end

```

### Expected behavior
`update_all` updates the attribute of all records.

### Actual behavior
Exception is raised:
```
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: posts.
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/sqlite3-1.6.1-arm64-darwin/lib/sqlite3/database.rb:152:in `initialize'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/sqlite3-1.6.1-arm64-darwin/lib/sqlite3/database.rb:152:in `new'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/sqlite3-1.6.1-arm64-darwin/lib/sqlite3/database.rb:152:in `prepare'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/sqlite3/database_statements.rb:50:in `block (2 levels) in exec_query'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activesupport-7.0.4.3/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activesupport-7.0.4.3/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/sqlite3/database_statements.rb:47:in `block in exec_query'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activesupport-7.0.4.3/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `handle_interrupt'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activesupport-7.0.4.3/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `block in synchronize'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activesupport-7.0.4.3/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activesupport-7.0.4.3/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/abstract_adapter.rb:765:in `block in log'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activesupport-7.0.4.3/lib/active_support/notifications/instrumenter.rb:24:in `instrument'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/abstract_adapter.rb:756:in `log'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/sqlite3/database_statements.rb:46:in `exec_query'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/sqlite3/database_statements.rb:74:in `exec_delete'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/abstract/database_statements.rb:175:in `update'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/connection_adapters/abstract/query_cache.rb:22:in `update'
    /opt/homebrew/Cellar/asdf/0.11.1/installs/ruby/3.2.1/lib/ruby/gems/3.2.0/gems/activerecord-7.0.4.3/lib/active_record/relation.rb:485:in `update_all'
    test.rb:32:in `test_ordered_update_all'
```
Generated SQL:
```sql
Post Update All (0.1ms)  UPDATE ""posts"" SET ""title"" = ? WHERE ""posts""."""" IN (SELECT ""posts""."""" FROM ""posts"" ORDER BY ""posts"".""created_at"" ASC)  [[""title"", ""Title""]]
```

### System configuration
**Rails version**: >=6.1.7.3

**Ruby version**: 3.2.1
"
47743,Allow detaching ActionText::RichText embeds instead of purging,tsrivishnu,actiontext,2023-03-23T01:07:00Z,2023-03-28T15:46:06Z,2023-03-28T15:46:05Z,"Currently, when an attachment (say, an image) is removed from ActionText::RichText, `purge_later` is triggered on the blob. 

This is coming  from the definition of [`has_many_attached :embeds` on RichText](https://github.com/rails/rails/blob/v7.0.4.3/actiontext/app/models/action_text/rich_text.rb#L15). 

[`has_many_attached`](https://github.com/rails/rails/blob/v7.0.4.3/activestorage/lib/active_storage/attached/model.rb#L129) supports a `dependant` option that can be set to `false`. This can prevent purging.

### Why this might be useful?

If developers want to support undo actions in rich text editors, users might delete an image attachment and use undo to re-add it. If there is auto-save feature on the editor, the delete action would delete the attachment from the RichText and this might be purged before the user performs undo action. 
"
47740,[ActiveSupport::Inflector] Acronyms preceded by digits behave differently in `camelize` and `underscore`,b-loyola,activesupport,2023-03-22T22:33:42Z,2023-10-30T07:18:01Z,2023-10-30T07:17:49Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activesupport"", ""~> 7.0.0""
end

require ""active_support""
require ""active_support/inflector""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def setup
    ActiveSupport::Inflector.inflections(:en) do |inflect|
      inflect.acronym(""HTTP"")
    end
  end

  def test_camelize_and_underscore_acronym
    assert_equal ""http"", ""HTTP"".underscore
    assert_equal ""HTTP"", ""http"".camelize
    assert_equal ""http_one"", ""HTTPOne"".underscore
    assert_equal ""HTTPOne"", ""http_one"".camelize
    assert_equal ""http1.1"", ""HTTP1.1"".underscore
    assert_equal ""HTTP1.1"", ""http1.1"".camelize
  end
end
```

### Expected behavior

Should acronyms followed by numbers be considered their own words for `camelize` in the same way they are for `underscore`? The `underscore` method seems to transform `HTTP1` to `http1` and `HTTPOne` to `http_one`, seemingly recognizing the acronym regardless of the character that follows it, whereas `camelize` will consider digits as part of the same word for acronyms, failing to recognize the `HTTP` acronym when followed by digits. Perhaps the behaviour should be consistent?

I know there is some reluctance to change inflections ""to avoid breaking legacy applications which may be relying on errant inflections"" but perhaps this could be done through an inflector option and/or configuration so that we can fix things like these while allowing previous errant inflections with default configuration?

I'd be happy to work on something like this, but wanted to check first if it would be acceptable.

E.g.:
```ruby
ActiveSupport::Inflector.configure do |config|
  config.camelize_with_digits = false # defaults to `true`
end

ActiveSupport::Inflector.inflections(:en) do |inflect|
  inflect.acronym(""HTTP"")
end

""http1.1"".camelize
#=> ""HTTP1.1""
```

### Actual behavior
```
  1) Failure:
BugTest#test_camelize_and_underscore_acronym [test_inflection.rb:30]:
Expected: ""HTTP1.1""
  Actual: ""Http1.1""

1 runs, 6 assertions, 1 failures, 0 errors, 0 skips
```

### System configuration
**Rails version**: `Using activesupport 7.0.4.3`

**Ruby version**: `ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-darwin20]`
"
47726,Route constraints with an array do not allow building a path only parsing a path.,urkle,"actionpack, attached PR",2023-03-21T20:16:22Z,2023-08-20T14:45:11Z,,"### Steps to reproduce
```ruby
# Given a route like this.
MyApplication::Application.routes.draw do
    get '/download/:platform' => 'download#platform',
        constraints: {
          platform: %w[windows linux macos],
        },
        as: :download_platform
end
```

### Expected behavior
Routing test (rspec)
```ruby
expect(get(""/download/windows"")).to route_to('download#platform',
                                                         platform: platform)
```

url building test (rspec)
```ruby
def some_function(platform)
    download_platform_path(platform: platform)
end

expect(some_function('windows')).to eq(download_platform_path('windows'))
```

### Actual behavior
The routing spec passes, but the url building test fails with a `No route matches ... possible unmatched constraints: [:platform]` error.

However,

If I change the constraint to this
```ruby
MyApplication::Application.routes.draw do
    get '/download/:platform' => 'download#platform',
        constraints: {
          platform: /(windows|linux|macos)/,
        },
        as: :download_platform
end
```

both pass correctly.

### System configuration
**Rails version**: 2.7.3

**Ruby version**: 6.0.5
"
47710,Active Storage does not work on update... very strange,lapser,activestorage,2023-03-19T18:59:03Z,2023-03-20T22:57:21Z,2023-03-20T17:21:02Z,"https://stackoverflow.com/q/75784252/

_Long story short_
When I try to submit a new image then in the console log there is no mention to ActiveStorage and ActiveJob activity even if controller action params include the ActionDispatch::Http::UploadedFile image. That is, ActiveStorage seems not triggered during the flow.


System configuration
Rails version:
rails 7.0.4.2

Ruby version:
ruby 2.7.2p137

I'm not using jsbundling-rails or similars."
47706,Selenium WebDriver version 4.8 does not allow passing the URL to the driver anymore (actionpack),Martouta,"docs, With reproduction steps",2023-03-17T20:25:38Z,2023-10-09T00:08:29Z,2023-10-09T00:08:28Z,"### Summary
In my `ApplicationSystemTestCase`, An `ArgumentError` is thrown when initializing `Selenium::WebDriver::Chrome::Driver` (in the `driven_by`) with the `:url` option in `selenium-webdriver` version 4.8.1. This issue was introduced intentionally in a recent commit.

### Steps to reproduce

Given an `ApplicationSystemTestCase` such as the following:

```ruby
require 'test_helper'
require 'selenium-webdriver'

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :headless_chrome, options: { url: 'http://localhost:4444/wd/hub' } do |option|
    option.add_argument('no-sandbox')
  end
end
```

Using `selenium-webdriver` version `4.8.1` (I guess it is the same with `4.8.0` as I will explain briefly).
The tests fail (in CircleCI) with this error log:

```
Error:
MainSystemTest#test_#root_&_#home:
ArgumentError: Can't initialize Selenium::WebDriver::Chrome::Driver with :url
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver/chrome/driver.rb:32:in `initialize'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver/common/driver.rb:47:in `new'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver/common/driver.rb:47:in `for'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver.rb:88:in `for'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/selenium/driver.rb:83:in `browser'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/driver.rb:64:in `block in register_selenium'
    <internal:kernel>:90:in `tap'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/driver.rb:63:in `register_selenium'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/driver.rb:49:in `block in register'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/session.rb:105:in `driver'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/session.rb:91:in `initialize'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara.rb:421:in `new'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara.rb:421:in `block in session_pool'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara.rb:317:in `current_session'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/dsl.rb:46:in `page'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:99:in `save_image'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:36:in `take_screenshot'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:45:in `take_failed_screenshot'
    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/setup_and_teardown.rb:8:in `before_teardown'

rails test test/system/main_system_test.rb:22
```

I would expect it to work as it was working with `selenium-webdriver` version `4.7.1` for this line:

https://github.com/rails/rails/blob/18e53fbb2c1b76e4e0b906e602edb4ad7291b621/actionpack/lib/action_dispatch/system_testing/driver.rb#L16

But the reason it fails is that they introduced this exception intentionally in this commit:
https://github.com/SeleniumHQ/selenium/commit/08ee2d9fcf952aff3dc9752d2399e9474c356843

Looking at the date of that commit, I am guessing that the exception is also introduced in version 4.8.0 although I haven't tried this one, based on the release dates:
![image](https://user-images.githubusercontent.com/11318903/226026078-c6a50a68-cdda-4ccc-bad1-dfeea0e55840.png)

I see that your tests right now assume that the URL can be passed:
https://github.com/rails/rails/blob/29441c0e2f3ae57de9cb03ed4a06b218773990eb/actionpack/test/dispatch/system_testing/driver_test.rb#L13-L29

### System configuration
You can see all the versions I am using for the log backtrace, but anyway:
**Rails version**: 7.0.4.3
**Ruby version**: 3.2.0"
47704,Marshalling of Active Record objects can be unpredictably broken on Ruby 3.2,byroot,"activerecord, attached PR, With reproduction steps",2023-03-17T08:12:06Z,2023-03-28T15:19:25Z,2023-03-28T15:19:25Z,"Full context: https://github.com/mastodon/mastodon/issues/23644

### Simplified context

When dumping a Active Record objects that have preloaded relations and `inverse_of` defined, you can end up with circular dependencies.

A overly simplified reproduction using a PORO looks like this:

```ruby
class Status
  def normal_order
    @attributes = { id: 42 }
    @relations = { self => 1 }
    self
  end

  def inverse_order
    @relations = nil
    @attributes = { id: 42 }
    @relations = { self => 1 }
    self
  end

  def hash
    @attributes.fetch(:id)
  end
end

s = Marshal.load(Marshal.dump(Status.new.normal_order))
s = Marshal.load(Marshal.dump(Status.new.inverse_order))
```

Up to Ruby 3.1, instance variable order was consistent for the whole duration of the program, now on 3.2 it first depend on assignation order inside a particular instance, which is perfectly workable for us.

However if a class has too many shapes, its future instances are baked by an unordered hash table, you can simulate this with:

```ruby
10.times { |i| Status.first.instance_variable_set(:""@ivar_#{i}"", nil) }
s = Status.first
s.instance_variable_set(:""@ivar_rand"", nil)
s.dup.instance_variables
```

When this happens, the ordering become totally unpredictable.

### Solution

I don't think this is a Ruby bug per say, [I opened an issue nonetheless](https://bugs.ruby-lang.org/issues/19535) to discuss what upstream may want to do to preserve backward compatibility, but I don't think Active Record should continue to depend on instance variable ordering regardless of what is decided upstream.

Additionally, since the attributes API refactoring, `Marshal.dump(model)` is dumping way more information than is really necessary, we could be much more efficient here.

So I believe we should define `marshal_dump` on `ActiveRecord::Base`, and better control how we serialize into Marshal.

### Prior Art

At Shopify [we stopped using Marshal for caching](https://shopify.engineering/caching-without-marshal-part-one), so we wrote a [relatively simple serializer for Active Record instances](https://github.com/Shopify/paquito/blob/7b97f481a3690fe5531aebe2273b779481cfa4ac/lib/paquito/active_record_coder.rb). I believe this could be mostly upstreamed and become the implementation of `ActiveRecord::Base#marshal_dump`.

Alternatively `#marshal_dump / #marshal_load` could simply call `#encode_with / #init_with`, which have been kept very stable for a long time.

However I don't think it's very performant, so it would be a bit of a missed opportunity here. It's also implemented with YAML in mind, so more of a long term backing storage.

### Forward compatibility concerns

An important concern when defining `marshal_load` and `marshal_dump` is that the old payloads can still be deserialized by the new code, however the inverse is not true. So directly introducing both methods can lead to errors when doing rolling restarts.

The way to do this seamlessly is to first fully deploy the `marshal_load` implementation alone, and then deploy `marshal_dump`. We could probably do that via `Rails.config` and `load_defaults`.

### Backporting

There is also the question of what to do for Rails 6.1 and 7.0, which can experience this very serious bug semi-randomly.

cc @tenderlove 
"
47703,`model_class` option in fixture files is not respected,shouichi,"activerecord, attached PR",2023-03-17T06:53:03Z,2023-06-26T16:04:11Z,2023-06-26T16:04:11Z,"### Steps to reproduce

```
# db/migrate/20230317052343_init.rb
class CreateUsers < ActiveRecord::Migration[7.0]
  def change
    # We create two tables with different schemas.
    create_table :users { |t| t.string :name }
    create_table :foo_users { |t| t.integer :age }
  end
end

# app/models/foo/user.rb
module Foo
  class User < ApplicationRecord
  end
end

# app/models/user.rb
class User < ApplicationRecord
end

# test/fixtures/foo/users.yml
_fixture:
  model_class: User

one:
  # Note that User has the name column, but Foo::User does not.
  name: one
```

### Expected behavior

`model_class` option in fixture files is respected. I believe the priority should be

1. `class_names` argument of `ActiveRecord::FixtureSet.create_fixtures`
2. `model_class` option in fixture files
3. Naming convention from filename

The current priority is 1, 3, 2.

### Actual behavior

`Bar::User` (which is derived from the filename `bar/users.yml` by naming convention) is used instead of the `model_class: User` specified in the fixture file. This is because

- `ActiveRecord::FixtureSet::ClassCache` does not read fixture content.
- `ActiveRecord::FixtureSet::ClassCache` takes precedence over the `model_class` specified in fixture files. https://github.com/rails/rails/blob/f91bd408f3edeb997812c20ab4443358f4bbdf7f/activerecord/lib/active_record/fixtures.rb#L729

### System configuration
**Rails version**: Rails 7.0.4.3

**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [x86_64-linux]"
47699,Weird interaction between AS::Concern and Module#ancestors,fxn,pinned,2023-03-16T21:13:11Z,2023-08-29T21:05:45Z,,"If you throw this file into an application:

```ruby
# app/models/foo.rb
module Foo
  extend ActiveSupport::Concern
end

module Bar
  extend ActiveSupport::Concern
  include Foo
  p ancestors
end
```

The command `bin/rails r Foo` prints `[Bar]`, but it should be `[Bar, Foo]`. You get the correct result if `Foo` does not extend `AS::Concern`."
47695,AR's before_last_save tracking wrong for nested callback,MaxLap,"activerecord, With reproduction steps",2023-03-16T18:41:47Z,2023-07-02T15:46:59Z,,"Nested callback executions in ActiveRecord (ex: a after_save does a update, which trigger another chain of callbacks) have a weird (IMO wrong) interaction with the `saved_change_to_*?`, `saved_changes`, `*_before_last_save` and friends.

The behavior changed in Rails 5.1. Rails 5.0's behavior was more intuitive.

### Steps to reproduce

( I got repro scripts below )

0) A model with 2 attributes, ex: `name` and `foo`

1) Have a after_save (or any other after_something) that does an update to `foo` of the model (with a condition, so that you don't get infinite recursion). Ex: `update(foo: 1) if foo != 1`

2) Have another after_save (called after the one in (1)) which checks if the other attribute was changed. Ex: `$saw_saved_change_to_name = true if saved_change_to_name?`

3) Create an instance setting only the name: Ex: `Post.create(name: 'hi')`

The second callback will never see `saved_change_to_name?` as true, because the first callback, triggering anothere save, fully overwrites the tracking.

I added a print of the saved_changes in the test to show what's going on. There is a failing script for main and 5.1, and a passing one for 5.0.

Here is the failing case in main:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3"", '~> 1.4'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :name
    t.integer :foo
  end
end

class Post < ActiveRecord::Base
  after_save :set_foo_after_save
  after_save :check_saved_change_to_name

  def set_foo_after_save
    update(foo: 1) if foo != 1
  end

  def check_saved_change_to_name
    puts ""* Saved changes: #{saved_changes}""
    $saw_saved_change_to_name = true if saved_change_to_name?
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(name: 'hi')

    assert($saw_saved_change_to_name)
  end
end
```
```
* Saved changes: {""foo""=>[nil, 1]}
* Saved changes: {""foo""=>[nil, 1]}
Expected nil to be truthy
```

Here is the failing case in 5.1:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""5.1.7""
  gem ""sqlite3"", '1.3.13'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :name
    t.integer :foo
  end
end

class Post < ActiveRecord::Base
  after_save :set_foo_after_save
  after_save :check_saved_change_to_name_after_save

  def set_foo_after_save
    update(foo: 1) if foo != 1
  end

  def check_saved_change_to_name_after_save
    puts ""* Saved changes: #{saved_changes}""
    $saw_saved_change_to_name = true if saved_change_to_name?
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(name: 'hi')

    assert($saw_saved_change_to_name)
  end
end
```
```
* Saved changes: {""foo""=>[nil, 1]}
* Saved changes: {""foo""=>[nil, 1]}
Expected nil to be truthy
```

And here is the passing case in 5.0, which was before Rails switched to `saved_change_to_*?` and friends:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""5.0.7.2""
  gem ""sqlite3"", '1.3.13'
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.text :name
    t.integer :foo
  end
end

class Post < ActiveRecord::Base
  after_create :set_foo_after_save
  after_save :check_saved_change_to_name_after_save

  def set_foo_after_save
    update(foo: 1) if foo != 1
  end

  def check_saved_change_to_name_after_save
    puts ""* Saved changes: #{changes}""
    $saw_saved_change_to_name = true if name_changed?
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!(name: 'hi')

    assert($saw_saved_change_to_name)
  end
end
```
```
* Saved changes: {""id""=>[nil, 1], ""name""=>[nil, ""hi""], ""foo""=>[nil, 1]}
* Saved changes: {}
Passes the test
```


### Expected behavior

I expect a  `after_*` callback that reacts to `saved_change_to_*?` to be called at least once with said change of `true` when the attribute gets changed.

### Actual behavior

The callback never gets called with `saved_change_to_name?` being `true` because the nested change 

In my opinion, the priority should be on handling the 1st expected behavior

This means that if I make code with such a callback, everything could work, and someone doing a nested update in a different callback could completely break the first callback.

### System configuration
**Rails version**: 5.1, main

**Ruby version**: 2.4 and 3.1
"
47677,Rails 6.1.7.3: SafeBuffer#bytesplice raise NoMethodError: undefined method  ,taketo1113,"activesupport, attached PR",2023-03-14T23:41:40Z,2023-03-16T14:51:20Z,2023-03-16T14:24:51Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
""hello"".html_safe.bytesplice(0, 0, ""<b>"".html_safe)
=> NoMethodError: undefined method `implicit_html_escape_interpolated_argument' for ""hello"":ActiveSupport::SafeBuffer
```

### Expected behavior
<!-- Tell us what should happen -->
It return string without error.

### Actual behavior
<!-- Tell us what happens instead -->
It raise NoMethodError: undefined method `implicit_html_escape_interpolated_argument'.

It seems that the error will fix by #47667.

### System configuration
**Rails version**: 6.1.7.3

**Ruby version**: 3.0.5
"
47643,"Uncaught request-level errors should be logged as :error, not :fatal",jakerobb,"actionpack, attached PR",2023-03-11T21:11:10Z,2023-06-27T17:17:47Z,2023-06-27T17:17:47Z,"### Steps to reproduce
Allow a raised error to propagate uncaught from your ActionController.

### Actual behavior
The logged error has severity `:fatal`.

### Expected behavior
The logged error should have severity `:error`.

### Justification
The Ruby [documentation on log severities](https://ruby-doc.org/3.2.1/stdlibs/logger/Logger/Severity.html) is clear: `:fatal` means ""An unhandleable error that results in a program crash."" The naming is logical; a fatal event leads to (process) death. By this definition, if my webserver process continues to run, then it didn't ""die"", and `:fatal` was not justified. 

This exact definition of `:fatal` has existed unchanged (aside from capitalizing the sentence and adding a period in 2.0.0) in Ruby's documentation since at least [version 1.8.6 in 2007](https://ruby-doc.org/stdlib-1.8.6/libdoc/logger/rdoc/Logger.html) (that's the earliest version available at ruby-doc.org; I didn't dig further). It is also consistent with log level definitions across many other language ecosystems:

| Language / Framework | Highest Severity | Definition |
| ------------- | ------------- | ------------- |
| Java / Log4J  | [FATAL](https://logging.apache.org/log4j/2.x/javadoc/log4j-api/index.html) | A fatal event that will prevent the application from continuing. |
| Go | [Fatal](https://pkg.go.dev/log#Fatal) | No definition, but logging a message at this level _literally causes the program to exit._ |
| C# | [Critical](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel?view=dotnet-plat-ext-7.0) | Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. |
| Swift | [Critical](https://apple.github.io/swift-log/docs/current/Logging/Structs/Logger/Level.html#/s:7Logging6LoggerV5LevelO8criticalyA2EmF) | Appropriate for critical error conditions that usually require immediate attention. <br><br> [Elsewhere](https://www.swift.org/server/guides/libraries/log-levels.html) in the documentation; they note that this log level is likely to cause someone to be paged immediately. |

This interpretation of ""fatal"" also extends to language-agnostic tools. For one example, when a log of this level is ingested into DataDog, their system labels the entry **EMERGENCY** (their highest severity level; a reasonable translation of `:fatal` IMO). I think most web application operators would agree that a single failed request falls well short of an emergency.

Calling an isolated web request failure an ""emergency"" or ""fatal"" is akin to calling the police or an ambulance because the post office delivered your neighbor's mail to your mailbox. It's an error, but not an emergency, and it's certainly not fatal! Nobody needs to be paged. (A sudden onset of _many/most/all_ requests failing in this way probably warrants a page, but that's not Rails' job.)

### Concessions

Rails has logged request errors as `:fatal`, with a comment saying that you could overwrite the method if desired, [since @dhh's original commit in 2004](https://github.com/rails/rails/commit/db045dbbf60b53dbe013ef25554fd013baf88134#diff-c20582338b99111554f3604ad2e87e5723a2304431e978ddc79eaa7967982b3dR29-R40). This decision has persisted through several renames and refactors as Rails has matured. Today, the comment suggesting overwrite is no longer present in the DebugExceptions middleware, [where the code in question lives today](https://github.com/rails/rails/blob/main/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb#L150-L158).

19 years of history (not to mention the founder's original intent) is a lot to go against. I therefore suggest that the level should be made configurable, and the default should remain `:fatal` for the time being. I would strongly consider changing the default with Rails 8.0.

To be clear, I know that I can subclass `DebugExceptions`, overwrite `#log_array` with my own implementation, and swap it in, but there is more logic in that method than just selection of the log level. I don't want to have to maintain my overwritten method to stay consistent with whatever other logic is included in that method as I upgrade to each successive Rails version. It's also a private method, and you are under no obligation to maintain it as an API, which means that any upgrade could completely or partially break my overwrite with no indication of that in the release notes. `#log_array` does not feel like something I _should_ overwrite.

### System configuration
**Rails version**: 7.0.4.2 (but it doesn't matter; this is true of literally every version ever)

**Ruby version**: 3.2.1 (again, doesn't matter)"
47628,`CacheStoreSettingTest#test_mem_cache_fragment_cache_store_with_given_mem_cache` shows warning,yahonda,"activesupport, ci issues",2023-03-10T02:27:04Z,2023-03-13T13:01:49Z,2023-03-13T13:01:49Z,"`DEPRECATION WARNING: Initializing MemCacheStore with a Dalli::Client is deprecated and will be removed in Rails 7.2.` is not addressed in Active Support test case since https://github.com/rails/rails/pull/47340
 
https://buildkite.com/rails/rails/builds/94303#018699da-9f43-4797-9873-226592a19d52/1028-1035 

### Steps to reproduce

```ruby
$ cd activesupport
$ bundle exec ruby -w -Itest test/cache/cache_store_setting_test.rb -n test_mem_cache_fragment_cache_store_with_given_mem_cache
```

### Expected behavior
It should pass without warnings.

### Actual behavior
```ruby
$ bundle exec ruby -w -Itest test/cache/cache_store_setting_test.rb -n test_mem_cache_fragment_cache_store_with_given_mem_cache
Running 12 tests in a single process (parallelization threshold is 50)
Run options: -n test_mem_cache_fragment_cache_store_with_given_mem_cache --seed 18681

# Running:

DEPRECATION WARNING: Initializing MemCacheStore with a Dalli::Client is deprecated and will be removed in Rails 7.2.
Use memcached server addresses instead.
 (called from stub at /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/mock.rb:321)
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/cache.rb:73:in `new'
  /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/cache.rb:73:in `lookup_store'
  test/cache/cache_store_setting_test.rb:40:in `block in test_mem_cache_fragment_cache_store_with_given_mem_cache'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/mock.rb:321:in `stub'
  /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/method_call_assertions.rb:12:in `assert_called'
  /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/method_call_assertions.rb:30:in `assert_not_called'
  test/cache/cache_store_setting_test.rb:39:in `test_mem_cache_fragment_cache_store_with_given_mem_cache'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/test.rb:102:in `block (3 levels) in run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/test.rb:199:in `capture_exceptions'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/test.rb:97:in `block (2 levels) in run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:296:in `time_it'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/test.rb:96:in `block in run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:391:in `on_signal'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/test.rb:247:in `with_info_handler'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest/test.rb:95:in `run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:1051:in `run_one_method'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:365:in `run_one_method'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:352:in `block (2 levels) in run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:351:in `each'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:351:in `block in run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:391:in `on_signal'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:378:in `with_info_handler'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:350:in `run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:182:in `block in __run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:182:in `map'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:182:in `__run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:159:in `run'
  /home/yahonda/.rbenv/versions/3.2.1/lib/ruby/gems/3.2.0/gems/minitest-5.17.0/lib/minitest.rb:83:in `block in autorun'
.

Finished in 0.005978s, 167.2849 runs/s, 334.5698 assertions/s.
1 runs, 2 assertions, 0 failures, 0 errors, 0 skips
$
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [x86_64-linux]
"
47627,OptionMergerTest#test_method_with_options_copies_options_when_options_are_missing fails with Ruby 3.3.0dev,yahonda,"activesupport, ci issues",2023-03-10T01:40:01Z,2023-03-15T23:54:47Z,2023-03-15T23:54:47Z,"Managed to reproduce the CI failure at https://buildkite.com/rails/rails/builds/94497#0186be64-c342-4494-b50b-e0362040cc9e/1134-1174 and found it is triggered by https://github.com/ruby/ruby/commit/e87d0882910001ef3b0c2ccd43bf00cee8c34a0c

### Steps to reproduce

```ruby
Install Ruby 3.3.0dev using `rbenv install 3.3.0-dev`
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
cd activesupport
bin/test test/option_merger_test.rb -n test_method_with_options_copies_options_when_options_are_missing
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ bin/test test/option_merger_test.rb -n test_method_with_options_copies_options_when_options_are_missing
Running 14 tests in a single process (parallelization threshold is 50)
Run options: -n test_method_with_options_copies_options_when_options_are_missing --seed 51119

# Running:

F

Failure:
OptionMergerTest#test_method_with_options_copies_options_when_options_are_missing [/home/yahonda/src/github.com/rails/rails/activesupport/test/option_merger_test.rb:42]:
Expected {:hello=>""world""} (oid=5300) to not be the same as {:hello=>""world""} (oid=5300).


bin/test test/option_merger_test.rb:40



Finished in 0.000405s, 2472.0410 runs/s, 2472.0410 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.3.0dev (2023-03-06T06:03:06Z master e87d088291) [x86_64-linux]
"
47624,`delegate` to Module does not work when using an implicit block.,lsylvester,With reproduction steps,2023-03-09T22:51:51Z,2023-04-16T11:33:34Z,2023-04-16T11:33:34Z,"When delegating a method with `delegate` to a Module, if the method doesn't take a block param but calls `yield` to call an implicit block - then the block is no longer available.

I think that this was introduced in #46875.

One option would be always have a block param on the method defined by  `delegate`, but with my benchmarks based on the original PR - this makes it about 1.1 times slower (this is still faster than the previous implementation). I am unsure if there are other approaches that could be used that wouldn't have the performance penalty. 


### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activestorage"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/core_ext/module/delegation""
require ""minitest/autorun""
require ""active_support/testing/assertions""

class Foo
  def self.implicit_block
    yield
  end
end

class Bar
  delegate :implicit_block, to: Foo
end

class BugTest < Minitest::Test
  include ActiveSupport::Testing::Assertions

  def test_implicit_block
    Bar.new.implicit_block{ }
  end
end

```

### Expected behavior

The block should be yielded to.

### Actual behavior

```
  1) Error:
BugTest#test_implicit_block:
LocalJumpError: no block given (yield)
    bug.rb:20:in `implicit_block'
    bug.rb:25:in `implicit_block'
    bug.rb:32:in `test_implicit_block'
<!-- Tell us what happens instead -->
```



### System configuration
**Rails version**: main

**Ruby version**: 3.2.1


"
47615,actionpack multiple test failures,Apteryks,"actionpack, stale",2023-03-09T16:57:45Z,2023-06-26T14:57:58Z,2023-06-26T14:57:58Z,"### Steps to reproduce

When building actionpack on Guix, I had to disable the following tests:

```scheme
              (with-directory-excursion ""test""
                (for-each delete-file
                          ;; These tests depend on rail, causing a cyclic dependency.
                          '(""dispatch/mount_test.rb""
                            ""dispatch/prefix_generation_test.rb""
                            ""dispatch/routing_assertions_test.rb""
                            ""dispatch/routing/inspector_test.rb""
                            ""controller/live_stream_test.rb""
                            ""controller/integration_test.rb""
                            ""controller/test_case_test.rb""
                            ;; These tests fail, some seemingly depending
                            ;; on a browser like firefox being available.
                            ""controller/render_test.rb""
                            ""controller/send_file_test.rb""
                            ""dispatch/cookies_test.rb""
                            ""dispatch/live_response_test.rb""
                            ""dispatch/request_test.rb""
                            ""dispatch/response_test.rb""
                            ""dispatch/request/query_string_parsing_test.rb""
                            ""dispatch/test_request_test.rb""
                            ""dispatch/session/cache_store_test.rb""
                            ""dispatch/session/cookie_store_test.rb""
                            ""dispatch/system_testing/driver_test.rb"")))
```
Otherwise I saw the test failures reported below.

### Expected behavior
The test suite should pass (`rake test`).

### Actual behavior
These are the test failures in the containerized environment containing Ruby 2.7.4 and the following direct dependencies:
```
ruby-actionview@7.0.4.2 ruby-activemodel@7.0.4.2 ruby-activesupport@7.0.4.2
+ ruby-capybara@3.38.0 ruby-rack-cache@1.13.0 ruby-rack-session@2.0.0 ruby-rack-test@2.0.2
+ ruby-rack@3.0.4.2 ruby-rails-dom-testing@2.0.3 ruby-rails-html-sanitizer@1.3.0
+ ruby-selenium-webdriver@4.8.1 ruby-zeitwerk@2.6.7
```

```
Finished in 6.594917s, 488.5581 runs/s, 2415.9514 assertions/s.

  1) Failure:
ResponseTest#test_cookies [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:233]:
Expected: ""user_name=david; path=/""
  Actual: nil

  2) Failure:
ResponseTest#test_respect_private,_no-store_cache-control [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:317]:
Expected: ""private, no-store""
  Actual: nil

  3) Failure:
ResponseTest#test_read_strong_ETag [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:278]:
Expected #<ActionDispatch::Response:0x0000000003b83348 @mon_data=#<Monitor:0x0000000003b832a8>, @mon_data_owner_object_id=11000, @header={""ETag""=>""\""202cb962ac59075b964b07152d234b70\"""", ""Content-Type""=>""text/html; charset=utf-8"", ""cache-control""=>""public""}, @stream=#<ActionDispatch::Response::Buffer:0x0000000003b823f8 @response=#<ActionDispatch::Response:0x0000000003b83348 ...>, @buf=[""Hello""], @closed=false, @str_body=nil>, @status=200, @cv=#<MonitorMixin::ConditionVariable:0x0000000003b83208 @monitor=#<Monitor:0x0000000003b832a8>, @cond=#<Thread::ConditionVariable:0x0000000003b831e0>>, @committed=true, @sending=false, @sent=false, @cache_control={:public=>true}> to be etag?.

  4) Failure:
ResponseTest#test_delete_cookies [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:249]:
--- expected
+++ actual
@@ -1 +1 @@
-{""user_name""=>""david"", ""login""=>nil}
+{}


  5) Failure:
ResponseTest#test_multiple_cookies [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:241]:
--- expected
+++ actual
@@ -1,2 +1 @@
-""user_name=david; path=/
-login=foo%26bar; path=/; expires=Mon, 10 Oct 2005 05:00:00 GMT""
+nil


  6) Failure:
ResponseTest#test_read_ETag_and_Cache-Control [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:260]:
Expected #<ActionDispatch::Response:0x0000000003c78d70 @mon_data=#<Monitor:0x0000000003c78cd0>, @mon_data_owner_object_id=10720, @header={""ETag""=>""W/\""202cb962ac59075b964b07152d234b70\"""", ""Content-Type""=>""text/html; charset=utf-8"", ""cache-control""=>""public""}, @stream=#<ActionDispatch::Response::Buffer:0x0000000003c77d58 @response=#<ActionDispatch::Response:0x0000000003c78d70 ...>, @buf=[""Hello""], @closed=false, @str_body=nil>, @status=200, @cv=#<MonitorMixin::ConditionVariable:0x0000000003c78c30 @monitor=#<Monitor:0x0000000003c78cd0>, @cond=#<Thread::ConditionVariable:0x0000000003c78c08>>, @committed=true, @sending=false, @sent=false, @cache_control={:public=>true}> to be etag?.

  7) Failure:
ResponseTest#test_read_charset_and_content_type [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:294]:
--- expected
+++ actual
@@ -1 +1 @@
-""application/xml; charset=utf-16""
+nil


  8) Failure:
ResponseTest#test_respect_no-store_cache-control [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:306]:
Expected: ""no-store""
  Actual: nil

  9) Failure:
ResponseTest#test_setting_content_type_header_impacts_content_type_method [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:112]:
Expected: ""application/aaron""
  Actual: nil

 10) Error:
ResponseTest#test_compatibility_with_Rack::ContentLength:
NoMethodError: undefined method `sum' for nil:NilClass
    /gnu/store/7kmir0qvvkr29ak0za7y8jdhizk948xa-ruby-rack-3.0.4.2/lib/ruby/vendor_ruby/gems/rack-3.0.4.2/lib/rack/content_length.rb:28:in `call'
    /tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:412:in `block in <class:ResponseTest>'

 11) Failure:
ExpiresInRenderTest#test_cache_control_no_store_overridden_by_expires_in [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:498]:
Expected: ""max-age=60, public""
  Actual: ""no-store""

 12) Failure:
ExpiresInRenderTest#test_expires_in_header_with_additional_headers [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:449]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=60, public, s-maxage=18000""
+nil


 13) Failure:
ExpiresInRenderTest#test_expires_in_header_with_public_and_must_revalidate [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:434]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=60, public, must-revalidate""
+nil


 14) Failure:
ExpiresInRenderTest#test_expires_in_header [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:419]:
Expected: ""max-age=60, private""
  Actual: nil

 15) Failure:
ExpiresInRenderTest#test_expires_in_header_with_stale_while_revalidate [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:439]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=60, public, stale-while-revalidate=300""
+nil


 16) Failure:
ExpiresInRenderTest#test_expires_in_header_with_public [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:424]:
Expected: ""max-age=60, public""
  Actual: nil

 17) Failure:
ExpiresInRenderTest#test_expires_in_header_with_must_revalidate [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:429]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=60, private, must-revalidate""
+nil


 18) Failure:
ExpiresInRenderTest#test_expires_now_with_conflicting_cache_control_headers [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:470]:
Expected: ""no-cache""
  Actual: ""no-cache, must-revalidate""

 19) Failure:
ExpiresInRenderTest#test_no_expires_now_with_conflicting_cache_control_headers [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:475]:
Expected: ""no-cache""
  Actual: ""no-cache, must-revalidate""

 20) Failure:
ExpiresInRenderTest#test_expires_now [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:459]:
Expected: ""no-cache""
  Actual: nil

 21) Failure:
ExpiresInRenderTest#test_cache_control_default_header_with_extras_partially_overridden_by_expires_in [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:493]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=300, public, s-maxage=60, proxy-revalidate""
+""max-age=120, public, s-maxage=60, proxy-revalidate""


 22) Failure:
ExpiresInRenderTest#test_expires_in_header_with_stale_if_error [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:444]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=60, public, stale-if-error=300""
+nil


 23) Failure:
ExpiresInRenderTest#test_expires_now_with_cache_control_headers [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:464]:
Expected /no-cache/ to match ""no-transform"".

 24) Failure:
ExpiresInRenderTest#test_cache_control_no_store_overridden_by_expires_now [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:503]:
Expected: ""no-cache""
  Actual: ""no-store""

 25) Failure:
ExpiresInRenderTest#test_expires_in_old_syntax [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:454]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=60, public, s-maxage=18000""
+nil


 26) Failure:
TestRequestTest#test_reasonable_defaults [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/test_request_test.rb:23]:
Expected: [1, 3]
  Actual: nil

 27) Failure:
ResponseHeadersTest#test_add_header [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/response_test.rb:457]:
Expected: ""1,2""
  Actual: [""1"", ""2""]

 28) Failure:
DriverTest#test_define_extra_capabilities_using_firefox [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/system_testing/driver_test.rb:120]:
--- expected
+++ actual
@@ -1 +1 @@
-{""moz:firefoxOptions""=>{""args""=>[""--host=127.0.0.1""], ""prefs""=>{""browser.startup.homepage""=>""http://www.seleniumhq.com/""}}, ""browserName""=>""firefox""}
+{""acceptInsecureCerts""=>true, ""browserName""=>""firefox"", ""moz:firefoxOptions""=>{""args""=>[""--host=127.0.0.1""], ""prefs""=>{""browser.startup.homepage""=>""http://www.seleniumhq.com/""}}, ""moz:debuggerAddress""=>true}


 29) Failure:
DriverTest#test_define_extra_capabilities_using_headless_firefox [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/system_testing/driver_test.rb:138]:
--- expected
+++ actual
@@ -1 +1 @@
-{""moz:firefoxOptions""=>{""args""=>[""-headless"", ""--host=127.0.0.1""], ""prefs""=>{""browser.startup.homepage""=>""http://www.seleniumhq.com/""}}, ""browserName""=>""firefox""}
+{""acceptInsecureCerts""=>true, ""browserName""=>""firefox"", ""moz:firefoxOptions""=>{""args""=>[""-headless"", ""--host=127.0.0.1""], ""prefs""=>{""browser.startup.homepage""=>""http://www.seleniumhq.com/""}}, ""moz:debuggerAddress""=>true}


 30) Failure:
EtagRenderTest#test_strong_etag [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:665]:
Expected response to be a <304: not_modified>, but was a <200: OK>
Response body: stale.
Expected: 304
  Actual: 200

 31) Failure:
EtagRenderTest#test_array [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:693]:
Expected response to be a <304: not_modified>, but was a <200: OK>
Response body: stale.
Expected: 304
  Actual: 200

 32) Failure:
EtagRenderTest#test_multiple_etags [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:683]:
Expected response to be a <304: not_modified>, but was a <200: OK>
Response body: stale.
Expected: 304
  Actual: 200

 33) Failure:
CookieStoreTest#test_does_set_secure_cookies_over_https [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cookie_store_test.rb:159]:
Expected # encoding: ASCII-8BIT
#    valid: true
""_myapp_session=baPYqcdPGGtwoZsR6Wl9bf5xhaFpOjOMR6PXAtLnH%2FxmK9h8VrBJgahuNCwYFh48vZUcHn22tgzmBsbnvtI0zGDA6bxiOdAv3PyhnzUMY6Kr--IIT7w9a6%2F26m4vac--LlhYRrZ2PLkiNwTXtwyz9g%3D%3D; path=/; secure; httponly"" to include ""path=/; secure; HttpOnly"".

 34) Failure:
CookieStoreTest#test_session_store_with_expire_after_does_not_accept_expired_session [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cookie_store_test.rb:338]:
Expected # encoding: ASCII-8BIT
#    valid: true
""_myapp_session=vzPe0M4rJuBh1Vnd7mPsDVRgmrya9ZbPv9IRKu9Z5%2B0GF98sIPvDM8v4AGm8poC7eIw3I6VxxLkP8WPyYq18D5ZpSi4UH%2FAbWdp7%2BfZxppnHtbRl6T08Qv4TZvZ0ijuqJKutnJVBmIsb9OwPEaAMrHg%2FcpUNyiXCvKBWjLDWTVHaYBXIQ8cTnXKTi12jblVIVZUagkoDR4X9PJ4ul9fckoxvEibbOBr%2BTFS%2Btebh4ADK--LP5bpBxpLAyJamJS--VqDmqDNz2jkMpo8y%2BddHUA%3D%3D; path=/; expires=Sun, 12 Nov 2017 05:00:00 GMT; httponly"" to include ""path=/; expires=Sun, 12 Nov 2017 05:00:00 GMT; HttpOnly"".

 35) Failure:
EtagRenderTest#test_etag_reflects_template_digest [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:703]:
Expected nil to not be nil.

 36) Failure:
EtagRenderTest#test_etag_reflects_implicit_template_digest [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:720]:
Expected nil to not be nil.

 37) Failure:
CookieStoreTest#test_setting_session_value [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cookie_store_test.rb:93]:
Expected # encoding: ASCII-8BIT
#    valid: true
""_myapp_session=%2BcV7bOQBDr425%2F9QUZvt8EVoAdfSOGz8iY9zYnxOX9Etpn7MNtX2m3s5Whk6fPApvUwpIsfK7Oz9g3KcHfcr0yEgPH4AiCdks0WjeIUT4oNt--%2F8aGwUERdnBCceLS--rWjV0J4EZFHpCHmnVHyKEg%3D%3D; path=/; httponly"" to include ""path=/; HttpOnly"".

 38) Failure:
CookieStoreTest#test_class_type_after_session_reset [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cookie_store_test.rb:238]:
Expected # encoding: ASCII-8BIT
#    valid: true
""_myapp_session=LS7QdAzOq6nT%2FmnKNGL%2FomR7bGX%2FMwy7UgH5K6YH6tIEHFacXWcNWLQfkzELOK5n1yrCFuNAECgYmffvLMC2b7%2FG329Y3WoYPCNI9Cl%2FxhoW--qnLToNgoTwWa6xct--pNd4sbUyUHJhlgWPCvASPw%3D%3D; path=/; httponly"" to include ""path=/; HttpOnly"".

 39) Failure:
CookieStoreTest#test_session_store_with_expire_after [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cookie_store_test.rb:309]:
Expected # encoding: ASCII-8BIT
#    valid: true
""_myapp_session=WlkP1X1s56HBQwhczKXPUaj5ASTSkCfW8AxhhqyOTyqN8ab9fgCT2gNZr8Luu5HCMT%2B%2BXCGdQgkmvIhb%2F0GJ5R3dbuARGROcHFMh3gezpCvreKkOwUHuVnE9%2FMlxXf4ynSkf4w0gNPze%2BifyNvNZMXlMyD9Z4lroOOQd0ETZ4jafOtPH7BoGieZr4%2FWiPTGATJY6yhOxfznozMm6PY2k98y0ZsEVYr5cFnNbbQwS7RvZ--B56TKcDE59H0bHTn--tMJnBeB4clZsDkomR376Eg%3D%3D; path=/; expires=Thu, 24 Apr 2008 05:00:00 GMT; httponly"" to include ""path=/; expires=Thu, 24 Apr 2008 05:00:00 GMT; HttpOnly"".

 40) Failure:
CookieStoreTest#test_setting_session_value_after_session_reset [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cookie_store_test.rb:219]:
Expected # encoding: ASCII-8BIT
#    valid: true
""_myapp_session=wk2dQRIDzFUgDmDoEf5ufXvzWo2RqRT3GXwKcuWYaEL5spPIDhQJW8%2ByTgAe5%2FTXUwBsqf5YnB%2FNYnkaVuU17zRinB%2BWKcMZ9stHLyYgZ0Z9--hnt%2BgqqbDGtnjEOY--MSP8kgjbLNFStMuP5gU56w%3D%3D; path=/; httponly"" to include ""path=/; HttpOnly"".

 41) Failure:
CookieStoreTest#test_setting_session_value_after_session_clear [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cookie_store_test.rb:260]:
Expected # encoding: ASCII-8BIT
#    valid: true
""_myapp_session=J1Y6p51OvUO4syXiBtDusB%2FuMR6LGS6Fmw%2BPSNXi4BOTVeAIQ38CTKikh9bWRrZcVoqRV7UU5mwiazHXNTg9kHhsvZoEmfFHA%2Bxg4XjkpNiw--hCq48ozDREhrLzlS--oSxp%2Fqc%2FM63wKfZwbhjh1g%3D%3D; path=/; httponly"" to include ""path=/; HttpOnly"".

 42) Failure:
HttpCacheNoStoreTest#test_cache_control_public_with_expiration_header_can_be_overridden_by_no_store [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1154]:
Expected: ""no-store""
  Actual: ""public, max-age=604800""

 43) Failure:
HttpCacheNoStoreTest#test_no_store_overridden_by_expires_in [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1119]:
Expected: ""max-age=30, private""
  Actual: nil

 44) Failure:
HttpCacheNoStoreTest#test_no_store_overridden_by_fresh_when [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1129]:
--- expected
+++ actual
@@ -1 +1 @@
-""max-age=0, private, must-revalidate""
+nil


 45) Failure:
HttpCacheNoStoreTest#test_standalone_no_store_call [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1114]:
Expected: ""no-store""
  Actual: nil

 46) Failure:
HttpCacheNoStoreTest#test_no_store_overridden_by_expires_now [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1144]:
Expected: ""no-cache""
  Actual: nil

 47) Failure:
HttpCacheNoStoreTest#test_fresh_when_overridden_by_no_store [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1134]:
Expected: ""no-store""
  Actual: nil

 48) Failure:
HttpCacheNoStoreTest#test_cache_control_no_cache_header_can_be_overridden_by_no_store [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1149]:
Expected: ""no-store""
  Actual: ""no-cache""

 49) Failure:
HttpCacheNoStoreTest#test_expires_in_overridden_by_no_store [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1124]:
Expected: ""no-store""
  Actual: nil

 50) Failure:
HttpCacheNoStoreTest#test_expires_now_overridden_by_no_store [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1139]:
Expected: ""no-store""
  Actual: nil

 51) Failure:
HttpCacheForeverTest#test_cache_with_public [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1022]:
Expected: ""max-age=3155695200, public""
  Actual: nil

 52) Failure:
HttpCacheForeverTest#test_cache_response_code_with_etag [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1050]:
Expected response to be a <304: not_modified>, but was a <200: OK>
Response body: hello.
Expected: 304
  Actual: 200

 53) Failure:
HttpCacheForeverTest#test_cache_with_private [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:1030]:
Expected: ""max-age=3155695200, private""
  Actual: nil

 54) Failure:
RequestRewind#test_body_should_be_rewound [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/request_test.rb:628]:
Expected: 0
  Actual: 6

 55) Failure:
NamespacedEtagRenderTest#test_etag_reflects_template_digest [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:751]:
Expected nil to not be nil.

 56) Failure:
SendFileTest#test_send_data_content_type [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/send_file_test.rb:220]:
Expected: ""application/x-ruby""
  Actual: nil

 57) Failure:
SendFileTest#test_send_file_headers_bang [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/send_file_test.rb:146]:
Expected: ""image/png""
  Actual: nil

 58) Failure:
SendFileTest#test_send_file_headers_with_mime_lookup_with_symbol [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/send_file_test.rb:160]:
Expected: ""image/png""
  Actual: nil

 59) Failure:
SendFileTest#test_send_file_headers_guess_type_from_extension [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/send_file_test.rb:186]:
Expected: ""image/png""
  Actual: nil

 60) Failure:
SendFileTest#test_send_file_content_type [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/send_file_test.rb:220]:
Expected: ""application/x-ruby""
  Actual: nil

 61) Failure:
InheritedEtagRenderTest#test_etag_reflects_template_digest [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:773]:
Expected nil to not be nil.

 62) Failure:
QueryStringParsingTest#test_query_string_without_equal [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/request/query_string_parsing_test.rb:97]:
Expected: {""action""=>nil}
  Actual: {""action""=>""""}

 63) Failure:
QueryStringParsingTest#test_array_parses_without_nil [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/request/query_string_parsing_test.rb:106]:
Expected: {""action""=>[""1""]}
  Actual: {""action""=>[""1"", """"]}

 64) Failure:
QueryStringParsingTest#test_perform_deep_munge [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/request/query_string_parsing_test.rb:113]:
Expected: {""action""=>nil}
  Actual: {""action""=>""""}

 65) Failure:
LastModifiedRenderTest#test_responds_with_custom_cache_control_headers [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:545]:
Expected: ""no-cache""
  Actual: nil

 66) Failure:
LastModifiedRenderTest#test_last_modified_with_custom_cache_control_headers [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:653]:
Expected: ""public, no-cache""
  Actual: nil

 67) Failure:
LastModifiedRenderTest#test_request_not_modified_with_record [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:558]:
Expected nil to not be nil.

 68) Failure:
ActionController::Live::ResponseTest#test_cache_control_no_store_is_respected [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/live_response_test.rb:74]:
Expected: ""no-store""
  Actual: ""public, no-store""

 69) Failure:
CookiesTest#test_setting_cookie_with_http_only [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/cookies_test.rb:454]:
--- expected
+++ actual
@@ -1 +1 @@
-[""user_name=david; path=/; HttpOnly; SameSite=Lax""]
+[""user_name=david; path=/; httponly; SameSite=Lax""]


 70) Error:
CacheStoreTest#test_getting_session_value_after_session_reset:
NoMethodError: undefined method `hash_for' for #<Rack::Test::CookieJar:0x0000000003f85298>
    /tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cache_store_test.rb:62:in `block in test_getting_session_value_after_session_reset'
    /tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cache_store_test.rb:221:in `block in with_test_route_set'
    /tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/abstract_unit.rb:154:in `with_routing'
    /tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cache_store_test.rb:208:in `with_test_route_set'
    /tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/session/cache_store_test.rb:58:in `test_getting_session_value_after_session_reset'

 71) Failure:
HeadRenderTest#test_head_with_location_object [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:894]:
--- expected
+++ actual
@@ -1 +1 @@
-""http://www.nextangle.com/customers/1""
+nil


 72) Failure:
HeadRenderTest#test_head_with_location_header [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/controller/render_test.rb:878]:
Expected: ""/foo""
  Actual: nil

 73) Failure:
RequestParameters#test_parameters_not_accessible_after_rack_parse_error_of_invalid_UTF8_character [/tmp/guix-build-ruby-actionpack-7.0.4.2.drv-0/source/actionpack/test/dispatch/request_test.rb:1084]:
ActionController::BadRequest expected but nothing was raised.

3222 runs, 15933 assertions, 71 failures, 2 errors, 0 skips
rake aborted!
Command failed with status (1): [ruby -w -I""lib:test"" -I""/gnu/store/j4z07lyi1ykk8bc68h1p4bpj1il9dn3f-ruby-2.7.4/lib/ruby/gems/2.7.0/gems/rake-13.0.1/lib"" ""/gnu/store/j4z07lyi1ykk8bc68h1p4bpj1il9dn3f-ruby-2.7.4/lib/ruby/gems/2.7.0/gems/rake-13.0.1/lib/rake/rake_test_loader.rb"" ""test/abstract/callbacks_test.rb"" ""test/abstract/collector_test.rb"" ""test/abstract/translation_test.rb"" ""test/assertions/response_assertions_test.rb"" ""test/controller/action_pack_assertions_test.rb"" ""test/controller/api/conditional_get_test.rb"" ""test/controller/api/data_streaming_test.rb"" ""test/controller/api/implicit_render_test.rb"" ""test/controller/api/params_wrapper_test.rb"" ""test/controller/api/redirect_to_test.rb"" ""test/controller/api/renderers_test.rb"" ""test/controller/api/url_for_test.rb"" ""test/controller/api/with_cookies_test.rb"" ""test/controller/api/with_helpers_test.rb"" ""test/controller/base_test.rb"" ""test/controller/caching_test.rb"" ""test/controller/content_type_test.rb"" ""test/controller/default_url_options_with_before_action_test.rb"" ""test/controller/filters_test.rb"" ""test/controller/flash_hash_test.rb"" ""test/controller/flash_test.rb"" ""test/controller/form_builder_test.rb"" ""test/controller/helper_test.rb"" ""test/controller/http_basic_authentication_test.rb"" ""test/controller/http_digest_authentication_test.rb"" ""test/controller/http_token_authentication_test.rb"" ""test/controller/localized_templates_test.rb"" ""test/controller/log_subscriber_test.rb"" ""test/controller/logging_test.rb"" ""test/controller/metal/renderers_test.rb"" ""test/controller/metal_test.rb"" ""test/controller/mime/accept_format_test.rb"" ""test/controller/mime/respond_to_test.rb"" ""test/controller/new_base/bare_metal_test.rb"" ""test/controller/new_base/base_test.rb"" ""test/controller/new_base/content_negotiation_test.rb"" ""test/controller/new_base/content_type_test.rb"" ""test/controller/new_base/middleware_test.rb"" ""test/controller/new_base/render_action_test.rb"" ""test/controller/new_base/render_body_test.rb"" ""test/controller/new_base/render_file_test.rb"" ""test/controller/new_base/render_html_test.rb"" ""test/controller/new_base/render_implicit_action_test.rb"" ""test/controller/new_base/render_layout_test.rb"" ""test/controller/new_base/render_partial_test.rb"" ""test/controller/new_base/render_plain_test.rb"" ""test/controller/new_base/render_streaming_test.rb"" ""test/controller/new_base/render_template_test.rb"" ""test/controller/new_base/render_test.rb"" ""test/controller/new_base/render_xml_test.rb"" ""test/controller/output_escaping_test.rb"" ""test/controller/parameter_encoding_test.rb"" ""test/controller/parameters/accessors_test.rb"" ""test/controller/parameters/always_permitted_parameters_test.rb"" ""test/controller/parameters/dup_test.rb"" ""test/controller/parameters/equality_test.rb"" ""test/controller/parameters/log_on_unpermitted_params_test.rb"" ""test/controller/parameters/multi_parameter_attributes_test.rb"" ""test/controller/parameters/mutators_test.rb"" ""test/controller/parameters/nested_parameters_permit_test.rb"" ""test/controller/parameters/parameters_permit_test.rb"" ""test/controller/parameters/raise_on_unpermitted_params_test.rb"" ""test/controller/parameters/serialization_test.rb"" ""test/controller/parameters_integration_test.rb"" ""test/controller/params_parse_test.rb"" ""test/controller/params_wrapper_test.rb"" ""test/controller/permitted_params_test.rb"" ""test/controller/redirect_test.rb"" ""test/controller/render_js_test.rb"" ""test/controller/render_json_test.rb"" ""test/controller/render_test.rb"" ""test/controller/render_to_string_test.rb"" ""test/controller/render_xml_test.rb"" ""test/controller/renderer_test.rb"" ""test/controller/renderers_test.rb"" ""test/controller/request/test_request_test.rb"" ""test/controller/request_forgery_protection_test.rb"" ""test/controller/required_params_test.rb"" ""test/controller/rescue_test.rb"" ""test/controller/resources_test.rb"" ""test/controller/route_helpers_test.rb"" ""test/controller/routing_test.rb"" ""test/controller/runner_test.rb"" ""test/controller/send_file_test.rb"" ""test/controller/show_exceptions_test.rb"" ""test/controller/streaming_test.rb"" ""test/controller/url_for_integration_test.rb"" ""test/controller/url_for_test.rb"" ""test/controller/url_rewriter_test.rb"" ""test/controller/webservice_test.rb"" ""test/dispatch/actionable_exceptions_test.rb"" ""test/dispatch/callbacks_test.rb"" ""test/dispatch/content_disposition_test.rb"" ""test/dispatch/content_security_policy_test.rb"" ""test/dispatch/cookies_test.rb"" ""test/dispatch/debug_exceptions_test.rb"" ""test/dispatch/debug_locks_test.rb"" ""test/dispatch/exception_wrapper_test.rb"" ""test/dispatch/executor_test.rb"" ""test/dispatch/header_test.rb"" ""test/dispatch/host_authorization_test.rb"" ""test/dispatch/live_response_test.rb"" ""test/dispatch/mapper_test.rb"" ""test/dispatch/middleware_stack_test.rb"" ""test/dispatch/mime_type_test.rb"" ""test/dispatch/permissions_policy_test.rb"" ""test/dispatch/rack_cache_test.rb"" ""test/dispatch/reloader_test.rb"" ""test/dispatch/request/json_params_parsing_test.rb"" ""test/dispatch/request/multipart_params_parsing_test.rb"" ""test/dispatch/request/query_string_parsing_test.rb"" ""test/dispatch/request/session_test.rb"" ""test/dispatch/request/url_encoded_params_parsing_test.rb"" ""test/dispatch/request_id_test.rb"" ""test/dispatch/request_test.rb"" ""test/dispatch/response_test.rb"" ""test/dispatch/routing/concerns_test.rb"" ""test/dispatch/routing/custom_url_helpers_test.rb"" ""test/dispatch/routing/ipv6_redirect_test.rb"" ""test/dispatch/routing/non_dispatch_routed_app_test.rb"" ""test/dispatch/routing/route_set_test.rb"" ""test/dispatch/routing_test.rb"" ""test/dispatch/runner_test.rb"" ""test/dispatch/server_timing_test.rb"" ""test/dispatch/session/abstract_secure_store_test.rb"" ""test/dispatch/session/abstract_store_test.rb"" ""test/dispatch/session/cache_store_test.rb"" ""test/dispatch/session/cookie_store_test.rb"" ""test/dispatch/session/mem_cache_store_test.rb"" ""test/dispatch/session/test_session_test.rb"" ""test/dispatch/show_exceptions_test.rb"" ""test/dispatch/ssl_test.rb"" ""test/dispatch/static_test.rb"" ""test/dispatch/system_testing/driver_test.rb"" ""test/dispatch/system_testing/screenshot_helper_test.rb"" ""test/dispatch/system_testing/server_test.rb"" ""test/dispatch/system_testing/system_test_case_test.rb"" ""test/dispatch/test_request_test.rb"" ""test/dispatch/test_response_test.rb"" ""test/dispatch/uploaded_file_test.rb"" ""test/dispatch/url_generation_test.rb"" ""test/journey/gtg/builder_test.rb"" ""test/journey/gtg/transition_table_test.rb"" ""test/journey/nodes/ast_test.rb"" ""test/journey/nodes/symbol_test.rb"" ""test/journey/path/pattern_test.rb"" ""test/journey/route/definition/parser_test.rb"" ""test/journey/route/definition/scanner_test.rb"" ""test/journey/route_test.rb"" ""test/journey/router/utils_test.rb"" ""test/journey/router_test.rb"" ""test/journey/routes_test.rb"" ""test/routing/helper_test.rb"" ]

Tasks: TOP => test
(See full trace by running task with --trace)
error: in phase 'check': uncaught exception:
%exception #<&invoke-error program: ""rake"" arguments: (""test"") exit-status: 1 term-signal: #f stop-signal: #f> 
phase `check' failed after 7.5 seconds
command ""rake"" ""test"" failed with status 1
```

### System configuration
**Rails version**:
7.0.4.2

**Ruby version**:
2.7.4

I hope that report is useful.  Perhaps the test suite could be smarter to detect e.g. the lack of firefox and skip the related tests.  Some other test failures seem harder to interpret to me."
47614,if_exists on drop_table migration command does not make migration reversible,dmilburn,activerecord,2023-03-09T15:41:06Z,2023-03-31T15:03:18Z,2023-03-31T12:25:35Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

- Create a migration to drop a table and include the `if_exists: true` argument
like:
```
  def change
    drop_table :table_name, if_exists: true
  end
```
- Run the migration forward
- Attempt to rollback the migration

### Expected behavior

Based on the error message `To avoid mistakes, drop_table is only reversible if given options or a block (can be empty).` when the migration looked like:
```
  def change
    drop_table :table_name
  end
```
I would have expected `if_exists: true` to make the migration reversible. It does run successfully going forward.

### Actual behavior

Instead, when rolling back, I got `Unknown key: :if_exists. Valid keys are: :temporary, :if_not_exists, :options, :as, :comment, :charset, :collation, :limit, :default, :precision, :unsigned`

### System configuration
**Rails version**: Rails 7.1.0.alpha.31f5cb18fa

**Ruby version**:  ruby 3.2.1 
"
47601,"Rails 7 - ActiveSupport Cache raises ""Zlib::DataError: incorrect header check""",shivabhusal,"activesupport, With reproduction steps",2023-03-08T06:08:31Z,2023-05-07T09:00:04Z,2023-05-07T09:00:04Z,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate/comment-out the following line to switch between Rails versions.
  gem ""activesupport"", ""~> 7.0.4""
  # gem ""activesupport"", ""~> 6.1.2""

  gem ""redis""
end

require ""active_support""
require ""minitest/autorun""

# This test case is a reproduction of the issue I faced when trying to compress cache entries.
# below, threshold does not matter. No matter how long is the value, it will raise error in Rails 7
class CompressedCacheBugTest < Minitest::Test

  def test_can_use_redis_client_with_compression
    # It requires a redis server running on localhost:<default-port>
    cache = ActiveSupport::Cache.lookup_store(:redis_cache_store, {url: 'redis://localhost'})

    value = 'somevalue'

    cache.fetch('my-cache-key', compressed: true, force: true) do
      value
    end

    assert_equal value, cache.fetch('my-cache-key')
  end

  def test_can_use_memory_store_with_compression
    cache = ActiveSupport::Cache.lookup_store(:memory_store)

    value = 'somevalue'

    cache.fetch('my-cache-key', compressed: true, force: true) do
      value
    end

    assert_equal value, cache.fetch('my-cache-key')
  end
end
```

### Expected & Actual behavior
In Rails 6 it was working just fine. You can switch between versions in the example above.


### System configuration
**Rails version**: 7.0.4

**Ruby version**: 2.7.7
"
47600,`has_secure_password` should validate 72 bytes max for multi-byte non-Latin characters,clairity,attached PR,2023-03-08T03:12:15Z,2023-04-20T17:35:50Z,2023-04-20T04:49:01Z,"Given:

```ruby
class User < ApplicationRecord
  has_secure_password
  # also has an :email field
end
```

and [documentation](https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password) saying that passwords are validated to be less than 72 *bytes*, we'd expect a >72-byte password to fail validation.

However:

```ruby
> user = User.new(email: ""test@example.com"", password: ""rails 有一个多字节非拉丁字符的错误，这些字符的字符数比字节化短"")
=> #<User:0x00000001234567890
> user.password.length
=> 34
> user.password.bytesize
=> 90
> user.valid?
=> true
```

This is a 34-character, 90-byte password that passes validation, because the validation is on password `length`, not `bytesize`. However, it should fail validation because it's longer than the byte length limit of bcrypt, as described in the documentation.

To be technically correct, it seems the validation should happen on `bytesize`, not `length`. Is this an implementation error or a documentation issue?

Previous submissions like #22617, #22870, and #25045 don't seem to have clarified this issue any further.
"
47593,add_foreign_key should support composite primary_key,jiridenteo,"activerecord, attached PR",2023-03-07T13:08:27Z,2023-09-09T20:44:14Z,2023-09-09T20:44:14Z,"`add_foreign_key` now accepts an argument `primary_key` and it is also possible to send in an array. however, only the first element from the array is taken.

To support multitenancy, it should be possible to send in a composite primary key, eg.

```
add_foreign_key :from, :to, primary_key: [:tenant_id, :id]
```"
47588,`.references` with an unknown table makes all associations to be eager loaded,blanquer,"activerecord, stale",2023-03-06T16:38:19Z,2023-06-25T10:07:15Z,2023-06-25T10:07:15Z,"### Steps to reproduce
Inside any Rails console, try out any AR query with an included association, add a `.references` with any bogus table name. 
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->


```ruby
# From any Rails console, with SQL logging turned on

> ActiveBook.includes(:author).references(:foo).to_a; nil
```

### Expected behavior
It should either complain or ignore the invalid `:foo` table, not just continue going ahead by deciding to eager load ALL of the included  associations (which, as it happens, if it is a deep query with many nested ones, this transforms the query into a massive cartesian product of rows.

If it was to ignore such string/symbol, I'd expect the exact same behavior without the `.references(:foo)`... i.e., which in this case would preload the authors instead of eager load them

Expected preloading of authors:
```
ActiveBook Load (0.2ms)  SELECT ""active_books"".* FROM ""active_books""
ActiveAuthor Load (0.2ms)  SELECT ""active_authors"".* FROM ""active_authors"" WHERE ""active_authors"".""id"" IN (?, ?, ?)  [[""id"", 11], [""id"", 22], [""id"", 33]]
```

### Actual behavior
It eager loads ALL of the included associations (in this case there's only 1), instead of preloading them if available.

```
 SQL (0.2ms)  SELECT ""active_books"".""id"" AS t0_r0, ""active_books"".""simple_name"" AS t0_r1, ""active_books"".""added_column"" AS t0_r2, ""active_books"".""category_uuid"" AS t0_r3, ""active_books"".""author_id"" AS t0_r4, ""active_authors"".""id"" AS t1_r0, ""active_authors"".""name"" AS t1_r1 FROM ""active_books"" LEFT OUTER JOIN ""active_authors"" ON ""active_authors"".""id"" = ""active_books"".""author_id""
```
### System configuration
**Rails version**: ActiveRecord 6.1.7.1
**Ruby version**: 3.1.1"
47586,Overridden Time.at method doesn't support `in` keyword argument,andrykonchin,activesupport,2023-03-06T13:02:56Z,2023-03-30T17:53:18Z,2023-03-07T00:12:41Z,"It's a known issue that was fixed in https://github.com/rails/rails/pull/41592.

Will the fix backporting to Rails 6.0 be accepted? It's nothing more than

```ruby
ruby2_keywords(:at_with_coercion) if respond_to?(:ruby2_keywords, true)
```

### Steps to reproduce

```ruby
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'activesupport', '~> 6.0.0'
end

require 'active_support/time'

puts Time.at(946702800, 500, :nanosecond, in: 0)
```

### Expected behavior

It's expected to have Time string representation be printed:

```
2000-01-01 05:00:00 +0000
```

### Actual behavior

ArgumentError exception `wrong number of arguments (given 4, expected 1..3)` is raised instead:

```
.../.rbenv/versions/3.0.0/lib/ruby/gems/3.0.0/gems/activesupport-6.0.6.1/lib/active_support/core_ext/time/calculations.rb:45:in `at': wrong number of arguments (given 4, expected 1..3) (ArgumentError)
	from .../.rbenv/versions/3.0.0/lib/ruby/gems/3.0.0/gems/activesupport-6.0.6.1/lib/active_support/core_ext/time/calculations.rb:45:in `at_with_coercion'
```

### System configuration
**Rails version**: 6.0

**Ruby version**: 3.0
"
47576,The action: option specified for a route under scope with action: is ignored,YusukeTakeuchi,"railties, attached PR, With reproduction steps",2023-03-04T15:25:05Z,2023-10-18T03:27:35Z,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.0.0""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    resources :tests do
      scope action: :scope_action do
        get :foo, action: :foo_action
      end
    end
  end
end

class TestsController < ActionController::Base
  include Rails.application.routes.url_helpers

  def foo_action
    render plain: ""Home""
  end

  def scope_action
    raise 'scope_action called'
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    get ""/tests/2/foo""
    assert last_response.ok?
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior
`TestsController#foo_action` is called and returns ok.

### Actual behavior
`TestsController#scope_action` is called.
```
I, [2023-03-05T00:04:39.266468 #38680]  INFO -- : Started GET ""/tests/2/foo"" for 127.0.0.1 at 2023-03-05 00:04:39 +0900
F, [2023-03-05T00:04:39.414911 #38680] FATAL -- :   
RuntimeError (scope_action called):
```

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 3.0.4
"
47574,Inverses are not properly set for belongs_to associations using foreign keys and scopes,andrewberls,"activerecord, attached PR, With reproduction steps",2023-03-03T23:17:35Z,2023-03-26T22:10:22Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  # See note; bug was introduced in 6.1.0 and persists through HEAD
  gem ""activerecord"", ""~> 6.1.7.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :authors, force: true do |t|
    t.string :token
  end

  create_table :posts, force: true do |t|
    t.string :author_token
    t.string :status
  end
end

class Author < ActiveRecord::Base
  has_one :post,
    -> { where(status: 'published') },
    primary_key: :token,
    foreign_key: :author_token,
    inverse_of: :author
end

class Post < ActiveRecord::Base
  belongs_to :author,
    primary_key: :token,
    foreign_key: :author_token
end

class BugTest < Minitest::Test
  def test_inversing
    author = Author.create!(token: 'A-123')
    Post.create!(author: author, status: 'published')

    assert_equal author.post.author.object_id, author.object_id
  end
end
```

I also have a skeleton repo demonstrating this issue [here](https://github.com/andrewberls/rails_6_1_association_inverse_bug), with branches showing failure for versions >= 6.1.0.

### Expected behavior
The `Post#author` association should be inversed, and `author.post.author.object_id` should exactly equal `author.object_id`

### Actual behavior
The association does not inverse and the DB is queried to retrieve `post.author`.

I believe the bug was introduced in https://github.com/rails/rails/commit/c6f46564771413f4a06703fc6b1f82ed09a0c4c9 as part of 6.1.0, and exists through HEAD as the code has not changed. In this instance we can see are comparing the foreign key attribute (`token`) to the ID [here](https://github.com/rails/rails/blob/f0c5e60aed8bdce96c385cad05b1e34d7d757038/activerecord/lib/active_record/associations/association.rb#L353), which clearly fails and thus the association is not properly considered `inversable?`.

Comparing instead to `record.send(reflection.association_primary_key)` may fix although I am not familiar with Rails internals and would need some assistance to submit a properly-scoped and tested PR.

The bug is NOT observed in the absence of a scope; specifically only the `set_inverse_instance_from_queries` pathway  seems to demonstrate the bug.

### System configuration
**Rails version**: The spec demonstrates **6.1.7.2** but fails beginning at **6.1.0** and persists through **HEAD**

**Ruby version**: 2.7.6 (bug also present on 3.0.x)

Thank you!
"
47571,Support for combining structurally incompatible relations with `and`,maxnotarangelo,"activerecord, attached PR",2023-03-03T13:45:15Z,2023-05-07T09:07:15Z,,"To combine multiple relations, you can use `relation.merge`, which has no problem when the two relations are joined to different tables, have different preloading, etc. When the relations both have a `where` clause for the same key, the second relation's condition is used, just like `Hash.merge`:

https://github.com/rails/rails/blob/556025d94b13ef76ec4bed26ccb62f37ef360220/activerecord/test/cases/relation/merging_test.rb#L113

The behavior I want is to keep both filters. As far as I can tell, this is how `merge` used to work, at least in most cases (see https://github.com/rails/rails/pull/39328). The `and` method was added in Rails 6.1 as a replacement (see https://github.com/rails/rails/pull/39558):

https://github.com/rails/rails/blob/556025d94b13ef76ec4bed26ccb62f37ef360220/activerecord/test/cases/relation/merging_test.rb#L115

However, it won't let you combine two relations if they're ""structurally incompatible"": if the two relations are joined to different tables, have different preloading, etc. This means that if you have a join or preloading on one of the relations, you can't combine them with `and`:

<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :categories, force: true do |t|
  end

  create_table :posts, force: true do |t|
    t.integer :category_id
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.integer :score
  end
end

class Category < ActiveRecord::Base
  has_many :posts
  has_many :quality_comments, -> { where(score: 4..6) }, through: :posts, source: :comments
end

class Post < ActiveRecord::Base
  belongs_to :category
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class RelationAndTest < Minitest::Test
  def test_relation_and
    category = Category.create!
    post = Post.create!(category:)
    post.comments << Comment.create!(score: 3)
    post.comments << Comment.create!(score: 4)
    post.comments << Comment.create!(score: 5)

    mediocre_comments = Comment.where(score: 2..4)

    merged = mediocre_comments.merge(category.quality_comments)
    assert_equal [4, 5], merged.pluck(:score).sort

    anded = mediocre_comments.and(category.quality_comments)
    # => raises ArgumentError: Relation passed to #and must be structurally compatible. Incompatible values: [:joins]
  end
end
```

I was able to work around it by using `merge` and then combining the where relations manually:

```ruby
combined_wheres = mediocre_comments.where_clause | category.quality_comments.where_clause
valid_anded = merged
valid_anded.where_clause = combined_wheres
assert_equal [4], valid_anded.pluck(:score)
```

I'd rather just be able to use `and`, but I don't know if there's some reason that combining all the non-filtering parts of two relations would cause problems for `and` that it doesn't cause for `merge`.

### System configuration
**Rails version**: 7.1.0
**Ruby version**: 3.1.1"
47570,Issues when editing non-default environment credentials,morgoth,railties,2023-03-03T13:05:37Z,2023-03-14T21:38:56Z,2023-03-12T21:58:28Z,"When I edit some other than production/development/test environment credentials file, like this:
```
EDITOR=""gnome-text-editor -i"" rails credentials:edit -e staging
```
It works fine, however there are 2 small issues:
1) There is a warning in console (I don't have config/environments/staging.rb)
```
config.eager_load is set to nil. Please update your config/environments/*.rb files accordingly:

  * development - set it to false
  * test - set it to false (unless you use a tool that preloads your test environment)
  * production - set it to true
```

2) There is no preview of changes on `git diff`. The diff preview works fine for development credentials changes, but here I got something like this:
```
-azmQ2iiwXhhd6x...
+O/TmR0ymILlc2vmy...
```

The editing and overall functionality is fine.

### System configuration
**Rails version**: main (7.1.0.alpha 556025d)
**Ruby version**: 3.2.1
"
47562,Deterministically encrypted attributes add unwanted queries when other attributes are uniquely validated,zhuravel,"activerecord, duplicate",2023-03-02T20:35:45Z,2023-03-03T08:25:54Z,2023-03-03T04:41:55Z,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Encryption.configure(
  support_unencrypted_data: true,
  extend_queries: true,
  primary_key: SecureRandom.alphanumeric(32),
  deterministic_key: SecureRandom.alphanumeric(32),
  key_derivation_salt: SecureRandom.alphanumeric(32),
)

ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator.install_support

ActiveRecord::Schema.define do
  create_table :people, force: true do |t|
    t.bigint :site_id
    t.string :email
    t.string :username
    t.index [:site_id, :username], unique: true
  end
end

class Person < ActiveRecord::Base
  encrypts :email, deterministic: true, downcase: true

  validates :username, uniqueness: { scope: :site_id, case_sensitive: false }
end

class BugTest < Minitest::Test
  def test_bug
    Person.create!(site_id: 42, email: ""alice@example.com"", username: ""PixiesFan"")

    # Look at the # of queries performed in the SQL output.
    #
    # The code above makes 3 SELECT queries before doing INSERT,
    # but I believe only the 1st SELECT should be executed:
    #
    #  SELECT 1 AS one FROM ""people"" WHERE LOWER(""people"".""username"") = LOWER(?) AND ""people"".""site_id"" = ? LIMIT ?  [[""username"", ""PixiesFan""], [""site_id"", 42], [""LIMIT"", 1]]
    #  SELECT 1 AS one FROM ""people"" WHERE LOWER(""people"".""username"") = LOWER(?) AND ""people"".""site_id"" = ? LIMIT ?  [[""username"", ""{\""p\"":\""5wDVc4FrlD8O\"",\""h\"":{\""iv\"":\""PKIelpDwQmEDjWnW\"",\""at\"":\""T39guTPcxT0EadJ9bcG5+w==\""}}""], [""site_id"", 42], [""LIMIT"", 1]]
    #  SELECT 1 AS one FROM ""people"" WHERE LOWER(""people"".""username"") = LOWER(?) AND ""people"".""site_id"" = ? LIMIT ?  [[""username"", ""pixiesfan""], [""site_id"", 42], [""LIMIT"", 1]]
    #  INSERT INTO ""people"" (""site_id"", ""email"", ""username"") VALUES (?, ?, ?)  [[""site_id"", 42], [""email"", ""{\""p\"":\""gOJfTLBzlDnAWcYGx426MtE=\"",\""h\"":{\""iv\"":\""ACu7afkEmnfGU3K0\"",\""at\"":\""Tc/Pt59+ZF+YY1sGV3Ni2Q==\""}}""], [""username"", ""PixiesFan""]]
    #
    # Attribute `username` is not encrypted, and should not be validated as such (2nd SELECT).
    # LOWER(""PixiesFan"") also equals LOWER(""pixiesfan"") so the 3rd SELECT looks redundant.
  end
end
```

### Expected behavior
Non-encrypted attribute should not be validated as such, and the uniqueness validator in the provided test should make 1 SELECT query instead of 3.

### Actual behavior
When the model has some deterministically encrypted attribute and another uniquely validated non-encrypted attribute, the uniqueness validator makes unwanted queries.

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 3.2.1
"
47561,ActiveStorage Proxy fails on Puma with: undefined method `to_ary',rgarver,activestorage,2023-03-02T19:42:07Z,2023-06-12T19:37:16Z,2023-06-11T19:43:05Z,"### Steps to reproduce
Started with a barebones rails edge install with active_storage installed and a minimal test case:

app/models/picture_frame.rb
```
class PictureFrame < ApplicationRecord
  has_one_attached :picture
end
```

db/migrate/20230302181354_create_picture_frames.rb
```
class CreatePictureFrames < ActiveRecord::Migration[7.0]
  def change
    create_table :picture_frames do |t|

      t.timestamps
    end
  end
end
```

config/initializers/active_storage.rb
```
Rails.application.config.active_storage.resolve_model_to_route = :rails_storage_proxy
```

in rails console I manually set up a simple test case:
```
irb(main):001:0> p = PictureFrame.create
=> #<PictureFrame:0x000000010bb801a8 id: 2, created_at: Thu, 02 Mar 2023 19:37:21.674961000 UTC +00:00, updated_at: Thu, 02 Mar 2023 19:37:21.674961000 UTC +00:00>
irb(main):002:0> f = File.open('test.jpg')
=> #<File:test.jpg>
irb(main):003:0> p.picture.attach(io: f, filename: 'test.jpg', content_type: 'image/jpg')
...
irb(main):004:0> p.save
=> true
irb(main):005:0> app.rails_representation_path(p.picture)
=> ""/rails/active_storage/blobs/proxy/eyJfcmFpbHMiOnsiZGF0YSI6NCwicHVyIjoiYmxvYl9pZCJ9fQ==--f1cee12a7b22044d58c2e760c4e6bc5768191c94/test.jpg""
```

Same result when using variations too.



### Expected behavior
As seen with rails commit e89b2e42711e7f2a9001cf6ee50c1dc37cdc18c1
```
=> Booting Puma
=> Rails 7.1.0.alpha application starting in development 
=> Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 6.1.1 (ruby 3.2.0-p0) (""The Way Up"")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 6636
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop
Started GET ""/rails/active_storage/blobs/proxy/eyJfcmFpbHMiOnsibWVzc2FnZSI6Ik1nPT0iLCJleHAiOm51bGwsInB1ciI6ImJsb2JfaWQifX0=--b8d84e5130fbf7942217e6aed28288da994320d2/test.jpg"" for ::1 at 2023-03-02 11:27:05 -0800
  ActiveRecord::SchemaMigration Load (0.1ms)  SELECT ""schema_migrations"".""version"" FROM ""schema_migrations"" ORDER BY ""schema_migrations"".""version"" ASC
Processing by ActiveStorage::Blobs::ProxyController#show as JPEG
  Parameters: {""signed_id""=>""eyJfcmFpbHMiOnsibWVzc2FnZSI6Ik1nPT0iLCJleHAiOm51bGwsInB1ciI6ImJsb2JfaWQifX0=--b8d84e5130fbf7942217e6aed28288da994320d2"", ""filename""=>""test""}
  ActiveStorage::Blob Load (0.1ms)  SELECT ""active_storage_blobs"".* FROM ""active_storage_blobs"" WHERE ""active_storage_blobs"".""id"" = ? LIMIT ?  [[""id"", 2], [""LIMIT"", 1]]
  Disk Storage (1.3ms) Downloaded file from key: avir98wqd0j07jcgpk5c19sb4mgt
Completed 200 OK in 70ms (ActiveRecord: 1.5ms | Allocations: 30861)
```

### Actual behavior
As seen with all commits starting with 218ec10df8ec9a84a5090b5c2b985dfcd8e7b820
```
=> Booting Puma
=> Rails 7.1.0.alpha application starting in development 
=> Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 6.1.1 (ruby 3.2.0-p0) (""The Way Up"")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 18300
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop
Started GET ""/rails/active_storage/blobs/proxy/eyJfcmFpbHMiOnsibWVzc2FnZSI6Ik1nPT0iLCJleHAiOm51bGwsInB1ciI6ImJsb2JfaWQifX0=--b8d84e5130fbf7942217e6aed28288da994320d2/test.jpg"" for ::1 at 2023-03-02 11:28:44 -0800
  ActiveRecord::SchemaMigration Load (0.1ms)  SELECT ""schema_migrations"".""version"" FROM ""schema_migrations"" ORDER BY ""schema_migrations"".""version"" ASC
Processing by ActiveStorage::Blobs::ProxyController#show as JPEG
  Parameters: {""signed_id""=>""eyJfcmFpbHMiOnsibWVzc2FnZSI6Ik1nPT0iLCJleHAiOm51bGwsInB1ciI6ImJsb2JfaWQifX0=--b8d84e5130fbf7942217e6aed28288da994320d2"", ""filename""=>""test""}
  ActiveStorage::Blob Load (0.1ms)  SELECT ""active_storage_blobs"".* FROM ""active_storage_blobs"" WHERE ""active_storage_blobs"".""id"" = ? LIMIT ?  [[""id"", 2], [""LIMIT"", 1]]
  Disk Storage (4.2ms) Downloaded file from key: avir98wqd0j07jcgpk5c19sb4mgt
2023-03-02 11:28:45 -0800 Read: #<NoMethodError: undefined method `to_ary' for #<Thread::SizedQueue:0x00000001049dd140>>
Completed 200 OK in 124ms (ActiveRecord: 1.6ms | Allocations: 31071)
```

### System configuration
**Rails version**: Anything after 218ec10df8ec9a84a5090b5c2b985dfcd8e7b820

**Ruby version**: 3.2.0

**Rack version**: Didn't seem to matter but the bulk of my tests were using 2.2.6.2

**Puma version**: 6.1.1 but saw similar results with earlier versions.

Likely caused by #47092 "
47559,Attempting to save duplicate records with has_many_inversing enabled leads to SQL error,jhottenstein,"activerecord, With reproduction steps",2023-03-02T19:01:03Z,2023-07-04T12:13:21Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
When attempting to build multiple in-memory associations from an AR object to the same in-memory AR object:
- with ActiveRecord::Base.has_many_inversing = true
- when explicitly including  `inverse_of:` on the `belongs_to`

activerecord generates sql that loses the association to the original AR object

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.has_many_inversing = true

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.references :post, null: false
    t.references :author, null: false
  end

  create_table :authors, force: true do |t|
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Author < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post, inverse_of: :comments
  belongs_to :author, inverse_of: :comments
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.new
    author = Author.new
    post.comments.build(author: author)
    post.comments.build(author: author)

    post.save! 
  end
end

```

### Expected behavior
This case is similar to https://github.com/rails/rails/issues/43222 so I would expect the second comments.build command to be a NOOP as it is trying to make another link to the same author.  

It would also be understandable if there were multiple comments rows created with the same author and post.

### Actual behavior
When attempting to save the second comment, activerecord omits the post_id and it fails on NOT NULL constraint.
```
D, [2023-03-02T13:44:04.811276 #52249] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction
D, [2023-03-02T13:44:04.811336 #52249] DEBUG -- :   Post Create (0.1ms)  INSERT INTO ""posts"" DEFAULT VALUES
D, [2023-03-02T13:44:04.811591 #52249] DEBUG -- :   Author Create (0.0ms)  INSERT INTO ""authors"" DEFAULT VALUES
D, [2023-03-02T13:44:04.811787 #52249] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO ""comments"" (""post_id"", ""author_id"") VALUES (?, ?)  [[""post_id"", 1], [""author_id"", 1]]
D, [2023-03-02T13:44:04.812018 #52249] DEBUG -- :   Comment Create (0.1ms)  INSERT INTO ""comments"" (""author_id"") VALUES (?)  [[""author_id"", 1]]
D, [2023-03-02T13:44:04.812076 #52249] DEBUG -- :   TRANSACTION (0.0ms)  rollback transaction

Error:
BugTest#test_association_stuff:
ActiveRecord::NotNullViolation: SQLite3::ConstraintException: NOT NULL constraint failed: comments.post_id
```
If there are no NOT NULL constraints, it eventually gets the association correct with an UPDATE statement
```
D, [2023-03-02T14:00:24.734133 #52815] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction
D, [2023-03-02T14:00:24.734195 #52815] DEBUG -- :   Post Create (0.1ms)  INSERT INTO ""posts"" DEFAULT VALUES
D, [2023-03-02T14:00:24.734628 #52815] DEBUG -- :   Author Create (0.0ms)  INSERT INTO ""authors"" DEFAULT VALUES
D, [2023-03-02T14:00:24.734831 #52815] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO ""comments"" (""post_id"", ""author_id"") VALUES (?, ?)  [[""post_id"", 1], [""author_id"", 1]]
D, [2023-03-02T14:00:24.734968 #52815] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO ""comments"" (""author_id"") VALUES (?)  [[""author_id"", 1]]
D, [2023-03-02T14:00:24.735838 #52815] DEBUG -- :   Comment Update (0.0ms)  UPDATE ""comments"" SET ""post_id"" = ? WHERE ""comments"".""id"" = ?  [[""post_id"", 1], [""id"", 2]]
D, [2023-03-02T14:00:24.735919 #52815] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction
```


### System configuration
**Rails version**:
Above repro is from main template.  Can repro all versions that include has_many_inversing (back to 6.1)
**Ruby version**:
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [arm64-darwin22]"
47558,`belongs_to` relation SQL merges with and overwrites the `default_scope`,JeremyC-za,"activerecord, With reproduction steps",2023-03-02T16:11:47Z,2023-08-30T17:47:55Z,,"### Steps to reproduce
I've only tested this with a `belongs_to` relation, I'm not sure if there are similar issues with other relations. It looks like the default scope conditions are being merged with and overwritten by the relation sql conditions when they are dealing with the same column (most commonly `id`).

I have seen from [this commit](https://github.com/rails/rails/commit/159cc3421ce1963cb10e98920b621fb327fd87a6) that the intended behaviour going forward is that the latter condition replaces former, but it doesn't seem like that makes sense in the case of the default scope. I'd expect the default scope to take precedence.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # gem ""rails"", github: ""rails/rails"", branch: ""6-0-stable""
  # gem ""rails"", github: ""rails/rails"", branch: ""6-1-stable""
  # gem ""rails"", github: ""rails/rails"", branch: ""7-0-stable""
  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
  gem ""pry""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments

  # The same scope defined in different ways.
  SCOPES = {
    scope_1: -> { $scope_active ? where(table[:id].eq(20)) : nil },
    scope_2: -> { $scope_active ? where(table[""id""].eq(20)) : nil },
    scope_3: -> { $scope_active ? where(id: 20) : nil },
    scope_4: -> { $scope_active ? where(""id"" => 20) : nil },
    scope_5: -> { $scope_active ? where(""id = ?"", 20) : nil },
    scope_6: -> { $scope_active ? where(""id IN (?)"", [20]) : nil },
    scope_7: -> { $scope_active ? where(""#{self.klass.table_name}.id = ?"", 20) : nil },
  }

  def self.set_default_scope(scope_key)
    default_scope SCOPES[scope_key]
  end
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_default_scope_bug
    # Default unscoped case
    $scope_active = false
    post = Post.create!
    comment = Comment.create!(post_id: post.id)
    assert Post.find_by_id(post.id)
    assert Comment.find(comment.id).post

    # Test each default scope
    $scope_active = true
    Post::SCOPES.keys.each do |scope_key|
      puts scope_key
      Post.default_scopes = [] # Clear them each time.
      Post.set_default_scope(scope_key)

      assert_nil Post.find_by_id(post.id), ""Post should be scoped to id == 20 (#{scope_key})""
      assert_nil Comment.find(comment.id).post, ""Relation sql should not overwrite default scope (#{scope_key})""
    end
  end
end
```

### Expected behavior
I'd expect the Post that was created at the beginning of the test (with `id == 1`) should never be reachable due to the default scope restricting all queries to `id == 20`. This should apply when selecting the Post directly, and through the Comment's relation.

### Actual behavior
Finding the Post directly does respect the default scope, but `comment.post` ignores (merges and overwrites) it. This is the SQL from the final two `assert_nil` commands for `scope_1`:
```sql
-- Post.find_by_id(post.id)
Post Load (0.1ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""id"" = 20 AND ""posts"".""id"" = ? LIMIT ?  [[""id"", 1], [""LIMIT"", 1]]

-- Comment.find(comment.id).post
Comment Load (0.0ms)  SELECT ""comments"".* FROM ""comments"" WHERE ""comments"".""id"" = ? LIMIT ?  [[""id"", 1], [""LIMIT"", 1]]
Post Load (0.0ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""id"" = ? LIMIT ?  [[""id"", 1], [""LIMIT"", 1]]
```


### System configuration
**Rails version**: >= 6.0

**Ruby version**: 2.7.0
"
47555,`counter_cache` is double incremented with disabled partial_inserts.,konalegi,"activerecord, With reproduction steps",2023-03-02T14:12:22Z,2023-08-04T21:11:15Z,,"### Steps to reproduce

This happens only when defined with `has_many through` association and with `partial_inserts` set to `false`

The query difference with enabled and disable partial_inserts 
with enabled
```
Step Create (0.1ms)  INSERT INTO ""steps"" DEFAULT VALUES
Step Update All (0.1ms)  UPDATE ""steps"" SET ""specializations_count"" = COALESCE(""specializations_count"", 0) + ? WHERE ""steps"".""id"" = ?  [[""specializations_count"", 1], [""id"", 1]]
```

with disabled 
```
Step Create (0.1ms)  INSERT INTO ""steps"" (""specializations_count"") VALUES (?)  [[""specializations_count"", 1]]
Step Update All (0.1ms)  UPDATE ""steps"" SET ""specializations_count"" = COALESCE(""specializations_count"", 0) + ? WHERE ""steps"".""id"" = ?  [[""specializations_count"", 1], [""id"", 1]]
```

As you might see, with disabled `partial_inserts`, `specializations_count` is set to `1`, but when enabled, it's set to its default value.

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", '~> 7.0.4.2'
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.partial_inserts = false

ActiveRecord::Schema.define do
  create_table :steps, force: true do |t|
    t.integer ""specializations_count"", default: 0
  end

  create_table :specialization_steps, force: true do |t|
    t.integer ""specialization_id"", null: false
    t.integer ""step_id"", null: false
  end

  create_table :specializations, force: true do |t|
  end
end

class SpecializationStep < ActiveRecord::Base
  belongs_to :specialization
  belongs_to :step, counter_cache: :specializations_count
end

class Step < ActiveRecord::Base
  has_many :specialization_steps
  has_many :specializations, through: :specialization_steps, counter_cache: :specializations_count
end

class Specialization < ActiveRecord::Base
  has_many :specialization_steps
  has_many :steps, through: :specialization_steps
end

class BugTest < Minitest::Test
  def test_1
    step = Step.create!(specializations: [Specialization.create!])

    assert_equal 1, step.reload.specializations_count
  end

  def test_2
    step = Step.new(specializations: [Specialization.create!])
    assert_equal 1, step.specializations_count
  end
end
```

### Expected behavior
```
.

Finished in 0.021899s, 91.3284 runs/s, 91.3284 assertions/s.
2 runs, 2 assertions, 0 failures, 0 errors, 0 skips
```

### Actual behavior
```
F

Failure:
BugTest#test_1 [reproduce_github.rb:51]:
Expected: 1
  Actual: 2
```

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**:  ruby 3.0.4p208 (2022-04-12 revision 3fa771dded) [x86_64-darwin20]
"
47542,"AppGeneratorTest get errors `Your Ruby version is 3.3.0.dev, but your Gemfile specified 3.3.0`",yahonda,railties,2023-02-28T23:54:37Z,2023-03-14T03:10:16Z,2023-03-14T03:10:16Z,"Since https://github.com/rails/rails/pull/47524 has been merged to revert #45979 AppGeneratorTest using Ruby 3.3.0dev get errors. https://buildkite.com/rails/rails/builds/94260#0186953b-c968-466c-8124-2e976b9dbbe4

Although, It is kind of expected because #47524 reverts #45979 ""Support prerelease rubies in Gemfile template"". Let me open a issue here.

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
Use Ruby 3.3.0dev like `rbenv install 3.3.0-dev ; rbenv global 3.3.0-dev` or whatever
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
cd railties
bin/test test/generators/app_generator_test.rb -n test_application_name_is_detected_if_it_exists_and_app_folder_renamed # any test that calls `run_app_update` should gets error
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ bin/test test/generators/app_generator_test.rb -n test_application_name_is_detected_if_it_exists_and_app_folder_renamed
Run options: -n test_application_name_is_detected_if_it_exists_and_app_folder_renamed --seed 23396

# Running:

E

Error:
AppGeneratorTest#test_application_name_is_detected_if_it_exists_and_app_folder_renamed:
RuntimeError: Command failed with exit 1: yes | bin/rails app:update
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1142:in `system'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1142:in `block (2 levels) in run_app_update'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:11:in `silence_stream'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:19:in `block in quietly'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:11:in `silence_stream'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:18:in `quietly'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1142:in `block in run_app_update'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1137:in `chdir'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1137:in `run_app_update'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:160:in `test_application_name_is_detected_if_it_exists_and_app_folder_renamed'


bin/test test/generators/app_generator_test.rb:154



Finished in 0.128656s, 7.7726 runs/s, 0.0000 assertions/s.
1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.3.0dev (2023-02-28T18:05:30Z master c43fbe4ebd) [x86_64-linux]
"
47540,Update_all with join ,dawidof,more-information-needed,2023-02-28T21:09:26Z,2023-04-05T10:40:48Z,2023-03-15T00:04:27Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
```
model Creation  < ApplicationRecord
  belongs_to: :campaign
end

class Campaign < ApplicationRecord
  has_many :creations, dependent: :destroy
end

Creation.joins(:campaign).where(details: '').update_all('details = campaigns.brief_name')
```


### Expected behavior
<!-- Tell us what should happen -->

```
UPDATE creations
  INNER JOIN campaigns ON creations.campaign_id = campaigns.id
  SET details = campaigns.name
  WHERE creations.details = '';
```

### Actual behavior
<!-- Tell us what happens instead -->

```
Creation Update All (1.0ms)  
UPDATE ""creations"" 
  SET details = campaigns.name 
  WHERE ""creations"".""id"" IN (
    SELECT ""creations"".""id"" 
      FROM ""creations""
      INNER JOIN ""campaigns"" ON ""campaigns"".""id"" = ""creations"".""campaign_id"" 
      WHERE ""creations"".""details"" = $1)  [[""details"", """"]]

ActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing FROM-clause entry for table ""campaigns""
LINE 1: UPDATE ""creations"" SET details = campaigns.brief_name WHERE ...
```

### System configuration
**Rails version**: `7.0.4.2`

**Ruby version**: `ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]`
"
47538,"Single-Table Inheritance with attribute on sub-class, raises after `becomes` sub-class",jrochkind,activerecord,2023-02-28T20:32:10Z,2023-03-07T16:16:24Z,2023-03-07T16:16:24Z,"### Steps to reproduce

* When using ActiveRecord Single-Table Inheritance, where a sub-class has declared a ""virtual"" attribute with ActiveModel `attribute` method. 
* And using ActiveRecord `becomes` to change a superclass instance to a subclass instance
* You can not read or write the virtual attribute in the sub-class, after ""becomes""

This is an isolated reproduction of an issue that was affecting me in more complex use of Rails attributes API for implementing json-backed attributes, at https://github.com/jrochkind/attr_json/issues/189

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", "">= 7.0.4.2""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :vehicles, force: true do |t|
    t.string :type
    t.string :name
  end
end

class Vehicle < ActiveRecord::Base
end

class Car < Vehicle
  # virtual attribute
  attribute :virtual_string, :string
end

class BugTest < Minitest::Test
  # without `becomes`, works fine
  def test_virtual_attribute
    car = Car.create!
    car.virtual_string = ""my value""
    assert_equal car.virtual_string, ""my value""
  end

  # FAILS
  def test_virtual_attribute_after_becomes
    became_car = Vehicle.new.becomes(Car)

    became_car.virtual_string = ""my value""
    # RAISES
    # ActiveModel::MissingAttributeError: can't write unknown attribute `virtual_string`

    assert_equal car.virtual_string, ""my value""
  end
end
```

### Expected behavior
I expect `became_car.virtual_string = ""my value""` to properly set the attribute value. 

### Actual behavior
Raises: `ActiveModel::MissingAttributeError`: can't write unknown attribute `virtual_string` 

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 3.2.0
"
47535,ActionDispatch::SSL middleware fails when using Rack >=3 and there are multiple cookies,marcospereira,"actionpack, With reproduction steps",2023-02-28T16:13:13Z,2023-03-13T17:54:11Z,2023-03-13T17:54:10Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""

  # We are showing lack of compatibility with rack >= 3. This should be fixed
  # as part of https://github.com/rails/rails/pull/46594.
  gem ""rack"", "">= 3""
end

class AddCookiesMiddleware
  def initialize(app)
    @app = app
  end

  def call(env)
    status, headers, body = @app.call(env)
    # When using rack >= 3, adding multiple cookies will
    # result in the `set-cookie` to be an Array.
    Rack::Utils.set_cookie_header!(headers, ""cookie1"", { value: ""cookie1"" })
    Rack::Utils.set_cookie_header!(headers, ""cookie2"", { value: ""cookie2"" })
    [status, headers, body]
  end
end

require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger = config.logger

  config.middleware.use(ActionDispatch::SSL)
  config.middleware.use(AddCookiesMiddleware)

  routes.draw do
    get ""/"" => ""test#index""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    render plain: ""Home""
  end
end

require ""minitest/autorun""
require ""rack/test""

# Load Array.split method
require ""active_support/core_ext/array""

class BugTest < ActionDispatch::IntegrationTest
  include Rack::Test::Methods

  def test_returns_success
    # Full url to avoid playing with redirects
    get ""https://example.org/""
    assert last_response.ok?
    assert_includes last_response.headers[""set-cookie""], ""cookie1=cookie1""
    assert_includes last_response.headers[""set-cookie""], ""cookie2=cookie2""
  end

  private

  def app
    Rails.application
  end
end

```

### Expected behavior

When using rack >= 3, the `ActionDispatch::SSL` is enabled, and another middleware adds *multiple cookies* to the cookie jar, the `SSL` middleware should flag those cookies as secure.

### Actual behavior

The `ActionDispatch:SSL` middleware fails with a `TypeError (no implicit conversion of Array into String)`.

### System configuration

**Rails version**: rails/rails main branch.

**Ruby version**: 3.2.0
"
47521,saved_changes from ActiveRecord::Dirty does not include some changes on nested attributes,Tao-Galasse,"activerecord, With reproduction steps",2023-02-27T19:50:37Z,2023-05-31T14:21:23Z,,"### Steps to reproduce

I have those two classes (same example than the `has_one` association documentation from the [Active Record Associations guide](https://guides.rubyonrails.org/association_basics.html)) : 
```ruby
class Supplier < ApplicationRecord
  has_one :account, inverse_of: :supplier
end

class Account < ApplicationRecord
  belongs_to :supplier, inverse_of: :account
  accepts_nested_attributes_for :supplier
end

```
and I am updating the supplier from the account like this : `account.update(supplier_attributes: { name: 'new supplier' })`

See this test in my dummy app => https://github.com/Tao-Galasse/rails-test-app/blob/main/test/models/account_test.rb

### Expected behavior
I expect `account.saved_changes` to return something like `{""supplier_id""=>[1, 2]}`

### Actual behavior
`account.saved_changes` returns an empty hash `{}`

### System configuration
**Rails version**:
Tested with Rails 6.1.7.2 & Rails 7.0.4.2

**Ruby version**:
3.2.0"
47498,`ActiveRecord::StrictLoadingViolationError` raised on `has_one :through` associations,MatheusRich,"activerecord, With reproduction steps",2023-02-24T17:40:08Z,2023-09-29T20:28:13Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.strict_loading_by_default = true

ActiveRecord::Schema.define do
  create_table :employees, force: true do |t|
    t.integer :team_id
  end

  create_table :teams, force: true do |t|
    t.integer :company_id
  end

  create_table :companies, force: true do |t|
    t.string :name
  end
end

class Employee < ActiveRecord::Base
  belongs_to :team
  has_one :company, through: :team

  def company_name
    company.name
  end
end

class Team < ActiveRecord::Base
  has_many :employees
  belongs_to :company
end

class Company < ActiveRecord::Base
  has_many :teams
end

class BugTest < Minitest::Test
  def test_has_one_lazy_loading_raises_error
    company_name = ""test""
    company = Company.create(name: company_name)
    team = Team.create(company: company)

    # This simulates what a controller would do
    employee_params = {
      team_id: team.id
    }
    employee = Employee.new(employee_params)
    employee.save

    assert_raises(ActiveRecord::StrictLoadingViolationError) do
      employee.company_name
    end
  end
end
```

### Expected behavior

While this is not a bug, I think the development experience could be improved when using `strict_loading_by_default = true`. The main use case for this feature is to avoid N + 1 queries, which is not the case in this example (it's just lazy loading).

We can set the strict loading mode to `:n_plus_one_only` on a per-record basis to avoid the exception

```ruby
  def test_has_one_lazy_loading_with_mode_n_plus_one_only_doesnt_raise_error
    company_name = ""test""
    company = Company.create(name: company_name)
    team = Team.create(company: company)

    # This simulates what a controller would do
    employee_params = {
      team_id: team.id
    }
    employee = Employee.new(employee_params)
    employee.save
    employee.strict_loading!(mode: :n_plus_one_only) # this could be done in the `company_name` method as well

    assert_equal company_name, employee.company_name
  end
```

but doing it for every record is a bit cumbersome. Is there a way to avoid this? I'm considering the following alternatives:

1. Allow setting the strict loading mode per-model
   ```rb
   ActiveRecord::Base.strict_loading_by_default = true
   ActiveRecord::Base.strict_loading_mode = :n_plus_one_only
   ```
1. Allow setting the strict loading mode globally
   ```rb
   config.active_record.strict_loading_by_default = true
   config.active_record.strict_loading_mode = :n_plus_one_only
   ```

I'm happy to hear y'alls thoughts on this. I'm also happy to provide a patch for this.

### Actual behavior

Loading a has_one association leads to a StrictLoading violation even for non-N+1 queries.

### System configuration

**Rails version**: 7.1.0.alpha
**Ruby version**: 3.2.0"
47469,Active Job Resque adapter test failures on Ruby 3.3,zzak,activejob,2023-02-23T00:03:23Z,2023-02-23T00:29:28Z,2023-02-23T00:29:28Z,"Active Job integration tests for Resque is current failing on Ruby trunk builds:
https://buildkite.com/rails/rails/builds/94058#018678a6-db53-44f8-af53-04853ed8814b

Steps to reproduce:

```
# Use Ruby 3.3
ruby -v
ruby 3.3.0dev (2023-02-20T01:50:49Z master b326a5f3dd) [arm64-darwin22]

AJ_ADAPTER=resque AJ_INTEGRATION_TESTS=1 bin/test test/integration/queuing_test.rb
```

Output:

```
#<Thread:0x00007f09ff100260 /rails/activejob/test/support/integration/adapters/resque.rb:27 run> terminated with exception (report_on_exception is true):
--
  | /usr/local/lib/ruby/3.3.0+0/logger.rb:385:in `level': undefined method `[]' for nil (NoMethodError)
  |  
  | @level_override[Fiber.current] \|\| @level
  | ^^^^^^^^^^^^^^^
  | from /usr/local/lib/ruby/3.3.0+0/logger.rb:654:in `add'
  | from /usr/local/lib/ruby/3.3.0+0/logger.rb:698:in `info'
  | from /usr/local/lib/ruby/gems/3.3.0+0/gems/resque-scheduler-4.8.0/lib/resque/scheduler.rb:396:in `log!'
  | from /usr/local/lib/ruby/gems/3.3.0+0/gems/resque-scheduler-4.8.0/lib/resque/scheduler.rb:408:in `procline'
  | from /usr/local/lib/ruby/gems/3.3.0+0/gems/resque-scheduler-4.8.0/lib/resque/scheduler.rb:40:in `run'
  | from /rails/activejob/test/support/integration/adapters/resque.rb:35:in `block in start_workers'
  | Run options: --seed 44201
  |  
  | # Running:
  |  
  | S..SS..F
  |  
  | Failure:
  | QueuingTest#test_should_run_job_bulk_enqueued_in_the_future_at_the_specified_time [/rails/activejob/test/integration/queuing_test.rb:85]:
  | Job AJ-ce17619a-38da-4e61-834c-f8018edf2b9a was not executed
  |  
  |  
  | bin/rails test /rails/activejob/test/integration/queuing_test.rb:80
  |  
  | S.SF
  |  
  | Failure:
  | QueuingTest#test_should_run_job_enqueued_in_the_future_at_the_specified_time [/rails/activejob/test/integration/queuing_test.rb:75]:
  | Job AJ-7cf1fa0b-d2ed-4f0c-98a5-1481a3726b9c was not executed
  |  
  |  
  | bin/rails test /rails/activejob/test/integration/queuing_test.rb:70
```"
47462,Avoid second query on in_batches.pluck,sobrinho,"activerecord, attached PR",2023-02-22T17:34:41Z,2023-09-21T23:56:15Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require 'bundler/inline'

gemfile do
  gem 'activerecord'
  gem 'sqlite3'
end

require 'active_record'
require 'sqlite3'

ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Base.establish_connection(
  adapter: 'sqlite3',
  database: ':memory:'
)

ActiveRecord::Base.connection.create_table :people, id: :uuid do |t|
  t.string :name
end

class Person < ActiveRecord::Base
end

data = 100_000.times.map { |i| { id: SecureRandom.uuid, name: ""Person #{i}"" } }
Person.insert_all(data)

Person.in_batches.each do |batch|
  batch.pluck(:id)
end
```

```
ruby script.rb | grep 'SELECT ""people""' | wc -l
[DEPRECATED] This Gemfile does not include an explicit global source. Not using an explicit global source may result in a different lockfile being generated depending on the gems you have installed locally before bundler is run. Instead, define a global source in your Gemfile like this: source ""https://rubygems.org"".
     201
````

### Expected behavior
I would expect to see 100 queries.

### Actual behavior
I see 200 queries, one to get the ids and a second one to get the ids from a list of ids.

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 2.7.6
"
47456,Lower case HTTP headers when rails serves files,stac47,actionpack,2023-02-22T09:27:10Z,2023-02-26T10:16:06Z,2023-02-26T10:03:56Z,"### Steps to reproduce

When using Rails Edge, some HTTP headers appears like `content-type` next to `Context-Type`.
To reproduce, from a new Rails application:
```bash
% rails assets:precompile
I, [2023-02-21T17:56:19.789769 #55874]  INFO -- : Writing /Users/stac/project/public/assets/application-e908707cbd3f4136efe68dfbbecf05e37659161b146c4ac3c9d41acd50cb4b90.css
I, [2023-02-21T17:56:19.789917 #55874]  INFO -- : Writing /Users/stac/project/public/assets/application-e908707cbd3f4136efe68dfbbecf05e37659161b146c4ac3c9d41acd50cb4b90.css.gz
[...]
% RAILS_SERVE_STATIC_FILES=1 RAILS_ENV=production rails s
Rack::Server is deprecated and replaced by Rackup::Server
Rack::Handler is deprecated and replaced by Rackup::Handler
=> Booting Puma
=> Rails 7.1.0.alpha application starting in production http://0.0.0.0:3000
=> Run `bin/rails server --help` for more startup options
/Users/lstacul/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-3.0.4.1/lib/rack/chunked.rb:6: warning: Rack::Chunked is deprecated and will be removed in Rack 3.1
Puma starting in single mode...
* Puma version: 5.6.5 (ruby 3.1.3-p185) (""Birdie's Version"")
*  Min threads: 5
*  Max threads: 5
*  Environment: production
*          PID: 56239
* Listening on http://0.0.0.0:3000
Use Ctrl-C to stop
```
Then we try to query the statics (for clarity I only query headers)
```bash
% curl -I http://localhost:3000/assets/application-e908707cbd3f4136efe68dfbbecf05e37659161b146c4ac3c9d41acd50cb4b90.css
HTTP/1.1 200 OK
last-modified: Tue, 21 Feb 2023 16:56:19 GMT
content-type: text/css
Content-Type: text/css
Vary: Accept-Encoding
Content-Length: 661272
```
If we accept compressed resources, we can evan have different `content-type` values:
```bash
% curl -I 'http://localhost:3000/assets/application-e908707cbd3f4136efe68dfbbecf05e37659161b146c4ac3c9d41acd50cb4b90.css' -H 'Accept: text/css,*/*;q=0.1' -H 'Accept-Encoding: gzip, deflate, br'
HTTP/1.1 200 OK
last-modified: Tue, 21 Feb 2023 16:56:19 GMT
content-type: application/x-gzip
Content-Type: text/css
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 45665
``` 

### Expected behavior
When I run the same against Rails 7.0.4.1 (stable), it does not show any lower case HTTP header.

```bash
% curl -I 'http://localhost:3000/assets/application-e908707cbd3f4136efe68dfbbecf05e37659161b146c4ac3c9d41acd50cb4b90.css' -H 'Accept: text/css,*/*;q=0.1' -H 'Accept-Encoding: gzip, deflate, br'
HTTP/1.1 200 OK
Last-Modified: Tue, 21 Feb 2023 16:56:19 GMT
Content-Type: text/css
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 45665
```

### Actual behavior

HTTP reply shows lower case header with potentially different value compared to the non-lower case counterparts. On some other cases, I can see `last-modified` header.

This can fool the browsers. For instance Chrome errors with the following message:
> Failed ro load module script: Expected a JavaScript module script but the server responded with a MIME type of ""application/x-gzip"". Strict MIME type checking is enforced for module scripts per HTML spec.

### System configuration
**Rails version**: Rails 7.1.0.alpha (commit: 1bf6dc00fb350ca48cece7b96a31e828e79a8c0a (yesterday))

**Ruby version**: ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [arm64-darwin22]
"
47451,ActiveSupport::LogSubscriber logger with a symbol for a level raises error (new 7.1.0alpha error),bmad,attached PR,2023-02-21T23:20:07Z,2023-02-24T04:17:36Z,2023-02-24T04:17:36Z,"This is a new error in Rails 7.1.0.alpha. https://github.com/rails/rails/pull/47427 fixes the issue but reporting here for documentation.

### Steps to reproduce
The spec `test_logger_level_with_symbol` in the PR should fail on the main branch. But here are manual steps.

1. Add `rspec-rails` and `semantic_logger` gems to `Gemfile`
2. Run `rails generate rspec:install`
3. Add `ActiveRecord::Base.logger = SemanticLogger[""ActiveRecord""]` to `config/initializers/logging.rb`
4. Create a test model with specs - `rails generate model Article title:string`
5. Run rspec

### Expected behavior
A `ActiveSupport::LogSubscriber` should allow its logger to be able to use a symbol like `:info` for it level.

### Actual behavior
When `ActiveSupport::LogSubscriber`'s logger has a symbol for its level, an `ArgumentError: comparison of Symbol with 0 failed` like error is raised when the subscriber is determining if a log for an event should be silenced.

### System configuration
**Rails version**: 7.1.0.alpha (main)

**Ruby version**: 3.0.4
"
47449,ActionView::Template::Error: undefined method after recent ActiveView changes,charlesobrien,"actionview, With reproduction steps",2023-02-21T21:34:37Z,2023-03-30T21:38:18Z,2023-03-30T21:38:18Z,"### Steps to reproduce
1. web-console included in gem file
2. Start application in dev environment and trigger something that generates the Rails error page (e.g., navigating to a route that doesn't exist)
3. Hit refresh on the error page

### Expected behavior
The error page should refresh successfully (and assuming no code was changed, show the same error that was given initially.)

### Actual behavior
Upon refresh the detailed error page does not show and instead shows the ""We're sorry something went wrong"" error page.

It appears that this issue begin on 16 February 2022, resulting from one of the commits related to the ActionView refactor. I've retested and the expected behavior works fine w/ commit https://github.com/rails/rails/commit/a44559679aa26a54ea9867a68a78c5a4a55a3b9f and no longer works in https://github.com/rails/rails/commit/72abd6357d7909c15a460c716840159e5bb97ac7 forward.

The log shows:

`1:23:38 web.1  |   
21:23:38 web.1  | 
21:23:38 web.1  | ActionView::Template::Error: undefined method `__usr_local_rvm_gems_default_gems_web_console_______lib_web_console_templates_index_html_erb__4222570476681288892_26260' for #<ActionView::Base:0x0000000000cfd0>
21:23:38 web.1  |       from /usr/local/rvm/gems/default/bundler/gems/rails-72abd6357d79/actionview/lib/action_view/base.rb:264:in `public_send'
21:23:38 web.1  |       from /usr/local/rvm/gems/default/bundler/gems/rails-72abd6357d79/actionview/lib/action_view/base.rb:264:in `_run'`

### System configuration
**Rails version**: 7.1.0alpha (main)

**Ruby version**: 3.2.0
"
47443,Main recently broke TagHelpers in Haml v5,kyrofa,"third party issue, actionview, stale",2023-02-20T19:59:07Z,2023-10-13T06:24:23Z,2023-06-01T19:45:27Z,"c5303039f452915b8c84822ddc90f6f4e1972430 has broken Haml v5's ability to use `TagHelpers`. Here's the test:

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""haml"", '5.2.2'
  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""rack/test""
require ""action_controller/railtie""
require ""haml""
require ""haml/template""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""www.example.com""
  config.session_store :cookie_store, key: ""cookie_store_key""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index""
  end
end

module TestHelper
  # c5303039f452915b8c84822ddc90f6f4e1972430 BROKE THIS
  def content
    content_tag(:span, class: 'foo') do
      concat image_tag('img.svg', class: 'bar')
    end
  end
end

class TestController < ActionController::Base
  def index
  end
end

require ""minitest/autorun""

class BugTest < ActionDispatch::IntegrationTest

  def test_returns_success
    Dir.mktmpdir do |d|
      Dir.mkdir(""#{d}/test"")
      File.open(""#{d}/test/index.html.haml"", 'w') do |f|
        f.write('= content')
      end

      TestController.prepend_view_path d
      get ""/""
    end

    assert_select '.foo' do
      assert_select 'img.bar', count: 1
    end
  end

  private
    def app
      Rails.application
    end
end
```

On Rails 7.0.4 (and on main prior to c5303039f452915b8c84822ddc90f6f4e1972430), that helper results in `<span class=""foo""><img class=""bar"" src=""/images/img.svg"" /></span>` as expected. After c5303039f452915b8c84822ddc90f6f4e1972430, you get `<img class=""bar"" src=""/images/img.svg"" /><span class=""foo"">&lt;img class=&quot;bar&quot; src=&quot;/images/img.svg&quot; /&gt;</span>`, which obviously isn't correct.

Note that the latest Haml v6 seems to handle this okay, so it must have moved to a different API, but I at least have a good number of applications still on v5. I'm sure lots of folks do. Any chance we can keep it working?"
47435,rails new --dev not working,zzak,"railties, attached PR",2023-02-20T05:45:19Z,2023-03-24T09:26:31Z,2023-03-24T09:26:30Z,"`rails new --dev` is not working as expected for me, it generates the correct gemfile then tries to overwrite it with a ""--edge"" style gemfile.

### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails
bundle install
bundle exec railties/exe/rails new --dev ~/code/railsdev
```

### Expected behavior

Generates a Rails app pointing at my rails checkout.

### Actual behavior

<details>
<summary>A conflict occurs with the Gemfile:</summary>

```diff
--- /Users/zzak/code/railsdev/Gemfile	2023-02-20 14:15:32.909345853 +0900
+++ /Users/zzak/code/railsdev/Gemfile20230220-42574-u0vnum	2023-02-20 14:15:35.898757043 +0900
@@ -1,4 +1,71 @@
 source ""https://rubygems.org""
 git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }
-# Use local checkout of Rails
-gem ""rails"", path: ""/Users/zzak/code/rails""
+
+ruby ""3.3.0.dev""
+
+# Bundle edge Rails instead: gem ""rails"", github: ""rails/rails"", branch: ""main""
+gem ""rails"", ""~> 7.1.0.alpha""
+
+# The original asset pipeline for Rails [https://github.com/rails/sprockets-rails]
+gem ""sprockets-rails""
+
+# Use sqlite3 as the database for Active Record
+gem ""sqlite3"", ""~> 1.4""
+
+# Use the Puma web server [https://github.com/puma/puma]
+gem ""puma"", "">= 5.0""
+
+# Use JavaScript with ESM import maps [https://github.com/rails/importmap-rails]
+gem ""importmap-rails""
+
+# Hotwire's SPA-like page accelerator [https://turbo.hotwired.dev]
+gem ""turbo-rails""
+
+# Hotwire's modest JavaScript framework [https://stimulus.hotwired.dev]
+gem ""stimulus-rails""
+
+# Build JSON APIs with ease [https://github.com/rails/jbuilder]
+gem ""jbuilder""
+
+# Use Redis adapter to run Action Cable in production
+# gem ""redis"", "">= 4.0.1""
+
+# Use Kredis to get higher-level data types in Redis [https://github.com/rails/kredis]
+# gem ""kredis""
+
+# Use Active Model has_secure_password [https://guides.rubyonrails.org/active_model_basics.html#securepassword]
+# gem ""bcrypt"", ""~> 3.1.7""
+
+# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
+gem ""tzinfo-data"", platforms: %i[ windows jruby ]
+
+# Reduces boot times through caching; required in config/boot.rb
+gem ""bootsnap"", require: false
+
+# Use Active Storage variants [https://guides.rubyonrails.org/active_storage_overview.html#transforming-images]
+# gem ""image_processing"", ""~> 1.2""
+
+group :development, :test do
+  # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem
+  gem ""debug"", platforms: %i[ mri windows ]
+end
+
+group :development do
+  # Use console on exceptions pages [https://github.com/rails/web-console]
+  gem ""web-console""
+
+  # Add speed badges [https://github.com/MiniProfiler/rack-mini-profiler]
+  # gem ""rack-mini-profiler""
+
+  # Speed up commands on slow machines / big apps [https://github.com/rails/spring]
+  # gem ""spring""
+
+  gem ""error_highlight"", "">= 0.4.0"", platforms: [:ruby]
+end
+
+group :test do
+  # Use system testing [https://guides.rubyonrails.org/testing.html#system-testing]
+  gem ""capybara""
+  gem ""selenium-webdriver""
+  gem ""webdrivers""
+end
```
</details>

<details>
<summary>If I hit ""no"", I get an error about missing bootsnap, and probably other gems</summary>

```
Use `bundle info [gemname]` to see where a bundled gem is installed.
         run  bundle binstubs bundler
       rails  importmap:install
/Users/zzak/code/railsdev/config/boot.rb:4:in `require': cannot load such file -- bootsnap/setup (LoadError)
	from /Users/zzak/code/railsdev/config/boot.rb:4:in `<top (required)>'
	from bin/rails:3:in `require_relative'
	from bin/rails:3:in `<main>'
       rails  turbo:install stimulus:install
/Users/zzak/code/railsdev/config/boot.rb:4:in `require': cannot load such file -- bootsnap/setup (LoadError)
	from /Users/zzak/code/railsdev/config/boot.rb:4:in `<top (required)>'
	from bin/rails:3:in `require_relative'
	from bin/rails:3:in `<main>'
```
</details>

<details>
<summary>If I hit ""yes"", I get an error that bundler cannot find rails version `~> 7.1.0.alpha`</summary>

```
Could not find gem 'rails (~> 7.1.0.alpha)' in rubygems repository https://rubygems.org/ or installed locally.

The source contains the following gems matching 'rails':
```

</details>

<details>
<summary>This also looks similar to the output I'm seeing in the railties test</summary>

```
bin/test test/generators/app_generator_test.rb

/Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/resolver.rb:293:in `raise_not_found!': Could not find gem 'rails (~> 7.1.0.alpha)' in locally installed gems. (Bundler::GemNotFound)
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/resolver.rb:346:in `block in prepare_dependencies'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/resolver.rb:331:in `each'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/resolver.rb:331:in `map'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/resolver.rb:331:in `prepare_dependencies'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/resolver.rb:51:in `setup_solver'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/resolver.rb:28:in `start'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:554:in `start_resolution'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:289:in `resolve'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:507:in `materialize'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:197:in `specs'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:254:in `specs_for'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/runtime.rb:18:in `setup'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler.rb:170:in `setup'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/setup.rb:20:in `block in <top (required)>'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/ui/shell.rb:159:in `with_level'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/ui/shell.rb:111:in `silence'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/setup.rb:20:in `<top (required)>'
	from <internal:/Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/rubygems/core_ext/kernel_require.rb>:88:in `require'
	from <internal:/Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/rubygems/core_ext/kernel_require.rb>:88:in `require'

# ...

/Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/git/git_proxy.rb:315:in `allowed_with_path': The git source https://github.com/rails/rails.git is not yet checked out. Please run `bundle install` before trying to start your application (Bundler::GitError)
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/git/git_proxy.rb:65:in `revision'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/git.rb:228:in `revision'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/git.rb:103:in `install_path'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/path.rb:133:in `expanded_path'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/path.rb:174:in `load_spec_files'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/git.rb:205:in `load_spec_files'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/path.rb:107:in `local_specs'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source/git.rb:172:in `specs'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source.rb:58:in `spec_names'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source_map.rb:21:in `block in all_requirements'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source_map.rb:20:in `map'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/source_map.rb:20:in `all_requirements'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:845:in `source_requirements'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:497:in `resolution_packages'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:486:in `resolver'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:554:in `start_resolution'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:289:in `resolve'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:507:in `materialize'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:197:in `specs'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/definition.rb:254:in `specs_for'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/runtime.rb:18:in `setup'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler.rb:170:in `setup'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/setup.rb:20:in `block in <top (required)>'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/ui/shell.rb:159:in `with_level'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/ui/shell.rb:111:in `silence'
	from /Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/bundler/setup.rb:20:in `<top (required)>'
	from <internal:/Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/rubygems/core_ext/kernel_require.rb>:88:in `require'
	from <internal:/Users/zzak/.rubies/ruby-3.3.0/lib/ruby/3.3.0+0/rubygems/core_ext/kernel_require.rb>:88:in `require'
```

</details>

<details>
<summary>I've also written a failing test, because if you check `railties/test/fixtures/tmp` while running this test you will see the Gemfile described above, and no lockfile, supposedly because ""bundle install"" failed silently</summary>

```diff
diff --git a/railties/test/generators/app_generator_test.rb b/railties/test/generators/app_generator_test.rb
index a116c0f867..f6e947fbf8 100644
--- a/railties/test/generators/app_generator_test.rb
+++ b/railties/test/generators/app_generator_test.rb
@@ -691,6 +691,7 @@ def test_generation_runs_bundle_install
     run_generator_instance

     assert_equal 1, @bundle_commands.count(""install"")
+    assert_file ""Gemfile.lock""
   end

   def test_generation_use_original_bundle_environment
```

</details>


### System configuration
**Rails version**: `main`

**Ruby version**: `ruby 3.3.0dev (2023-02-20T01:50:49Z master b326a5f3dd) [arm64-darwin22]`
"
47433,rake guides:generate:html fails since 72abd6357d7909c15a460c716840159e5bb97ac7,yahonda,actionview,2023-02-20T00:33:18Z,2023-02-21T07:01:45Z,2023-02-21T07:01:45Z,"`rake guides:generate:html` fails since 72abd6357d7909c15a460c716840159e5bb97ac7 https://github.com/rails/rails/pull/47347


Reported at Rails Discord https://discord.com/channels/849034466856665118/974005005768069211/1076871087075381339 by @vipulnsward 



### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails/guides
bundle install
rm -rf output ; bundle exec rake guides:generate:html
```

### Expected behavior
It should generate Rails Guide in HTML.

### Actual behavior
```ruby
$ rm -rf output ; bundle exec rake guides:generate:html
/home/yahonda/.rbenv/versions/3.2.1/bin/ruby -Eutf-8:utf-8 rails_guides.rb
Generating action_text_overview.md as action_text_overview.html
/home/yahonda/src/github.com/rails/rails/guides/rails_guides/markdown.rb:65: warning: undefining the allocator of T_DATA class Redcarpet::Markdown
Generating association_basics.md as association_basics.html
/home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/base.rb:264:in `public_send': undefined method `__home_yahonda_src_github_com_rails_rails_guides_source_layout_html_erb___2200547860019096587_6160' for #<ActionView::Base:0x00000000003098> (ActionView::Template::Error)
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/base.rb:264:in `_run'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/template.rb:195:in `block in render'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications.rb:208:in `instrument'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/template.rb:484:in `instrument_render_template'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/template.rb:189:in `render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:77:in `block in render_with_layout'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications.rb:206:in `block in instrument'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications.rb:206:in `instrument'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:75:in `render_with_layout'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:59:in `render_template'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:11:in `render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/renderer.rb:61:in `render_template_to_object'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/renderer.rb:29:in `render_to_object'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/renderer.rb:22:in `render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/helpers/rendering_helper.rb:37:in `block in render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/base.rb:291:in `in_rendering_context'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/helpers/rendering_helper.rb:33:in `render'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/markdown.rb:181:in `render_page'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/markdown.rb:31:in `render'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:160:in `generate_guide'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:85:in `block in generate_guides'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:83:in `each'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:83:in `generate_guides'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:40:in `generate'
	from rails_guides.rb:30:in `<main>'
/home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/base.rb:264:in `public_send': undefined method `__home_yahonda_src_github_com_rails_rails_guides_source_layout_html_erb___2200547860019096587_6160' for #<ActionView::Base:0x00000000003098> (NoMethodError)

        public_send(method, locals, buffer, &block)
        ^^^^^^^^^^^
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/base.rb:264:in `_run'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/template.rb:195:in `block in render'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications.rb:208:in `instrument'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/template.rb:484:in `instrument_render_template'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/template.rb:189:in `render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:77:in `block in render_with_layout'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications.rb:206:in `block in instrument'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications.rb:206:in `instrument'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:75:in `render_with_layout'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:59:in `render_template'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/template_renderer.rb:11:in `render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/renderer.rb:61:in `render_template_to_object'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/renderer.rb:29:in `render_to_object'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/renderer/renderer.rb:22:in `render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/helpers/rendering_helper.rb:37:in `block in render'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/base.rb:291:in `in_rendering_context'
	from /home/yahonda/src/github.com/rails/rails/actionview/lib/action_view/helpers/rendering_helper.rb:33:in `render'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/markdown.rb:181:in `render_page'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/markdown.rb:31:in `render'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:160:in `generate_guide'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:85:in `block in generate_guides'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:83:in `each'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:83:in `generate_guides'
	from /home/yahonda/src/github.com/rails/rails/guides/rails_guides/generator.rb:40:in `generate'
	from rails_guides.rb:30:in `<main>'
rake aborted!
Command failed with status (1): [/home/yahonda/.rbenv/versions/3.2.1/bin/ru...]
/home/yahonda/src/github.com/rails/rails/guides/Rakefile:10:in `block (3 levels) in <top (required)>'
/home/yahonda/.rbenv/versions/3.2.1/bin/bundle:25:in `load'
/home/yahonda/.rbenv/versions/3.2.1/bin/bundle:25:in `<main>'
Tasks: TOP => guides:generate:html
(See full trace by running task with --trace)
$
```
### System configuration
**Rails version**: main branch including 72abd6357d7909c15a460c716840159e5bb97ac7

**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [x86_64-linux]
"
47426,accepts_nested_attributes_for does not set ActiveRecord_Associations_CollectionProxy instance cache for unpersisted records until it is called using to_a,sampatbadhe,"activerecord, With reproduction steps",2023-02-17T17:26:02Z,2023-05-19T08:43:07Z,,"### Steps to reproduce

While exploring `ActiveRecord.build` with `has_many` association came across following scenario.

accepts_nested_attributes_for does not set ActiveRecord_Associations_CollectionProxy instance cache for unpersisted records until it is called using to_a, is this expected?

```
ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.string :title
    t.text :body
    t.integer :user_id
  end

  create_table :users, force: true do |t|
    t.string :name
    t.string :email
  end
end

class Post < ApplicationRecord
  belongs_to :user, inverse_of: :posts
end

class User < ApplicationRecord
  has_many :posts, inverse_of: :user

  accepts_nested_attributes_for :posts
end
```

```
Loading development environment (Rails 7.1.0.alpha)
3.0.0 :001 > user = User.build(name: 'Jamie', posts_attributes: [{ title: ""Intro Post 1"" }, { title: ""Intro Post 2"" }] )
 => #<User:0x00007f929fc37cb8 id: nil, name: ""Jamie"", email: nil, created_at: nil, updated_at: nil> 
3.0.0 :002 > user.posts.class
 => Post::ActiveRecord_Associations_CollectionProxy 
3.0.0 :003 > user.posts
 => [] 
3.0.0 :004 > user.posts.to_a
 => 
[#<Post:0x00007f92a85fe708 id: nil, body: nil, title: ""Intro Post 1"", user_id: nil, created_at: nil, updated_at: nil>,
 #<Post:0x00007f92a48cd1e0 id: nil, body: nil, title: ""Intro Post 2"", user_id: nil, created_at: nil, updated_at: nil>] 
3.0.0 :005 > user.posts
 => 
[#<Post:0x00007f92a85fe708 id: nil, body: nil, title: ""Intro Post 1"", user_id: nil, created_at: nil, updated_at: nil>,
 #<Post:0x00007f92a48cd1e0 id: nil, body: nil, title: ""Intro Post 2"", user_id: nil, created_at: nil, updated_at: nil>] 
3.0.0 :006 > user.posts.class
 => Post::ActiveRecord_Associations_CollectionProxy 
3.0.0 :007 > user.posts.to_a.class
 => Array 
```

### System configuration
**Rails version**: 7.1.0.alpha

**Ruby version**: 3.0.0p0
"
47421,Default translation loses html_safe? marking,sled,third party issue,2023-02-17T11:00:38Z,2023-04-26T10:46:28Z,2023-04-26T10:46:22Z,"### Steps to reproduce

In a view, try to translate a missing translation with:

- at least one interpolation value destined for the missing translation
- a default value that is marked `#html_safe?`

Here's a test example, comparing the second and third test case shows the issue:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activesupport"", ""~> 7.0.0""
  gem ""actionview"", ""~> 7.0.0""
  gem ""actionpack"", ""~> 7.0.0""
end

require ""active_support""
require 'action_view'
require ""minitest/autorun""

class BugTest < ActionView::TestCase
  include ActionView::Helpers::TranslationHelper

  setup do
    I18n.backend.store_translations(:en,
        translations: {
          link_html: '<a href=""%{href}"">Download</a>'
        }
    )
  end

  teardown do
    I18n.backend.reload!
  end

  def test_html_safe_if_exists # this passes
    default = '<a href=""https://default.org"">Default</a>'.html_safe

    translated = translate(:""translations.link_html"", href: 'https://example.org', default: default)
    assert_equal translated, '<a href=""https://example.org"">Download</a>'
    assert translated.html_safe?
  end

  def test_html_safe_with_default_and_no_extra_arguments # this passes
    default = '<a href=""https://default.org"">Default</a>'.html_safe

    translated = translate(:""translation.does.not.exist_html"", default: default)
    assert_equal translated, default
    assert translated.html_safe?
  end

  def test_html_safe_with_default_and_extra_arguments # this fails
    default = '<a href=""https://default.org"">Default</a>'.html_safe

    translated = translate(:""translation.does.not.exist_html"", href: 'https://example.org', default: default)
    assert_equal translated, default
    assert translated.html_safe?
  end
end
```


### Expected behavior
I'd expect the output to be `#html_safe?`

### Actual behavior
The output is not `#html_safe?`

### System configuration
**Rails version**: >= 6.1.7.1

**Ruby version**: 2.7.7
"
47418,Use of ActiveSupport::ForkTrace::check! in ActiveRecord::ConnectionAdapters::PoolConfig#pool causes the `getpid` syscall to be called excessively in production,dalehamel,"activerecord, attached PR",2023-02-16T14:43:50Z,2023-02-20T08:26:48Z,2023-02-20T08:26:48Z,"### Steps to reproduce

This occurs at scale with a large number of database shards. It is probably more severe in proportion with the number of database shards.

### Expected behavior

We should expect that connection pooling logic has minimal syscall overhead.

### Actual behavior

Connection pooling logic uses the `getpid` syscall repeatedly. In fact, in a production process, it is the highest syscall:

```
root@PRODUCTION_SERVER:/# syscount -p !$
syscount -p UNICORN_WORKER_PID
Tracing syscalls, printing top 10... Ctrl+C to quit.
^C[06:49:56]
SYSCALL                   COUNT
getpid                    38455
futex                     18081
clock_nanosleep            7575
clock_gettime              2133
sendto                     1447
read                       1293
semtimedop                 1097
recvfrom                    810
poll                        472
ppoll                       457
```

This isn't one of the only things calling it, but it is a top culprit.

In flamegraphs, see that Process.pid is one of the top frames. Here is an example showing it accounting for nearly 5 minutes of a 2 hours worth of aggregated stack traces:

![image](https://user-images.githubusercontent.com/618615/219393464-240feea7-43b3-4df9-90e1-0f66d20bb3ee.png)


Here is [that code location](https://github.com/rails/rails/blob/main/activerecord/lib/active_record/connection_adapters/pool_config.rb#L53-L57). 

https://github.com/rails/rails/blob/main/activesupport/lib/active_support/fork_tracker.rb#L41 seems to be the logic in question, notably we see this mention in the [patch that added this](https://github.com/rails/rails/pull/37312
) that added this:

> However just in case the fork was done inside a c-extension, there's a check! method which is recommended to be called before using database connections. And that any forking code bypassing ruby's fork method should invoke.

So i guess it is expected we need to ensure the pid is checked before a database connection in case fork happened in a native extension.

I wrote up a quick LD_PRELOAD patch that can be used I think to solve that issue, as it wraps `fork` and `getpid` so that the glibc usage gets wrapped and cached as well, but I suppose this won't be a good general solution.

Note that `getpid` used to be cached in glibc, but in newer versions the manpage adds this warning that the caching was removed:

>        Because of the aforementioned problems, since glibc version 2.25,
>       the PID cache is removed: calls to getpid() always invoke the
>      actual system call, rather than returning a cached value.


### System configuration

Linux with Glibc newer than 2.25

**Rails version**: 

08f0b74da4fc7eaa7b06fac0bf181e8922f51b0a, looks like 7.1.0 alpha

**Ruby version**:

3.2 (I think)
"
47413,IRB Corruption rails console - (Object doesn't support #inspect) ,JohnDBR,more-information-needed,2023-02-16T12:25:10Z,2023-03-03T16:30:40Z,2023-03-03T06:15:01Z,"I was about to start a project, so I decided to upgrade my developing environment, by updating my Ruby and Rails versions a little bit and I was coding smoothly while looking up the new rails features. Then, suddenly I entered the `rails console` and tried to do a simple query `Order.all.left_joins(:remainders).group(:id).order('COUNT(remainders.id) DESC')` but it threw me **(Object doesn't support #inspect)**. Searching around I ended up [here](https://stackoverflow.com/questions/71529685/object-doesnt-support-inspect) and it worked... that's hysteric it should get more visibility!

I ended up using my debugging gem to stop an endpoint request in order to have a working console.

### Expected behavior
Running queries in the `rails console` should return data.
`Order.all.left_joins(:remainders).group(:id).order('COUNT(remainders.id) DESC')`

### Actual behavior
Running queries in the rails console throws (Object doesn't support #inspect).

### System configuration
**Ruby Version Manager version**:  rbenv 1.1.2-61-g585ed84
**System version**: Ubuntu 21.04 x86-64
**Rails version**:  rails (7.0.3.1)
**Ruby version**: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
"
47400,SQLite3Adapter: `autoincrement` declaration lost on execution of `#alter_table`,gulaschsippl,"activerecord, attached PR",2023-02-15T14:31:39Z,2023-02-27T16:11:09Z,2023-02-27T16:11:09Z,"### Steps to reproduce

- create a table with a `autoincrement` primary key (Rails default behavior for `id` columns)
- run a migration that uses one of the `#change_column` methods (which use `#alter_table` internally)
- `autoincrement` declaration on table is lost (happens during re-creation of table in `#alter_table` method)

This has been reported in #37722 already, and @peterkovacs points towards a solution there.

---

The script below allows to reproduce the problem.

3 out of the 4 `assert is_autoincrement_id?(""payments"")` assertions fail right now.
The one not failing is always the first one that is executed, which depends on the execution order of the tests.
The reason that the first assertion does not fail is that no `#change_column` call has been executed at that point.


```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :payments, force: true do |t|
    t.decimal :amount, precision: 10, scale: 0, default: 0, null: false
  end
end

class Payment < ActiveRecord::Base
end

class ChangeAmountToAddScale < ActiveRecord::Migration[7.1]
  def change
    reversible do |dir|
      dir.up do
        change_column :payments, :amount, :decimal, precision: 10, scale: 2, default: 0, null: false
      end

      dir.down do
        change_column :payments, :amount, :decimal, precision: 10, scale: 0, default: 0, null: false
      end
    end
  end
end

class BugTest < Minitest::Test
  def test_migration_up
    assert is_autoincrement_id?(""payments"")

    ChangeAmountToAddScale.migrate(:up)
    Payment.reset_column_information

    assert is_autoincrement_id?(""payments"")
  end

  def test_migration_down
    assert is_autoincrement_id?(""payments"")

    ChangeAmountToAddScale.migrate(:down)
    Payment.reset_column_information

    assert is_autoincrement_id?(""payments"")
  end

  private

  def is_autoincrement_id?(tbl_name)
    sql = ""SELECT count(*) FROM sqlite_master WHERE tbl_name='#{tbl_name}' AND "" \
          ""sql LIKE '%\""id\"" integer PRIMARY KEY AUTOINCREMENT%'""

    ActiveRecord::Base.connection.select_value(sql) > 0
  end
end
```

### Expected behavior

`AUTOINCREMENT` declaration on primary key should **not be lost** when re-creating a table (via `#alter_table` method).

### Actual behavior

`AUTOINCREMENT` declaration on primary key **is lost** when re-creating a table (via `#alter_table` method).

### System configuration
**Rails version**:
`7.1.0.alpha`

**Ruby version**:
`3.2.1`
"
47387,Support processing active storage variants eagerly,shouichi,activestorage,2023-02-14T10:20:19Z,2023-02-23T09:44:19Z,2023-02-14T21:17:15Z,"ActiveStorage variants are processed on the fly when they are needed but sometimes we're sure that they are accessed and want to process them upfront.

We could add an option for eager processing variants.

```
has_one_attached :avatar do |attachable|
	attachable.variant :thumb, resize_to_limit: [100, 100], eager_process: true
end
```

Thank you."
47382,"ActiveStorage ""index_active_storage_blobs_on_key"" should be ""index_active_storage_blobs_on_key_and_service_name""",weilandia,"stale, activestorage",2023-02-13T22:20:27Z,2023-08-25T23:56:42Z,2023-08-25T23:56:42Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
Create two blobs with the same `key` but with a different `service_name`.  The ""index_active_storage_blobs_on_key"" does not take `service_name` into account when it seems like it should.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""
  gem ""rails""
  gem ""sqlite3""
end

require ""active_record/railtie""
require ""active_storage/engine""
require ""tmpdir""

class TestApp < Rails::Application
  config.active_storage.service = :local_a
  config.active_storage.service_configurations = {
    local_a: {
      root: Dir.tmpdir,
      service: ""Disk""
    },
    local_b: {
      root: Dir.tmpdir,
      service: ""Disk""
    },
  }
end

db_dir = Dir.mktmpdir(""test"", Dir.tmpdir)
ENV[""DATABASE_URL""] = ""sqlite3:#{db_dir}/db.sqlite3""

Rails.application.initialize!

require ActiveStorage::Engine.root.join(""db/migrate/20170806125915_create_active_storage_tables.rb"").to_s

ActiveRecord::Schema.define do
  CreateActiveStorageTables.new.change

  create_table :users, force: true
end

class User < ActiveRecord::Base
  has_one_attached :profile_a, service: :local_a
  has_one_attached :profile_b, service: :local_b
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rails.application.routes.url_helpers
  include Rack::Test::Methods

  def test_upload_and_fetch
    user = User.create!
    user.profile_a.attach(
      key: ""test"",
      io: StringIO.new(""test""),
      filename: ""test.txt""
    )

    assert_raises(ActiveRecord::RecordNotUnique) do
      user.profile_b.attach(
        key: ""test"",
        io: StringIO.new(""test""),
        filename: ""test.txt""
      )
    end
  end
end
```

### Expected behavior
When blobs are created with the same key in different services, I don't think there should be a RecordNotUnique error. 

### Actual behavior
The unique constraint on `key` for `active_storage_blobs` does not take `service_name` into account when it seem like it should. 

"
47377,Using `ActionCable::Channel::TestCase` causes NameError: `TestServer` is missing,yykamei,"attached PR, actioncable",2023-02-13T14:46:04Z,2023-03-03T22:47:57Z,2023-03-03T22:47:57Z,"I came across an error `NameError: uninitialized constant ActionCable::Channel::ConnectionStub::TestServer` when I run tests with action_cable.

#47300 added `@server` in `ActionCable::Channel::ConnectionStub` as an instance of `TestServer`, and `TestServer` seems to be located in `actioncable/test`. Perhaps, Rails testing scripts usually load test helpers, so the problem hasn't occurred. However, such an implicit loading might cause unstable test behavior, so I think `TestServer` should be loaded when requiring `ActionCable::Channel::TestCase`. But I'm not sure how to do that. `TestServer` should be written inside `actioncable/lib`? That's why I opened an issue here.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source 'https://rubygems.org'

  gem ""rails"", github: ""rails/rails"", ref: ""d6eec533c186c92448e7413e9af9c2a2009aca99""
end

require ""action_cable""
require ""minitest/autorun""
require ""logger""

ActionCable.server.config.cable ||= {}
ActionCable.server.config.cable[""adapter""] = ""async""
ActionCable.server.config.logger = Logger.new(STDOUT)

module ApplicationCable
  class Connection < ActionCable::Connection::Base
  end
end

module ApplicationCable
  class Channel < ActionCable::Channel::Base
    def hello(data)
      ActionCable.server.broadcast(""nice_#{params[:number]}"", data)
    end

    private

    def subscribed
      stream_from ""nice_#{params[:number]}""
      reject if Integer(params[:number], exception: false).negative?
    end
  end
end

class Test < ActionCable::Channel::TestCase
  tests ApplicationCable::Channel

  def test_hello
    subscribe number: ""2""
    perform :hello, { name: ""MM"" }
  end
end
```

### Expected behavior

I expect the test to pass in the above example without any exceptions.

### Actual behavior

```
Error:
Test#test_hello:
NameError: uninitialized constant ActionCable::Channel::ConnectionStub::TestServer
    /Users/yutaka.kamei/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/bundler/gems/rails-d6eec533c186/actioncable/lib/action_cable/channel/test_case.rb:60:in `initialize'
    /Users/yutaka.kamei/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/bundler/gems/rails-d6eec533c186/actioncable/lib/action_cable/channel/test_case.rb:236:in `new'
    /Users/yutaka.kamei/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/bundler/gems/rails-d6eec533c186/actioncable/lib/action_cable/channel/test_case.rb:236:in `stub_connection'
    /Users/yutaka.kamei/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/bundler/gems/rails-d6eec533c186/actioncable/lib/action_cable/channel/test_case.rb:241:in `subscribe'
    a.rb:43:in `test_hello'
```

### System configuration
**Rails version**:
7.1.0.alpha (d6eec533c186c92448e7413e9af9c2a2009aca99)

**Ruby version**:
3.2.0"
47369,Link to SQL Reference guide,zzak,"docs, good first issue",2023-02-12T00:28:37Z,2023-02-14T07:12:30Z,2023-02-14T07:12:30Z,"In the [Active Record Basics](https://guides.rubyonrails.org/active_record_basics.html#object-relational-mapping) guide there is a note pointing readers where to learn more about SQL (and RDBMS) the latter part is missing entirely, and the SQL links to W3schools:

https://github.com/rails/rails/blob/b6ecefddac2fc13382ad25d8d84052a547d04bcf/guides/source/active_record_basics.md?plain=1#L46-L49

Would prefer to link to a standard resource that does not contain ads, tracking software, or other subscription related incentives.

Patches welcome that can fix this!"
47367,Database.yml doesn't allow sharing multiple/3-tier database options,jasonkarns,activerecord,2023-02-11T22:46:11Z,2023-02-22T15:24:15Z,2023-02-22T15:24:15Z,"### Steps to reproduce
1. rails new
2. convert config/database.yml to 3-tier config
3. convert special `shared` key to 3-tier config

Demo app here: https://github.com/jasonkarns/rails-shared-3-tier/blob/main/config/database.yml

### Expected behavior

Given a multiple-database rails app with 3-tier config, I would expect the `shared` stanza to support configuration options for each of the multiple databases, rather then applying the same shared config to _all_ databases.

I believe my expected behavior matches the expected behavior from the initial bug: https://github.com/rails/rails/issues/45299 as the sample config in that demo app also uses 3-tier config under the `shared` key: https://github.com/jandudulski/shared_migrations_bug/blob/bd607f308241fceeeb75d3f01f3b2f2ebe3cf901/config/database.yml

### Actual behavior

If the `shared` key is moved to a 3-tier config, then rails fails to load due to missing db adpater option.

```
/opt/rbenv/versions/3.1.2/lib/ruby/gems/3.1.0/gems/activerecord-7.0.4.2/lib/active_record/connection_adapters/abstract/connection_handler.rb:261:in `resolve_pool_config': database configuration does not specify adapter (ActiveRecord::AdapterNotSpecified)
```

### System configuration
**Rails version**: Rails 7.0.4.2
**Ruby version**: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin22]

### Rationale

**shared config merged to each db** (currently supported behavior)
```yml
# this works
shared:
  adapter: sqlite

development:
  primary:
    database: db/development.sqlite3
  replica:
    database: db/development-replica.sqlite3
```

This is the current behavior and means that the `shared` properties are merged into _each_ database across all environments. This means that the only options that may be extracted to 'shared' must be the same for primaries and replicas (or however many databases the app is connecting to).

**shared config merged to each environment**  (expected behavior)
```yml
# this does not work
shared:
  primary:
    adapter: sqlite
  replica:
    adapter: mysql

development:
  primary:
    database: db/development.sqlite3
  replica:
    database: replica_development
```

In this configuration, the `shared` is merged only to the top-level environment properties (but ""deeply""). I would posit that this merging behavior is more useful. I have only used the multiple-databases feature of Rails in 2 different apps but my experience was the same with both apps: the multiple databases had very few options that were shared across databases. The names were different, the pooling was different, the login credentials were different (to wit, in the most common ""read replica"" scenario, the credentials would not be shared), even the adapters were different in one of the apps.

In contrast, the configuration options for a given database _across environments_ was identical: same adapter, same pool config, same migrations path, same use_metadata_table setting, same encoding. With so much of the configuration identical, it seemed a perfect case for `shared`. However, we were unable to use it because these options were different _per database_ (even though for a given database, they were the same across environments).

I realize the documentation doesn't actually state how the `shared` key is intended to operate with a 3-tier config. So it's possible this technically qualifies as a feature request instead of a bug. However, given that I presume the purpose of `shared` is to be able to avoid needing yaml anchor syntax, I propose that supporting 3-tier config with `shared` furthers that goal.

pinging @jandudulski as reporter of related [issue](https://github.com/rails/rails/issues/45299) "
47361,`ActiveSupport::SafeBuffer` substring html-safety,flavorjones,"activesupport, pinned",2023-02-10T21:39:26Z,2023-07-24T22:57:29Z,2023-07-24T22:57:29Z,"I'm opening this issue to start a conversation about whether the current html-safety behavior of `ActiveSupport::SafeBuffer` should be considered incorrect or insecure and should be changed.


## Context

The current (edge) behavior of the `ActiveSupport::SafeBuffer#html_safe?` attribute is to _preserve_ that attribute's value when the string is sliced with many methods:

``` ruby
string = ""<div>test</div>"".html_safe

string[0..1].html_safe? # => true
string.slice(0, 1).html_safe? # => true
string.slice!(0, 1).html_safe? # => true
string.chr.html_safe? # => true
```

This behavior was originally introduced for `#[]` with 2 arguments in 8ccaa341 (Rails 3.2.2), later extended in https://github.com/rails/rails/pull/33808 (Rails 6.0) to any number of arguments, and was later extended again to include `#slice`, `#slice!`, and `#chr` in https://github.com/rails/rails/pull/47344 (Rails 7.1.0.alpha).

_Note: edited the above section on 2023-02-11 to reflect the first commit to support preserving html-safe in a slice-like method was 8ccaa341_

## Problem

[About a year ago](https://github.com/rails/rails/pull/33808#issuecomment-1044647597) I thought the current behavior was fine; but I've learned some painful lessons about sanitization since then and have changed my mind.

Substrings of an HTML-safe string are not themselves safe. Prior decisions supporting this statement:

- 1300c034 (2011) which originally introduced the ""unsafe"" list to ensure `#gsub`, `#chop`, `#chomp`, `#delete`, etc. (and their bang methods) do not return safe buffers
- https://github.com/rails/rails/pull/33990 which applied this ""unsafe"" policy to new Ruby methods `#delete_prefix` and `#delete_suffix`.

Hopefully it's obvious that slice methods like `#[]` and `#slice` can be used to implement the existing unsafe methods, and are therefore equivalent, which means _at best_ SafeBuffer is still inconsistent:

``` ruby
original = ""abcdefghi"".html_safe

original.delete_prefix(""abc"").tap do |subject|
  subject # => ""defghi""
  subject.html_safe? # => false
end

original.slice(3..).tap do |subject|
  subject # => ""defghi""
  subject.html_safe? # => true
end
```

Here's a contrived example showing that it's possible to construct unsafe strings that are marked ""html safe"" using nothing but a source ""html safe"" string:

``` ruby
safe = ""<span>title (critic 1)</span>"".html_safe

# methods like append do the right thing with unsafe strings, HTML-escapes them
subject = safe + ""<"" # => ""<span>title (critic 1)</span>&lt;""
subject.html_safe? # => true

subject = safe + ""<script>alert(1)</script>"" # => ""<span>title (critic 1)</span>&lt;script&gt;alert(1)&lt;/script&gt;""
subject.html_safe? # => true

# but slicing gets around this because it returns strings marked ""safe""
subject = safe + safe[0] # => ""<span>title (critic 1)</span><""
subject.html_safe? # => true

# in the absurd extreme
subject = safe +
          safe[0] + safe[1] + safe[13] + safe[14] + safe[15] + safe[2] + safe[6] + safe[5] +
          safe[3] + safe[9] + safe[10] + safe[14] + safe[6] + safe[12] + safe[20] + safe[21] +
          safe[0] + safe[23] + safe[1] + safe[13] + safe[14] + safe[15] + safe[2] + safe[6] + safe[5]
subject # => ""<span>title (critic 1)</span><script>alert(1)</script>""
```

Here's a much more realistic example that uses the Rails sanitizer and takes advantage of comments being unescaped by HTML parsers:

``` ruby
class ViewSanitizer
  include ActionView::Helpers::SanitizeHelper
end

tags = [""comment"", ""div""] # a departure from the default, we'll let comments through
original = ViewSanitizer.new.sanitize(""<div><!-- <script>alert(1)</script> --></div>"", tags: tags)

original # => ""<div><!-- <script>alert(1)</script> --></div>""
original.html_safe? # => true

subject = original[10..34] # => ""<script>alert(1)</script>""
subject.html_safe? # => true
```

I would like to note that I commented in https://github.com/rails/rails/pull/33808#issuecomment-1044647597:

> If you are able to generate a string that, once it's been sanitized and marked safe, would have a
> malicious substring in it, please open an issue so we can discuss?

The previous example _is_ that case, and @SampsonCrowley was right that it's probably dangerous to allow this behavior to remain. Also, @ggmichaelgo was right in https://github.com/rails/rails/pull/46259 when he tried to revert #33808.


## Short-term suggestion

I think we need to revert the changes from https://github.com/rails/rails/pull/47344 and https://github.com/rails/rails/pull/33808.

I'll prepare a PR for folks to review.


## Longer-term suggestion

I think there is a problem with the design used in `SafeBuffer`, which is an [""unsafe list""](https://github.com/rails/rails/blob/c88ca3b72083449fd242ed5aaf1b557f88a9e7b2/activesupport/lib/active_support/core_ext/string/output_safety.rb#L20) that names the methods which are unsafe.

In the past, this approach has required additional action by Rails maintainers when new unsafe string methods are introduced upstream -- see https://github.com/rails/rails/pull/33990 for an example to make sure `#delete_prefix!` marked the string as unsafe.

I think a better approach might be to redesign this class to:

1. avoid exclude lists
2. convert the string to unsafe upon _any_ bang method being invoked

My suspicion is that we don't even need an exclude list -- methods like `String#capitalize` will return a new object which will be, by default, `html_safe? == false` (with the exception of empty strings). This assumption will greatly simplify the code.

I'll schedule some time to work on this in the future.

## Resources

Relevant commits / issues / PRs:

- https://github.com/rails/rails/commit/8ccaa34103f1c37f7549f7f6c47a21dba21624db
- https://github.com/rails/rails/pull/33808
- https://github.com/rails/rails/pull/33990
- https://github.com/rails/rails/pull/46259
- https://github.com/rails/rails/issues/47343
- https://github.com/rails/rails/pull/47344"
47357,Inconsistent scoping rules for `all queries: true` scopes and `#reload`,pjambet,"activerecord, attached PR",2023-02-10T17:28:44Z,2023-06-20T04:54:13Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

<details>
  <summary>Collapsed because the test is pretty long</summary>
  
```ruby
# frozen_string_literal: true

require ""bundler/inline""
require ""debug""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.boolean :deleted, default: false
  end
end

class SQLCounter
  class << self
    attr_accessor :ignored_sql, :log, :log_all
    def clear_log; self.log = []; self.log_all = []; end
  end

  clear_log

  def call(name, start, finish, message_id, values)
    return if values[:cached]

    sql = values[:sql]
    self.class.log_all << sql
    self.class.log << sql unless [""SCHEMA"", ""TRANSACTION""].include? values[:name]
  end
end

ActiveSupport::Notifications.subscribe(""sql.active_record"", SQLCounter.new)

def capture_sql(output = nil)
  ActiveRecord::Base.connection.materialize_transactions
  SQLCounter.clear_log
  yield
  log = SQLCounter.log.dup.first # I only care about the first here
  log
ensure
  log = SQLCounter.log.dup.first if log.nil?
  output.concat(log) if output
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
  default_scope -> { where(deleted: false) }
  default_scope -> { where(post_id: 1) }, all_queries: true
end

class CommentWithOnlyDefaultScopeWithoutAllQueries < ActiveRecord::Base
  self.table_name = ""comments""
  belongs_to :post
  default_scope -> { where(deleted: false) }
end

class CommentWithOnlyDefaultScopeWithAllQueries < ActiveRecord::Base
  self.table_name = ""comments""
  belongs_to :post
  default_scope -> { where(post_id: 1) }, all_queries: true
end

class BugTest < Minitest::Test
  def setup
    if Post.find_by(id: 1) # only run this before once
      @post1 = Post.find(1)
      @comment1 = Comment.unscoped.find(1)

      @post2 = Post.find(2)
      @comment2 = Comment.unscoped.find(2)
    else
      @post1 = Post.create!
      @comment1 = @post1.comments.create!

      @post2 = Post.create!
      @comment2 = @post2.comments.create!
    end
  end

  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_without_default_scopes
    # Expected behavior: scope not flagged with all_queries, is ignored, currently works:
    assert Post.where(""1=2"").scoping { @post1.reload }
  end

  def test_scope_with_all_queries_is_applied_on_reload_on_a_model_without_default_scopes
    # Expected behavior: scope flagged with all_queries, is applied, currently works:
    assert_raises(ActiveRecord::RecordNotFound) { Post.where(""1=2"").scoping(all_queries: true) { @post1.reload } }
  end

  ###

  def test_default_scope_with_all_queries_is_applied_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries
    # Expected behavior: default scope is flagged with all_queries, scope is applied, currently works:
    sql = capture_sql { assert @comment1.reload } # where post_id = 1 matches that row
    assert_match(/WHERE ""comments"".""post_id"" = \? AND ""comments"".""id"" = \? LIMIT \?\Z/, sql)
    sql = +""""
    assert_raises(ActiveRecord::RecordNotFound) { capture_sql(sql) { @comment2.reload } }  # where post_id = 1 doesn't match that row
    assert_match(/WHERE ""comments"".""post_id"" = \? AND ""comments"".""id"" = \? LIMIT \?\Z/, sql)
  end

  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries
    # skip(""doesnt work"")
    # Expected behavior: only the default scope flagged with all_queries: true is applied, the other ones, on deleted = false and 1=1, are not, does not work:
    sql = capture_sql { Comment.where(""1=1"").scoping { @comment1.reload } }
    assert_match(/WHERE ""comments"".""post_id"" = \? AND ""comments"".""id"" = \? LIMIT \?\Z/, sql) # fails because 1=1 & deleted = false are incorrectly applied
  end

  def test_scope_with_all_queries_is_applied_but_only_default_scope_with_all_queries_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries
    # skip(""doesnt work"")
    # Expected behavior: only the default scope flagged with all_queries: true is applied, does not work:
    sql = capture_sql { Comment.where(""1=1"").scoping(all_queries: true) { @comment1.reload } }
    assert_match(/WHERE ""comments"".""post_id"" = \? AND \(1=1\) AND ""comments"".""id"" = \? LIMIT \?\Z/, sql) # fails because deleted = false is incorrectly applied
  end

  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_only_a_default_scope_without_all_queries
    # Expected behavior: only the default scope flagged with all_queries: true is applied, currently works:
    comment1 = CommentWithOnlyDefaultScopeWithoutAllQueries.find(1)
    sql = capture_sql {  CommentWithOnlyDefaultScopeWithoutAllQueries.where(""1=2"").scoping { comment1.reload } }
    assert_match(/WHERE ""comments"".""id"" = \? LIMIT \?\Z/, sql)
  end

  def test_scope_with_all_queries_is_applied_on_reload_on_a_model_with_only_a_default_scope_without_all_queries
    # skip(""doesnt work"")
    # Expected behavior: only the explicit scope flagged with all_queries: true is applied, does not work:
    comment1 = CommentWithOnlyDefaultScopeWithoutAllQueries.find(1)
    sql = capture_sql { CommentWithOnlyDefaultScopeWithoutAllQueries.where(""1=1"").scoping(all_queries: true) { comment1.reload } }
    assert_match(/WHERE \(1=1\) AND ""comments"".""id"" = \? LIMIT \?\Z/, sql) # Fails because deleted = false is incorrectly included
  end

  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_only_a_default_scope_with_all_queries
    # skip(""does not work"")
    # Expected behavior: only the default scope flagged with all_queries: true is applied, does not work:
    comment1 = CommentWithOnlyDefaultScopeWithAllQueries.find(1)
    sql = capture_sql { CommentWithOnlyDefaultScopeWithAllQueries.where(""1=1"").scoping { comment1.reload } }
    assert_match(/WHERE ""comments"".""post_id"" = \? AND ""comments"".""id"" = \? LIMIT \?\Z/, sql) # Fails because 1=1 is incorrectly included
  end

  def test_scope_with_all_queries_is_applied_on_reload_on_a_model_with_only_a_default_scope_with_all_queries
    # Expected behavior: the default scope flagged with all_queries: true and the explicit scope flagged with all_queries: true are applied, works:
    comment1 = CommentWithOnlyDefaultScopeWithAllQueries.find(1)
    sql = capture_sql { CommentWithOnlyDefaultScopeWithAllQueries.where(""1=1"").scoping(all_queries: true) { comment1.reload } }
    assert_match(/WHERE ""comments"".""post_id"" = \? AND \(1=1\) AND ""comments"".""id"" = \? LIMIT \?\Z/, sql)
  end
end
```
</details>


### Expected behavior
<!-- Tell us what should happen -->

I would expect all tests to pass. In other words, scopes not flagged with `all_queries: true` should never be applied on `#reload`, whether they are added as default scopes on the model, or created explicitly with `.scoping`.

### Actual behavior
<!-- Tell us what happens instead -->

The following cases lead to scopes not flagged with `all_queries: true` to be applied: 

- Calling `.scoping()` on a model with two default scopes, one with `all_queries: true`, one without, causes all three scopes to be applied, instead of only the default one with `all_queries: true`. See test `test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries` above
- Calling `.scoping(all_queries: true)` on a model with two default scopes, one with `all_queries: true`, one without, causes all three scopes to be applied, instead of only the two scopes with `all_queries: true` one. See test `test_scope_with_all_queries_is_applied_but_only_default_scope_with_all_queries_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries` above
- Calling `.scoping(all_queries: true)` on a model with a default scope not flagged with `all_queries: true` causes both scopes to be applied, instead of only the `all_queries: true` one. See test `test_scope_with_all_queries_is_applied_on_reload_on_a_model_with_only_a_default_scope_without_all_queries` above
- Calling `.scoping()` on a model with a default scope flagged with `all_queries: true` causes both scopes to be applied instead of only the default one with `all_queries: true`. See test `test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_only_a_default_scope_with_all_queries` above

All four cases are probably the same underlying issue in terms of how scopes are applied but I figured I would make an exhaustive list of all combinations and expected outcome.

Related issue: https://github.com/rails/rails/issues/46731 (and [PR](https://github.com/rails/rails/pull/46742) that fixed it)

---

I didn't get a chance yet, but I'm curious if the same issue happens with other instance methods such as `#update` and `#destroy`, as in, only scopes with `all_queries: true` should be applied.

### System configuration
**Rails version**: main@c88ca3b

**Ruby version**:  ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [arm64-darwin21]
"
47346,"rails db:rollback failed when use postgresql and ""user"" table",paihu,"activerecord, attached PR",2023-02-10T02:29:34Z,2023-02-17T14:01:47Z,2023-02-17T14:01:47Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
1. set  `adapter: postgresql`  in  config/database.yml   
1. add 3 migration file
1. rails db:migrate
1. rails db:rollback
<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
migration file 1
```ruby
class CreateUser < ActiveRecord::Migration[6.1]
  def change
    create_table :user do |t|
      t.string :name

      t.timestamps
    end
  end
end
```
migraiton file 2
```ruby
class CreateBook < ActiveRecord::Migration[6.1]
  def change
    create_table :book do |t|
      t.string :name
      t.references :user, null: false

      t.timestamps
    end
  end
end
```
migration file 3
```ruby
class AddForeignKeyToBook < ActiveRecord::Migration[6.1]
  def change
    add_foreign_key :book, :user
  end
end
```


https://github.com/rails/rails/blob/v6.1.7.2/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb#L123

to_table.to_s  == ""user""
self.to_table == ""\""user\""""

### Expected behavior
<!-- Tell us what should happen -->
rollback finished
### Actual behavior
<!-- Tell us what happens instead -->
```
== 20230209081024 AddForeignKeyToBook: reverting ==============================
-- remove_foreign_key(:book, :user)
rake aborted!
StandardError: An error has occurred, this and all later migrations canceled:

Table 'book' has no foreign key for user
```

### workaround
set table name  to  ` ""\""user\""\""` and column name to  `:user_id` 

migration file 3
```ruby
class AddForeignKeyToBook < ActiveRecord::Migration[6.1]
  def change
    add_foreign_key :book, ""\""user\"""", column: :user_id
  end
end
```

### System configuration
**Rails version**:
    rails (6.1.7)
**Ruby version**:
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-darwin21]"
47338,Broken serialization for Active Record  `Class` attributes,jorgemanrubia,activerecord,2023-02-09T15:29:50Z,2023-05-18T11:00:13Z,2023-05-18T11:00:13Z,"Active Record fails to query serialized `Class` attributes.

### Steps to reproduce

Run this script:

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
  gem ""concurrent-ruby"", ""1.2.0""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"", prepared_statements: true)

ActiveRecord::Schema.define do
  create_table :class_containers, force: true do |t|
    t.string :klass
  end
end

class ClassContainer < ActiveRecord::Base
  serialize :klass, Class
end

class ClassContainerTest < Minitest::Test
  def test_bug
    ClassContainer.where(klass: String).all
  end
end
```

### Expected behavior

You can query a model using a serialized `Class` attribute.

### Actual behavior

An error is raised: `TypeError: can|'t dump anonymous class: #<Class:0x0000000105455460>`.

### Cause

The problem was introduced in [this commit](https://github.com/rails/rails/commit/5abb45d53ae32f9d80fac5a21fe4cda9b83412a1#diff-7743ab95b8e15581f432206245c691434a3993d1a751b9d451170956d59457a9R8). Invoking `#deep_dup` on a `Class` will generate an anonymous class that can't be serialized with YAML.

I can prepare a PR to add an exception for `Class` in  that `Type::Helpers::Mutable#immutable_value` method, but I wonder if there's a better angle to attack this. cc @tenderlove 
"
47337,ActionView::Helpers::TextHelper # highlight is performing slow with either large text or multiple matches,stillhart,"actionview, attached PR",2023-02-09T14:48:58Z,2023-02-10T16:08:36Z,2023-02-10T16:08:36Z,"### Steps to reproduce

The following test is the most simple use-case to increase the `highlight` execution time into multiple seconds. In my real world case I was trying to match 50 different items across 1000's of lines of plain text.

The test below only shows the execution times and does not fail. I can not really define what the expected performance on any hardware is supposed to be, expect that it am certain that it should be faster.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.0.0""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers
end

require ""minitest/autorun""
require ""minitest/benchmark""

class BugTest < Minitest::Benchmark
  include Rack::Test::Methods

  def bench_highlight_with_one_text_match
    assert_performance (proc {}) do |n|
      TestController.helpers.highlight(""foo bar 1234\n"" * n, ""bar"")
    end
  end

  def bench_highlight_with_one_match
    assert_performance (proc {}) do |n|
      TestController.helpers.highlight(""foo bar 1234\n"" * n, /bar/)
    end
  end

  def bench_highlight_with_two_matches
    assert_performance (proc {}) do |n|
      TestController.helpers.highlight(""foo bar 1234\n"" * n, /foo|bar/)
    end
  end

  def bench_highlight_with_three_matches
    assert_performance (proc {}) do |n|
      TestController.helpers.highlight(""foo bar 1234\n"" * n, /foo|bar|1234/)
    end
  end
end
```

### Expected behavior

The `highlight` method performs highlighting with multiple thousand of lines and multiple matches in less than a second, or even better in less than 100ms. 

### Actual behavior

| Benchmark | 1 lines | 10 lines | 100 lines | 1000 lines | 10000 lines |
| ------------- |:----------:|:----------:|:----------:|:----------:|:----------:|
| bench_highlight_with_one_text_match | 0.002027 | 0.000874 | 0.001864 | **0.072229** | **6.902236** |
| bench_highlight_with_one_match | 0.231050 | 0.001049 | 0.001921 | **0.069195** | **6.856789** |
| bench_highlight_with_two_matches | 0.000937 | 0.000907 | 0.002685 | **0.148295** | **14.246967** |
| bench_highlight_with_three_matches | 0.001286 | 0.000569 | 0.002794 | **0.208822** | **20.961633** |

The highlight method performs surprisingly slow and easily reaches multi-second execution times when having either larger text or multiple matches.

In my case I was highlighting 50 kind of matches found in multiple 1000's of lines of text. That resulted in timeouts due to the 60+ second long execution time. I did not expect highlight to be that slow and that sensitive. My matches did not consist of very complex regexes. It usually mostly consisted of simple case insensitive word matches, sometimes some simple character matching like \S+.

Initially I tried to nest `highlight` method calls for each kind of match, which resulted in even worse execution times.

### System configuration
**Rails version**:
7.0.4.2

**Ruby version**:
ruby 3.2.0
ruby 3.2.1

### Documentation
https://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#method-i-highlight
"
47335,Incorrect subquery for a polymorphic `has_one` association,janko,activerecord,2023-02-09T11:57:18Z,2023-06-02T07:58:11Z,2023-06-02T07:07:00Z,"### Steps to reproduce

```ruby
require ""active_record""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Schema.define do
  create_table :pins do |t|
    t.string :code, null: false
  end
  create_table :cards do |t|
  end
  create_table :access_tools do |t|
    t.references :item, polymorphic: true
  end
end

class Pin < ActiveRecord::Base
  has_one :access_tool, as: :item
end

class Card < ActiveRecord::Base
  has_one :access_tool, as: :item
end

class AccessTool < ActiveRecord::Base
  belongs_to :item, polymorphic: true
end

Pin.create!(code: ""1111"")
AccessTool.create!(item: Card.create!)
AccessTool.create!(item: Pin.create!(code: ""2222""))

Pin.where(access_tool: AccessTool.all).count # => 2 (expected 1)
```

### Expected behavior

I expected the subquery to automatically filter by the source type, because Active Record has the information about this. So, I expected `Pin.where(access_tool: AccessTool.all)` to filter access tools by `item_type = ""Pin""`:

```sql
SELECT ""pins"".* FROM ""pins"" WHERE ""pins"".""id"" IN (
  SELECT ""access_tools"".""item_id"" FROM ""access_tools"" WHERE ""access_tools"".""item_type"" = ""Pin""
)
```

### Actual behavior

What happened was that the subquery didn't include any source type filters, so the query would return PINs with IDs from other source types. The actual subquery didn't contain any `item_type` filters:

```sql
SELECT ""pins"".* FROM ""pins"" WHERE ""pins"".""id"" IN (
  SELECT ""access_tools"".""item_id"" FROM ""access_tools""
)
```

I find this subquery to be incorrectly inferred from my `has_one` association declaration, because it's missing the `item_type = ""Pin""` filter. Active Record should either generate the complete subquery, or raise an error that it cannot generate it. I find the current behavior to be dangerous, because it gave me the illusion that it succeeded in generating the requested subquery, but it was only partial.

This is the second time I got surprised by this behavior; the first time it was just me running something in the console, but the second time it actually caused a bug in production. So I thought I would report it.

### System configuration

**Rails version**: 7.0.4.2

**Ruby version**: 2.7.6
"
47334,Error does not bubble up from invalid associated record to parent (more detailed),loqimean,"activerecord, With reproduction steps",2023-02-09T10:52:24Z,2023-08-04T21:11:31Z,,"### Steps to reproduce
```ruby
class Parent
  has_many :child_parents
  has_many :children, through: :child_parents
end

class ChildParent
  belongs_to :parent
  belongs_to :child
end

class Child
  has_many :child_parents
  has_many :parents, through: :child_parents

  validates :name, uniqueness: { scope: :parent }
end


first_child = Child.create(name: ""John"")
second_child = Child.create(name: ""John"")

parent = Parent.create

parent.update(children_ids: [first_child.id, second_child.id])

parent.save #=> false
parent.errors.full_messages #=> ""Children invalid""
parent.children.map(&:errors).compact.map(&:full_messages) #=> ""[[""Child's name already taken""]]""
```

### Expected behavior
Expected to have message more detailed, like ""Child with id '45' has already taken name"" on parent model

### Actual behavior
It just returns an error message ""Children are invalid"" 🙂 

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1.1
"
47323,Initializing a memcache store with a Dalli client using a namespace behaves differently,aledustet,"activesupport, attached PR",2023-02-08T22:12:52Z,2023-05-26T03:27:29Z,2023-05-26T03:27:29Z,"### Steps to reproduce

When a new memcache store is initialized, one of the [options](https://github.com/rails/rails/blob/fad9050d80cb4d2d7c482311832724558bbfbbc2/activesupport/lib/active_support/cache/mem_cache_store.rb#L119) allowed is an already operational client. 
When only the address of the memcache server is provided, a new client is initialized and most options are [prevented](https://github.com/rails/rails/blob/fad9050d80cb4d2d7c482311832724558bbfbbc2/activesupport/lib/active_support/cache/mem_cache_store.rb#L128) from making it's way to the new client.
This is because there are custom [transformations](https://github.com/rails/rails/blob/fad9050d80cb4d2d7c482311832724558bbfbbc2/activesupport/lib/active_support/cache/mem_cache_store.rb#L321) that would be redundant otherwise.
When doing so, we prevent(among other things) the key manager from [truncating](https://github.com/petergoldstein/dalli/blob/1666b93de72d72b52a64b7349cbbb66a1a2af4b5/lib/dalli/key_manager.rb#L50) keys that are longer than the allowed length.
The problem is that when a client is provided, this safeguard is not in place and some surprising behavior can occur, particularly when [reading multiple keys](https://github.com/rails/rails/blob/fad9050d80cb4d2d7c482311832724558bbfbbc2/activesupport/lib/active_support/cache/mem_cache_store.rb#L288).

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activesupport"", ""~> 7.0.0""
  gem ""dalli""
end

require ""active_support""
require ""minitest/autorun""
require ""dalli""

# This test case is a reproduction of the one present on
# rails/activesupport/test/cache/behaviors/cache_store_behavior.rb#708
# It requires a memcached server running on localhost:11211
class MemCacheStoreBugTest < Minitest::Test
  def test_can_use_dalli_client_with_custom_options
    namespace = ""custom_namespace""
    dalli_client = Dalli::Client.new(""localhost:11211"", { namespace: })
    # To reproduce this on a config file it should be initialized as:
    # namespace = ""custom_namespace""
    # config.cache_store = :mem_cache_store, [Dalli::Client.new(""localhost:11211"", { namespace: })], { namespace:, pool: false, socket_timeout: 60 })
    cache = ActiveSupport::Cache.lookup_store(:mem_cache_store, [dalli_client], { namespace:, pool: false, socket_timeout: 60 })
    long_key = SecureRandom.alphanumeric * 2048
    value = ""bar""

    assert cache.write(long_key, value)
    # The lookup will succeed, since we write using the same mechanism.
    # it is [documented](https://guides.rubyonrails.org/caching_with_rails.html#cache-keys) that
    # a dalli client should not be used to read directly any keys written by rails
    assert_equal value, cache.fetch(long_key)
    # The issue occurs because the key length is precisely 250 characters
    # on activesupport's side, when Dalli attempts to add the namespace
    # it was initialized with, the key length exceeds 250 characters, kicking
    # of a [truncation](https://github.com/petergoldstein/dalli/blob/1666b93de72d72b52a64b7349cbbb66a1a2af4b5/lib/dalli/key_manager.rb#L54)
    # process on Dalli that will prevent the matching on the `read_multi`
    # method to map the normalized key with the response.
    assert_equal({ long_key => value }, cache.read_multi(long_key))
  end

  def test_can_use_dalli_client_without_custom_options
    namespace = ""custom_namespace""
    dalli_client = Dalli::Client.new(""localhost:11211"")
    cache = ActiveSupport::Cache.lookup_store(:mem_cache_store, [dalli_client], { namespace:, pool: false, socket_timeout: 60 })
    long_key = SecureRandom.alphanumeric * 2048
    value = ""bar""

    assert cache.write(long_key, value)
    assert_equal value, cache.fetch(long_key)
    assert_equal({ long_key => value }, cache.read_multi(long_key))
  end
end
```

### Expected behavior

Lookups for an existing key that are a cache hit when using `fetch`/`read` should be returned in the same `key => value` pair when using `read_multi`

Too fix it we can reverse the lookup of the key when `read_multi` is invoked. I have an [example](https://github.com/aledustet/rails/pull/1/files) on how it could look. Refrained from opening a PR because I would like to make sure this is a worthwhile effort. 

Depending on how critical this feature is, I feel we could explore a couple of solutions. FWIW the behavior seems to have been around for quite a while and I couldn't find any issues mentioning specifically.

1. Deprecate the feature of initializing with a Dalli client. I'm not sure what use-case is serving the ability of providing an instance of a client. It is not documented on the guides that it can/should be done, but there is a [reference](https://guides.rubyonrails.org/caching_with_rails.html#activesupport-cache-memcachestore) to the Dalli client documentation that mentions that the namespace can be overriden.

2. Add a warning whenever a Dalli client is added, mentioning that keys longer than the max character limit will not be returned when reading multiple entries.

3. Have a [workaround](https://github.com/aledustet/rails/pull/1/files) on the `read_multi` invocation when the dalli client includes a namespace. For that example there is some surprising behavior when looking up multiple keys, the namespace is [dropped](https://github.com/petergoldstein/dalli/blob/88614e8c9ed63c92bff18da94830fd1e30782099/lib/dalli/pipelined_getter.rb#L139) 🤔  

4. This is a very very niche bug and documenting it here is enough 😄 

Delegating namespace management to the Dalli client should not be considered, given that there are custom transformations for encoding, types of the keys that can be used and others that are present on the rails implementation and not on Dalli's, also the usage of the client should remain an [implementation detail](https://github.com/rails/rails/issues/21595#issuecomment-139815433).

### Actual behavior

Lookups for an existing key that are a cache hit when using `fetch`/`read` are returned in a hash where every key is nil when using `read_multi`, and the key is over 250 characters long when the `Dalli` client has a custom namespace.

### System configuration
**Rails version**:

rails 7.0.4 
But can be reproduced on main and at least down to v6.0

**Ruby version**:

ruby 3.2.0"
47291,[ Rails 6.1.4/7.0.4 & Ruby 3.1.2] Migration is failing to check index_exists?,Ramesh7,"activerecord, attached PR",2023-02-07T17:22:02Z,2023-02-08T18:27:00Z,2023-02-08T18:27:00Z,"### Steps to reproduce
Rails migration failing at index_exists?  due to the old ruby with Rails 6.1 & 7.0 syntax.https://github.com/rails/rails/blob/v7.0.4.2/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb#L664-L666
Below is an example of migration :
```ruby
class TestMigrationWithIndex < ActiveRecord::Migration[6.0]

  def up
    change_table :test_table do |t|
      t.index [:name, :category_type], name: :index_account_categories_ref unless t.index_exists? :index_account_categories_ref
    end

end
```

### Expected behavior
Migration should run successfully.

### Actual behavior
```
rake aborted!
ArgumentError: wrong number of arguments (given 3, expected 2)
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/connection_adapters/abstract/schema_statements.rb:99:in `index_exists?'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration/command_recorder.rb:284:in `public_send'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration/command_recorder.rb:284:in `method_missing'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/connection_adapters/abstract/schema_definitions.rb:636:in `index_exists?'
/Users/ramesh.senchacoupa.com/CoupaCodeBase/DEV/coupa_development/db/migrate/20230203123731_test_migration_with_index.rb:6:in `block in up'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration/compatibility.rb:105:in `block in change_table'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration/compatibility.rb:44:in `block in change_table'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/connection_adapters/abstract/schema_statements.rb:487:in `change_table'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:929:in `block in method_missing'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:897:in `block in say_with_time'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:897:in `say_with_time'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:918:in `method_missing'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration/compatibility.rb:44:in `change_table'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration/compatibility.rb:105:in `change_table'
/Users/ramesh.senchacoupa.com/CoupaCodeBase/DEV/coupa_development/db/migrate/20230203123731_test_migration_with_index.rb:5:in `up'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:870:in `public_send'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:870:in `exec_migration'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:851:in `block (2 levels) in migrate'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:850:in `block in migrate'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/connection_adapters/abstract/connection_pool.rb:462:in `with_connection'
/Users/ramesh.senchacoupa.com/.rvm/gems/ruby-3.1.2@enterprise/gems/activerecord-6.1.4.7/lib/active_record/migration.rb:849:in `migrate'
```

### System configuration
**Rails version**:
- 7.0.4.1
- 6.1.4.7

**Ruby version**:
3.1.2
"
47267,Ruby 3.2 Data class when serializing to JSON  becomes empty hash string,aglushkov,"activesupport, attached PR",2023-02-06T07:36:03Z,2023-02-07T19:58:08Z,2023-02-07T19:58:08Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true, quiet: true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem 'rails', '~> 7.0', '>= 7.0.4.2'
end

data = Data.define(:foo).new(:bar)
struct = Struct.new(:foo).new(:bar)

puts ""ActiveSupport::JSON.encode(data): #{ActiveSupport::JSON.encode(data)}""
puts ""ActiveSupport::JSON.encode(struct): #{ActiveSupport::JSON.encode(struct)}""

# => ActiveSupport::JSON.encode(data): {}
# => ActiveSupport::JSON.encode(struct): {""foo"":""bar""}
```

### Expected behavior
I believe it should behave same as Struct, or Hash, serializing all keys and values

### Actual behavior
Returns empty hash string ""{}""

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
47258,Rails new command help weird groupings,zzak,attached PR,2023-02-05T23:32:04Z,2023-05-11T20:42:18Z,2023-05-10T01:26:40Z,"I noticed when running `rails new --help` that some of the groups were off to me.

```
  -T, [--skip-test], [--no-skip-test]                            # Skip test files
          [--skip-system-test], [--no-skip-system-test]          # Skip system test files
          [--skip-bootsnap], [--no-skip-bootsnap]                # Skip bootsnap gem
          [--skip-dev-gems], [--no-skip-dev-gems]                # Skip development gems (e.g., web-console)
          [--dev], [--no-dev]                                    # Set up the application with Gemfile pointing to your Rails checkout
          [--edge], [--no-edge]                                  # Set up the application with a Gemfile pointing to the main branch on the Rails repository
```

It seems weird that `--dev` and `--edge` are under the skip tests group, for example.

```
--master, [--main], [--no-main]                                # Set up the application with Gemfile pointing to Rails repository main branch
          [--rc=RC]                                              # Path to file containing extra configuration options for rails command
          [--no-rc], [--no-no-rc]                                # Skip loading of extra configuration options from .railsrc file
          [--api], [--no-api]                                    # Preconfigure smaller stack for API only apps
          [--minimal], [--no-minimal]                            # Preconfigure a minimal rails app
```

It looks like `--api` is an option under the `--master` group, which they are not mutually exclusive afaik.

```
  -B, [--skip-bundle], [--no-skip-bundle]                        # Don't run bundle install
          [--skip-decrypted-diffs], [--no-skip-decrypted-diffs]  # Don't configure git to show decrypted diffs of encrypted credentials
```

In this case, it looks like `-B` can also be used for `--skip-decrypted-diffs`.

I think the absence of a comma after `[--no-skip-bundle]` means it is _not_ a continuation, but due to the indentation, my brain thinks they are related.

Here's another example:

```
  -G, [--skip-git], [--no-skip-git]                              # Skip git init, .gitignore and .gitattributes
          [--skip-docker], [--no-skip-docker]                    # Skip Dockerfile, .dockerignore and bin/docker-entrypoint
          [--skip-keeps], [--no-skip-keeps]                      # Skip source control .keep files
  -M, [--skip-action-mailer], [--no-skip-action-mailer]          # Skip Action Mailer files
          [--skip-action-mailbox], [--no-skip-action-mailbox]    # Skip Action Mailbox gem
          [--skip-action-text], [--no-skip-action-text]          # Skip Action Text gem
  -O, [--skip-active-record], [--no-skip-active-record]          # Skip Active Record files
          [--skip-active-job], [--no-skip-active-job]            # Skip Active Job
          [--skip-active-storage], [--no-skip-active-storage]    # Skip Active Storage files
```

It looks like the flags after the initial `-G, [--skip-git], [--no-skip-git]` are ""grouped"" based on the indentation.

I've no idea how to fix this yet, but thought it was worth an issue."
47244,Rails 7 router can raise `NoMethodError (undefined method `names' for nil:NilClass)`,engwan,"stale, routing",2023-02-03T06:17:02Z,2023-08-30T10:51:57Z,2023-08-25T00:14:37Z,"### Steps to reproduce

When having a route with a regex constraint with a negative lookahead, we get exceptions when matching some routes.

I simplified the regex and created a minimal example below:

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.0.0""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get '*namespace_id/:project_id/bar', to: 'test#index', constraints: { namespace_id: /(?!api\/)[a-zA-Z0-9_\\]+/, project_id: /[a-zA-Z0-9]+/ }

    # This version works:
    #get '*namespace_id/:project_id/bar', to: 'test#index', constraints: lambda { |req| req.params[:namespace_id].match?(/\A(?!api\/)[a-zA-Z0-9_\\]+\z/) && req.params[:project_id].match?(/\A[a-zA-Z0-9]+\z/) }

    get '/api/foo/bar', to: 'test#index'
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    render plain: ""Home""
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    get ""/api/foo/bar""
    assert last_response.ok?
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

It should match the second route and render the page

### Actual behavior

It raises an exception:

```
Started GET ""/api/foo/bar/"" for 127.0.0.1 at 2023-02-03 14:04:19 +0800

NoMethodError (undefined method `names' for nil:NilClass):

actionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:126:in `block in find_routes'
actionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:123:in `map!'
actionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:123:in `find_routes'
actionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:32:in `serve'
actionpack (7.0.4.2) lib/action_dispatch/routing/route_set.rb:852:in `call'
```

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 3.0.5
"
47228,Redis cache store docs about hiredis seem outdated,RasimKhusaenov,docs,2023-02-02T13:17:03Z,2023-02-02T18:31:57Z,2023-02-02T18:31:39Z,"### Summary
[There is a paragraph about the `hiredis`](https://guides.rubyonrails.org/caching_with_rails.html#activesupport-cache-rediscachestore) in the guide. In `redis 4.x` gem everything worked as it should. I recently updated the gem to 5.x and now it doesn't work. I investigated the source of the problem, and came to the following conclusion.

I noticed that after the update, `redis-client` started to be used too. In the CHANGELOG, [it says that since version 0.4.0, the `hiredis` driver has moved to `hiredis-client`](https://github.com/redis-rb/redis-client/blob/master/CHANGELOG.md#040). If we compare the documentation of the two versions of the `redis` gem, there, too, `hiredis` was replaced by `hiredis-client`: [old one](https://github.com/redis/redis-rb/blob/v4.5.1/README.md#hiredis) and [new one](https://github.com/redis/redis-rb/blob/master/README.md#hiredis-binding).

It seems to me that this moment also needs to be corrected in the guide.

### Steps to reproduce

In `Gemfile`:
```ruby
gem 'redis', '5.0.5'
gem 'hiredis', '0.6.3'
```

In `config/environments/*.rb`:
```ruby
config.cache_store = :redis_cache_store, { url: ENV['REDIS_URL'], driver: :hiredis }
```
OR
In rails console:
```ruby
RedisClient.new(driver: :hiredis)
```

You should have error:
```ArgumentError: Unknown driver :hiredis, expected one of: [:ruby]```"
47213,Confirmation dialog didn't showed up using `button_to` without turbo,rizlantamima,more-information-needed,2023-02-01T09:05:18Z,2023-02-18T14:13:43Z,2023-02-18T14:13:43Z,"### Steps to reproduce
Confirmation dialog didn't show when I'm using `button_to` without turbo (`data: { turbo: false }`).
### Expected behavior
Able to use a confirmation dialog with (**button_to helper**) but without turbo
### Actual behavior
by using one of this solution, the confirmation dialog still doesn’t showed up.
```ruby
button_to t(""delete_this""), the_path(@resource), method: :delete,  data: { turbo: false, turbo_confirm: I18n.t('action_confirmations')}
```
OR
```ruby
button_to t(""delete_this""), the_path(@resource), method: :delete,  data: { turbo: false, confirm: I18n.t('action_confirmations')}
```
### System configuration
**Rails version**:
Rails 7.0.4
**Ruby version**:
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin21]"
47206,Rails 7 installation fails (undefined method action_mailer) when some components are excluded,ekortright,railties,2023-01-31T20:33:19Z,2023-02-01T14:36:54Z,2023-01-31T22:56:24Z,"### Steps to reproduce
Creating a new Rails app inside a Docker container (that's why it's running as root), excluding components that are not needed.

```ruby
bash-4.2# rails new --skip-action-mailbox --skip-action-text --skip-active-record --skip-active-job --skip-active-storage --skip-action-cable --skip-asset-pipeline --skip-hotwire myApp
```

### Expected behavior
Creation task should completely execute without error.

### Actual behavior
The task is interrupted before it can finish because it is expecting `action_mailer` to be a method in Rails::Application::Configuration.  The problem seems to be that `config/application.rb` does not require all gems, but has a separate require for each gem, and the one for `action_mailer` is commented out:

```
# require ""action_mailer/railtie""
```
Here is the output of the `rails new` command:

```
      create  
      create  README.md
      create  Rakefile
      create  .ruby-version
      create  config.ru
      create  .gitignore
      create  .gitattributes
      create  Gemfile
         run  git init from "".""
Initialized empty Git repository in /rails/myApp/.git/
      create  app
      create  app/assets/config/manifest.js
      create  app/assets/stylesheets/application.css
      create  app/channels/application_cable/channel.rb
      create  app/channels/application_cable/connection.rb
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/jobs/application_job.rb
      create  app/mailers/application_mailer.rb
      create  app/models/application_record.rb
      create  app/views/layouts/application.html.erb
      create  app/views/layouts/mailer.html.erb
      create  app/views/layouts/mailer.text.erb
      create  app/assets/images
      create  app/assets/images/.keep
      create  app/controllers/concerns/.keep
      create  app/models/concerns/.keep
      create  bin
      create  bin/rails
      create  bin/rake
      create  bin/setup
      create  config
      create  config/routes.rb
      create  config/application.rb
      create  config/environment.rb
      create  config/puma.rb
      create  config/environments
      create  config/environments/development.rb
      create  config/environments/production.rb
      create  config/environments/test.rb
      create  config/initializers
      create  config/initializers/assets.rb
      create  config/initializers/content_security_policy.rb
      create  config/initializers/cors.rb
      create  config/initializers/filter_parameter_logging.rb
      create  config/initializers/inflections.rb
      create  config/initializers/new_framework_defaults_7_0.rb
      create  config/initializers/permissions_policy.rb
      create  config/locales
      create  config/locales/en.yml
      create  config/master.key
      append  .gitignore
      create  config/boot.rb
      create  lib
      create  lib/tasks
      create  lib/tasks/.keep
      create  lib/assets
      create  lib/assets/.keep
      create  log
      create  log/.keep
      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/apple-touch-icon-precomposed.png
      create  public/apple-touch-icon.png
      create  public/favicon.ico
      create  public/robots.txt
      create  tmp
      create  tmp/.keep
      create  tmp/pids
      create  tmp/pids/.keep
      create  tmp/cache
      create  tmp/cache/assets
      create  vendor
      create  vendor/.keep
      create  test/fixtures/files
      create  test/fixtures/files/.keep
      create  test/controllers
      create  test/controllers/.keep
      create  test/mailers
      create  test/mailers/.keep
      create  test/models
      create  test/models/.keep
      create  test/helpers
      create  test/helpers/.keep
      create  test/integration
      create  test/integration/.keep
      create  test/channels/application_cable/connection_test.rb
      create  test/test_helper.rb
      create  test/system
      create  test/system/.keep
      create  test/application_system_test_case.rb
      remove  config/initializers/assets.rb
      remove  app/assets/config/manifest.js
      remove  app/assets/config
      remove  app/assets/stylesheets/application.css
      create  app/assets/stylesheets/application.css
      remove  app/models/application_record.rb
      remove  app/jobs
      remove  app/javascript/channels
      remove  app/channels
      remove  test/channels
      remove  config/initializers/cors.rb
      remove  config/initializers/new_framework_defaults_7_0.rb
         run  bundle install
Don't run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this application for all non-root users on this machine.
The dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`.
Fetching gem metadata from https://rubygems.org/...........
Fetching gem metadata from https://rubygems.org/.
Resolving dependencies...
Using rake 13.0.6
Fetching concurrent-ruby 1.2.0
Installing concurrent-ruby 1.2.0
Using i18n 1.12.0
Fetching minitest 5.17.0
Installing minitest 5.17.0
Fetching tzinfo 2.0.6
Installing tzinfo 2.0.6
Fetching activesupport 7.0.4.2
Installing activesupport 7.0.4.2
Using builder 3.2.4
Fetching erubi 1.12.0
Installing erubi 1.12.0
Fetching mini_portile2 2.8.1
Installing mini_portile2 2.8.1
Fetching racc 1.6.2
Installing racc 1.6.2 with native extensions
Fetching nokogiri 1.14.1 (x86_64-linux)
Installing nokogiri 1.14.1 (x86_64-linux)
Using rails-dom-testing 2.0.3
Using crass 1.0.6
Fetching loofah 2.19.1
Installing loofah 2.19.1
Fetching rails-html-sanitizer 1.5.0
Installing rails-html-sanitizer 1.5.0
Fetching actionview 7.0.4.2
Installing actionview 7.0.4.2
Fetching rack 2.2.6.2
Installing rack 2.2.6.2
Using rack-test 2.0.2
Fetching actionpack 7.0.4.2
Installing actionpack 7.0.4.2
Using nio4r 2.5.8
Using websocket-extensions 0.1.5
Using websocket-driver 0.7.5
Fetching actioncable 7.0.4.2
Installing actioncable 7.0.4.2
Fetching globalid 1.1.0
Installing globalid 1.1.0
Fetching activejob 7.0.4.2
Installing activejob 7.0.4.2
Fetching activemodel 7.0.4.2
Installing activemodel 7.0.4.2
Fetching activerecord 7.0.4.2
Installing activerecord 7.0.4.2
Using marcel 1.0.2
Using mini_mime 1.1.2
Fetching activestorage 7.0.4.2
Installing activestorage 7.0.4.2
Fetching date 3.3.3
Installing date 3.3.3 with native extensions
Fetching timeout 0.3.1
Installing timeout 0.3.1
Fetching net-protocol 0.2.1
Installing net-protocol 0.2.1
Fetching net-imap 0.3.4
Installing net-imap 0.3.4
Using net-pop 0.1.2
Using net-smtp 0.3.3
Fetching mail 2.8.0.1
Installing mail 2.8.0.1
Fetching actionmailbox 7.0.4.2
Installing actionmailbox 7.0.4.2
Fetching actionmailer 7.0.4.2
Installing actionmailer 7.0.4.2
Fetching actiontext 7.0.4.2
Installing actiontext 7.0.4.2
Fetching public_suffix 5.0.1
Installing public_suffix 5.0.1
Using addressable 2.8.1
Using bindex 0.8.1
Using msgpack 1.6.0
Fetching bootsnap 1.16.0
Installing bootsnap 1.16.0 with native extensions
Using bundler 2.1.4
Using matrix 0.4.2
Fetching regexp_parser 2.6.2
Installing regexp_parser 2.6.2
Using xpath 3.2.0
Using capybara 3.38.0
Fetching io-console 0.6.0
Installing io-console 0.6.0 with native extensions
Fetching reline 0.3.2
Installing reline 0.3.2
Fetching irb 1.6.2
Installing irb 1.6.2
Fetching debug 1.7.1
Installing debug 1.7.1 with native extensions
Using method_source 1.0.0
Using thor 1.2.1
Using zeitwerk 2.6.6
Fetching railties 7.0.4.2
Installing railties 7.0.4.2
Fetching importmap-rails 1.1.5
Installing importmap-rails 1.1.5
Using jbuilder 2.11.5
Using puma 5.6.5
Fetching rails 7.0.4.2
Installing rails 7.0.4.2
Using rexml 3.2.5
Using rubyzip 2.3.2
Using websocket 1.2.9
Fetching selenium-webdriver 4.8.0
Installing selenium-webdriver 4.8.0
Using web-console 4.2.0
Using webdrivers 5.2.0
Bundle complete! 11 Gemfile dependencies, 68 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
         run  bundle binstubs bundler
The dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`.
       rails  importmap:install
rails aborted!
NoMethodError: undefined method `action_mailer' for #<Rails::Application::Configuration:0x0000000003cef3d0>
/rails/myApp/config/environments/development.rb:37:in `block in <main>'
/rails/myApp/config/environments/development.rb:3:in `<main>'
/rails/myApp/config/environment.rb:5:in `<main>'
Tasks: TOP => app:template => environment
(See full trace by running task with --trace)
```

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 2.7.3

### Workaround
Uncommenting the missing require in config/application.rb allows starting Rails after the failed install, but it's hard to tell if anything important is missing.  Creating a new app with all the unwanted components works.
"
47203,PostgreSQLAdapterTest#test_only_check_for_insensitive_comparison_capability_once fails ,yahonda,"activerecord, ci issues",2023-01-31T13:38:00Z,2023-02-10T15:49:42Z,2023-02-10T15:49:42Z,"Managed to reproduce https://buildkite.com/rails/rails/builds/93254#018606ea-3aa9-43e1-a578-ca7c99db5472 failure via #47199

### Steps to reproduce

```ruby
cd activerecord
ARCONN=postgresql bin/test test/cases/validations/uniqueness_validation_test.rb test/cases/adapters/postgresql/postgresql_adapter_test.rb -n ""/^(?:UniquenessValidationTest#(?:test_validate_case_insensitive_uniqueness)|ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#(?:test_unparsed_defaults_are_at_least_set_when_saving|test_only_check_for_insensitive_comparison_capability_once))$/"" --seed 60206 -v
```

### Expected behavior
It should pass like using `--seed 42840`

```ruby
$ ARCONN=postgresql bin/test test/cases/validations/uniqueness_validation_test.rb test/cases/adapters/postgresql/postgresql_adapter_test.rb -n ""/^(?:UniquenessValidationTest#(?:test_validate_case_insensitive_uniqueness)|ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#(?:test_unparsed_defaults_are_at_least_set_when_saving|test_only_check_for_insensitive_comparison_capability_once))$/"" --seed 42840 -v
Using postgresql
Run options: -n ""/^(?:UniquenessValidationTest#(?:test_validate_case_insensitive_uniqueness)|ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#(?:test_unparsed_defaults_are_at_least_set_when_saving|test_only_check_for_insensitive_comparison_capability_once))$/"" --seed 42840 -v

# Running:

UniquenessValidationTest#test_validate_case_insensitive_uniqueness = 0.09 s = .
ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#test_only_check_for_insensitive_comparison_capability_once = 0.01 s = .
ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#test_unparsed_defaults_are_at_least_set_when_saving = 0.01 s = .

Finished in 0.122733s, 24.4432 runs/s, 211.8414 assertions/s.
3 runs, 26 assertions, 0 failures, 0 errors, 0 skips
$
```

### Actual behavior
It always fails as follows.

```ruby
$ ARCONN=postgresql bin/test test/cases/validations/uniqueness_validation_test.rb test/cases/adapters/postgresql/postgresql_adapter_test.rb -n ""/^(?:UniquenessValidationTest#(?:test_validate_case_insensitive_uniqueness)|ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#(?:test_unparsed_defaults_are_at_least_set_when_saving|test_only_check_for_insensitive_comparison_capability_once))$/"" --seed 60206 -v
Using postgresql
Run options: -n ""/^(?:UniquenessValidationTest#(?:test_validate_case_insensitive_uniqueness)|ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#(?:test_unparsed_defaults_are_at_least_set_when_saving|test_only_check_for_insensitive_comparison_capability_once))$/"" --seed 60206 -v

# Running:

UniquenessValidationTest#test_validate_case_insensitive_uniqueness = 0.08 s = .
ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#test_unparsed_defaults_are_at_least_set_when_saving = 0.01 s = .
ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#test_only_check_for_insensitive_comparison_capability_once = 0.00 s = F


Failure:
ActiveRecord::ConnectionAdapters::PostgreSQLAdapterTest#test_only_check_for_insensitive_comparison_capability_once [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/postgresql/postgresql_adapter_test.rb:495]:
1 or more queries expected, but none were executed..
Expected 0 to be >= 1.


bin/test test/cases/adapters/postgresql/postgresql_adapter_test.rb:487


Finished in 0.113529s, 26.4250 runs/s, 211.4003 assertions/s.
3 runs, 24 assertions, 1 failures, 0 errors, 0 skips
$
```


### System configuration
**Rails version**:  main branch

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
47202,Display broadcasted messages in case of failure: `assert_broadcast_on`,StephaneRob,actioncable,2023-01-31T12:26:43Z,2023-01-31T18:56:30Z,2023-01-31T16:28:39Z,"### Steps to reproduce
When using `assert_broadcast_on` it's difficult to debug when test fails. It would be great to display a (truncated?) list of broadcasted message on fail.

### Expected behavior
```ruby
assert_broadcast_on(""my-topic"", { ""message"" => ""hello"" })
```

```bash
Failure:
MyTest#test_must_broadcast[.../my_test.rb:106]:
No messages sent with { ""message"" => ""hello"" } to my-topic
Messages found:
{ ""message"" => ""world"" }
{ ""message"" => ""foo"" }
{ ""message"" => ""bar"" } 
```
If no messages broadcasted
```bash
Failure:
MyTest#test_must_broadcast[.../my_test.rb:106]:
No messages sent with { ""message"" => ""hello"" } to my-topic
No messages found
```

### Actual behavior
```ruby
assert_broadcast_on(""my-topic"", { ""message"" => ""hello"" })
```

```bash
Failure:
MyTest#test_must_broadcast[.../my_test.rb:106]:
No messages sent with { ""message"" => ""hello"" } to my-topic
```



"
47195,Speed up ActiveRecord::Relation#blank?,tracyloisel,activerecord,2023-01-31T03:47:50Z,2023-01-31T04:47:55Z,2023-01-31T04:47:55Z,"### Steps to reproduce

1. Take any model
2. Apply any scope
3. call #blank? method

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
any_scope.blank?
```

### Expected behavior
It should call #empty? so if the collection has not been already loaded it will call #exists? and will return result much faster

### Actual behavior
it currently loads the entire relation no matter if the collection has been already loaded or not

### System configuration
**Rails version**: > 5.2

**Ruby version**: > 2.0
"
47185,MessageVerifier fails when only the serializer is rotated,ankane,"activesupport, attached PR",2023-01-30T04:57:24Z,2023-02-13T17:46:27Z,2023-02-12T21:50:52Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support/all""
require ""minitest/autorun""

class BugTest < Minitest::Test
  def test_stuff
    key = SecureRandom.hex(64)
    message = ActiveSupport::MessageVerifier.new(key, serializer: Marshal).generate([""hello"", ""world""])

    verifier = ActiveSupport::MessageVerifier.new(key, serializer: JSON)
    verifier.rotate(serializer: Marshal)
    assert_equal [""hello"", ""world""], verifier.verify(message)
  end
end
```

### Expected behavior

Verification succeeds (it deserializes as Marshal when JSON fails)

### Actual behavior

Verification errors with `JSON::ParserError: unexpected token`

### System configuration
**Rails version**: 7.0.4.2 and `main`

**Ruby version**: 3.2.0
"
47184,`current_page?` wrong with root route,user073,"actionview, routing, attached PR",2023-01-30T03:08:45Z,2023-02-10T03:09:03Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.0.0""
end

require ""rack/test""
require ""action_controller/railtie""
require ""minitest/autorun""

class BugTest < ActiveSupport::TestCase
  attr_accessor :controller, :request

  routes = ActionDispatch::Routing::RouteSet.new
  routes.draw do
    root ""posts#index""
    resources :posts, only: :index
  end

  include ActionView::Helpers::UrlHelper
  include routes.url_helpers

  def request_for_url(url, opts = {})
    env = Rack::MockRequest.env_for(""http://www.example.com#{url}"", opts)
    ActionDispatch::Request.new(env)
  end

  def test_returns_success
    @request = request_for_url(""/posts"", method: :head)
    assert current_page?(controller: ""posts"", action: ""index"")
  end
end
```

### Expected behavior
<!-- Tell us what should happen -->

`current_page?(controller: ""posts"", action: ""index"")` returns true.

### Actual behavior
<!-- Tell us what happens instead -->

`current_page?(controller: ""posts"", action: ""index"")` returns false.

It appears that the issue is `url_for(options)` here:

https://github.com/rails/rails/blob/6d82760d5a0125fdbcf040fef590fc78bdf1d840/actionview/lib/action_view/helpers/url_helper.rb#L596


`current_page?(controller: ""posts"", action: ""index"")` returns false because `url_for(controller: ""spots"", action: ""index"")` returns `""/""`, which does not equal the `request_uri`, `""/posts""`.

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 3.1.0
"
47175,The eager load associations need check association scope ,OuYangJinTing,"activerecord, With reproduction steps",2023-01-29T04:08:06Z,2023-08-19T02:20:55Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org/""
  # source ""https://gems.ruby-china.com/""

  gem ""minitest"", ""~> 5.15""
  gem ""minitest-reporters""
  gem ""activerecord"", ""~> 7.0.2""
  gem ""sqlite3""
end

require ""minitest/autorun""
require ""minitest/reporters""
require ""active_record""

Minitest::Reporters.use!

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :name, null: false
  end

  create_table :posts, force: true do |t|
    t.belongs_to :user
    t.string :title, null: false
  end
end

class User < ActiveRecord::Base
  has_many :posts, dependent: :destroy

  has_one :latest_post, -> { order(id: :desc) }, class_name: ""Post""
end

class Post < ActiveRecord::Base
  belongs_to :user
end

class BugTest < Minitest::Test
  def setup
    3.times do |i|
      User.create(name: ""foo-#{i + 1}"").tap do |user|
        10.times do |j|
          user.posts.create(title: ""bar-#{j + 1}"")
        end
      end
    end
  end


  def test_correct_query
    assert_equal 10, User.first.latest_post.id
    assert_equal 10, User.includes(:latest_post).first.latest_post.id
  end

  def test_wrong_query
    assert_equal 10, User.eager_load(:latest_post).first.latest_post.id
  end
end

```

### Expected behavior
<!-- Tell us what should happen -->

The `ActiveRecord` should raise error when try to execute `User.eager_load(:latest_post)`.
~~For example, like the `#check_eager_loadable!` method handles~~

### Actual behavior
<!-- Tell us what happens instead -->

The result of eager load is wrong

### System configuration
**Rails version**: 7

**Ruby version**: 3
"
47173,Document other web server support for AC::Streaming,zzak,"actionpack, docs, stale, good first issue",2023-01-28T23:39:10Z,2023-08-24T09:14:37Z,2023-08-24T09:14:37Z,"When applying some changes to [ActionController::Streaming](https://edgeapi.rubyonrails.org/classes/ActionController/Streaming.html) recently I noticed the ""Web server support"" section is missing [puma](https://github.com/puma/puma) and [falcon](https://github.com/socketry/falcon), but perhaps others too?

Maybe a good first patch if someone wants to investigate! :bow:"
47171,`Child` is created twice when `Parent has_one Child` and update `Parent` from `before_create` of `Child`.,kyanagi,"activerecord, attached PR, With reproduction steps",2023-01-28T23:29:19Z,2023-07-26T04:28:24Z,,"### Steps to reproduce

This problem is not reproduced if we set `has_many :comments` instead of `has_one :comment`.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.integer :status
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_one :comment
end

class Comment < ActiveRecord::Base
  belongs_to :post
  before_create :update_post_status

  def update_post_status
    post.update!(status: 2)
  end
end

class BugTest < Minitest::Test
  def test_comment_is_created_only_once
    post = Post.create!
    Comment.create!(post:)

    pp Comment.all
    assert_equal 1, Comment.count
  end
end
```

### Expected behavior

`Comment` is created only once.

### Actual behavior

`Comment` is created twice.

```
% ruby b.rb
Fetching https://github.com/rails/rails.git
Fetching gem metadata from https://rubygems.org/......
Resolving dependencies...
Using rake 13.0.6
Using concurrent-ruby 1.2.0
Using connection_pool 2.3.0
Using minitest 5.17.0
Using builder 3.2.4
Using erubi 1.12.0
Using racc 1.6.2
Using crass 1.0.6
Using rack 3.0.4.1
Using nio4r 2.5.8
Using websocket-extensions 0.1.5
Using zeitwerk 2.6.6
Using marcel 1.0.2
Using mini_mime 1.1.2
Using date 3.3.3
Using timeout 0.3.1
Using bundler 2.4.1
Using thor 1.2.1
Using webrick 1.8.1
Using sqlite3 1.6.0 (arm64-darwin)
Using i18n 1.12.0
Using tzinfo 2.0.6
Using nokogiri 1.14.0 (arm64-darwin)
Using rack-session 2.0.0
Using websocket-driver 0.7.5
Using net-protocol 0.2.1
Using rack-test 2.0.2
Using activesupport 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using loofah 2.19.1
Using net-imap 0.3.4
Using net-pop 0.1.2
Using net-smtp 0.3.3
Using rackup 2.1.0
Using rails-dom-testing 2.0.3
Using rails-html-sanitizer 1.5.0
Using activemodel 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using mail 2.8.0.1
Using globalid 1.1.0
Using actionview 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using activerecord 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using actionpack 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using activejob 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using actioncable 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using railties 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using activestorage 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using actionmailer 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using actionmailbox 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using actiontext 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
Using rails 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)
-- create_table(:posts, {:force=>true})
D, [2023-01-29T08:17:44.598399 #32858] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""posts""
D, [2023-01-29T08:17:44.598584 #32858] DEBUG -- :    (0.1ms)  CREATE TABLE ""posts"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""status"" integer)
   -> 0.0045s
-- create_table(:comments, {:force=>true})
D, [2023-01-29T08:17:44.598686 #32858] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS ""comments""
D, [2023-01-29T08:17:44.598756 #32858] DEBUG -- :    (0.0ms)  CREATE TABLE ""comments"" (""id"" integer PRIMARY KEY AUTOINCREMENT NOT NULL, ""post_id"" integer)
   -> 0.0001s
D, [2023-01-29T08:17:44.599317 #32858] DEBUG -- :    (0.0ms)  CREATE TABLE ""schema_migrations"" (""version"" varchar NOT NULL PRIMARY KEY)
D, [2023-01-29T08:17:44.599833 #32858] DEBUG -- :    (0.0ms)  CREATE TABLE ""ar_internal_metadata"" (""key"" varchar NOT NULL PRIMARY KEY, ""value"" varchar, ""created_at"" datetime(6) NOT NULL, ""updated_at"" datetime(6) NOT NULL)
D, [2023-01-29T08:17:44.607881 #32858] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.6ms)  SELECT * FROM ""ar_internal_metadata"" WHERE ""ar_internal_metadata"".""key"" = ? ORDER BY ""ar_internal_metadata"".""key"" ASC LIMIT 1  [[nil, ""environment""]]
D, [2023-01-29T08:17:44.608046 #32858] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.0ms)  INSERT INTO ""ar_internal_metadata"" (""key"", ""value"", ""created_at"", ""updated_at"") VALUES ('environment', 'development', '2023-01-28 23:17:44.607921', '2023-01-28 23:17:44.607923')
Run options: --seed 3183

# Running:

D, [2023-01-29T08:17:44.627165 #32858] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction
D, [2023-01-29T08:17:44.627216 #32858] DEBUG -- :   Post Create (0.1ms)  INSERT INTO ""posts"" DEFAULT VALUES
D, [2023-01-29T08:17:44.627310 #32858] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction
D, [2023-01-29T08:17:44.632578 #32858] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction
D, [2023-01-29T08:17:44.632635 #32858] DEBUG -- :   Post Update (0.1ms)  UPDATE ""posts"" SET ""status"" = ? WHERE ""posts"".""id"" = ?  [[""status"", 2], [""id"", 1]]
D, [2023-01-29T08:17:44.632850 #32858] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO ""comments"" (""post_id"") VALUES (?)  [[""post_id"", 1]]
D, [2023-01-29T08:17:44.632919 #32858] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO ""comments"" DEFAULT VALUES
D, [2023-01-29T08:17:44.632982 #32858] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction
D, [2023-01-29T08:17:44.637644 #32858] DEBUG -- :   Comment Load (0.0ms)  SELECT ""comments"".* FROM ""comments"" /* loading for pp */ LIMIT ?  [[""LIMIT"", 11]]
[#<Comment:0x000000010b649388 id: 1, post_id: 1>, #<Comment:0x000000010b649108 id: 2, post_id: nil>]
D, [2023-01-29T08:17:44.637970 #32858] DEBUG -- :   Comment Count (0.0ms)  SELECT COUNT(*) FROM ""comments""
F

Failure:
BugTest#test_comment_is_created_only_once [b.rb:51]:
Expected: 1
  Actual: 2


rails test b.rb:46



Finished in 0.013718s, 72.8969 runs/s, 72.8969 assertions/s.
1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
```


### System configuration
**Rails version**: main@0258cc4

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [arm64-darwin21]
"
47152,Suboptimal redirection and CSRF validation behavior when behind multiple reverse proxies,qnighy,stale,2023-01-26T02:58:51Z,2023-05-03T04:40:30Z,2023-05-03T04:40:30Z,"### Steps to reproduce

Full reproduction needs reverse proxy servers; see https://github.com/qnighy/rails-double-proxy-redirection for the configuration. In short:

1. Configure multiple reverse proxies with the following configuration:
  - Set `Host` header to the host/port of the upstream server
  - Append the original `Host` value to the `X-Forwarded-Host` header
2. Try the following:
   - Use `redirect_to` to redirect using paths
   - Issue a POST request to an action with CSRF protection (especially the origin check) enabled

Otherwise, to check the behavior in a minimal way:

```ruby
ActionDispatch::Request.new(
  ""HTTP_HOST"" => ""host1"",
  ""HTTP_X_FORWARDED_HOST"" => ""host3,host2"",
  ""HTTP_X_FORWARDED_SSL"" => ""on""
).base_url
# => ""https://host2""
```

### Expected behavior

- Redirection should point to the host/port that the user sees in the URL bar.
- CSRF validation should pass.

### Actual behavior

- It redirects to the name of one of the reverse proxy servers in the proxy chain.
- CSRF validation erroneously reports request forgery.

### System configuration
**Rails version**: 7.0.4.2

**Ruby version**: 3.2.0

### Additional info

This behavior was introduced in https://github.com/rails/rails/commit/302533b196a2ead2c1bd046b2d9df9cf4f861354 to address the issue reported in [#3397](https://web.archive.org/web/20100618053001/http://dev.rubyonrails.org/ticket/3397). Here the initially proposed patch picked the **first** entry but was later modified to pick the **last** one with the following reasoning:

> This seems more appropriate for proxy hosts that may be doing url rewriting on the way back up the proxy chain.

It refers to e.g. `proxy_redirection` in nginx and reasonable to some degree; after all, this header is just a nonstandard convention (that may someday be superseded by the `Forwarded` header) and the ideal behavior depends on how the reverse proxies are configured.

Nevertheless, I don't think the current behavior is the best default:

- `X-Forwarded-Host` and `Host` concatenated by `,` can be considered a single stack. Then the current behavior can be described as picking the second entry; it does not seem consistent.
- Although redirection can be rewritten on the reverse proxy side, CSRF validation behavior cannot be that easily modified without touching the application.
- If you don't want to trust values of `X-Forwarded-Host`, https://github.com/rails/rails/pull/33145 can be used anyway.
- In fact, Rack [picks the first entry](https://github.com/rack/rack/blob/2.2.4/lib/rack/request.rb#L346); Rails changes the behavior here by overriding `host_with_port`.
"
47135,"has_one multiple assignment, update lost ",montdidier,"activerecord, attached PR",2023-01-25T12:37:18Z,2023-02-07T15:35:45Z,,"### Steps to reproduce

```ruby
#!/usr/bin/env ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  gem ""rails"", '~> 6.1.0'
  gem ""sqlite3""
  gem ""byebug""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :subscriptions do |t|
    t.string :name
  end

  create_table :payment_accounts do |t|
    t.string :name
    t.references :subscription
  end
end

class Subscription < ActiveRecord::Base
  has_one :payment_account, inverse_of: :subscription, dependent: :destroy
end

class PaymentAccount < ActiveRecord::Base
  belongs_to :subscription, inverse_of: :payment_account, optional: true
end

class TestDoubleBackwardsAssigment < Minitest::Test
  def test_double_backward_assignment
    subscription = Subscription.create(name: 'Example subsciption')
    originl_payment_account = PaymentAccount.create(subscription: subscription, name: ""Bob's account"")
    assert_equal ""Bob's account"", subscription.payment_account.name

    new_payment_account = PaymentAccount.new(name: ""Fran's account"")
    new_payment_account.subscription = subscription

    subscription.payment_account = new_payment_account

    subscription.save!

    assert_equal ""Fran's account"", subscription.reload.payment_account.name

    assert_equal 1, PaymentAccount.count
  end
end

```

### Expected behaviour

One would be least surprised to see that Fran's account has been persisted and that there is only one PaymentAccount in the database. The test should show Fran's account as being the associated persisted account and that total PaymentAccounts would be 1.

Upon inspecting the code it appears the problem probably lies in the area of:

`ActiveRecord::Associations::HasOneAssociation#replace`

### Actual behaviour

What seems to be happening is that that the has_one association , when assigned via the inverse belongs_to relationship, that then receives an additional assignment from the front - does not understand that the has_one entity needs to be persisted and that the existing has_one persisted target needs to be deleted. It seem that the unpersisted target is not checked to see if it is a new record and is assumed to have not changed.  I think it should detect the target is unpersisted, respect the last assignment , reload the the target from the db, destroy it and then make the assignment, then persist the new assignment.

It is quite close to doing the right thing. For example there is a check [here](https://github.com/rails/rails/blob/bcc1eb727b368aab7b83077643e7681ef63619ea/activerecord/lib/active_record/associations/has_one_association.rb#L57) where the target could potentially be reloaded but I don't quite understand the logic in `load_target` here with respect to detecting `staleness` or whether the most up-to-date entity is loaded.

### System configuration
**Rails version**: 6.1.7.2
**Ruby version**: 3.0.4
"
47134,ActiveRecord Query replace id with null,metripurari,"activerecord, more-information-needed",2023-01-25T03:55:28Z,2023-02-21T16:05:49Z,2023-02-21T16:05:49Z," Can Some one please Help me ASAP.

Loading development environment (Rails 6.0.6.1)

```
[1] pry(main)> User.where(id: 1)
User Load (43.8ms) SELECT intello.users.* FROM intello.users WHERE intell.users.deleted_at IS NULL AND intello.users.id = NULL
=> []
```

Expected behavior
It Should return a row

Database: Mysql

Gems included by the bundle:

```
actioncable (6.0.6.1)
actionmailbox (6.0.6.1)
actionmailer (6.0.6.1)
actionpack (6.0.6.1)
actiontext (6.0.6.1)
actionview (6.0.6.1)
active_model_serializers (0.10.13)
activejob (6.0.6.1)
activemodel (6.0.6.1)
activerecord (6.0.6.1)
activerecord-import (1.4.1)
activerecord-session_store (2.0.0)
activestorage (6.0.6.1)
activesupport (6.0.6.1)
acts_as_list (1.0.4)
addressable (2.8.1)
airbrake (13.0.3)
airbrake-ruby (6.2.0)
apartment (2.2.1 https://github.com/influitive/apartment/commit/f266f73e58835f94e4ec7c16f28443fe5eada1ac)
ast (2.4.2)
autoprefixer-rails (10.4.7.0)
aws-eventstream (1.2.0)
aws-partitions (1.678.0)
aws-sdk-core (3.169.0)
aws-sdk-kms (1.62.0)
aws-sdk-s3 (1.118.0)
aws-sigv4 (1.5.2)
bcrypt (3.1.18)
bindex (0.8.1)
bootstrap (4.0.0)
bootstrap-datepicker-rails (1.9.0.1)
bootstrap-select-rails (1.13.8)
builder (3.2.4)
bundler (2.3.17)
byebug (11.1.3)
case_transform (0.2)
chartkick (5.0.1)
childprocess (4.1.0)
ci_reporter (2.0.0)
ci_reporter_rspec (1.0.0)
climate_control (0.2.0)
coderay (1.1.3)
concurrent-ruby (1.2.0)
connection_pool (2.3.0)
content_disposition (1.0.0)
counter_culture (3.3.0)
crack (0.4.5)
crass (1.0.6)
database_cleaner (2.0.1)
database_cleaner-active_record (2.0.1)
database_cleaner-core (2.0.1)
date (3.3.1)
devise (4.8.1)
devise-security (0.17.0)
devise_invitable (2.0.7)
diff-lcs (1.5.0)
docile (1.4.0)
dotenv (2.8.1)
dotenv-rails (2.8.1)
down (5.4.0)
erubi (1.12.0)
execjs (2.8.1)
factory_bot (6.2.1)
factory_bot_rails (6.2.0)
ffi (1.14.2)
flag-icons-rails (3.4.6.1)
font-awesome-sass (4.7.0)
globalid (1.0.1)
groupdate (6.1.0)
hashdiff (1.0.1)
httparty (0.21.0)
i18n (1.12.0)
iniparse (1.5.0)
intellocompute (0.1.0 a6be71c)
interception (0.5)
jmespath (1.6.2)
jquery-fileupload-rails (1.0.0)
jquery-rails (4.5.1)
jquery-sparkline-rails (2.1.1 c5b531f)
jquery-ui-rails (6.0.1)
json (2.6.3)
jsonapi-renderer (0.2.2)
jwt (2.6.0)
kaminari (1.2.2)
kaminari-actionview (1.2.2)
kaminari-activerecord (1.2.2)
kaminari-core (1.2.2)
local_time (2.1.0)
lograge (0.12.0)
logstash-event (1.2.02)
logstash-logger (0.26.1)
loofah (2.19.1)
mail (2.8.0.1)
marcel (1.0.2)
method_source (1.0.0)
mime-types (3.4.1)
mime-types-data (3.2022.0105)
mimemagic (0.3.10)
mini_mime (1.1.2)
minitest (5.17.0)
multi_json (1.15.0)
multi_xml (0.6.0)
mustermann (3.0.0)
mysql2 (0.5.5)
net-imap (0.3.4)
net-pop (0.1.2)
net-protocol (0.2.1)
net-smtp (0.3.3)
nio4r (2.5.8)
nokogiri (1.14.0)
orm_adapter (0.5.0)
overcommit (0.60.0)
pace-rails (0.1.3)
paperclip (6.1.0)
parallel (1.22.1)
paranoia (2.6.1)
parser (3.2.0.0)
popper_js (1.16.1)
pretender (0.4.0)
pry (0.14.2)
pry-byebug (3.10.1)
pry-doc (1.4.0)
pry-rails (0.3.9)
pry-rescue (1.5.2)
psych (3.3.4)
public_suffix (5.0.1)
puma (5.6.5)
puma-daemon (0.1.2)
racc (1.6.2)
rack (2.2.6.2)
rack-protection (3.0.4)
rack-test (2.0.2)
rails (6.0.6.1)
rails-dom-testing (2.0.3)
rails-html-sanitizer (1.5.0)
rails-i18n (7.0.6)
railties (6.0.6.1)
rainbow (3.1.1)
rake (13.0.6)
ransack (3.1.0)
rb-fsevent (0.11.2)
rb-inotify (0.10.1)
rbtree3 (0.7.0)
recaptcha (5.12.3)
redis (4.5.1)
regexp_parser (2.6.2)
request_store (1.5.1)
responders (3.0.1)
rexml (3.2.5)
ros-apartment (2.3.0)
rspec (3.12.0)
rspec-core (3.12.0)
rspec-expectations (3.12.2)
rspec-mocks (3.12.3)
rspec-rails (5.1.2)
rspec-sidekiq (3.1.0)
rspec-support (3.12.0)
rspec_junit_formatter (0.6.0)
rubocop (1.44.0)
rubocop-ast (1.24.1)
ruby-progressbar (1.11.0)
ruby2_keywords (0.0.5)
ruby_http_client (3.5.5)
rubyzip (2.3.2)
sass (3.7.4)
sass-listen (4.0.0)
sass-rails (6.0.0)
sassc (2.4.0)
sassc-rails (2.1.2)
sendgrid-actionmailer (3.2.0)
sendgrid-ruby (6.6.2)
sentry-rails (5.7.0)
sentry-ruby (5.7.0)
shrine (3.4.0)
sidekiq (5.2.10)
simplecov (0.22.0)
simplecov-cobertura (2.1.0)
simplecov-html (0.12.3)
simplecov_json_formatter (0.1.4)
sinatra (3.0.4)
slim (5.0.0)
sprockets (4.2.0)
sprockets-rails (3.2.2)
temple (0.10.0)
terrapin (0.6.0)
thor (1.2.1)
thread_safe (0.3.6)
tilt (2.0.11)
timeout (0.3.1)
to_bool (2.0.0)
tzinfo (1.2.10)
uglifier (4.2.0)
unicode-display_width (2.4.2)
vcr (6.1.0)
warden (1.2.9)
web-console (4.2.0)
webmock (3.18.1)
webrick (1.7.0)
websocket-driver (0.7.5)
websocket-extensions (0.1.5)
write_xlsx (1.09.5)
yard (0.9.28)
zeitwerk (2.6.6)
```"
47131,number_to_human_size not returning the expected result,scratchoo,activesupport,2023-01-25T02:22:42Z,2023-01-25T17:52:15Z,2023-01-25T04:17:00Z," I wanted to convert the size of file (which is in bytes) to human readable format

The actual file size is 136535 bytes
that is 133.33 KB (the result I am getting from a Javascript function I am using in the frontend, and also the same result I am getting from online tools like this one https://www.gbmb.org/bytes-to-kb

However in Rails, I am getting only 133 KB without the decimal points.


```ruby
number_to_human_size(136535)  # 133 KB
```

### Expected behavior
Should return 133.33 KB

### Actual behavior
It returns 133 KB

To make the story short, I translated my own JS function to ruby and I started getting 133KB (same result as number_to_human_size), after that the fix was to change this line of my ruby script: 

```
bytes /= 1024
```

to this

```
bytes /= 1024.0
```

I think similar thing is happening with number_to_human_size method

see: https://github.com/rails/rails/blob/18707ab17fa492eb25ad2e8f9818a320dc20b823/activesupport/lib/active_support/number_helper/number_to_human_size_converter.rb#L56

and also this line (which uses ""base"" and make it as int (using to_i)
https://github.com/rails/rails/blob/18707ab17fa492eb25ad2e8f9818a320dc20b823/activesupport/lib/active_support/number_helper/number_to_human_size_converter.rb#L46

without dividing by a float number (1024.to_f) you don't get the correct result.

### System configuration
**Rails version**:  7.0.3.1

**Ruby version**:  3.0.2
"
47125,`COUNT(DISTINCT ..)` using a column name from `arel_table` returns incorrect result against MariaDB,kwojcik,"activerecord, attached PR",2023-01-24T18:04:01Z,2023-01-31T13:03:59Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

Test passes against homebrew MySQL `5.7.40 Homebrew` and fails against MariaDB `5.5.5-10.10.2-MariaDB-1:10.10.2+maria~ubu2204`. MySQL was run using homebrew. MariaDB was run using `docker run --name mariadb -e MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=true -p 3306:3306 -d mariadb`.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""mysql2""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""mysql2"", database: ""bug_test"", user: 'root', host: '127.0.0.1', port: 3306)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :status
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    post.comments << Comment.create!(status: 'a')
    post.comments << Comment.create!(status: 'b')

    expected = {'a' => 1, 'b' => 1}
    assert_equal expected, Comment.group(:status).distinct.count(:post_id)
    assert_equal expected, Comment.group(:status).distinct.count(Comment.arel_table[:post_id])
  end
end
```

### Expected behavior
Both queries should return the same result

### Actual behavior
Using an `arel_table` column name in the `count` clause causes the result to always set the count to `0` on MariaDB.

### System configuration
**Rails version**: `7.0.4.1`

**Ruby version**: `3.1.1`
"
47113,Mysql2AdapterTest#test_warnings_do_not_change_returned_value_of_exec_(update|delete) fails take 2,yahonda,"activerecord, ci issues",2023-01-23T09:35:33Z,2023-01-23T20:21:47Z,2023-01-23T20:21:47Z,"Managed to reproduce CI failure at https://buildkite.com/rails/rails/builds/92889#0185d1ff-66a8-4f0b-9f90-23cd85d340f2/1003-1012

There was a pull request that attempted to fix it, https://github.com/rails/rails/pull/47111, which caused a side effect that fixtures use label references for associations that cannot have explicit `id`. Then Let me open an issue instead.

### Steps to reproduce

```ruby
cd activerecord
ARCONN=mysql2 bin/test test/cases/fixtures_test.rb test/cases/adapters/mysql2/mysql2_adapter_test.rb -n ""/^(?:FixtureWithSetModelClassTest#(?:test_uses_fixture_class_defined_in_yaml)|Mysql2AdapterTest#(?:test_warnings_do_not_change_returned_value_of_exec_delete|test_warnings_do_not_change_returned_value_of_exec_update))$/"" --seed 16542
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ ARCONN=mysql2 bin/test test/cases/fixtures_test.rb test/cases/adapters/mysql2/mysql2_adapter_test.rb -n ""/^(?:FixtureWithSetModelClassTest#(?:test_uses_fixture_class_defined_in_yaml)|Mysql2AdapterTest#(?:test_warnings_do_not_change_returned_value_of_exec_delete|test_warnings_do_not_change_returned_value_of_exec_update))$/"" --seed 16542
Using mysql2
Run options: -n ""/^(?:FixtureWithSetModelClassTest#(?:test_uses_fixture_class_defined_in_yaml)|Mysql2AdapterTest#(?:test_warnings_do_not_change_returned_value_of_exec_delete|test_warnings_do_not_change_returned_value_of_exec_update))$/"" --seed 16542

.F

Failure:
Mysql2AdapterTest#test_warnings_do_not_change_returned_value_of_exec_delete [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/mysql2/mysql2_adapter_test.rb:437]:
Expected: 1
  Actual: 0

bin/test test/cases/adapters/mysql2/mysql2_adapter_test.rb:429

F

Failure:
Mysql2AdapterTest#test_warnings_do_not_change_returned_value_of_exec_update [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/mysql2/mysql2_adapter_test.rb:424]:
Expected: 1
  Actual: 0

bin/test test/cases/adapters/mysql2/mysql2_adapter_test.rb:416

Finished in 0.036244s, 82.7720 runs/s, 82.7720 assertions/s.
3 runs, 3 assertions, 2 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**:ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
47112,test_autosave_new_record_with_after_create_callback_and_habtm_association fails,yahonda,"activerecord, ci issues",2023-01-23T09:28:44Z,2023-01-24T02:21:55Z,2023-01-24T02:21:55Z,"Managed to reproduce this CI failure https://buildkite.com/rails/rails/builds/92938#0185dbb4-82e0-4557-b772-49c439a65a42/1124-1135

### Steps to reproduce
```ruby
cd activerecord
ARCONN=postgresql bin/test test/cases/associations/has_many_through_associations_test.rb test/cases/fixtures_test.rb test/cases/autosave_association_test.rb -n ""/^(?:HasManyThroughAssociationsTest#(?:test_inner_join_with_quoted_table_name)|SetFixtureClassPrevailsTest#(?:test_uses_set_fixture_class)|TestDefaultAutosaveAssociationOnNewRecord#(?:test_autosave_new_record_with_after_create_callback_and_habtm_association))$/"" --seed 2484
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ ARCONN=postgresql bin/test test/cases/associations/has_many_through_associations_test.rb test/cases/fixtures_test.rb test/cases/autosave_association_test.rb -n ""/^(?:HasManyThroughAssociationsTest#(?:test_inner_join_with_quoted_table_name)|SetFixtureClassPrevailsTest#(?:test_uses_set_fixture_class)|TestDefaultAutosaveAssociationOnNewRecord#(?:test_autosave_new_record_with_after_create_callback_and_habtm_association))$/"" --seed 2484
Using postgresql
Run options: -n ""/^(?:HasManyThroughAssociationsTest#(?:test_inner_join_with_quoted_table_name)|SetFixtureClassPrevailsTest#(?:test_uses_set_fixture_class)|TestDefaultAutosaveAssociationOnNewRecord#(?:test_autosave_new_record_with_after_create_callback_and_habtm_association))$/"" --seed 2484

# Running:

..F

Failure:
TestDefaultAutosaveAssociationOnNewRecord#test_autosave_new_record_with_after_create_callback_and_habtm_association [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/autosave_association_test.rb:886]:
Expected: 1
  Actual: 2


bin/test test/cases/autosave_association_test.rb:880



Finished in 0.489444s, 6.1294 runs/s, 6.1294 assertions/s.
3 runs, 3 assertions, 1 failures, 0 errors, 0 skips
$
```
### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
47096,Lowercase headers returned from Sprockets 4.2.0 not caught within Actionpack router,markedmondson,"asset pipeline, attached PR",2023-01-21T01:14:38Z,2023-07-28T20:40:35Z,2023-07-28T20:40:35Z,"### Steps to reproduce
The [Gemlock](https://github.com/rails/rails/blob/main/Gemfile.lock#L454) specifies Sprockets 4.2.0 but this is incompatible with the Actionpack router. In [Sprockets 4.2.0, the returned headers were changes to lowercase to support Rack 3](https://github.com/rails/sprockets/pull/758), the [Actionpack router has case sensitive matching for the `X-Cascade` header](https://github.com/rails/rails/blob/main/actionpack/lib/action_dispatch/journey/router.rb#L52-L57) which means failed routes don't cascade to other potential matches.

Toggle the Sprockets version from 4.2.0 to 4.1.1 below to see the issue.

For a Sprockets application serving from `/assets` and an additional route serving from `/assets/some-path`, the latter should still respond after Sprockets has failed to match the route.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.0.4.1""
  gem ""sprockets"", ""~> 4.2.0""
  gem ""sprockets-rails"", ""~> 3.4.2""
  gem ""capybara""
end

require ""rails""
require ""action_controller/railtie""
require ""action_view/railtie""
require ""sprockets/railtie""

class HelloWorld
  def self.call(env)
    [200, {}, [""hello world""]]
  end
end

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts = []
  config.session_store :cookie_store, key: ""cookie_store_key""
  config.assets.compile = true
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger
end

require 'fileutils'
FileUtils.mkdir_p('app/assets/config/')
FileUtils.touch('app/assets/config/manifest.js')

Rails.application.initialize!

TestApp.routes.draw do
  get ""/assets/test"", to: ::HelloWorld
end

FileUtils.rm('app/assets/config/manifest.js')
FileUtils.rmdir('app/assets/config/')

require ""minitest/autorun""
require 'capybara/rails'
require 'capybara/minitest'

class ActionDispatch::IntegrationTest
  # Make the Capybara DSL available in all integration tests
  include Capybara::DSL
  # Make `assert_*` methods behave like Minitest assertions
  include Capybara::Minitest::Assertions

  # Reset sessions and driver between tests
  teardown do
    Capybara.reset_sessions!
    Capybara.use_default_driver
  end
end

class BugTest < ActionDispatch::IntegrationTest
  def test_assets_route
    visit ""/assets/test""

    assert_equal 200, page.status_code
    assert_content ""hello world""
  end
end
```

### Expected behavior
Both `X-Cascade` and `x-cascade` headers should be matched from Sprockets. 
Alternatively, Sprockets should be locked to 4.1.1 until this is resolved in Rails.

### Actual behavior
X-Cascade header isn't matched and matching routes are missed.

### System configuration
**Rails version**: 7.x & 6.1.x

**Ruby version**: 3.x
"
47084,ActiveRecord storing different datetime values,GlauberrBatista,"activerecord, stale",2023-01-20T16:58:12Z,2023-05-01T18:52:33Z,2023-05-01T18:52:32Z,"### Steps to reproduce
Create a simple rails project with a dummy model with a `datetime` field.
```shell
$ rails new test-date
$ bundle exec rails generate model Dummy date:datetime
$ bundle exec bin/rails db:migrate
```
Open the console and type:
```ruby
irb(main):001:0> obj = Dummy.new
=> #<Dummy:0x0000000121405200 id: nil, date: nil, created_at: nil, updated_at: nil>
irb(main):002:0> value = '05/04/18'.to_datetime
=> Sat, 18 Apr 0005 00:00:00 +0000
irb(main):003:0> obj.date = value
=> Sat, 18 Apr 0005 00:00:00 +0000
irb(main):004:0> value == obj.date
=> false
irb(main):005:0> value
=> Sat, 18 Apr 0005 00:00:00 +0000
irb(main):006:0> obj.date
=> Mon, 18 Apr 0005 00:00:00.000000000 UTC +00:00
irb(main):007:0> value.to_i
=> -62000294400
irb(main):008:0> obj.date.to_i
=> -62000121600
```

### Expected behavior
The model attribute should be equal to the `datetime` object.

### Actual behavior
ActiveRecord is setting a wrong `datetime` value. This happens with ancient dates (I catch it in a test with some old dates). This is not happening to recent dates.

### System configuration
**Rails version**: 7.0.4.1

**Ruby version**: 2.7.6

At first, I thought it was related to the SQL injection fix, but when I uncommented the quoting lines it didn't change the result. 
It seems the culprit is the date gem, which was introduced through the `mail` -> `net-imap` -> `date` gem update. To test it, I copied the old `date 3.0.3` gem I had installed to the `date 3.3.3` folder, and it worked."
47072,ActionText view path not registered in mailer previews,irminsul,"railties, attached PR",2023-01-20T10:38:17Z,2023-01-24T16:22:44Z,2023-01-24T16:22:44Z,"### Steps to reproduce

Create a simple model with a rich text content attribute and a mailer that uses that model:

```ruby
# app/models/blog_post.rb
class BlogPost < ApplicationRecord
  has_rich_text :content

  # This causes a template lookup error in the mailer preview
  validates :content, length: { maximum: 10 }
end

# app/mailers/blog_mailer.rb
class BlogMailer < ApplicationMailer
  def post_published
    mail(to: 'foo@bar.com', subject: 'New blog post')
  end
end

# test/mailers/previews/blog_mailer_preview.rb
class BlogMailerPreview < ActionMailer::Preview
  def blog_post_published
    post = BlogPost.create!(content: 'post content')
    BlogMailer.with(post: post).post_published
  end
end
```

Here's a ready to go repo to illustrate the issue: https://github.com/irminsul/rails7-mailerpreview

Run `rails s` and open http://localhost:3000/rails/mailers/blog_mailer/blog_post_published in a browser.

### Expected behavior
The mailer preview should render without errors.

### Actual behavior

`BlogPost.create!` will run model validations, and attempt to render the rich text attribute with the default content template.

For reasons beyond my current understanding of Rails internals, `$GEM_PATH/gems/actiontext-7.0.4.1/app/views` is not registered as a view path at that point and a `MissingTemplate` error is raised:

```
ActionView::MissingTemplate (Missing partial action_text/contents/_content with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:raw, :erb, :html, :builder, :ruby, :jbuilder]}.

Searched in:
  * ""/home/mz/.asdf/installs/ruby/2.7.6/lib/ruby/gems/2.7.0/gems/actionpack-7.0.4.1/lib/action_dispatch/middleware/templates""
  * ""/home/mz/.asdf/installs/ruby/2.7.6/lib/ruby/gems/2.7.0/gems/railties-7.0.4.1/lib/rails/templates""
```

### System configuration
**Rails version**: 7.0.4.1

**Ruby version**: 2.7.6
"
47071,Active Storage previewable not resized when using proxy mode on storage service local,mbodlund,"attached PR, activestorage",2023-01-20T09:16:27Z,2023-11-24T18:40:11Z,2023-11-24T18:40:11Z,"### Steps to reproduce

Active proxy mode or use rails_storage_proxy_path to generate preview of a video or pdf.
Rails.application.config.active_storage.resolve_model_to_route = :rails_storage_proxy

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
development.rb
config.active_storage.service = :local

active_storage.rb
Rails.application.config.active_storage.resolve_model_to_route = :rails_storage_proxy

In a view
image_tag message.video.preview(resize_to_limit: [100, 100]) 
```


### Expected behavior
An jpg version resized to limit 100x100


### Actual behavior
Returns a jpg version in the same size as the original video (or pdf)

If you turn off rails_storage_proxy it works as expected.


### System configuration
Rails 7.0.4.1
ffmpeg version 5.1.2 (also tried version 3.x and 4.x with the same result)
mutool version 1.20.0

Ruby 3.1.2
"
47064,Mysql2AdapterTest#test_warnings_do_not_change_returned_value_of_exec_(update|delete) fails,yahonda,"activerecord, ci issues",2023-01-20T00:51:21Z,2023-01-20T09:37:48Z,2023-01-20T09:37:48Z,"Managed to reproduce CI failures at https://buildkite.com/rails/rails/builds/92823#0185cbb3-7347-4fcf-ad18-970fe0629d63/1144-1153

### Steps to reproduce

```ruby
cd activerecord
ARCONN=mysql2 bin/test test/cases/fixtures_test.rb test/cases/adapters/mysql2/mysql2_adapter_test.rb -n ""/^(?:SetFixtureClassPrevailsTest#(?:test_uses_set_fixture_class)|Mysql2AdapterTest#(?:test_warnings_do_not_change_returned_value_of_exec_delete|test_warnings_do_not_change_returned_value_of_exec_update))$/"" --seed 42198
```

### Expected behavior
It should pass.

### Actual behavior
```ruby
$ ARCONN=mysql2 bin/test test/cases/fixtures_test.rb test/cases/adapters/mysql2/mysql2_adapter_test.rb -n ""/^(?:SetFixtureClassPrevailsTest#(?:test_uses_set_fixture_class)|Mysql2AdapterTest#(?:test_warnings_do_not_change_returned_value_of_exec_delete|test_warnings_do_not_change_returned_value_of_exec_update))$/"" --seed 42198
Using mysql2
Run options: -n ""/^(?:SetFixtureClassPrevailsTest#(?:test_uses_set_fixture_class)|Mysql2AdapterTest#(?:test_warnings_do_not_change_returned_value_of_exec_delete|test_warnings_do_not_change_returned_value_of_exec_update))$/"" --seed 42198

# Running:

.F

Failure:
Mysql2AdapterTest#test_warnings_do_not_change_returned_value_of_exec_delete [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/mysql2/mysql2_adapter_test.rb:437]:
Expected: 1
  Actual: 0


bin/test test/cases/adapters/mysql2/mysql2_adapter_test.rb:429

F

Failure:
Mysql2AdapterTest#test_warnings_do_not_change_returned_value_of_exec_update [/home/yahonda/src/github.com/rails/rails/activerecord/test/cases/adapters/mysql2/mysql2_adapter_test.rb:424]:
Expected: 1
  Actual: 0


bin/test test/cases/adapters/mysql2/mysql2_adapter_test.rb:416



Finished in 0.044040s, 68.1201 runs/s, 68.1201 assertions/s.
3 runs, 3 assertions, 2 failures, 0 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
47060,Rails guide statement recommending changing `secret_key_base` doesn't give full context of what will be lost,daniel-nelson,"docs, stale, good first issue",2023-01-19T17:19:54Z,2023-07-07T23:55:39Z,2023-07-07T23:55:39Z,"https://github.com/rails/rails/blob/main/guides/source/security.md?plain=1#L118 states ""Changing secret_key_base will expire currently active sessions"", but does not mention other things (e.g. ActionText attachments) that will be affected. Listing all the affected things and linking to instructions on how to rotate each of them gracefully would be helpful."
47059,Unexpected ORDER BY Clause via `has_many :through`,eric-hemasystems,activerecord,2023-01-19T15:34:38Z,2023-05-18T05:51:07Z,2023-05-18T05:51:07Z,"Note. I previously attempted to discuss this issue [in the forums](https://discuss.rubyonrails.org/t/unexpected-order-by-clause-from-has-many-through/82067) but was redirected to post here.

### Steps to reproduce
```ruby
require 'bundler/inline'

gemfile do
 source 'https://rubygems.org'
 gem 'activerecord', require: 'active_record'
 gem 'sqlite3'
 gem 'minitest'
 gem 'minitest-bang', require: 'minitest/bang'
end

require 'minitest/spec'
require 'minitest/autorun'

describe 'has_many :through with order' do
  let!(:widget) { Widget.create! }

  let!(:group1) { Group.create! position: 1, widget: }
  let!(:item1) { Item.create! position: 1, group: group1 }
  let!(:item2) { Item.create! position: 2, group: group1 }

  let!(:group2) { Group.create! position: 2, widget: }
  let!(:item3) { Item.create! position: 1, group: group2 }
  let!(:item4) { Item.create! position: 2, group: group2 }

  it 'should return items sorted by group then within group' do
    # puts widget.items.to_sql
    expect( widget.items.to_a ).must_equal [item1, item2, item3, item4]
  end
end

ActiveRecord::Base.establish_connection adapter: 'sqlite3', database: ':memory:'
ActiveRecord::Migration.verbose = false

ActiveRecord::Schema.define version: 1 do
  create_table :widgets
  create_table :groups do |t|
    t.belongs_to :widget, null: false
    t.integer :position, null: false
  end
  create_table :items do |t|
    t.belongs_to :group, null: false
    t.integer :position, null: false
  end
end

class Widget < ActiveRecord::Base
  has_many :groups, -> { order :position }
  has_many :items, through: :groups
  # has_many :items, -> { order 'groups.position, items.position' }, through: :groups
end

class Group < ActiveRecord::Base
  belongs_to :widget
  has_many :items, -> { order :position }
end

class Item < ActiveRecord::Base
  belongs_to :group
end
```

### Expected behavior

I expected the `ORDER BY` clause to be:

```sql
ORDER BY ""groups"".""position"" ASC, ""items"".""position"" ASC
```

Uncomment the `puts` statement to see the generated SQL statement when running. Swap which `has_many :through` statement is commented out for the work-around that allows my tests to run.

### Actual behavior

The `ORDER BY` clause is:

```sql
ORDER BY ""items"".""position"" ASC, ""groups"".""position"" ASC
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.2.0
"
47055,Cookie domain calculation broken with domain: all after 6.1.7.1 upgrade,ilya-konanykhin,"regression, actionpack",2023-01-19T11:23:00Z,2023-01-26T00:44:29Z,2023-01-24T21:56:40Z,"The recent 6.1.7.1 update changed how `domain: :all` for cookies works and is now handling two letter domains incorrectly: https://github.com/rails/rails/compare/v6.1.7...v6.1.7.1#diff-ec27bb8290189e09e65a52e49641cd7952660dcf237a327311f79ddd65d01eecR457-R462

The REGEXP in the code above grabs ANY `xx(x).xx` host suffix (`example.nl -> le.nl`) and falls into the `else` branch when it shouldn't. I assume there is a leading dot missing `.xx(x).xx`, so the REGEXP should be smth like `/\.([^.]{2,3}\.[^.]{2})$/` but not sure, please check.

Why tests didn't catch it? Because they test with `www.nextangle.com` host which is not affected due to 3 letter `com` ending.

### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 6.1.7""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts = []
  config.session_store :cookie_store, key: ""cookie_store_key""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    cookies[""test""] = {value: ""1"", domain: :all}
    render plain: ""Home""
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_example_org
    get ""http://example.org/""
    assert last_response.ok?
    assert_equal "".example.org"", last_response.cookies[""test""].domain
  end

  def test_www_example_org
    get ""http://www.example.org/""
    assert last_response.ok?
    assert_equal "".example.org"", last_response.cookies[""test""].domain
  end

  def test_example_nl
    get ""http://example.nl/""
    assert last_response.ok?
    assert_equal "".example.nl"", last_response.cookies[""test""].domain
  end

  def test_www_example_nl
    get ""http://www.example.nl/""
    assert last_response.ok?
    assert_equal "".example.nl"", last_response.cookies[""test""].domain
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

`www.example.nl` should yield `.example.nl` cookie domain if used with `domain: :all`.

### Actual behavior

`.www.example.nl` is produced, the last test fails `test_www_example_nl`.



### System configuration
**Rails version**: 6.1.7.1

**Ruby version**: 2.5.1
"
47053,"In env production, ActiveStorage::DiskController#show makes a GET request directly to the file path, which causes a 404",jgauby,activestorage,2023-01-19T09:11:38Z,2023-01-21T00:59:33Z,2023-01-20T12:58:58Z,"In environment production, ActiveStorage::DiskController#show makes a GET request directly to the file path, which causes a 404. No problems in development environment.

### Steps to reproduce

Create an url `mymodel.attachment.url(format: :thumb)` => `/rails/active_storage/disk/eyJfc......fQ==--8b......3fd/kkxihstixvxstupe5w9hcxjfuo4sqcug.png`

Stack trace when I get this url :
```ruby
INFO -- : [082ada62-fd24-433b-b528-a2becbd9e9bc] Started GET ""/rails/active_storage/disk/eyJfc......fQ==--8b......3fd/kkxihstixvxstupe5w9hcxjfuo4sqcug.png"" for [server ip] at 2023-01-19 08:54:06 +0000
DEBUG -- : [082ada62-fd24-433b-b528-a2becbd9e9bc]  User Load (2.6ms)  SELECT ""users"".* FROM ""users"" WHERE ""users"".""deleted_at"" IS NULL AND ""users"".""id"" = $1 LIMIT $2  [[""id"", 1], [""LIMIT"", 1]]
INFO -- : [082ada62-fd24-433b-b528-a2becbd9e9bc] Processing by ActiveStorage::DiskController#show as PNG
INFO -- : [082ada62-fd24-433b-b528-a2becbd9e9bc]  Parameters: {""encoded_key""=>""[FILTERED]"", ""filename""=>""kkxihstixvxstupe5w9hcxjfuo4sqcug""}
INFO -- : [082ada62-fd24-433b-b528-a2becbd9e9bc] Completed 200 OK in 106ms (ActiveRecord: 28.0ms | Allocations: 28605)
INFO -- : [a90fba23-4348-4360-99aa-b14af89bdd08] Started GET ""/app/storage/vg/yn/vgyngi9czu69hxvauhiey4dh6d3x"" for [server ip] at 2023-01-19 08:54:06 +0000
FATAL -- : [a90fba23-4348-4360-99aa-b14af89bdd08] ActionController::RoutingError (No route matches [GET] ""/app/storage/vg/yn/vgyngi9czu69hxvauhiey4dh6d3x""):
```

file config/storage.yml :
```yaml
local:
  service: Disk
  root: <%= Rails.root.join(""storage"") %>
```
(Rails.root is /app)

file config/environment/production.rb :
```ruby
config.active_storage.service = :local
```

### Expected behavior
The file `/app/storage/vg/yn/vgyngi9czu69hxvauhiey4dh6d3x` should be served by `Rack::File` [(see here)](https://github.com/rails/rails/blob/main/activestorage/app/controllers/concerns/active_storage/file_server.rb)

### Actual behavior
A GET request is triggered

### System configuration
**Rails version**: 7.0.4.1

**Ruby version**: 3.1.2
"
47048,Functional Tests documentation needs some updates,siaw23,docs,2023-01-18T11:35:29Z,2023-01-20T01:23:06Z,2023-01-19T09:51:21Z,"I was looking to stub some methods with minitest in a new Rails app. It looks like [this part of the documentation](https://guides.rubyonrails.org/testing.html#instance-variables-available) is out of date.

This bit of the documentation is not true as far as I can tell:

>You also have access to three instance variables in your functional tests, after a request is made:
>
>@controller - The controller processing the request
>@request - The request object
>@response - The response object


### Steps to reproduce
Generate a Rails 7 app, then generate a scaffold, try prying into any `ActionDispatch::IntegrationTest` and accessing `@controller`.

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->


### Expected behavior
I expected to be able to access `@controller`

### Actual behavior
`@controller` is `nil`

### System configuration

Rails 6.1.4.6

ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-darwin22]
"
47047,ActiveStorage::FileNotFoundError due to upload after commit,sbungartz,"docs, activestorage",2023-01-18T10:16:33Z,2023-11-16T05:22:18Z,,"We were getting `ActiveStorage::FileNotFoundError`s spuriously and are fairly confident that this is a race condition in the way ActiveStorage handles uploads and attachment.

### Steps to reproduce
In the [rails guides](https://guides.rubyonrails.org/active_storage_overview.html#has-one-attached), the recommended set up for a controller that attaches a file to a model is as follows:

```ruby
class SignupController < ApplicationController
  def create
    user = User.create!(user_params)
    redirect_to root_path
  end

  private
  def user_params
    params.require(:user).permit(:email_address, :password, :avatar)
  end
end
```

When using this recommended set up Rails will upload the file [_after committing_](https://github.com/rails/rails/blob/18707ab17fa492eb25ad2e8f9818a320dc20b823/activestorage/lib/active_storage/attached/model.rb#L77) the creation and attachment of the `Blob` to the model.
Within the same thread this is not a problem because the hook will obviously wait until the upload is finished and other code runs that might depend on that file.
However since the `Blob` and `Attachment` are already committed in the database, parallel processes like integrations polling for updates, or even just users clicking on the entity at just the wrong moment, will already see the attachment and try to download it causing an `ActiveStorage::FileNotFoundError`.

### Expected behavior
Before the file is actually uploaded, the `User` should not be committed to the database.
For updates, the `Attachment` should not be committed to the database before upload is finished.

### Actual behavior
The new user is committed with the `Blob` attached before the file is uploaded. Other requests or background tasks can find that `User` causing an `ActiveStorage::FileNotFoundError` when they try to download the avatar.

### Our workaround
Rewriting the controller like this solves the problem as the file is uploaded before the change is committed to the database:
_Edit:_ The original version of the workaround that I posted broke presence-validation. With this updated variant, we still just assign `nil` to the `avatar`, if the param is not sent, so displaying form errors still works normally.

```ruby
class SignupController < ApplicationController
  def create
    user = User.new(user_params.except(:avatar)) # Note this change, to avoid creating the attachment twice.
    user.avatar = try_create_and_upload_blob!(user_params.fetch(:avatar, nil))

    user.save!
    redirect_to root_path
  end

  private
  def user_params
    params.require(:user).permit(:email_address, :password, :avatar)
  end

  # This can also be put somewhere as a static method for reuse in different controllers.
  def try_create_and_upload_blob!(uploaded_file)
    return nil if uploaded_file.blank?
    ActiveStorage::Blob.create_and_upload!(
      io: uploaded_file.to_io,
      filename: uploaded_file.original_filename,
    )
  end
end
```

This makes sure, that the file is completely uploaded before the `Blob` is attached to the `User`. Of course this is quite a bit more cumbersome.

### Other considerations
I could also see other problems arising from doing a long upload within a transaction, so I was wondering if this was intentional.

If upload it is really supposed to be happening in the `after_commit`, at least the guide should point out these potential issues and maybe we can even find a way to make uploading before committing less verbose and cumbersome.

### Potentially related issues
These issues might be related:
- #42003
- #39107

### System configuration
**Rails version**: `6.1.6`

**Ruby version**: `3.1.3`"
47045,AppGeneratorTest fails against Bundler 2.4.4 / RubyGems 3.4.4,yahonda,"railties, ci issues",2023-01-18T02:42:05Z,2023-01-22T12:19:36Z,2023-01-22T12:19:36Z,"Managed to reproduce CI failure at https://buildkite.com/rails/rails/builds/92702#0185c033-9a4d-4526-adad-168f50a4a977/1060-1068

This error has been triggered since using newer vesions of Bundler 2.4.4.

### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails/railties
ruby -v
rm ../Gemfile.lock
bundle install
gem -v
bundler -v
bin/test test/generators/app_generator_test.rb -n test_app_update_preserves_skip_action_mailbox
# `1 runs, 2 assertions, 0 failures, 0 errors, 0 skips`

# Updating RubyGems and Bundler version by `gem update --system` it starts failing.

gem update --system
gem -v
bundler -v
rm ../Gemfile.lock
bundle install
bin/test test/generators/app_generator_test.rb -n test_app_update_preserves_skip_action_mailbox
# RuntimeError: Command failed with exit 1: yes | bin/rails app:update
```

### Expected behavior
It should pass.

### Actual behavior

```ruby
$ gem -v
3.4.4
$ bundler -v
Bundler version 2.4.4
$ bin/test test/generators/app_generator_test.rb -n test_app_update_preserves_skip_action_mailbox
... snip warnings ...
Run options: -n test_app_update_preserves_skip_action_mailbox --seed 64492

# Running:

E

Error:
AppGeneratorTest#test_app_update_preserves_skip_action_mailbox:
RuntimeError: Command failed with exit 1: yes | bin/rails app:update
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1140:in `system'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1140:in `block (2 levels) in run_app_update'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:11:in `silence_stream'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:19:in `block in quietly'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:11:in `silence_stream'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/stream.rb:18:in `quietly'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1140:in `block in run_app_update'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1135:in `chdir'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:1135:in `run_app_update'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:259:in `block (2 levels) in test_app_update_preserves_skip_action_mailbox'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/assertions.rb:48:in `assert_nothing_raised'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/assertions.rb:265:in `_assert_nothing_raised_or_warn'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/assertions.rb:241:in `assert_no_changes'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:258:in `block in test_app_update_preserves_skip_action_mailbox'
    /home/yahonda/.rbenv/versions/3.2.0/lib/ruby/3.2.0/fileutils.rb:244:in `chdir'
    /home/yahonda/.rbenv/versions/3.2.0/lib/ruby/3.2.0/fileutils.rb:244:in `cd'
    /home/yahonda/src/github.com/rails/rails/railties/test/generators/app_generator_test.rb:256:in `test_app_update_preserves_skip_action_mailbox'


bin/test test/generators/app_generator_test.rb:253



Finished in 0.221952s, 4.5055 runs/s, 0.0000 assertions/s.
1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
$
```

### System configuration
**Rails version**: main branh
**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
47020,ActionMailbox::IncinerationJobTest#test_ignoring_a_missing_inbound_email fails,yahonda,actionmailbox,2023-01-16T05:48:09Z,2023-02-07T19:59:04Z,2023-02-07T19:59:04Z,"https://github.com/rails/rails/pull/47019 finds `ActionMailbox::IncinerationJobTest#test_ignoring_a_missing_inbound_email` test error.

### Steps to reproduce

```ruby
$ bin/test test/jobs/incineration_job_test.rb
Run options: --seed 43881

# Running:

E

Error:
ActionMailbox::IncinerationJobTest#test_ignoring_a_missing_inbound_email:
ActionMailbox::Router::RoutingError: ActionMailbox::Router::RoutingError
    /home/yahonda/src/github.com/rails/rails/actionmailbox/lib/action_mailbox/router.rb:29:in `route'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/lib/action_mailbox/routing.rb:18:in `route'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/app/models/action_mailbox/inbound_email/routable.rb:22:in `route'
    <internal:kernel>:90:in `tap'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/lib/action_mailbox/test_helper.rb:80:in `receive_inbound_email_from_fixture'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/test/jobs/incineration_job_test.rb:6:in `block in <class:IncinerationJobTest>'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:446:in `instance_exec'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:446:in `block in make_lambda'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:200:in `block (2 levels) in halting'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:705:in `block (2 levels) in default_terminator'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:704:in `catch'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:704:in `block in default_terminator'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:201:in `block in halting'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:596:in `block in invoke_before'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:596:in `each'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:596:in `invoke_before'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:107:in `run_callbacks'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:41:in `before_setup'


bin/test test/jobs/incineration_job_test.rb:8



Finished in 0.109006s, 9.1738 runs/s, 0.0000 assertions/s.
1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
yahonda@myryzen:~/src/github.com/rails/rails/actionmailbox$
```

### Expected behavior
It should pass.

### Actual behavior
It always gets `ActionMailbox::Router::RoutingError`.

```ruby
$ bin/test test/jobs/incineration_job_test.rb
Run options: --seed 43881

# Running:

E

Error:
ActionMailbox::IncinerationJobTest#test_ignoring_a_missing_inbound_email:
ActionMailbox::Router::RoutingError: ActionMailbox::Router::RoutingError
    /home/yahonda/src/github.com/rails/rails/actionmailbox/lib/action_mailbox/router.rb:29:in `route'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/lib/action_mailbox/routing.rb:18:in `route'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/app/models/action_mailbox/inbound_email/routable.rb:22:in `route'
    <internal:kernel>:90:in `tap'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/lib/action_mailbox/test_helper.rb:80:in `receive_inbound_email_from_fixture'
    /home/yahonda/src/github.com/rails/rails/actionmailbox/test/jobs/incineration_job_test.rb:6:in `block in <class:IncinerationJobTest>'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:446:in `instance_exec'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:446:in `block in make_lambda'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:200:in `block (2 levels) in halting'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:705:in `block (2 levels) in default_terminator'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:704:in `catch'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:704:in `block in default_terminator'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:201:in `block in halting'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:596:in `block in invoke_before'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:596:in `each'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:596:in `invoke_before'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/callbacks.rb:107:in `run_callbacks'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:41:in `before_setup'


bin/test test/jobs/incineration_job_test.rb:8



Finished in 0.109006s, 9.1738 runs/s, 0.0000 assertions/s.
1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
47006,`form_with` ignores `inflect.uncountable` with namespaced model,smitssjors,routing,2023-01-13T23:29:26Z,2023-01-18T21:35:30Z,2023-01-18T21:35:29Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
None of the provided test cases included all the aspects but the following commands set up a new project which exhibits the bug.
```bash
rails new bug
cd bug
echo ""ActiveSupport::Inflector.inflections(:en) do |inflect| inflect.uncountable(\""stripe\""); end"" >> config/initializers/inflections.rb
rails g scaffold endpoints/stripe
rails db:migrate
rails s
```
Then head over to `localhost:3000/endpoints/stripe/new`

### Expected behavior
<!-- Tell us what should happen -->
Rails can properly render the form with the action pointing to `endpoints_stripe_path`

### Actual behavior
<!-- Tell us what happens instead -->
Rails throws an `ActionView::Template::Error (undefined method 'endpoints_stripes_path' for #<ActionView::Base:0x000000000099e8>`

A workaround is adding `inflect.uncountable(""endpoints_stripe"")` or `inflect.plural(""stripe"", ""stripe"")` before the original call to `inflect.uncountable(""stripe"")`

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.0.2
"
47003,Passing a String to travel_to results in different time in Rails 7,JasonBarnabe,activesupport,2023-01-13T19:10:50Z,2023-01-14T17:42:21Z,2023-01-14T17:42:21Z,"### Steps to reproduce

App is configured with `config.time_zone = 'Eastern Time (US & Canada)'`. System time zone is `America/Winnipeg (CST, -0600)`.

```ruby
include ActiveSupport::Testing::TimeHelpers

puts ""Current time: #{Time.now} in zone #{Time.zone} with dst? #{Time.now.dst?}""
puts ""Traveling to '2023-01-01'""
travel_to('2023-01-01') { puts ""Current time: #{Time.now} in zone #{Time.zone} with dst? #{Time.now.dst?}"" }
puts ""Traveling to Time.new(2023, 1, 1)""
travel_to(Time.new(2023, 1, 1)) { puts ""Current time: #{Time.now} in zone #{Time.zone} with dst? #{Time.now.dst?}"" }
```

### Expected behavior

`travel_to('2023-01-01')` actually sets the time to Jan 1 2023 in the configured time zone. This works in Rails 6.1.7.

```
Current time: 2023-01-13 13:06:12 -0600 in zone (GMT-05:00) Eastern Time (US & Canada) with dst? false
Traveling to '2023-01-01'
Current time: 2023-01-01 00:00:00 -0600 in zone (GMT-05:00) Eastern Time (US & Canada) with dst? false
Traveling to Time.new(2023, 1, 1)
Current time: 2023-01-01 00:00:00 -0600 in zone (GMT-05:00) Eastern Time (US & Canada) with dst? false
```

### Actual behavior

In Rails 7.0.4, `travel_to('2023-01-01')` goes to Dec 31 2022 11PM. `travel_to(Time.new(2023, 1, 1))` works as expected.

```
Current time: 2023-01-13 13:07:23 -0600 in zone (GMT-05:00) Eastern Time (US & Canada) with dst? false
Traveling to '2023-01-01'
Current time: 2022-12-31 23:00:00 -0600 in zone (GMT-05:00) Eastern Time (US & Canada) with dst? false
Traveling to Time.new(2023, 1, 1)
Current time: 2023-01-01 00:00:00 -0600 in zone (GMT-05:00) Eastern Time (US & Canada) with dst? false
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 2.7.6p219"
46983,`after_commit` callbacks run in the wrong order,ghiculescu,activerecord,2023-01-12T22:16:32Z,2023-01-12T22:23:22Z,2023-01-12T22:23:22Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts
end

class Post < ActiveRecord::Base
  before_create :before_create_one
  before_create :before_create_two

  after_create :after_create_one
  after_create :after_create_two

  after_commit :after_commit_one, on: :create
  after_commit :after_commit_two, on: :create

  before_commit :before_commit_one, on: :create
  before_commit :before_commit_two, on: :create

  def before_create_one
    puts ""before_create_one""
  end
  def before_create_two
    puts ""before_create_two""
  end

  def after_create_one
    puts ""after_create_one""
  end
  def after_create_two
    puts ""after_create_two""
  end

  def after_commit_one
    puts ""after_commit_one""
  end
  def after_commit_two
    puts ""after_commit_two""
  end

  def before_commit_one
    puts ""before_commit_one""
  end
  def before_commit_two
    puts ""before_commit_two""
  end
end

class BugTest < Minitest::Test
  def test_association_stuff
    Post.create!
  end
end

```

### Expected behavior

For every callback type, the `_one` callback should run before the `_two` callback.

### Actual behavior

```
before_create_one
before_create_two
D, [2023-01-12T15:15:28.727473 #68445] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction
D, [2023-01-12T15:15:28.727589 #68445] DEBUG -- :   Post Create (0.2ms)  INSERT INTO ""posts"" DEFAULT VALUES
after_create_one
after_create_two
before_commit_one
before_commit_two
D, [2023-01-12T15:15:28.727811 #68445] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction
after_commit_two
after_commit_one
```

Every type is correct except `after_commit`.

As a workaround, I can do this, to get the callbacks to run in the order I want (but not in the order the code suggests):

```ruby
  after_commit :after_commit_one, on: :create
  after_commit :after_commit_two, on: :create, prepend: true
```

### System configuration
**Rails version**: `main`

**Ruby version**: 3.1.3
"
46959,[ActiveRecord] Allow alias_attributes in includes() and joins(),OskarEichler,activerecord,2023-01-11T14:35:25Z,2023-01-12T20:55:40Z,2023-01-12T20:55:40Z,"As far as I can tell it is currently not possible to use alias_attributes for .includes() and .joins() in ActiveRecord.

Here is an example:

```
class Artist
  has_many :tracks
  alias_attribute :songs, :tracks
end
```

When performing the following query everything works fine:
`Artist.includes(:tracks).last`

However when using the alias_attribute it gives an error:
`Artist.includes(:songs).last`

--> ActiveRecord::AssociationNotFoundError: Association named 'songs' was not found on Artist; perhaps you misspelled it?

It would be great if ActiveRecord could recognize the alias_attributes and replace them when generating the query!"
46952,ActionCable: FE Disconnection Reason,DosCervezas,actioncable,2023-01-10T15:16:38Z,2023-02-03T22:26:37Z,2023-02-03T22:26:36Z,"Sorry for breaking your issue pattern but I thought it would be a bit of overkill for my simple issue.

### Expected behavior
I would like to specify a specific disconnect reasons, that the FE could catch and react on it.
Therefore I defined Standard error handled it in the handle_open method

>     class Connection < ActionCable::Connection::Base
>     ...
>     def handle_open
>       super
>     rescue MultiConnectionError => exception
>       close(reason: exception.message, reconnect: false) if websocket.alive?
>     end
>     ...
>     end

It works like a charm, the message is broadcasted to the FE

![image](https://user-images.githubusercontent.com/43810807/211588531-2902441f-5180-4ab5-a47b-2f0cfa98dca5.png)

But I cannot catch the reason.. after debugging I found the culprit

The reason is not passed to the close of the websocket
![image](https://user-images.githubusercontent.com/43810807/211588759-22e30d67-9870-4fc9-b792-94368f37445b.png)

### Actual behavior
I would like to catch the reason, why the connection is disconnected. Of course I could do it on the serverside but the reason seems to me a valid other approach.

### System configuration
**Rails version**:
Rails 7.0.4
""@rails/actioncable"": ""^7.0.4""

**Ruby version**:
ruby 3.1.2p20"
46945,MigrationTest#test_internal_metadata_stores_environment_when_migration_fails fails,yahonda,"activerecord, ci issues",2023-01-10T07:41:40Z,2023-01-10T14:07:46Z,2023-01-10T14:07:46Z,"Managed to reproduce https://buildkite.com/rails/rails/builds/92292#01858ed2-5dbd-467f-b467-2836c1175530

### Steps to reproduce

```ruby
git clone https://github.com/rails/rails
cd rails
rm Gemfile.lock
bundle install
cd activerecord
bin/test test/cases/tasks/database_tasks_test.rb test/cases/migration_test.rb -n ""/^(?:ActiveRecord::DatabaseTasksCheckProtectedEnvironmentsMultiDatabaseTest#(?:test_with_multiple_databases)|MigrationTest#(?:test_internal_metadata_stores_environment_when_migration_fails))$/"" --seed 25489

```

### Expected behavior
It should pass.

### Actual behavior
It gets `ActiveRecord::StatementInvalid: SQLite3::SQLException: no such table: ar_internal_metadata`.

```ruby
$ bin/test test/cases/tasks/database_tasks_test.rb test/cases/migration_test.rb -n ""/^(?:ActiveRecord::DatabaseTasksCheckProtectedEnvironmentsMultiDatabaseTest#(?:test_with_multiple_databases)|MigrationTest#(?:test_internal_metadata_stores_environment_when_migration_fails))$/"" --seed 25489
Using sqlite3
Run options: -n ""/^(?:ActiveRecord::DatabaseTasksCheckProtectedEnvironmentsMultiDatabaseTest#(?:test_with_multiple_databases)|MigrationTest#(?:test_internal_metadata_stores_environment_when_migration_fails))$/"" --seed 25489

# Running:

.E

Error:
MigrationTest#test_internal_metadata_stores_environment_when_migration_fails:
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such table: ar_internal_metadata
    /home/yahonda/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sqlite3-1.5.4/lib/sqlite3/database.rb:152:in `initialize'
    /home/yahonda/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sqlite3-1.5.4/lib/sqlite3/database.rb:152:in `new'
    /home/yahonda/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sqlite3-1.5.4/lib/sqlite3/database.rb:152:in `prepare'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:48:in `block (2 levels) in exec_query'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:989:in `block in with_raw_connection'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/concurrency/null_lock.rb:9:in `synchronize'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:961:in `with_raw_connection'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:45:in `block in exec_query'
    /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1102:in `log'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:44:in `exec_query'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:72:in `exec_delete'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:186:in `delete'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:22:in `delete'
    /home/yahonda/src/github.com/rails/rails/activerecord/lib/active_record/internal_metadata.rb:56:in `delete_all_entries'
    /home/yahonda/src/github.com/rails/rails/activerecord/test/cases/migration_test.rb:701:in `test_internal_metadata_stores_environment_when_migration_fails'


bin/test test/cases/migration_test.rb:700



Finished in 0.199499s, 10.0251 runs/s, 20.0502 assertions/s.
2 runs, 4 assertions, 0 failures, 1 errors, 0 skips
$
```

### System configuration
**Rails version**: main branch

**Ruby version**: ruby 3.2.0 (2022-12-25 revision a528908271) [x86_64-linux]
"
46935,schema cache does not work properly with postgres virtual columns,netrusov,activerecord,2023-01-09T13:12:01Z,2023-04-20T16:23:03Z,2023-01-09T23:23:54Z,"sample project: https://github.com/netrusov/rails-schema-cache-issue/tree/master

### Steps to reproduce

create project from scratch
```shell script
rails new dummy -d postgresql -M -C -A -J -T --api
```

add migration
```ruby
class CreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      t.text :first_name
      t.text :last_name
      t.virtual :full_name, type: :text, as: ""first_name || ' ' || last_name"", stored: true

      t.timestamps
    end
  end
end
```

after migration the `db/schema.rb` should contain valid schema
```ruby
ActiveRecord::Schema[7.0].define(version: 2023_01_09_121035) do
  create_table ""users"", force: :cascade do |t|
    t.text ""first_name""
    t.text ""last_name""
    t.virtual ""full_name"", type: :text, as: ""((first_name || ' '::text) || last_name)"", stored: true
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end
end
```

dump schema cache and then dump schema again (note that this must be done in separate commands)
```shell script
bin/rails db:schema:cache:dump
bin/rails db:schema:dump
```

### Expected behavior

`db/schema.rb` must remain the same

### Actual behavior

`db/schema.rb` contains wrong info about virtual columns
```ruby
ActiveRecord::Schema[7.0].define(version: 2023_01_09_121035) do
  create_table ""users"", force: :cascade do |t|
    t.text ""first_name""
    t.text ""last_name""
    t.text ""full_name"", default: -> { ""((first_name || ' '::text) || last_name)"" } # <--- HERE
    t.datetime ""created_at"", null: false
    t.datetime ""updated_at"", null: false
  end
end
```

and `PG::FeatureNotSupported` error occurs while trying to apply schema
```
$ bin/rails db:reset
Ignoring db/schema_cache.yml because it has expired. The current schema version is 0, but the one in the schema cache file is 20230109121035.
Dropped database 'dummy_development'
Dropped database 'dummy_test'
Created database 'dummy_development'
Created database 'dummy_test'
rails aborted!
ActiveRecord::StatementInvalid: PG::FeatureNotSupported: ERROR:  cannot use column reference in DEFAULT expression
LINE 1: ...ext, ""last_name"" text, ""full_name"" text DEFAULT ((first_name...
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.2.0
"
46892,Group by using a joined table column with the same name as a enum column fails,harishchronus,"activerecord, attached PR",2023-01-05T02:42:06Z,2023-01-08T19:07:09Z,2023-01-08T19:07:09Z,"### Steps to reproduce
```ruby
class Customer < ActiveRecord::Base
  enum status %i[active slipping lost recovered]
  has_many :purchases
end

class Purchase < ActiveRecord::Base
  belongs_to :customer
  status :string
end
```
`purchases` table

| id | customer_id | status |
| :-: |       :------:     |    :-:    |
| 1 | 1 | shipped |
| 2 | 1 | shipped |
| 3 | 2 | delivered |
| 4 | 2 | returned |
| 5 | 1 | delivered |


### Expected behavior
```
Customer.joins(:purchases).group(""purchases.status"").count

{ ""shipped"" => 2, ""delivered"" => 2, ""returned"" => 1 }
```

### Actual behavior
```
{ nil => 5 }
```

### System configuration
**Rails version**:
6.1.7
**Ruby version**:
2.7"
46889,change_table alters default precision for datetime columns,jamesarosen,activerecord,2023-01-04T21:06:31Z,2023-01-07T16:50:01Z,2023-01-07T16:50:01Z,"### Steps to reproduce
Create one or more migrations that use (A) `create_table` or `add_column` and (B) `change_table` to add `datetime` columns:

```rb
class TestPrecision < ActiveRecord::Migration[7.0]
  def change
    create_table :precision_tests do |t|
      t.string :name, null: false, index: { unique: true }
      t.datetime :dt_via_create_table
      t.timestamps
    end

    add_column :precision_tests, :dt_via_add_column, :datetime

    change_table :precision_tests, bulk: true do |t|
      t.column :dt_via_change_table, :datetime
    end
  end
end
```

Possibly related to #44358

### Expected behavior
Rails should generate the same (default) precision for all three columns.

### Actual behavior
Rails generates default precision for `dt_via_create_table` and `dt_via_add_column`, but `precision: nil` for `dt_via_change_table`. This difference appears in the `schema.rb`:

```rb
create_table ""precision_tests"", force: :cascade do |t|
  t.string ""name"", null: false
  t.datetime ""dt_via_create_table""
  t.datetime ""created_at"", null: false
  t.datetime ""updated_at"", null: false
  t.datetime ""dt_via_add_column""
  t.datetime ""dt_via_change_table"", precision: nil
  t.index [""name""], name: ""index_precision_tests_on_name"", unique: true
end
```

and in the database:
```
# \d precision_tests
                                              Table ""public.precision_tests""
       Column        |              Type              | Collation | Nullable |                   Default
---------------------+--------------------------------+-----------+----------+---------------------------------------------
 id                  | bigint                         |           | not null | nextval('precision_tests_id_seq'::regclass)
 name                | character varying              |           | not null |
 dt_via_create_table | timestamp(6) without time zone |           |          |
 created_at          | timestamp(6) without time zone |           | not null |
 updated_at          | timestamp(6) without time zone |           | not null |
 dt_via_add_column   | timestamp(6) without time zone |           |          |
 dt_via_change_table | timestamp without time zone    |           |          |
Indexes:
    ""precision_tests_pkey"" PRIMARY KEY, btree (id)
    ""index_precision_tests_on_name"" UNIQUE, btree (name)
```

### System configuration
**Rails version**: 7.0.2

**Ruby version**: ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [aarch64-linux-musl]

**PostgreSQL version**: PostgreSQL 14.4 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 11.2.1_git20220219) 11.2.1 20220219, 64-bi"
46885,Querying deterministically encrypted fields possible using CLI or IDE,jdescelliers,activerecord,2023-01-04T12:36:02Z,2023-01-08T22:41:39Z,2023-01-08T22:41:39Z,"Hi

While i think it’s a great idea to have Activerecord being able to encrypt data it’s also essential to be able to query a database.

So is there any way to be able to run raw SQL queries on encrypted fields? What are the best practices when needing to extract data? Get a dump of the db locally and decrypt fields?


Please take the time to answer this, it may be worth to document this clearly."
46884,`rails credentials:show` ignores the configured key_path for the master key,Fjan,"railties, attached PR",2023-01-04T11:53:40Z,2023-01-25T22:27:54Z,2023-01-25T22:27:54Z,"### Steps to reproduce

Move the Rails master key to a non-standard location, for example

```ruby
class Application < Rails::Application
  config.credentials.key_path = '/etc/rails-master.key'
  puts ""Non-standard path configured""
end
```

### Expected behavior
`rails server` works and picks up the key from the new location as expected.
`rails credentials:show` should also look in the new location.

### Actual behavior
`rails server` works fine.
`rails credentials:show` reads the configuration but doesn't seem to use it:
```
Non-standard path configured
Missing 'config/master.key' to decrypt credentials. See `bin/rails credentials:help`
```


### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1.2
"
46883,ActionMailer fails on rails 6.1.6.1 and ruby 3.2,javiyu,actionmailer,2023-01-04T10:55:21Z,2023-01-05T15:08:00Z,2023-01-04T19:22:23Z,"### Steps to reproduce
When I try to execute a mailer that accepts kwargs

```ruby
SomeMailer.notify(user: user).deliver_now
```
I get the following error.

```
ArgumentError: wrong number of arguments (given 1, expected 0; required keyword: user)
```
The same code was working on ruby 3.1. I have debugged the code and if I monkey patch the app with the following snippet the error goes away.

```ruby
ActionMailer::Base.class_eval do
  ruby2_keywords :process
end

ActionView::Rendering.class_eval do
  def process(...)
    old_config, I18n.config = I18n.config, ActionView::I18nProxy.new(I18n.config, lookup_context)
    super
  ensure
    I18n.config = old_config
  end
end

ActionMailer::Rescuable.class_eval do
  def process(...)
    handle_exceptions do
      super
    end
  end
end

AbstractController::Callbacks.class_eval do
  def process_action(...)
    run_callbacks(:process_action) do
      super
    end
  end
end

AbstractController::Base.class_eval do
  ruby2_keywords(:process)

  def process_action(...)
    send_action(...)
  end
end
```

I don't have a lot of time right now to create the tests scenarios, if adding just the patch is enough I can open a PR myself.

### Expected behavior
The call should succeed.

### Actual behavior
The call fails and raises the following error:

```
ArgumentError: wrong number of arguments (given 1, expected 0; required keyword: user)
```

### System configuration
**Rails version**: 6.1.6.1
**Ruby version**: 3.2.0
"
46882,ActionCable subscription problem (possibly Redis related),gmhz,more-information-needed,2023-01-04T07:42:47Z,2023-01-20T15:51:14Z,2023-01-20T15:51:14Z,"### Steps to reproduce
Running the app in production:
Ubuntu 20.04
via systemd services, commands are:
- RAILS_ENV=production bundle exec puma -w 2 -t 5:5
- RAILS_ENV=production bundle exec anycable --log-level=fatal
- RAILS_ENV=production bundle exec sidekiq -c 7


<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
action cable is used for driver location updates (every 10-20 milliseconds), which are inserted into Redis.
```

### Expected behavior
no error in the console, and action cable subscription gets confirmations

### Actual behavior
This error happens once or twice
```
#<Thread:0x000055bf26978840 /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/subscription_adapter/redis.rb:150 run> terminated with exception (report_on_exception is true):
/usr/share/rvm/gems/ruby-2.7.2/gems/redis-5.0.5/lib/redis/subscribe.rb:52:in `subscription': ERR Protocol error: too big inline request (Redis::CommandError)
	from /usr/share/rvm/gems/ruby-2.7.2/gems/redis-5.0.5/lib/redis/subscribe.rb:17:in `subscribe'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/redis-5.0.5/lib/redis.rb:188:in `_subscription'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/redis-5.0.5/lib/redis/commands/pubsub.rb:17:in `subscribe'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/subscription_adapter/redis.rb:83:in `block in listen'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/redis-client-0.11.2/lib/redis_client.rb:641:in `ensure_connected'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/redis-5.0.5/lib/redis/client.rb:104:in `disable_reconnection'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/redis-5.0.5/lib/redis.rb:79:in `without_reconnect'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/subscription_adapter/redis.rb:80:in `listen'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/subscription_adapter/redis.rb:154:in `block in ensure_listener_running'
```
and plenty of these errors in the console
```
#<Thread:0x00007fb470573358 /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/connection/stream_event_loop.rb:75 run> terminated with exception (report_on_exception is true):
/usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/connection/stream_event_loop.rb:31:in `block in attach': can't add a new key into hash during iteration (RuntimeError)
	from /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/connection/stream_event_loop.rb:93:in `block in run'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/connection/stream_event_loop.rb:86:in `loop'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/connection/stream_event_loop.rb:86:in `run'
	from /usr/share/rvm/gems/ruby-2.7.2/gems/actioncable-7.0.4/lib/action_cable/connection/stream_event_loop.rb:75:in `block (2 levels) in spawn'
```

Browser behavior:  there's only one _confirm_subscription_, expected 3 of them, and without confirmation, there's no streaming data.
```
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel1\""}""}	70
10:15:15.222
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	73
10:15:15.222
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel3\""}""}	79
10:15:15.222
{""identifier"":""{\""channel\"":\""Channel3\""}"",""type"":""confirm_subscription""}	84
10:15:15.320
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	76
10:15:15.724
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel1\""}""}	70
10:15:15.724
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	73
10:15:15.724
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel3\""}""}	79
10:15:15.724
{""type"":""ping"",""message"":1672816515}	36
10:15:15.873
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	76
10:15:16.231
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel1\""}""}	70
10:15:16.232
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	73
10:15:16.232
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel3\""}""}	79
10:15:16.232
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	76
10:15:16.744
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel1\""}""}	70
10:15:16.745
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	73
10:15:16.745
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel3\""}""}	79
10:15:16.745
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	76
10:15:17.255
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel1\""}""}	70
10:15:17.255
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	73
10:15:17.255
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel3\""}""}	79
10:15:17.255
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	76
10:15:17.766
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel1\""}""}	70
10:15:17.766
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel2\""}""}	73
10:15:17.767
{""command"":""subscribe"",""identifier"":""{\""channel\"":\""Channel3\""}""}
```

redis-cli info gives:
```
# Server
redis_version:7.0.6
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:6fb48e98d145b7a2
redis_mode:standalone
os:Linux 5.4.0-135-generic x86_64
arch_bits:64
monotonic_clock:POSIX clock_gettime
multiplexing_api:epoll
atomicvar_api:c11-builtin
gcc_version:9.4.0
process_id:697
process_supervised:systemd
run_id:dd359779a33f78f5a70912534df6d739fda8af7c
tcp_port:6379
server_time_usec:1672818063080079
uptime_in_seconds:64211
uptime_in_days:0
hz:10
configured_hz:10
lru_clock:11873679
executable:/usr/bin/redis-server
config_file:/etc/redis/redis.conf
io_threads_active:0

# Clients
connected_clients:30
cluster_connections:0
maxclients:10000
client_recent_max_input_buffer:57344
client_recent_max_output_buffer:0
blocked_clients:7
tracking_clients:0
clients_in_timeout_table:7

# Memory
used_memory:2759648
used_memory_human:2.63M
used_memory_rss:8806400
used_memory_rss_human:8.40M
used_memory_peak:2885528
used_memory_peak_human:2.75M
used_memory_peak_perc:95.64%
used_memory_overhead:1342902
used_memory_startup:862192
used_memory_dataset:1416746
used_memory_dataset_perc:74.67%
allocator_allocated:2756344
allocator_active:3309568
allocator_resident:5902336
total_system_memory:4122689536
total_system_memory_human:3.84G
used_memory_lua:35840
used_memory_vm_eval:35840
used_memory_lua_human:35.00K
used_memory_scripts_eval:312
number_of_cached_scripts:1
number_of_functions:0
number_of_libraries:0
used_memory_vm_functions:32768
used_memory_vm_total:68608
used_memory_vm_total_human:67.00K
used_memory_functions:184
used_memory_scripts:496
used_memory_scripts_human:496B
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
allocator_frag_ratio:1.20
allocator_frag_bytes:553224
allocator_rss_ratio:1.78
allocator_rss_bytes:2592768
rss_overhead_ratio:1.49
rss_overhead_bytes:2904064
mem_fragmentation_ratio:3.24
mem_fragmentation_bytes:6086624
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_total_replication_buffers:0
mem_clients_slaves:0
mem_clients_normal:419454
mem_cluster_links:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.2.1
active_defrag_running:0
lazyfree_pending_objects:0
lazyfreed_objects:0

# Persistence
loading:0
async_loading:0
current_cow_peak:0
current_cow_size:0
current_cow_size_age:0
current_fork_perc:0.00
current_save_keys_processed:0
current_save_keys_total:0
rdb_changes_since_last_save:2144
rdb_bgsave_in_progress:0
rdb_last_save_time:1672817965
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:0
rdb_current_bgsave_time_sec:-1
rdb_saves:213
rdb_last_cow_size:782336
rdb_last_load_keys_expired:0
rdb_last_load_keys_loaded:965
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_rewrites:0
aof_rewrites_consecutive_failures:0
aof_last_write_status:ok
aof_last_cow_size:0
module_fork_in_progress:0
module_fork_last_cow_size:0

# Stats
total_connections_received:240
total_commands_processed:4037159
instantaneous_ops_per_sec:74
total_net_input_bytes:822317248
total_net_output_bytes:688241177
total_net_repl_input_bytes:0
total_net_repl_output_bytes:0
instantaneous_input_kbps:14.89
instantaneous_output_kbps:12.46
instantaneous_input_repl_kbps:0.00
instantaneous_output_repl_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:883
expired_stale_perc:0.00
expired_time_cap_reached_count:0
expire_cycle_cpu_milliseconds:4347
evicted_keys:0
evicted_clients:0
total_eviction_exceeded_time:0
current_eviction_exceeded_time:0
keyspace_hits:931055
keyspace_misses:52906
pubsub_channels:47
pubsub_patterns:0
pubsubshard_channels:0
latest_fork_usec:597
total_forks:213
migrate_cached_sockets:0
slave_expires_tracked_keys:0
active_defrag_hits:0
active_defrag_misses:0
active_defrag_key_hits:0
active_defrag_key_misses:0
total_active_defrag_time:0
current_active_defrag_time:0
tracking_total_keys:0
tracking_total_items:0
tracking_total_prefixes:0
unexpected_error_replies:0
total_error_replies:10
dump_payload_sanitizations:0
total_reads_processed:3953374
total_writes_processed:4855195
io_threaded_reads_processed:0
io_threaded_writes_processed:0
reply_buffer_shrinks:2119
reply_buffer_expands:2035

# Replication
role:master
connected_slaves:0
master_failover_state:no-failover
master_replid:dee07bfacc1019120627692fbfd302be9fa916b6
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0

# CPU
used_cpu_sys:484.049083
used_cpu_user:273.063061
used_cpu_sys_children:0.614614
used_cpu_user_children:0.668754
used_cpu_sys_main_thread:483.820213
used_cpu_user_main_thread:272.991556

# Modules

# Errorstats
errorstat_ERR:count=10

# Cluster
cluster_enabled:0

# Keyspace
db0:keys=879,expires=384,avg_ttl=3322471832
```

### System configuration
**Rails version**:
Rails 7.0.4,
actioncable-7.0.4

**Ruby version**:
ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]"
46869,Rails logs a 200 even if Rack::ConditionalGet has replaced it with a 304,matteoredz,"actionpack, attached PR, With reproduction steps",2023-01-02T17:58:04Z,2023-05-19T07:57:39Z,,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# Create a new Rails api_only application and run it.
rails new my_api --api

# Make an HTTP call, I'm using HTTPie here.
http -h get http://localhost:3000

# Get the ETag header from the response
# and submit again the same request with the `If-None-Match` header.
http -h get http://localhost:3000 'If-None-Match:W/""cda84c1039ef9b25d5aed03568965293""'
```

### Expected behavior
The `Rack::ConditionalGet` replaces the 200 with a 304 and `Rails` logs the 304

### Actual behavior
The `Rack::ConditionalGet` replaces the 200 with a 304 but `Rails` still logs the 200

```shell
Started GET ""/"" for ::1 at 2023-01-02 18:52:50 +0100
Processing by Rails::WelcomeController#index as */*
Completed 200 OK in 0ms (Views: 0.2ms | ActiveRecord: 0.0ms | Allocations: 213)
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1.2
"
46854,number_with_precision() helper failing to round float,dachdecker,more-information-needed,2022-12-29T21:47:19Z,2022-12-30T19:20:40Z,2022-12-30T19:20:40Z,"The below snippit works fine in rails 5.2.3 but fails under rails 6.1. Placing this snippit in any view of a rails app:

```
			<% thing = 50.09 %>
			<% puts thing %>
			<% puts thing.respond_to?(:to_i) %>
			<% puts thing.class %>	
			<% puts BigDecimal(thing.to_s).round(1) %>
			<% puts number_with_precision(thing, precision: 1) %> #works in rails 5.2.3, fails in 6.1
```

### Expected behavior
Should successfully return 50.1 (as does in rails 5.2.3):
```
Rendering main/index.html.erb within layouts/application
50.09
true
Float
50.1
50.1
```

### Actual behavior
Fails with type error: no implicit conversion of String into Integer
![image](https://user-images.githubusercontent.com/13346757/210013824-76f110f8-d74a-4640-bf04-efe06cf3f35a.png)


### System configuration
**Rails version**: 6.1.0

**Ruby version**: 2.7.7





























"
46841,Rails.logger.level for production in docs is wrong,woto,"docs, good first issue",2022-12-27T22:15:24Z,2022-12-30T18:27:01Z,2022-12-30T18:27:01Z,"Hi, was surprised by this line which has already existed for 8 years. Am I doing something wrong or docs are lying?
The default log level for `production` is `info`. For `development` and `test` is `debug`. You can check this yourself.

https://edgeguides.rubyonrails.org/debugging_rails_applications.html#log-levels
https://github.com/rails/rails/blame/afbde03801104e4d56dac736043f47f141a91d3e/guides/source/debugging_rails_applications.md?plain=1#L146

```ruby
(base) ➜  foo git:(main) ✗ RAILS_ENV=production ./bin/rails c
Loading production environment (Rails 7.0.4)
irb(main):001:0> Rails.logger.level
=> 1
irb(main):002:0> 
(base) ➜  foo git:(main) ✗ ./bin/rails c               
Loading development environment (Rails 7.0.4)
irb(main):001:0> Rails.logger.level
=> 0
irb(main):002:0> 
(base) ➜  foo git:(main) ✗ RAILS_ENV=test ./bin/rails c      
Loading test environment (Rails 7.0.4)
irb(main):001:0> Rails.logger.level
=> 0
```

Cheers"
46834,Migrating after a DB reset changes the active storage foreign keys in the schema from bigint to integer,gsmendoza,"activerecord, attached PR",2022-12-27T06:43:51Z,2023-01-07T07:03:27Z,2023-01-06T15:30:05Z,"### Steps to reproduce

1. Create a Rails 7.0.4 app.
2. Run `bin/rails active_storage:install` to generate a migration that creates the active storage tables (https://edgeguides.rubyonrails.org/active_storage_overview.html#setup).
3. Run `rails db:migrate` to migrate the db and generate the DB schema.
3. Run `rails db:reset`.
4. Run `rails db:migrate` again.

### Expected behavior

I should see no changes to the app's database schema.

### Actual behavior

Running `rails db:migrate` after the database reset changes the `schema.rb`:

```diff
$ git diff HEAD
diff --git a/db/schema.rb b/db/schema.rb
index 72828ed..07d88a6 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -33,8 +33,8 @@ ActiveRecord::Schema[7.0].define(version: 2022_12_15_070245) do
   create_table ""active_storage_attachments"", force: :cascade do |t|
     t.string ""name"", null: false
     t.string ""record_type"", null: false
-    t.bigint ""record_id"", null: false
-    t.bigint ""blob_id"", null: false
+    t.integer ""record_id"", null: false
+    t.integer ""blob_id"", null: false
     t.datetime ""created_at"", null: false
     t.index [""blob_id""], name: ""index_active_storage_attachments_on_blob_id""
     t.index [""record_type"", ""record_id"", ""name"", ""blob_id""], name: ""index_active_storage_attachments_uniqueness"", unique: true
@@ -53,7 +53,7 @@ ActiveRecord::Schema[7.0].define(version: 2022_12_15_070245) do
   end

   create_table ""active_storage_variant_records"", force: :cascade do |t|
-    t.bigint ""blob_id"", null: false
+    t.integer ""blob_id"", null: false
     t.string ""variation_digest"", null: false
     t.index [""blob_id"", ""variation_digest""], name: ""index_active_storage_variant_records_uniqueness"", unique: true
   end
```

### System configuration

**Rails version**: 7.0.4
**Ruby version**: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
**Database**: sqlite3 (3.37.2)
**OS**: `Pop!_OS 22.04 LTS`

### Background

I first reported this issue at https://github.com/solidusio/solidus/issues/4787.
"
46828,There was an error parsing `Gemfile`: `windows` is not a valid platform,dorianmariefr,third party issue,2022-12-26T09:36:21Z,2023-01-02T14:04:36Z,2023-01-02T14:04:36Z,"### Steps to reproduce

- `git clone https://github.com/rails/rails`
- `cd rails`
- `asdf install` (or any other way to install ruby 2.7.4 as specified in the .ruby-version file)
- `bundle`

### Expected behavior

Installs the dependencies

### Actual behavior

```
[!] There was an error parsing `Gemfile`: `windows` is not a valid platform. The available options are: [:ruby, :ruby_18, :ruby_19, :ruby_20, :ruby_21, :ruby_22, :ruby_23, :ruby_24, :ruby_25, :ruby_26, :mri, :mri_18, :mri_19, :mri_20, :mri_21, :mri_22, :mri_23, :mri_24, :mri_25, :mri_26, :rbx, :truffleruby, :jruby, :jruby_18, :jruby_19, :mswin, :mswin_18, :mswin_19, :mswin_20, :mswin_21, :mswin_22, :mswin_23, :mswin_24, :mswin_25, :mswin_26, :mswin64, :mswin64_19, :mswin64_20, :mswin64_21, :mswin64_22, :mswin64_23, :mswin64_24, :mswin64_25, :mswin64_26, :mingw, :mingw_18, :mingw_19, :mingw_20, :mingw_21, :mingw_22, :mingw_23, :mingw_24, :mingw_25, :mingw_26, :x64_mingw, :x64_mingw_20, :x64_mingw_21, :x64_mingw_22, :x64_mingw_23, :x64_mingw_24, :x64_mingw_25, :x64_mingw_26]. Bundler cannot continue.

 #  from /Users/dorianmariefr/src/rails/Gemfile:137
 #  -------------------------------------------
 #  platforms :ruby, :windows do
 >    gem ""nokogiri"", "">= 1.8.1"", ""!= 1.11.0""
 #  
 #  -------------------------------------------
```

### System configuration
**Rails version**: main 5908b7deda7993a6214d1def923a74f7111b9bcc
**Ruby version**: `ruby 2.7.4p191 (2021-07-07 revision a21a3b7d23) [arm64-darwin22]`
"
46822,Unexpected routes in console using app.,woto,railties,2022-12-25T12:41:48Z,2023-10-17T16:59:18Z,,"### Steps to reproduce
```ruby
irb(main):013:0> host = ""https://host.ru:443""
=> ""https://host.ru:443""

irb(main):014:0> Rails.application.routes.url_helpers.tests_url(host: host)
=> ""https://host.ru/tests""

irb(main):015:0> app.tests_url(host: host)
=> ""http://host.ru:443/tests""

irb(main):016:0> 
irb(main):017:0> 

irb(main):018:0> host = ""https://host.ru:443/""
=> ""https://host.ru:443/""

irb(main):019:0> Rails.application.routes.url_helpers.tests_url(host: host)
=> ""https://host.ru/tests""

irb(main):020:0> app.tests_url(host: host)
=> ""http://host.ru/tests""

```

### Expected behavior
In all cases I expect that output will be `https://host.ru/tests`

### Actual behavior
Unexpected results built with `app.` are `http://host.ru:443/tests` and `http://host.ru/tests`

### System configuration
**Rails version**:
7.0.4

**Ruby version**:
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]

Cheers!"
46820,"Parallel test databases are truncated before each run, but non-parallel test databases are not",ghiculescu,activerecord,2022-12-24T16:21:03Z,2023-02-09T20:32:13Z,2023-01-05T04:18:24Z,"### Steps to reproduce

Repro here: https://github.com/ghiculescu/parallel-tests-repro. The key bits are as follows.

In the [test helper](https://github.com/ghiculescu/parallel-tests-repro/blob/main/test/test_helper.rb):

```ruby
parallelize(workers: :number_of_processors, threshold: 2)

# Load some data in the test database before tests run.
# We don't use fixtures for this because it's a huge static dataset.
# A good example might be loading data from the countries gem or something like that.
# We don't do this in `setup` because it is slow. We want to just do it once (per database), before all tests.
10.times {|n| User.create!(name: ""User #{n}"") }
```

The [test](https://github.com/ghiculescu/parallel-tests-repro/blob/main/test/models/user_test.rb):

```ruby
test ""static data is created in test_helper.rb"" do
  assert_equal 10, User.count
end
```

This just confirms that the static data was successfully loaded and is available to the test.

### Expected behavior

I expect the test to pass if you run in singular or in parallel.

```
rails db:reset test # run tests in singular, should pass
PARALLEL_WORKERS=2 rails db:reset test # run tests in parallel, should pass
```

### Actual behavior

Running not in parallel passes.

Running in parallel fails.

```
PARALLEL_WORKERS=2 rails db:reset test
Dropped database 'db/development.sqlite3'
Dropped database 'db/test.sqlite3'
Created database 'db/development.sqlite3'
Created database 'db/test.sqlite3'
Running 1 tests in parallel using 2 processes
Run options: --seed 10094

# Running:

F

Failure:
UserTest#test_static_data_is_created_in_test_helper.rb_-_0
Expected: 10
  Actual: 0
```

It is failing because

https://github.com/rails/rails/blob/40a1f3ae24b297cddcfca06332fe113faf2ab52f/activerecord/lib/active_record/test_databases.rb#L8

calls

https://github.com/rails/rails/blob/40a1f3ae24b297cddcfca06332fe113faf2ab52f/activerecord/lib/active_record/tasks/database_tasks.rb#L389

which truncates all tables. The equivalent does not happen if you aren't running in parallel.

I tried commenting out that line, and all tests still passed, but I assumed there's a reason for it (though I can't think of one...) so wanted to make an issue for discussion first.

### System configuration
**Rails version**: `main`

**Ruby version**: 3.2
"
46809,Deterministically encrypted attributes do not support joins for queries with `support_unencrypted_data`,ezekg,attached PR,2022-12-23T20:58:13Z,2023-02-07T15:40:16Z,,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Encryption.configure(
  primary_key: SecureRandom.alphanumeric(32),
  deterministic_key: SecureRandom.alphanumeric(32),
  key_derivation_salt: SecureRandom.alphanumeric(32),
  support_unencrypted_data: true,
)

ActiveRecord::Encryption::ExtendedDeterministicQueries.install_support

ActiveRecord::Schema.define do
  create_table :users, force: true do |t|
    t.string :email
  end

  create_table :posts, force: true do |t|
    t.references :user
  end
end

class User < ActiveRecord::Base
  encrypts :email, deterministic: true

  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :user

  scope :by_user, -> email { joins(:user).where(users: { email: }) }
end

class BugTest < Minitest::Test
  def test_encrypted_join_on_deterministically_encrypted_attributes
    user = User.create!(email: ""user@test.example"")
    post = Post.create!(user:)

    assert_includes Post.by_user(user.email), post
  end

  def test_unencrypted_join_on_deterministically_encrypted_attributes
    user = ActiveRecord::Encryption.without_encryption { User.create!(email: ""user@test.example"") }
    post = Post.create!(user:)

    assert_includes Post.by_user(user.email), post
  end
end
```

### Expected behavior

When joining an association on an encrypted attribute with an unencrypted value, when `support_unencrypted_data` is enabled, I would expect to be able to join on the deterministically encrypted attributes.

I would expect AR to produce a query using `IN`:

```sql
SELECT ""posts"".* FROM ""posts"" INNER JOIN ""users"" ON ""users"".""id"" = ""posts"".""user_id"" WHERE ""users"".""email"" IN ('{""p"":""PEwzUcqZSnt+OyndCbySB1Q="",""h"":{""iv"":""AYWjFGhQ2JM4gRCc"",""at"":""ZpbYXFfPirsF7Ew7JW5Sbw==""}}', 'user@test.example')
```

### Actual behavior

The query does not use `IN`. AR joins on the encrypted value only, instead of both the encrypted and unencrypted values:

```sql
SELECT ""posts"".* FROM ""posts"" INNER JOIN ""users"" ON ""users"".""id"" = ""posts"".""user_id"" WHERE ""users"".""email"" = '{""p"":""PEwzUcqZSnt+OyndCbySB1Q="",""h"":{""iv"":""AYWjFGhQ2JM4gRCc"",""at"":""ZpbYXFfPirsF7Ew7JW5Sbw==""}}'
```

Similar issue to #46788.

### System configuration

**Rails version**: `7.0.4`

**Ruby version**: `ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-darwin19]`
"
46806,"ActiveStorage::MirrorJob always uses the default service, even if overridden via `has_*_attached ..., service: :another_service`",jnimety,"attached PR, activestorage",2022-12-23T18:56:11Z,2023-01-04T03:42:53Z,,"I ran into this when trying to migrate all of my attached from local storage to s3. After setting up mirroring and running `ActiveStorage::Blob.find_each &:mirror_later` I was surprised to find all of my attachments in the default storage service, even if a different service had been specified via `has_*_attached ..., service: ...`

I think the culprit is here:

https://github.com/rails/rails/blob/a7902034089e8b6bff747c08d93eeac4b1377032/activestorage/app/jobs/active_storage/mirror_job.rb#L13

`ActiveStorage::Blob.service` the default service. The other jobs pass `blob` to perform... Is there any reason not to pass `blob` here as well, and use `blob.service` instead of `ActiveStorage::Blob.service`?

If that's acceptable I'm happy to submit a PR. Thanks!
"
46804,`ActionText::SystemTestHelper`’s tests don’t run in CI,georgeclaghorn,"ci issues, actiontext",2022-12-23T16:42:09Z,2023-01-14T21:44:37Z,2023-01-13T21:52:50Z,"When I added `ActionText::SystemTestHelper` and its tests, I had a to-do to add the tests to CI. I never got around to it. They need a full system testing setup with Chrome, Chromedriver, and Selenium.

Several breaking `ActionText::SystemTestHelper` changes have been submitted in recent years and some of them have been merged. See #46803."
46797,Active Job async adapter may use connections without a lease,georgeclaghorn,"activejob, pinned",2022-12-23T04:15:25Z,2023-10-27T03:40:46Z,,"On latest main, tests for an application of mine reliably stall locally and in CI. Sometimes warnings like the following are printed:

```
WARNING:  there is already a transaction in progress
message type 0x43 arrived from server while idle
message type 0x5a arrived from server while idle
```

Environment:
* The app uses a single Postgres DB and AR’s Postgres adapter.

* It uses RSpec and FactoryBot, not Minitest or AR fixtures.
  
  ```
  rspec-core (3.12.0)
    rspec-support (~> 3.12.0)
  rspec-expectations (3.12.0)
    diff-lcs (>= 1.2.0, < 2.0)
    rspec-support (~> 3.12.0)
  rspec-mocks (3.12.0)
    diff-lcs (>= 1.2.0, < 2.0)
    rspec-support (~> 3.12.0)
  rspec-rails (6.0.1)
    actionpack (>= 6.1)
    activesupport (>= 6.1)
    railties (>= 6.1)
    rspec-core (~> 3.11)
    rspec-expectations (~> 3.11)
    rspec-mocks (~> 3.11)
    rspec-support (~> 3.11)
  rspec-support (3.12.0)
  ```
 
* It’s on Ruby 3.1.3.

A `git bisect` pointed to 1a2ca1920c62abdd08c809df1fa98fe0acf14bc3 (cc @byroot). That change does seem relevant, but I haven’t been able to reproduce the issue in a minimal app yet. I’ve tried with both Minitest and RSpec.

The tests usually stall in around the same place with the same seed, but not *exactly* the same place. And I looked at two stalled runs with different seeds that didn’t run any common tests before their stalls.

This has been difficult to pin down so far but I will keep looking."
46785,`synchronize': can't be called from trap context (ThreadError),aaronjensen,more-information-needed,2022-12-21T11:13:55Z,2023-04-11T03:01:15Z,2023-04-11T03:01:15Z,"### Steps to reproduce
I reported this to https://github.com/guard/listen/issues/565 as well, in case the fix needs to be there.

Use:

```rb
  config.file_watcher = ActiveSupport::EventedFileUpdateChecker
```

And puma as your web server. The warning happens randomly, but when it does you will see:

```
my-app/gems/ruby/3.1.0/gems/actionview-7.0.4/lib/action_view/helpers/tag_helper.rb:189: warning: Exception in finalizer #<Proc:0x000000010852fb80 my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/evented_file_update_checker.rb:91>
my-app/gems/ruby/3.1.0/gems/listen-3.7.1/lib/listen/fsm.rb:80:in `synchronize': can't be called from trap context (ThreadError)
        from my-app/gems/ruby/3.1.0/gems/listen-3.7.1/lib/listen/fsm.rb:80:in `transition!'
        from my-app/gems/ruby/3.1.0/gems/listen-3.7.1/lib/listen/fsm.rb:104:in `transition_with_callbacks!'
        from my-app/gems/ruby/3.1.0/gems/listen-3.7.1/lib/listen/fsm.rb:72:in `transition'
        from my-app/gems/ruby/3.1.0/gems/listen-3.7.1/lib/listen/listener.rb:103:in `stop'
        from my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/evented_file_update_checker.rb:111:in `stop'
        from my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/evented_file_update_checker.rb:92:in `block in finalizer'
       ... additional unrelated application stacktrace ...
```

It appears to be `action_view/cache_expiry` that is being finalized (the below is the `caller` of `initialize` that I store to print again in the finalizer.

```
my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/evented_file_update_checker.rb:45:in `new'
my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/evented_file_update_checker.rb:45:in `initialize'
my-app/gems/ruby/3.1.0/gems/actionview-7.0.4/lib/action_view/cache_expiry.rb:48:in `new'
my-app/gems/ruby/3.1.0/gems/actionview-7.0.4/lib/action_view/cache_expiry.rb:48:in `block in execute_if_updated'
my-app/gems/ruby/3.1.0/gems/actionview-7.0.4/lib/action_view/cache_expiry.rb:42:in `synchronize'
my-app/gems/ruby/3.1.0/gems/actionview-7.0.4/lib/action_view/cache_expiry.rb:42:in `execute_if_updated'
my-app/gems/ruby/3.1.0/gems/actionview-7.0.4/lib/action_view/cache_expiry.rb:15:in `block in run'
my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'
my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'
my-app/gems/ruby/3.1.0/gems/actionview-7.0.4/lib/action_view/cache_expiry.rb:14:in `run'
my-app/gems/ruby/3.1.0/gems/activesupport-7.0.4/lib/active_support/execution_wrapper.rb:29:in `before'
```


### Expected behavior
No warning, it seems like stopping listen in a finalizer is error prone because those may run in traps.

### Actual behavior
The warning

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1.2
"
46784,"raw_post being empty for ""Transfer-Encoding: chunked""",tooooooooomy,actionpack,2022-12-21T03:15:15Z,2023-03-12T02:42:51Z,2023-03-12T02:42:05Z,"`raw_post` of chunked request is empty. I would like to open a feature request to handle chunked request by action pack.
I found the same issue was raised by @hahmed and he sent [the PR to fix it](https://github.com/rails/rails/pull/37423) but was closed at that time.
The reason why the PR closed is the problem was solved with Puma by adding CONTENT_LENGTH request header at the Puma layer by [this PR](https://github.com/puma/puma/pull/2287).
However, the same problem still happens with unicorn, thin and webrick at least.
It is helpful to us application developers if this problem would be taken care by rails so that we won't have to check neither the request is chunked nor which rack http server is used.

### Steps to reproduce
I prepared environments to reproduce the problem via docker. Please download it and follow the instruction of README.
https://github.com/kazu9su/rails-experiment

### Expected behavior
If the chunked request is sent to the rails server, application can read the `raw_post` with any rack http server.

### Actual behavior
We can access to the request body with `raw_post` with only the rack http server which buffers the request body upfront like Puma.

* Reproduced the problem with...
  * Puma 4.3.3(The version before [Content-Length change](https://github.com/puma/puma/pull/2287) was merged)
  * Unicorn 6.1.0
  * Thin 1.8.1
  * Webrick 1.7.0"
46779,Deprecation error when calling `sum` on objects that can be summed,ghiculescu,activesupport,2022-12-20T02:43:18Z,2023-01-17T20:51:26Z,2023-01-17T20:51:26Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""active_support""
require ""active_support/all""
require ""minitest/autorun""

class Money
  attr_reader :value

  def initialize(value)
    @value = value
  end

  def +(other)
    Money.new(value + other.value)
  end

 def coerce(other)
   [Money.new(other), self]
 end

  def ==(other)
    other.value == value
  end
end

class BugTest < ActiveSupport::TestCase
  def test_stuff
    assert_equal Money.new(3), [Money.new(1), Money.new(2)].sum
  end
end
```

### Expected behavior

Deprecation warning:

```
DEPRECATION WARNING: Rails 7.0 has deprecated Enumerable.sum in favor of Ruby's native implementation available since 2.4. Sum of non-numeric elements requires an initial argument. (called from test_stuff)
```

### Actual behavior

No warning.

I don't expect a warning, because the relevant code works outside a Rails context fine. Because the Money class (which is based on [this gem](https://github.com/Shopify/money)) has a `coerce` method it is already able to handle being added to other numerics, and so the native implementation works correctly even without an initial argument.

Here is proof the code works with no Rails, and no warnings:

<details>
<summary>Rails-free executable test case</summary>

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""minitest""
end

require ""minitest/autorun""

class Money
  attr_reader :value

  def initialize(value)
    @value = value
  end

  def +(other)
    Money.new(value + other.value)
  end

 def coerce(other)
   [Money.new(other), self]
 end

  def ==(other)
    other.value == value
  end
end

class BugTest < Minitest::Test
  def test_stuff
    assert_equal Money.new(3), [Money.new(1), Money.new(2)].sum # deprecation warning here
  end
end
```

</details>

The discussion in https://github.com/rails/rails/pull/41669 also discussed Money objects.

I am not sure exactly which code paths will get removed in 7.1 as a result of https://github.com/rails/rails/pull/42080 - it's possible this will get fixed as part of the deprecated code being removed.

So I guess the question is, is it worth trying to fix the logic for the deprecation warning between now and 7.1?


### System configuration
**Rails version**: `main`

**Ruby version**: 3.1.3
"
46770,N+1 issue when listing attachement and variants,paul-bonnel-fr,"attached PR, activestorage",2022-12-19T14:37:36Z,2023-09-11T23:49:24Z,2023-06-29T19:28:08Z,"### Steps to reproduce

```
  config.active_storage.service = :amazon
  config.active_storage.track_variants = true
```

```
    object.users.with_attached_thumbnail.each do |item|
      if item.thumbnail.present?
        puts item.thumbnail.variant(resize: ""196x196^"").processed.key
      end
    end

```

### Expected behavior
This code should only perform 1 SQL request. 

### Actual behavior
This code perform 1 SQL request et 3 others SQL request per thumbnail. 

```
 SELECT ""active_storage_variant_records"".* FROM ""active_storage_variant_records"" WHERE ""active_storage_variant_records"".""blob_id"" = $1 AND ""active_storage_variant_records"".""variation_digest"" = $2 LIMIT $3  [[""blob_id"", 52291], [""variation_digest"", ""IUN7MbalQqmLKbMoWq8RDR0hgdI=""], [""LIMIT"", 1]]

ctiveStorage::Attachment Load (0.2ms)  SELECT ""active_storage_attachments"".* FROM ""active_storage_attachments"" WHERE ""active_storage_attachments"".""record_id"" = $1 AND ""active_storage_attachments"".""record_type"" = $2 AND ""active_storage_attachments"".""name"" = $3 LIMIT $4  [[""record_id"", 20412], [""record_type"", ""ActiveStorage::VariantRecord""], [""name"", ""image""], [""LIMIT"", 1]]

ActiveStorage::Blob Load (0.3ms)  SELECT ""active_storage_blobs"".* FROM ""active_storage_blobs"" WHERE ""active_storage_blobs"".""id"" = $1 LIMIT $2  [[""id"", 52292], [""LIMIT"", 1]]

```


### System configuration
**Rails version**:  7.0.4

**Ruby version**: 3.1.2
"
46764,Rest api documentation #documentation,G33kNoob,"docs, good first issue",2022-12-18T08:48:34Z,2023-02-18T21:19:57Z,2023-02-18T21:19:57Z,"https://guides.rubyonrails.org/api_app.html#what-is-an-api-application-questionmark

I read the API documentation but seem very confused, I hope I can see the documentation about creating simple restapi and authenticator in the doc. 
"
46758,Incorrectly raising on Readonly Attributes for belongs_to associations,ghiculescu,"activerecord, attached PR",2022-12-17T03:45:13Z,2023-01-03T18:03:35Z,2023-01-03T18:03:35Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""debug""
  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :authors, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.references :author
  end
end

ActiveRecord.raise_on_assign_to_attr_readonly = true

class Post < ActiveRecord::Base
  has_many :comments
end

class Author < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
  belongs_to :author

  attr_readonly :post_id
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create!
    author = Author.create!

    comment = Comment.create!(post: post)
    comment.update(author: author) # 💥, this line raises
  end
end

```

### Expected behavior
Test should complete with no errors.

### Actual behavior
```
ActiveRecord::ReadonlyAttributeError: post_id
```

Related to https://github.com/rails/rails/pull/46105

It's crashing here: https://github.com/rails/rails/blob/40b1c608728278264057cfa2df919ef3d734c125/activerecord/lib/active_record/autosave_association.rb#L504

`@updated` is set to true here: https://github.com/rails/rails/blob/40b1c608728278264057cfa2df919ef3d734c125/activerecord/lib/active_record/associations/belongs_to_association.rb#L88, this happens when the object is initialized and isn't reset when the save completes.

### System configuration
**Rails version**: `main`

**Ruby version**: 3.1.3
"
46741,Use `File.absolute_path?` instead of `Pathname`,voxik,good first issue,2022-12-15T18:18:14Z,2023-01-07T18:05:34Z,2023-01-07T18:05:34Z,"Not exactly sure what is the reason, but recently, AR test suite started to fail on Fedora. The error looks like:

~~~
... snip ...

...................S...................................................................................................................................................................................................................................................................................................................................................[12965, #<Thread:0xf7e21da8 run>, #<MockExpectationError: mocked method :call called with unexpected arguments [""/usr/lib/gems/ruby/racc-1.6.1"", ""gem.build_complete""]>, [""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/mock.rb:201:in `method_missing'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/mock.rb:300:in `block in stub'"", ""/usr/share/rubygems/rubygems/basic_specification.rb:50:in `gem_build_complete_path'"", ""/usr/share/rubygems/rubygems/specification.rb:2174:in `missing_extensions?'"", ""/usr/share/rubygems/rubygems/basic_specification.rb:75:in `contains_requirable_file?'"", ""/usr/share/rubygems/rubygems/specification.rb:1058:in `block in find_in_unresolved'"", ""/usr/share/rubygems/rubygems/specification.rb:1058:in `each'"", ""/usr/share/rubygems/rubygems/specification.rb:1058:in `find_all'"", ""/usr/share/rubygems/rubygems/specification.rb:1058:in `find_in_unresolved'"", ""<internal:/usr/share/rubygems/rubygems/core_ext/kernel_require.rb>:101:in `require'"", ""/usr/share/gems/gems/zeitwerk-2.5.4/lib/zeitwerk/kernel.rb:35:in `require'"", ""/builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb:25:in `drop'"", ""/builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/lib/active_record/tasks/database_tasks.rb:224:in `drop'"", ""/builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/test/cases/tasks/sqlite_rake_test.rb:113:in `block (3 levels) in test_generates_absolute_path_with_given_root'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/mock.rb:317:in `stub'"", ""/usr/share/gems/gems/activesupport-7.0.4/lib/active_support/testing/method_call_assertions.rb:24:in `assert_called_with'"", ""/builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/test/cases/tasks/sqlite_rake_test.rb:110:in `block (2 levels) in test_generates_absolute_path_with_given_root'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/mock.rb:317:in `stub'"", ""/builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/test/cases/tasks/sqlite_rake_test.rb:109:in `block in test_generates_absolute_path_with_given_root'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/mock.rb:317:in `stub'"", ""/builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/test/cases/tasks/sqlite_rake_test.rb:108:in `test_generates_absolute_path_with_given_root'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/test.rb:98:in `block (3 levels) in run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/test.rb:195:in `capture_exceptions'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/test.rb:95:in `block (2 levels) in run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:296:in `time_it'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/test.rb:94:in `block in run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:391:in `on_signal'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/test.rb:243:in `with_info_handler'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest/test.rb:93:in `run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:365:in `run_one_method'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:352:in `block (2 levels) in run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:351:in `each'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:351:in `block in run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:391:in `on_signal'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:378:in `with_info_handler'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:350:in `run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:182:in `block in __run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:182:in `map'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:182:in `__run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:159:in `run'"", ""/usr/share/gems/gems/minitest-5.16.3/lib/minitest.rb:83:in `block in autorun'""]]
E.............................................................................................................................................................................S..........................................................................................................................................................................
Finished in 164.554320s, 46.3920 runs/s, 151.5974 assertions/s.
  1) Error:
ActiveRecord::SqliteDBDropTest#test_generates_absolute_path_with_given_root:
RuntimeError: CRITICAL: RUBYGEMS_ACTIVATION_MONITOR.owned?: before false -> after true
    <internal:/usr/share/rubygems/rubygems/core_ext/kernel_require.rb>:167:in `ensure in require'
    <internal:/usr/share/rubygems/rubygems/core_ext/kernel_require.rb>:167:in `require'
    /usr/share/gems/gems/zeitwerk-2.5.4/lib/zeitwerk/kernel.rb:35:in `require'
    /builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb:25:in `drop'
    /builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/lib/active_record/tasks/database_tasks.rb:224:in `drop'
    /builddir/build/BUILD/activerecord-7.0.4/usr/share/gems/gems/activerecord-7.0.4/test/cases/tasks/sqlite_rake_test.rb:113:in `block (3 levels) in test_generates_absolute_path_with_given_root'
7634 runs, 24946 assertions, 0 failures, 1 errors, 19 skips
~~~

The problem is, that for whatever reason, the `pathname` library is required here and the `require` fails (although the `pathname` is already loaded, this is surprising):

https://github.com/rails/rails/blob/532294b39f4436b4e427e5213738071b49f5e030/activerecord/lib/active_record/tasks/sqlite_database_tasks.rb#L22-L30

In any case, I don't think it is wise to call `require` at the same time when the `Pathname.new` is stubbed here:

https://github.com/rails/rails/blob/2da863e0c380ef6bb9ddbd223a301554feb6a40e/activerecord/test/cases/tasks/sqlite_rake_test.rb#L107-L117

Moreover, the usage and loading of `Pathname` seems to be complete overkill, when the code could look like:

~~~patch
diff --git a/activerecord/lib/active_record/tasks/sqlite_database_tasks.rb b/activerecord/lib/active_record/tasks/sqlite_database_tasks.rb
index 84d429b16d..3cdaf54ce7 100644
--- a/activerecord/lib/active_record/tasks/sqlite_database_tasks.rb
+++ b/activerecord/lib/active_record/tasks/sqlite_database_tasks.rb
@@ -22,9 +22,7 @@ def create
       end
 
       def drop
-        require ""pathname""
-        path = Pathname.new(db_config.database)
-        file = path.absolute? ? path.to_s : File.join(root, path)
+        file = File.absolute_path? db_config.database ? db_config.database : File.join(root, db_config.database)
 
         FileUtils.rm(file)
       rescue Errno::ENOENT => error
~~~

So is there chance to make the code and the associated test case simpler?"
46734,zeitwerk_integration_test.rb fails against yjit-enabled Ruby 3.2.0dev ,yahonda,"railties, ci issues",2022-12-15T02:50:17Z,2022-12-15T23:41:45Z,2022-12-15T23:41:44Z,"### Steps to reproduce

Install YJIT enabled Ruby 3.2.0dev

```ruby
git clone https://github.com/rails/rails
cd rails/railties
bundle install
bundle exec ruby --yjit -w -Itest -Ilib -I../activesupport/lib -I../actionpack/lib -I../actionview/lib -I../activemodel/lib test/application/zeitwerk_integration_test.rb
```

### Expected behavior
It should pass as without `--yjit` option

```ruby
$ bundle exec ruby -w -Itest -Ilib -I../activesupport/lib -I../actionpack/lib -I../actionview/lib -I../activemodel/lib test/application/zeitwerk_integration_test.rb
... snip ...
18 runs, 63 assertions, 0 failures, 0 errors, 0 skips
```

### Actual behavior

It always fails as `marshal data too short (ArgumentError)`

```ruby
$ bundle exec ruby --yjit -w -Itest -Ilib -I../activesupport/lib -I../actionpack/lib -I../actionview/lib -I../activemodel/lib test/application/zeitwerk_integration_test.rb
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/set-1.0.2/lib/set.rb:855: warning: method redefined; discarding old to_set
<internal:prelude>:28: warning: previous definition of to_set was here
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/date_time_parser.rb:837: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/date_time_parser.rb:691: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32457: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32618: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32654: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32743: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32759: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32825: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32866: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:32891: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/address_lists_parser.rb:31987: warning: assigned but unused variable - testEof
Run options: --seed 16068

# Running:

........thread '<unnamed>' panicked at 'assertion failed: ctx.get_stack_size() == 1', ./yjit/src/codegen.rs:6294:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
YJIT panicked while holding VM lock acquired at ./yjit/src/core.rs:1694. Aborting...
#<Thread:0x00007f4f771a0b58 /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:28 run> terminated with exception (report_on_exception is true):
<internal:marshal>:34:in `load': marshal data too short (ArgumentError)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:23:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
<internal:marshal>:34:in `load': marshal data too short (ArgumentError)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:23:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
yahonda@myryzen:~/src/github.com/rails/rails/railties$ /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:795: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:819: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:586: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:761: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:592: warning: assigned but unused variable - disp_type_s
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:607: warning: assigned but unused variable - testEof
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_transfer_encoding_parser.rb:358: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:942: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:966: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:712: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:795: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:819: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:586: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:761: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:592: warning: assigned but unused variable - disp_type_s
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:607: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/envelope_from_parser.rb:3241: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:795: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:819: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:586: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_transfer_encoding_parser.rb:358: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:795: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:819: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:586: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:761: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:592: warning: assigned but unused variable - disp_type_s
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:607: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:942: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:966: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:712: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_transfer_encoding_parser.rb:358: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:761: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:592: warning: assigned but unused variable - disp_type_s
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:607: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_transfer_encoding_parser.rb:358: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:942: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:966: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:712: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:942: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:966: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:712: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/envelope_from_parser.rb:3241: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:5112: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:4848: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/mime_version_parser.rb:322: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/phrase_lists_parser.rb:702: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/envelope_from_parser.rb:3241: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:795: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:819: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:586: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:5112: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:4848: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/envelope_from_parser.rb:3241: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:761: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:592: warning: assigned but unused variable - disp_type_s
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:607: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_transfer_encoding_parser.rb:358: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/mime_version_parser.rb:322: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/phrase_lists_parser.rb:702: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:942: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:966: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:712: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:5112: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:4848: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7861: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8058: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8091: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8108: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8215: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8313: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8329: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8345: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8419: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8437: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8455: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8541: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8568: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8614: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8647: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8665: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8685: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8707: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8727: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7514: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:5112: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:4848: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/mime_version_parser.rb:322: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/envelope_from_parser.rb:3241: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/phrase_lists_parser.rb:702: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/mime_version_parser.rb:322: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/phrase_lists_parser.rb:702: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:5112: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:4848: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7861: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8058: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8091: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8108: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8215: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8313: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8329: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8345: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8419: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8437: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8455: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8541: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8568: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8614: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8647: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8665: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8685: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8707: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8727: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7514: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/mime_version_parser.rb:322: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7861: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8058: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8091: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/phrase_lists_parser.rb:702: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7861: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8058: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8091: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8108: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8215: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8313: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8329: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8345: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8419: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8437: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8455: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8541: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8568: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8614: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8647: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8665: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8685: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8707: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8727: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7514: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8108: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8215: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8313: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8329: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8345: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8419: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8437: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8455: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8541: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8568: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8614: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8647: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8665: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8685: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7861: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8058: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8091: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8108: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8215: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8313: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8329: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8345: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8419: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8437: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8455: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8541: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8568: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8614: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8647: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8665: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8685: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8707: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8727: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7514: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:795: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:819: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_disposition_parser.rb:586: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:761: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:592: warning: assigned but unused variable - disp_type_s
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_location_parser.rb:607: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_transfer_encoding_parser.rb:358: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:942: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:966: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/content_type_parser.rb:712: warning: assigned but unused variable - testEof
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/envelope_from_parser.rb:3241: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8707: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8727: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7514: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:5112: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/message_ids_parser.rb:4848: warning: assigned but unused variable - testEof
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/mime_version_parser.rb:322: warning: assigned but unused variable - testEof
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/phrase_lists_parser.rb:702: warning: assigned but unused variable - testEof
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7861: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8058: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8091: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8108: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8215: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8313: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8329: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8345: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8419: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8437: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8455: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8541: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8568: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8614: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8647: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8665: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8685: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8707: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:8727: warning: statement not reached
/home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/mail-2.8.0/lib/mail/parsers/received_parser.rb:7514: warning: assigned but unused variable - testEof
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'
/home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `write': Broken pipe (Errno::EPIPE)
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `puts'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:52:in `block (2 levels) in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `fork'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:32:in `block in run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `pipe'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:28:in `run_in_isolation'
	from /home/yahonda/src/github.com/rails/rails/activesupport/lib/active_support/testing/isolation.rb:19:in `run'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest.rb:1059:in `run_one_method'
	from /home/yahonda/.rbenv/versions/3.2.0-dev/lib/ruby/gems/3.2.0+3/gems/minitest-5.16.3/lib/minitest/parallel.rb:33:in `block (2 levels) in start'

$
```

### System configuration
**Rails version**: main branch

**Ruby version**:
ruby 3.2.0dev (2022-12-14T22:37:01Z master d20bd06a97) [x86_64-linux]
"
46731,`default_scope` side effect when using `all_queries: true`,gustavompo,activerecord,2022-12-14T22:57:55Z,2022-12-16T17:50:04Z,2022-12-16T14:02:21Z,"### Description
There's some inconsistency in the behaviour of default_scopes. 
As many scopes can be configured to an AR model and none of them will be applied when reloading a record. Now if there's a single one with `all_queries: true` then all of them get applied

Ref:
https://github.com/rails/rails/blob/main/activerecord/lib/active_record/persistence.rb#L1048
https://github.com/rails/rails/blob/main/activerecord/lib/active_record/persistence.rb#L1138
https://github.com/rails/rails/blob/bd7b6decb98827934ccbd53b27dc1ec997479332/activerecord/lib/active_record/scoping/default.rb#L64

### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

1 - Add a `default_scope(all_queries: false { where(""1=1"") }` to an AR model
2 - create a record, query, and reload it - the scope is not applied in the reload query
3 - Add another default scope, now all_queries: true `default_scope(all_queries: true { where(""2=2"") }`
4 - repeat step 2 and inspect the query - it will include both scopes


<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3"", ""< 1.5""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""


ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.boolean :deleted
  end
end

class Post < ActiveRecord::Base
  default_scope { where(deleted: false) }
end

class BugTest < Minitest::Test
  def test_default_scope_side_effect
    post = Post.create!
    last_query = nil

    ActiveSupport::Notifications.subscribe(""sql.active_record"") do |_, _, _, _, data|
      last_query = data[:sql]
    end

    expected_query = 'SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""id"" = ? LIMIT ?'

    # default scope NOT applied
    post.reload
    assert_equal expected_query, last_query

    # no-op default scope - all_queries: false
    Post.default_scopes << ActiveRecord::Scoping::DefaultScope.new(lambda { where(""1 = 1"") }, false)

    # No changes to the query, no default scope has been applied
    post.reload
    assert_equal expected_query, last_query

    # no-op all_queries: true default scope
    Post.default_scopes << ActiveRecord::Scoping::DefaultScope.new(lambda { where(""2 = 2"") }, true)

    expected_modified_query = 'SELECT ""posts"".* FROM ""posts"" WHERE (2 = 2) AND ""posts"".""id"" = ? LIMIT ?'
    # All 3 scopes are now applied
    post.reload
    assert_equal expected_modified_query, last_query
  end
end

```

### Expected behavior
Adding a `default_scope` to an ActiveRecord model should not affect how other `default_scope` behave when reloading a record. 

I would expect consistency in the behaviour of the query, so either:
- Only the `all_queries` default scopes get applied to the query upon reloading the model
- No `default_scope` gets applied upon reloading the model (as I'm not sure why such scopes are applied at all in the `reload` operation)

### Actual behavior
A model may define several `all_queries: false` default_scopes and none of them will be applied upon reloading a record. 
If a single `all_queries: true` default_scope is added to such model, then all default_scopes get applied

### System configuration
**Rails version**:
(tested on) `7.0.3.1` and on `main`

**Ruby version**:
(tested on) `3.0.5` and `3.1.2`
"
46724,Duplicate tests/unused action in test controller raises error when used.,leonelgalan,"actionpack, good first issue",2022-12-14T14:01:56Z,2023-01-16T23:40:28Z,2023-01-16T23:40:28Z,"### Steps to reproduce
Duplicate tests in https://github.com/rails/rails/blob/v7.0.4/actionpack/test/controller/new_base/render_template_test.rb#L103:L111:

```ruby
test ""rendering a template with local variables"" do
  get :with_locals
  assert_response ""The secret is area51""
end

test ""rendering a template with local variables without key"" do
  get :with_locals
  assert_response ""The secret is area51""
end
```

Both use the `with_locals` controller action. A `with_locals_without_key` action exists but it is unused; the two relevant actions are defined in [here](https://github.com/rails/rails/blob/v7.0.4/actionpack/test/controller/new_base/render_template_test.rb#L45:L51)

```ruby
def with_locals
  render template: ""locals"", locals: { secret: ""area51"" }
end

def with_locals_without_key
  render ""locals"", locals: { secret: ""area51"" }
end
```

#### [Executable Test Case](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) based on the _Template for Action Pack (controllers, routing) issues_:
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""~> 7.0.0""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/original"" => ""test#with_locals_without_key""
    get ""/modified"" => ""test#with_locals_without_key_modified""
  end
end

require ""action_view/testing/resolvers""

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  # From actionpack/test/controller/new_base/render_template_test.rb:7
  self.view_paths = [ActionView::FixtureResolver.new(
      ""locals.html.erb""            => ""The secret is <%= secret %>"",
    )]

  # From actionpack/test/controller/new_base/render_template_test.rb:49-51
  def with_locals_without_key
    render ""locals"", locals: { secret: ""area51"" }
  end

  # Possible Fix
  def with_locals_without_key_modified
    render ""/locals"", locals: { secret: ""area51"" }
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_server_error
    get ""/original""
    assert last_response.server_error?
  end

  def test_returns_success
    get ""/modified""
    assert last_response.ok?
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

Changing ""rendering a template with local variables without key"" to use `with_locals_without_key` should work.

```diff
diff --git a/actionpack/test/controller/new_base/render_template_test.rb b/actionpack/test/controller/new_base/render_template_test.rb
index 3d71184b5f..70833ae11c 100644
--- a/actionpack/test/controller/new_base/render_template_test.rb
+++ b/actionpack/test/controller/new_base/render_template_test.rb
@@ -106,7 +106,7 @@ class TestWithoutLayout < Rack::TestCase
     end
 
     test ""rendering a template with local variables without key"" do
-      get :with_locals
+      get :with_locals_without_key
       assert_response ""The secret is area51""
     end
````

### Actual behavior

Raises an error:

```
Missing template ./locals with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:raw, :erb, :html, :builder, :ruby]}.

Searched in:
  * ""test/basic.html.erb, shared.html.erb, locals.html.erb, xml_template.xml.builder, with_raw.html.erb, with_implicit_raw.html.erb, with_implicit_raw.text.erb, test/with_json.html.erb, test/with_json.json.erb, test/final.json.erb, test/with_error.html.erb""
```

### Possible Solution
Shown on the executable test: prepending a slash seems to work, but that (without locals) appears to be covered in

* ""rendering a template not in a subdirectory""
* ""rendering a template not in a subdirectory with a leading slash without key""

And both work, not sure why is different here. 

**UPDATE**: I'm no longer convinced this is a solution, it should work without the leading slash as well. I'll look into it, see https://github.com/rails/rails/issues/46724#issuecomment-1355182948.


```diff
diff --git a/actionpack/test/controller/new_base/render_template_test.rb b/actionpack/test/controller/new_base/render_template_test.rb
index 3d71184b5f..f211a45860 100644
--- a/actionpack/test/controller/new_base/render_template_test.rb
+++ b/actionpack/test/controller/new_base/render_template_test.rb
@@ -47,7 +47,7 @@ def with_locals
     end
 
     def with_locals_without_key
-      render ""locals"", locals: { secret: ""area51"" }
+      render ""/locals"", locals: { secret: ""area51"" }
     end
 
     def builder_template
@@ -106,7 +106,7 @@ class TestWithoutLayout < Rack::TestCase
     end
 
     test ""rendering a template with local variables without key"" do
-      get :with_locals
+      get :with_locals_without_key
       assert_response ""The secret is area51""
     end
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1.2
"
46716,RubyVersionMismatch when generating app with prerelease ruby (on Rails 7.0.x),jcoyne,attached PR,2022-12-13T17:47:50Z,2022-12-19T16:56:27Z,2022-12-19T16:56:27Z,"### Steps to reproduce
1. Install ruby 3.2.0-rc1
1. Generate a rails app (7.0.4) using `rails new my_app`
1. Run `bin/rails console`
1. You get this stack trace:

```
/opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/bundler/definition.rb:432:in `validate_ruby!': Your Ruby version is 3.2.0.rc1, but your Gemfile specified 3.2.0 (Bundler::RubyVersionMismatch)
	from /opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/bundler/definition.rb:407:in `validate_runtime!'
	from /opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/bundler.rb:154:in `setup'
	from /opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/bundler/setup.rb:20:in `block in <top (required)>'
	from /opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/bundler/ui/shell.rb:159:in `with_level'
	from /opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/bundler/ui/shell.rb:111:in `silence'
	from /opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/bundler/setup.rb:20:in `<top (required)>'
	from <internal:/opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/rubygems/core_ext/kernel_require.rb>:85:in `require'
	from <internal:/opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/rubygems/core_ext/kernel_require.rb>:85:in `require'
	from /opt/hostedtoolcache/Ruby/3.2.0-rc1/x64/lib/ruby/3.2.0+3/rubygems.rb:1356:in `<top (required)>'
	from <internal:gem_prelude>:2:in `require'
	from <internal:gem_prelude>:2:in `<internal:gem_prelude>'
```


This problem is fixed in the main branch (#45979), but it has not been backported to 7.0.x.  
The problem is that `RUBY_VERSION` does not return a prerelease version (but `Gem.ruby_version` does).  This is used here: https://github.com/rails/rails/blob/main/railties/lib/rails/generators/rails/app/templates/Gemfile.tt#L4
https://github.com/rails/rails/blob/7-0-stable/railties/lib/rails/generators/rails/app/templates/Gemfile.tt#L4


Can this bug fix get ported to the 7-0-stable branch?"
46712,`ExecutorTest#test_class_serial_is_unaffected` testing with Ruby 3.2,voxik,activesupport,2022-12-13T11:49:55Z,2022-12-16T09:47:34Z,2022-12-15T09:14:08Z,"### Steps to reproduce

Running the activesupport 7.0.4 test suite against `ruby 3.2.0dev (2022-12-13 master ece6246057) [x86_64-linux]`, I observe the following error:

~~~
  1) Error:
ExecutorTest#test_class_serial_is_unaffected:
ArgumentError: unknown key: class_serial
    /builddir/build/BUILD/activesupport-7.0.4/usr/share/gems/gems/activesupport-7.0.4/test/executor_test.rb:235:in `stat'
    /builddir/build/BUILD/activesupport-7.0.4/usr/share/gems/gems/activesupport-7.0.4/test/executor_test.rb:235:in `test_class_serial_is_unaffected'
~~~

Looking at recent commits, I have tried to apply the e4140140af5832e045bf8196d1bcbe9e5276a8fb, but it does not seems to help.

### Expected behavior

The test is passing testing with Ruby 3.2

### Actual behavior

The test case fails, even trying with e4140140af5832e045bf8196d1bcbe9e5276a8fb
"
46707,ActiveStorage: CORB (blocking) cross-origin responses when fetching files (s3 + MIME type application/pdf),mrjonesbot,activestorage,2022-12-13T02:22:00Z,2022-12-22T22:25:55Z,2022-12-22T22:25:55Z,"On Rails 7.0.4, ActiveStorage requests for files from a cross-origin storage service are blocked by Chrome (Cross-Origin Read Blocking).

In my case, I'm fetching pdf's stored in s3. 

I've not made any changes to the default setup, but I imagine this started occuring after updating Chrome.

```ruby
# app/views/active_storage/blobs/_blob.html.erb
<figure class=""attachment attachment--<%= blob.representable? ? ""preview"" : ""file"" %> attachment--<%= blob.filename.extension %>"">
  <% if blob.representable? %>
    <%= image_tag url_for(blob.representation(resize_to_limit: local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ])) %>
  <% end %>

  <figcaption class=""attachment__caption"">
    <% if caption = blob.try(:caption) %>
      <%= caption %>
    <% else %>
      <span class=""attachment__name""><%= blob.filename %></span>
      <span class=""attachment__size""><%= number_to_human_size blob.byte_size %></span>
    <% end %>
  </figcaption>
</figure>

# config/storage.yml
test:
  service: Disk
  root: <%= Rails.root.join(""tmp/storage"") %>

local:
  service: Disk
  root: <%= Rails.root.join(""storage"") %>

# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazon:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: us-east-1
  bucket: nestingbird-images
```

![Screen Shot 2022-12-12 at 2 53 30 PM](https://user-images.githubusercontent.com/968057/207209130-67c20b9b-f1be-475b-bdb0-0245cc65bf34.png)

https://www.chromium.org/Home/chromium-security/corb-for-developers/

Honestly not sure if this case isn't covered or if I've missed something on my end.

Is there an option I can pass that would correctly set the request headers?

This portion of the chromium post seems relevant:

```
[For other resource types (e.g., PDF, ZIP, PNG):](https://www.chromium.org/Home/chromium-security/corb-for-developers/#for-other-resource-types-eg-pdf-zip-png)
Make sure these resources are served only in response to requests that include an unguessable CSRF token (which should be distributed via resources protected via the HTML, JSON, or XML steps above).
```

### Expected behavior
Given a default ActiveStorage setup, files uploaded through ActiveStorage should be requested in a way that will not be blocked by Chrome's CORB feature.

### Actual behavior
Files uploaded through ActiveStorage successfully request files from s3, but the response is blocked by the browser's CORB feature.

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1
"
46702,attachment_upload.js throws an uncaught error when direct uploads return a 500 error,Nitrodist,"stale, activestorage, actiontext",2022-12-12T16:58:18Z,2023-03-25T19:13:15Z,2023-03-25T19:13:15Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->


1. Trigger an internal error on upload and/or override the `/rails/active_storage/direct_uploads` request on your local server to return 500
2. Use trix-editor + activestorage to upload an attachment to a `rich_text_area`
3. Error happens...
4. attachment_upload.js throws an uncaught exception
5. Look in Chrome console for an uncaught error from this line: https://github.com/rails/rails/blob/main/actiontext/app/javascript/actiontext/attachment_upload.js#L23

The stacks (two of them):

<img width=""1215"" alt=""Screenshot 2022-12-12 at 10 34 34 AM"" src=""https://user-images.githubusercontent.com/385448/207101046-361c9249-ae15-448d-924b-ffbe9c29d50b.png"">



# Reproduction script

```
# modify config/routes.rb with something like this:
...
  post '/rails/active_storage/direct_uploads' { |req| raise ""some-string-to-raise-an-exception"" }
...

# modify config/application.rb to disable active_storage routes:
...
    config.active_storage.draw_routes = false
...

# or, if you're me (a clown 🤡) just overwrite in an initializer the ActiveStorage::Blob object like this and watch it error out when you upload!
# in config/initializers/active_storage_override.rb
class ActiveStorage::Blob < ActiveStorage::Record
  attr_accessor :rendering_for_email
end

# you'll see this error in the logs:
NoMethodError - undefined method `create_before_direct_upload!' for #<Class:0x0000000126ca9c30>
Did you mean?  create_or_find_by!:
```

### Expected behavior

There are callbacks written for dispatching events elsewhere in those exception stacks, so I think I would expect a way to write my own hook to act on the error. 

I'm not a js expert, but I think that instead of throwing an error there we instead should be dispatching the error callback or if there are instructions to register/override the existing one where it throws an uncaught exception, then I think we should update the rails guide with this info. 

### Actual behavior

Silent error happens and users see this kind of failed in-progress attachment upload:

<img width=""685"" alt=""Screenshot 2022-12-12 at 10 54 08 AM"" src=""https://user-images.githubusercontent.com/385448/207105962-d7c7b1a5-03e1-4e50-a67c-abf9c9d27be0.png"">


### System configuration
**Rails version**:

Rails 6.1.7

**Ruby version**:
2.7

**@rails/actiontext npm version**:
6.1.7

"
46693,Docs: Automatic Role Switching has no information on what is required for custom implementation,SampsonCrowley,docs,2022-12-10T01:12:38Z,2023-01-06T13:08:28Z,2023-01-06T13:08:28Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->
[When Reading the Guides for Multi DB](https://guides.rubyonrails.org/active_record_multiple_databases.html#activating-automatic-role-switching) new users are told: 
> The setup in Rails allows you to easily change how the switching is done and what parameters it's based on

However the sample code given is missing a basic implementation for what methods will be called and what is required. There is Very little information on what DIYing those classes entails available.

### Expected behavior
<!-- Tell us what should happen -->

If we're going to say ""it's easy to DIY"", the docs should at least have a minimum example of the methods that are required to roll your own, so users know what they expect to get called on.

If we'd prefer not to clog up the docs with additional sample code should we maybe link to the API docs? That way users who are new to rails (but still proficient enough to understand sharding or DB switching) would have a direct path to the to more information

### Actual behavior
<!-- Tell us what happens instead -->

Instead we just give an empty class, which if you think about it may as well be omitted if that's all we're going to include. it's just extra fluff with the only benefit being that you're aware that the class isn't expected to be inherited from `ActiveRecord::Middleware::DatabaseSelector::Resolver::Session`

```ruby
class MyCookieResolver
  # code for your cookie class
end
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: any
"
46689,`ActiveRecord::StrictLoadingViolationError` when concatenating or setting association when non-persisted owner has primary key,richardboehme,"activerecord, attached PR",2022-12-09T20:45:20Z,2022-12-12T16:57:22Z,2022-12-12T16:57:22Z,"### Steps to reproduce

This is a follow-up of #4639 because the fix for this was reverted in #46688 after a side effect of the fix was found (see #46685).

This also includes a test case for setting the association (via `association=`) which also raises a `ActiveRecord::StrictLoadingViolationError`.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", branch: ""main""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_concat
    post = Post.new(id: 1)
    post.strict_loading!

    post.comments << Comment.new
  end

  def test_association_set
    post = Post.new(id: 1)
    post.strict_loading!

    post.comments = [Comment.new]
  end
end

```

### Expected behavior

Concatenating or setting a association of a non-persisted record that was initialized with a primary key should not lead to a `ActiveRecord::StrictLoadingViolationError`. 

### Actual behavior

Currently both operations issue a SQL query to load the associated records of the owner, that raises the exception. It seems like both queries are required to keep the current behavior (loading existing associated records when calling one of the operations).

However those should not raise a strict loading error, because it does not seem to be possible to eager load the association in a way that does not raise. The only work around is to disable strict loading for the record.

### System configuration

**Rails version**:
main (as of https://github.com/rails/rails/commit/7ebbe3251fe75f9174f111236d656cdf20a5452c)

**Ruby version**:
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]

cc @ghiculescu "
46687,Associations comming nil in before_save if we update the corresponding associated column to nil,kenphysics,"activerecord, more-information-needed",2022-12-09T17:27:47Z,2023-01-03T21:03:47Z,2023-01-03T21:03:47Z,"### System configuration
**Rails version**:7.0.4

**Ruby version**:3.0.4

### Steps to reproduce
Consider two models: User(id,client_id),Client(id) with one to one relation
`class User < ActiveRecord::Base`
`belongs_to :client`
`before_save :before_saving`
   `def before_saving`
    `p ""client_id:::::::::#{self.client.id}""`
    `end`
`end`

`class Client <  ActiveRecord::Base`
`has_one :user`
`end`
now consider a user and client entry user_test=(id: 1,client_id: 3) client_test=(id: 3)
now i execute the following code
`user_test.update(client_id: nil)`

### Expected behavior
the print statement should print ""client_id:::::::::3""
#this is what happens in rails 6.0.3

### Actual behavior
the code throws error in before_saving
`undefined method id for nil class`
The problem is its not picking up the association in before_save ,but when i worked on rails version 6.0.3 this used to give old association in before_save before it sets to nil.but now in rails 7.0.4 it is not picking up.i read all patchnotes properly for 6.1 release and 7.0 release and there is no specification for this change.Thats why i think this is a bug.
Please Tell otherwise if i am missing some change in these versions or there is some miss in the documentation."
46685,Changes in behaviour with `#dup` and `#concat`,adrianna-chang-shopify,activerecord,2022-12-09T14:41:43Z,2022-12-10T03:24:24Z,2022-12-09T18:27:29Z,"👋 Hi folks! 

This is not necessarily a bug, but a change in behaviour introduced by https://github.com/rails/rails/commit/2db098c177d51f5bd6ecad57a545da5a5e0644c0 that is impacting Shopify's Core monolith.

Some background: There's a pattern being used in a couple places in our Rails monolith where associations are added to an already-persisted model without making changes to the database. This is so that complex calculations involving orders, sales taxes, etc. can be performed without persisting those associations to the database.

### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", github: ""rails/rails"", ref: ""c6b227b95b631ead7ffd5c8984b16b0fbe5b3ca4"" # Commit before Alex's changes
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end

class BugTest < Minitest::Test
  def test_association_stuff
    post = Post.create
    post.comments << Comment.new

    assert_equal 1, post.comments.count

    # Add associations to already-persisted post without making changes to the database
    another_post = post.dup
    another_post.id = post.id

    assert_equal 1, another_post.comments.size

    another_post.comments << Comment.new
    assert_equal 2, another_post.comments.size
  end
end
```
(Test passes)

When run with `  gem ""rails"", github: ""rails/rails"", branch: ""main""`:
```ruby
Failure:
BugTest#test_association_stuff [scripts/46392_strict_loading_has_many.rb:55]:
Expected: 2
  Actual: 1
````

### Expected behavior
As shown in the script, this pattern of duping an Active Record, assigning the id, and then adding records to the collection **previously resulted in the persisted record's collection being preserved on the duped record**.

### Actual behavior
As a side effect of the changes made in https://github.com/rails/rails/commit/2db098c177d51f5bd6ecad57a545da5a5e0644c0, when we add (`<<`) `records` to the collection of a duped active record, we now lose all of the records that were associated with the original record, despite the FKs of those records pointing to the duped record's PK.

`#concat` previously called [`#load_target`](https://github.com/rails/rails/blob/main/activerecord/lib/active_record/associations/collection_association.rb#L262-L269), which would call `#find_target` and [load the associated records based on the owner record's PK](https://github.com/rails/rails/blob/main/activerecord/lib/active_record/associations/association.rb#L232-L239).

Now, based on the [documentation](https://github.com/rails/rails/blob/83217025a171593547d1268651b446d3533e2019/activerecord/lib/active_record/core.rb#L573-L578) for dup:
> Duped objects have no id assigned and are treated as new records. Note that this is a “shallow” copy as it copies the object's attributes only, not its associations. 

It seems to me that, even though copying the id to the duped record was a ""hack"" that previously worked as expected, the documentation makes it clear that it's not expected that those associations would be copied over. Duping the associations makes the tests pass:
```ruby
    # Add associations to already-persisted post without making changes to the database
    another_post = post.dup
    another_post.comments = post.comments.dup
```
So this is perhaps the correct fix for us at Shopify 😄 That said, it _is_ a change in behaviour that we can't rely on the duped object having the correct PK to have it's records loaded appropriately, so thought I'd raise this.

### System configuration
**Rails version**:
main (as of 2db098c177d51f5bd6ecad57a545da5a5e0644c0)

**Ruby version**:
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin21]

cc @eileencodes @ghiculescu @richardboehme "
46684,Serialized attributes assigned with accepts_nested_attributes_for throw Psych::DisallowedClass errors,akaspick,"activerecord, attached PR",2022-12-09T14:36:18Z,2023-11-13T01:05:21Z,,"### Steps to reproduce
Assigning serializable attributes to child associations via accepts_nested_attributes_for throws `Psych::DisallowedClass: Tried to load unspecified class: ActiveSupport::HashWithIndifferentAccess` errors during the serialization process.

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""rails"", git: 'https://github.com/rails/rails'
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :customers, force: true do |t|
  end
  create_table :orders, force: true do |t|
    t.text :data
    t.belongs_to :customer
  end
end

class Customer < ActiveRecord::Base
  has_many :orders
  accepts_nested_attributes_for :orders
end
class Order < ActiveRecord::Base
  serialize :data, Hash
  belongs_to :customer
end

class BugTest < Minitest::Test
  def test_serialization_for_new_record
    order_attributes = [{'data' => {'test' => 1}}]

    assert_equal Hash, order_attributes.first.class
    assert_equal Hash, order_attributes.first['data'].class

    # NOTE
    # Raises Psych::DisallowedClass: Tried to load unspecified class: ActiveSupport::HashWithIndifferentAccess
    # Error due to conversion of Hash to HashWithIndifferentAccess at https://github.com/rails/rails/blob/main/activerecord/lib/active_record/nested_attributes.rb#L518
    Customer.new orders_attributes: order_attributes
  end
end
```

### Expected behavior
When using a Hash with the `serialize` method, I expect to be able to assign a hash of values with `accepts_nested_attributes_for` without issues.

### Actual behavior
Currently when using a `serialize :data, Hash` attribute, you can't assign an actual hash to the attribute via parameters set using the `accepts_nested_attributes_for` method.  When doing so the hash to be serialized is converted to a HashWithIndifferentAccess which is not allowed with the YAML/Psych loader and a `Psych::DisallowedClass: Tried to load unspecified class: ActiveSupport::HashWithIndifferentAccess` error is thrown.

The issue is due to a hash conversion in the source at https://github.com/rails/rails/blob/main/activerecord/lib/active_record/nested_attributes.rb#L518

`with_indifferent_access` does a deep hash conversion of keys including the hash attribute to be serialized.  The serialized attribute should not be converted and should be left as-is.

### System configuration
**Rails version**: main branch (issue also exists when using 7.0.4)

**Ruby version**: 3.1
"
46677,Inconsistency in in time_field/date_field/datetime_field helpers with :value option,kryzhovnik,"actionview, attached PR",2022-12-08T20:59:58Z,2022-12-12T18:06:25Z,2022-12-12T18:06:25Z,"I've noticed some inconsistent behavior in `time_field`, `date_field`, `datetime_field`, `week_field`, `month_field` actionview form helpers.

I expect that we can pass an instance of a Time/Date/DateTime to `:value` option, the same way as [described](https://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-datetime_field) in the docs for `:min`, `:max` options.

I found two tests for expected behavior in the rails code.

I guess the [first test](https://github.com/rails/rails/blob/90a272a1de6f13711943139c4292336dbff19c7c/actionview/test/template/form_helper_test.rb#L1099) is passing, only because Date#to_s is consistent with ISO8601, but it fails with other time-ish types, e.g. DateTime.

I also doubt that the [second test](https://github.com/rails/rails/blob/90a272a1de6f13711943139c4292336dbff19c7c/actionview/test/template/form_helper_test.rb#L1215) has an error in the expected string: there is ""+00:00"" suffix (indicate time-zone), but type=""datetime-local"" doesn't provide time-zone information ([whatwg.org spec](https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local))). 

I've made an executable test case in order to demonstrate the issue: [test_date_form_helpers_inconsistency.rb](https://gist.github.com/kryzhovnik/82d6321bfd171bb39d008b5cd9da3bb2).

# Reproduction script

    <%= form.datetime_field :written_at, value: Time.current, min: Time.current %>

### Expected behavior

    <input value=""2022-12-08T16:24:56"" min=""2022-12-08T16:24:56"" type=""datetime-local"" name=""post[written_at]"" id=""post_written_at"" />

### Actual behavior

    <input value=""2022-12-08 16:24:56 UTC"" min=""2022-12-08T16:24:56"" type=""datetime-local"" name=""post[written_at]"" id=""post_written_at"" />


### System configuration

Rails main
Ruby 3.0.3"
46675,[Feature Request] Add `UNION` to ActiveRecord,Tao-Galasse,activerecord,2022-12-08T18:20:40Z,2022-12-08T18:41:56Z,2022-12-08T18:41:55Z,"Hello Rails team! 👋 

I did some research about it, and it seems like the SQL ""UNION"" operator still does not exist in Active Record. It looks like it is present in Arel, but it is a private API from rails and using it seems to be a bad practice, and a bad rails-developer experience.

I have been able to work around it by using something like this : `ActiveRecord::Base.connection.select_values(""#{sub_query1.to_sql} UNION #{sub_query2.to_sql}"")`, but it also seems kinda strange to use it this way.

It would probably be possible to add something like `sub_query1.union(sub_query2)` to this amazing ORM, don't you think ? 😄 

Thank you all for your amazing work! 💪 ❤️ "
46654,insert_all with UNIQUE NULLS NOT DISTINCT index in Postgres,23tux,"activerecord, more-information-needed",2022-12-06T12:27:26Z,2022-12-21T00:04:04Z,2022-12-21T00:04:04Z,"### Steps to reproduce

I'm on Postgres 15 and would like to use the `UNIQUE NULLS NOT DISTINCT` feature.

Given the following table with STI:

```
CREATE TABLE public.time_entries (
    id bigint NOT NULL,
    contract_id bigint,
    title character varying,
    ""from"" timestamp(6) without time zone,
    ""to"" timestamp(6) without time zone,
    key character varying NOT NULL,
    type character varying NOT NULL,
    date date NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    CONSTRAINT date_and_from_same_day CHECK (((""from"")::date = date)),
    CONSTRAINT from_present_if_to_present CHECK ((((""to"" IS NULL) AND (""from"" IS NULL)) OR ((""to"" IS NOT NULL) AND (""from"" IS NOT NULL)) OR ((""to"" IS NULL) AND (""from"" IS NOT NULL)))),
    CONSTRAINT to_after_from CHECK ((""to"" >= ""from""))
);
```
When I try to batch insert records, I get the following error

```
(ruby@rspec#608) TimeEntry.insert_all([{ type: ""TimeEntry::Toggl"", from: Time.zone.now, to: Time.zone.now, key: ""1"" }])                                        │                WHERE a.attrelid = #{oid}
eval error: undefined method `scan' for nil:NilClass                                                                                                           │                AND a.attnum IN (#{indkey.join("","")})
                                                                                                                                                               │              SQL
              expressions.scan(/(?<column>\w+)""?\s?(?<opclass>\w+_ops)?\s?(?<desc>DESC)?\s?(?<nulls>NULLS (?:FIRST|LAST))?/).each do |column, opclass, desc, nu│
lls|                                                                                                                                                           │              # add info on sort order (only desc order is explicitly specified, asc is the default)
                         ^^^^^                                                                                                                                 │              # and non-default opclasses
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/connection_adapters/postgresql/schema_statements.rb:128:in `block in indexes'                    │              expressions.scan(/(?<column>\w+)""?\s?(?<opclass>\w+_ops)?\s?(?<desc>DESC)?\s?(?<nulls>NULLS (?:FIRST|LAST))?/).each do |column, opclass, desc, n
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/connection_adapters/postgresql/schema_statements.rb:103:in `map'                                 │ulls|
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/connection_adapters/postgresql/schema_statements.rb:103:in `indexes'                             │                opclasses[column] = opclass.to_sym if opclass
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/connection_adapters/schema_cache.rb:137:in `block in indexes'                                    │                if nulls
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/connection_adapters/schema_cache.rb:135:in `fetch'                                               │                  orders[column] = [desc, nulls].compact.join("" "")
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/connection_adapters/schema_cache.rb:135:in `indexes'                                             │                else
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/insert_all.rb:129:in `unique_indexes'                                                            │                  orders[column] = :desc if desc
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/insert_all.rb:119:in `find_unique_index_for'                                                     │                end
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/insert_all.rb:31:in `initialize'                                                                 │              end
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/persistence.rb:146:in `new'                                                                      │            end
  /usr/local/bundle/gems/activerecord-7.0.4/lib/active_record/persistence.rb:146:in `insert_all'                                                               │
  (rdbg)//usr/src/app/app/models/time_entry.rb:1:in `block (2 levels) in sync_all!'
```

Is this a bug, or am I doing something wrong?

### System configuration
**Rails version**:
7.0.4
**Ruby version**:
3.1.2"
46653,becomes lost default value on target class,oniram88,"activerecord, With reproduction steps",2022-12-06T11:00:29Z,2023-03-13T18:25:12Z,,"### Steps to reproduce
```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""activerecord"", ""~> 7.0.0""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :animals, force: true do |t|

    t.string :name
    t.string :type

    t.integer :fly_speed

  end

end

class Animal < ActiveRecord::Base
  attribute :name, :string, default: ""DEFAULT NAME""
end

class Bird < Animal
  attribute :fly_speed, :string, default: 100

end

class BugTest < Minitest::Test
  def test_becomes_with_defaults
    animal = Animal.new

    assert_equal ""DEFAULT NAME"", animal.name

    bird = animal.becomes(Bird)

    assert_equal 100, bird.fly_speed
  end
end
```

### Expected behavior
I expect that the method becomes set correctly the defaults of the model 

### Actual behavior
`becomes` is coping the `@attributes` directly from Animal in this case, and so the new model lost the defaults generated during initialization

### System configuration

**Gems**:
  - activerecord 7.0.4
  
**Ruby version**:
  - 3.1.2
"
46647,ActiveRecord eagerly validates encryption configuration unnecessarily,brynary,activerecord,2022-12-05T17:32:09Z,2022-12-06T23:25:55Z,2022-12-06T23:25:54Z,"I am using AWS KMS for encryption with ActiveRecord::Encryption using a simple custom Key Provider (pasted below). As such, KMS generates my data keys and my intent is to _not_ use the build-in ActiveRecord Key Generator. However, ActiveRecord is insisting I configure the `primary_key`, `deterministic_key`, and `key_derivation_salt`.

### Steps to reproduce

1. Create a new Rails 7.0.4 application
2. Define a custom Key Provider and use it within a model: `encrypts :secret_field, key_provider: CustomKeyProvider.new`
3. Rails raises an exception when loading the

### Expected behavior

Because I've chosen to replace Rails' built-in key generation, I would not expect to need to configure the encryption options in order to use ActiveRecord::Encryption. Configuring my application with a Rails `primary_key` creates confusion about exactly which key(s) are being used to encrypt my data.

Given that encryption configuration appears to be optional in general, I would expect configuration errors to be raised lazily e.g. if and only if the Rails-default Key Provider was asked to generate a key without being properly configured.

### Actual behavior
```
activerecord-7.0.4/lib/active_record/encryption/scheme.rb:85:in `validate_credential': key_derivation_salt is not configured. Please configure it via credential active_record_encryption.key_derivation_salt or by setting config.active_record.encryption.key_derivation_salt (ActiveRecord::Encryption::Errors::Configuration)
```

### System configuration
**Rails version**: 7.0.4

**Ruby version**: 3.1.2


### Custom Key Provider

``` ruby
require ""aws-sdk-kms""

class KmsKeyProvider
  KEY_SPEC = ""AES_256""

  attr_reader :key_id
  attr_reader :encryption_context

  def initialize(key_id, encryption_context = {})
    @key_id = key_id
    @encryption_context = encryption_context
  end

  def kms_client
    @kms_client ||= Aws::KMS::Client.new
  end

  def encryption_key
    response =
      kms_client.generate_data_key(
        key_id: key_id,
        key_spec: KEY_SPEC,
        encryption_context: encryption_context
      )

    ActiveRecord::Encryption::Key
      .new(response.plaintext)
      .tap do |key|
        key.public_tags.encrypted_data_key = response.ciphertext_blob
      end
  end

  def decryption_keys(encrypted_message)
    encrypted_data_key = encrypted_message.headers.encrypted_data_key
    secret =
      kms_client.decrypt(
        ciphertext_blob: encrypted_data_key,
        encryption_context: encryption_context,
        key_id: key_id
      ).plaintext
    secret ? [ActiveRecord::Encryption::Key.new(secret)] : []
  end
end
```"
46636,rails credentials not working for environments / secret_key_base,chmich,railties,2022-12-03T14:13:28Z,2022-12-05T19:45:45Z,2022-12-05T19:45:16Z,"### Steps to reproduce
`rails credentials:edit` works well on development.
by example, having a line in it like `user_password: ""xxxx""` is accessible by `Rails.application.credentials[:user_password]`

and, i could deploy my new app to the production server, on environment `staging`

then, i set the same `user_password`, on credentials, on staging by `rails credentials:edit --environment=staging` 
deploy didnt work because its missing `secret_key_base`

so far, so clear.

regarding to [Railsguides/configuring](https://guides.rubyonrails.org/configuring.html#config-secret-key-base) and [api](https://api.rubyonrails.org/v7.0.4/classes/Rails/Application.html#method-i-secret_key_base) two ways should work: 

- set a environment variable on linux server `SECRET_KEY_BASE`
- set a line like `secret_key_base: xxx` by `rails credentials:edit --environment=staging` 

should solve this but didnt

i had to set explicitly a config like `config.secret_key_base = ENV[""SECRET_KEY_BASE""]` inside `config/environments/` for let the rails pickup the keybase from linux-env.

and, i am not able to use the credentials for other purposes, like above mentioned `user_password`. On development that all works fine and as long i have only one secret and never had triggered environment specific credentials, rails picks up all fine from the development environment.

Rails-7.0.4
Ruby-3.1.2"
46628,NoMethodError: undefined method `each_with_index' for #<ArelExtensions::Nodes::Concat ...,midwire,activerecord,2022-12-01T19:42:07Z,2023-01-03T16:21:25Z,2023-01-03T16:21:25Z,"### Steps to reproduce

```ruby
# frozen_string_literal: true

require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  gem ""activerecord"", ""~> 6.1.7""
  gem ""sqlite3""
end

require ""active_record""
require ""minitest/autorun""
require ""logger""

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: ""sqlite3"", database: "":memory:"")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :contacts, force: true do |t|
    t.string :first_name, limit: 30
    t.string :last_name, limit: 40
    t.timestamps
  end
end

class Contact < ActiveRecord::Base
end

class BugTest < Minitest::Test
  def test_to_sql
    contacts = Contact.arel_table
    combined_name = contacts[:first_name].concat(' ').concat(contacts[:last_name])
    full_upper = Arel::Nodes::NamedFunction.new('UPPER', combined_name)
    full_upper.to_sql
  end
end
```

### Expected behavior
Should generate this SQL:

`UPPER((""contacts"".""first_name"" || ' ' || ""contacts"".""last_name""))`

### Actual behavior
It generates this exception:
```
  1) Error:
BugTest#test_to_sql:
NoMethodError: undefined method `each_with_index' for #<Arel::Nodes::Concat:0x000055843b44ee30>
    /home/midwire/.rbenv/versions/2.7.6/lib/ruby/gems/2.7.0/gems/activerecord-6.1.7/lib/arel/visitors/to_sql.rb:777:in `inject_join
...
```

### System configuration
**Rails version**: 6.1.7

**Ruby version**: 3.0.3
"
46625,Single-Table-Inheritance and Active Record Callbacks can lead to autoload errors in Rails 7.0,jrochkind,"stale, autoloading",2022-12-01T15:37:55Z,2023-08-18T01:59:10Z,2023-08-18T01:59:10Z,"I ran into an odd thing breaking trying to upgrade an app from Rails 6.1 to Rails 7.0.  I have isolated it with a reproduction -- because it involves auto-loading, and requires existing data in the database at time of autoload, it's not feasible to provide an all-in-one repro file. 

But I have a simple app that reproduces with a reproduction script, and will also provide an explanation of reproduction here. 

* Rails 7.0.4
* Ruby 3.1.2

1. You have single-table inheritance with three classes involved, say `Car` < `Motorized` < `Vehicle`. 
2. You are using the StiPreload module [recommended by Rails Guide](https://guides.rubyonrails.org/autoloading_and_reloading_constants.html#single-table-inheritance)
3. You have an ActiveRecord callback (such as `after_initialize` or `after_commit`) on the _middle_ class of the hieararchy (eg `Motorized`). 

If there are any existing rows in the DB for the leaf class (eg `Car`), then when the StiPreload module runs, it will result in a `NameError` on the class-name of the leaf class. This happens in Rails 7.0, but *does not* happen in Rails 6.1, I'd call it a regression. 

```ruby
require 'sti_preload'

class Vehicle < ApplicationRecord
  # from https://guides.rubyonrails.org/autoloading_and_reloading_constants.html#single-table-inheritance
  include StiPreload
end

class Motorized < Vehicle
  after_initialize do
  end
end

class Car < Motorized
end

# create a Car
Car.create!(title: ""Honda"")
```

Now, when you boot the app subsequently, you'll get a `NameError`, `uninitialized constant Car`,  only in Rails 7, not Rails 6.1. 

Nothing needs to be in the `after_initialize`, nor does it need to execute. Just registering the block is what does it. Also reproduces with `after_commit` or `before_validation`, or presumably any other callback. 

Demonstration app, with simple repro script in README: 

https://github.com/jrochkind/rails7_sti_bug_demo

Same app in Rails 6.1 demonstrating exception is not raised: https://github.com/jrochkind/rails61_sti_bug_non_repro

Relevant stack trace from error in Rails 7:

```
/Users/jrochkind/.gem/ruby/3.1.2/gems/activesupport-7.0.4/lib/active_support/inflector/methods.rb:280:in `const_get'
/Users/jrochkind/.gem/ruby/3.1.2/gems/activesupport-7.0.4/lib/active_support/inflector/methods.rb:280:in `constantize'
/Users/jrochkind/.gem/ruby/3.1.2/gems/activesupport-7.0.4/lib/active_support/core_ext/string/inflections.rb:74:in `constantize'
/Users/jrochkind/code/rails_demos/rails7_sti_demo/lib/sti_preload.rb:33:in `block in preload_sti'
/Users/jrochkind/code/rails_demos/rails7_sti_demo/lib/sti_preload.rb:31:in `each'
/Users/jrochkind/code/rails_demos/rails7_sti_demo/lib/sti_preload.rb:31:in `preload_sti'
/Users/jrochkind/code/rails_demos/rails7_sti_demo/lib/sti_preload.rb:13:in `descendants'
/Users/jrochkind/.gem/ruby/3.1.2/gems/activesupport-7.0.4/lib/active_support/callbacks.rb:706:in `__update_callbacks'
/Users/jrochkind/.gem/ruby/3.1.2/gems/activesupport-7.0.4/lib/active_support/callbacks.rb:764:in `set_callback'
/Users/jrochkind/.gem/ruby/3.1.2/gems/activemodel-7.0.4/lib/active_model/callbacks.rb:151:in `block in _define_after_model_callback'
/Users/jrochkind/code/rails_demos/rails7_sti_demo/app/models/motorized.rb:2:in `<class:Motorized>'
/Users/jrochkind/code/rails_demos/rails7_sti_demo/app/models/motorized.rb:1:in `<main>'
/Users/jrochkind/.gem/ruby/3.1.2/gems/bootsnap-1.15.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:32:in `require'
/Users/jrochkind/.gem/ruby/3.1.2/gems/bootsnap-1.15.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:32:in `require'
/Users/jrochkind/.gem/ruby/3.1.2/gems/zeitwerk-2.6.6/lib/zeitwerk/kernel.rb:30:in `require'
/Users/jrochkind/code/rails_demos/rails7_sti_demo/app/models/car.rb:1:in `<main>'
```
"
46621,Should assert_enqueued_email_with accept args/params matchers?,maxim,"actionmailer, attached PR",2022-12-01T05:10:01Z,2023-05-11T18:06:39Z,2023-05-11T18:06:39Z,"This is currently impossible (as of main branch on 2022-11-30):

```ruby
assert_enqueued_email_with UserMailer, :email_verification, params: -> p { p[:token] =~ /\w+/ }
```

because `assert_enqueued_email_with` never passes a proc into `assert_enqueued_with`'s `args`.

Note that `assert_enqueued_with` does support proc args.

I took a stab at adding this feature, but found that [`assert_enqueued_email_with`](https://github.com/rails/rails/blob/main/actionmailer/lib/action_mailer/test_helper.rb#L151-L164) is getting increasingly funky.

It currently tries to guess whether args are actually params (I assume for backwards compatibility).

If I start adding a few more `if/elsif` statements to check for proc values, it turns quite messy.

My questions are:

1. Do we want these args/params to support procs? (I would ❤️ it)
2. Should we stop [guessing](https://github.com/rails/rails/blob/main/actionmailer/lib/action_mailer/test_helper.rb#L156-L157) if args are params, and simply pass args to args, and params to params? It would simplify this feature. If neither args nor params is a proc, we simply pass them down. If either of them is a proc, we make a wrapper proc, in which we make a boolean out of args/params procs, and pass the wrapper down. (In latter situation we don't really need to be comparing mailer / method / ""deliver_now"", but we could.)

For example

```ruby
# In case of non-proc args/params:
args: [mailer.to_s, method.to_s, ""deliver_now"", params: params, args: Array(args)]

# In case of proc args/params, something like this:
args: ->(job_args) { params.(job_args[3][:params]) && args.(job_args[3][:args]) }
```"
46606,Test Parallelize Config inhibits Pry for Rails Contribution,alison-acuna,docs,2022-11-29T01:37:49Z,2022-12-20T16:41:45Z,2022-12-20T16:41:45Z,"### Steps to reproduce
<!-- (Guidelines for creating a bug report are [available
here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->

<!-- Paste your executable test case created from one of the scripts found [here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->

I started investigating my first rails issue and encountered an issue running pry with actionview tests.  I successfully cloned the rails project and ran bin/test test/template/text_helper_test.rb.  I added ""require pry, binding.pry"" to the relevant method and reran the test.  The pry session opened but typing in the session slowed to the point of being non-functional.  I needed to close the entire terminal rather than being able to !!! out of the pry session or do any investigation.

I later learned that commenting out actionview/test/abstract_unit.rb:180-184 resolved the test parallelization that was slowing my pry session

### Expected behavior
<!-- Tell us what should happen -->

Configuring rails for local development should be possible in a central location. The contribution guide should mention commenting out the parallelize lines for performant pry sessions.

### Actual behavior
<!-- Tell us what happens instead -->

Test parallelization slowed pry to unusably slow.

### System configuration
**Rails version**:

latest main

**Ruby version**:

2.7.6
"
46587,rendering from templates do now allow you to override contextual details as expected,virtualfunction,"actionview, attached PR",2022-11-26T15:57:19Z,2023-02-28T00:52:48Z,,"### Steps to reproduce

Rendering from a view doesn't allow you to override context defaults like the format. For instance, when rendering an HTML snippet from a template that was rendering JSON, such as below. 

```ruby
= render partial: 'item', formats: [ :html ] 
```

### Expected behaviour
This renders the HTML format of the template rather than the format inherited. 

### Actual behaviour
It renders the inherited format of the parent template (e.g. JSON)

### Potential cause

rendering_helper.rb needs to be updated to the following

```ruby
in_rendering_context(options) do |renderer|
  if block_given?
    renderer.render_partial(self, options.merge(partial: options[:layout]), &block)
  else
    renderer.render(self, options)
  end
end
```

Currently, it's ignoring the new context yielded from in_rendering_context and using the old view_renderer, which I think is wrong.

### System configuration
**Rails version**: 7.0.4

**Ruby version**: ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux-musl]
"
46578,Setting cookies domain doesn't work with Ruby 3.1.3 and integration tests,mrhead,third party issue,2022-11-25T13:05:53Z,2022-11-25T22:21:40Z,2022-11-25T22:21:40Z,"### Steps to reproduce

Run the following script with Ruby 3.1.3:

```ruby
require ""bundler/inline""

gemfile(true) do
  source ""https://rubygems.org""

  git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

  # Activate the gem you are reporting the issue against.
  gem ""rails"", ""7.0.4""
  # gem ""rails"", github: ""rails/rails"", branch: ""main""
end

require ""rack/test""
require ""action_controller/railtie""

class TestApp < Rails::Application
  config.root = __dir__
  config.hosts << ""example.org""
  config.session_store :cookie_store, key: ""cookie_store_key""
  secrets.secret_key_base = ""secret_key_base""

  config.logger = Logger.new($stdout)
  Rails.logger  = config.logger

  routes.draw do
    get ""/"" => ""test#index""
  end
end

class TestController < ActionController::Base
  include Rails.application.routes.url_helpers

  def index
    cookies[:foo] = { value: :bar, domain: :all }
    render plain: ""Home""
  end
end

require ""minitest/autorun""

class BugTest < Minitest::Test
  include Rack::Test::Methods

  def test_returns_success
    get ""/""
    assert last_response.ok?
  end

  private
    def app
      Rails.application
    end
end
```

### Expected behavior

The test should pass as it passes on Ruby 3.1.2.

### Actual behavior

The test fails with the following error:

```
E

Error:
BugTest#test_returns_success:
ArgumentError: invalid domain: "".example.org""
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/3.1.0/cgi/cookie.rb:128:in `domain='
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/3.1.0/cgi/cookie.rb:95:in `initialize'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-2.2.4/lib/rack/mock.rb:239:in `new'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-2.2.4/lib/rack/mock.rb:239:in `block in parse_cookies_from_header'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-2.2.4/lib/rack/mock.rb:236:in `each'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-2.2.4/lib/rack/mock.rb:236:in `parse_cookies_from_header'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-2.2.4/lib/rack/mock.rb:187:in `initialize'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-test-2.0.2/lib/rack/test.rb:360:in `new'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-test-2.0.2/lib/rack/test.rb:360:in `process_request'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-test-2.0.2/lib/rack/test.rb:165:in `custom_request'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/rack-test-2.0.2/lib/rack/test.rb:114:in `get'
    /Users/head/.rbenv/versions/3.1.3/lib/ruby/3.1.0/forwardable.rb:238:in `get'
    bug_test.rb:44:in `test_returns_success'


rails test bug_test.rb:43
```

### System configuration

**Rails version**: 7.0.4, main

**Ruby version**: 3.1.3

### Additional information

This happens only when running integration tests. When I run the development server, then everything works as expected.

I'm unsure if the issue is caused by Rails, the `rack` gem, or Ruby's built-in `cgi` gem.

Anyway, the test is failing because of this change in Ruby: https://github.com/ruby/ruby/pull/6784/files

[`Rack::MockResponse#parse_cookies_from_header`](https://github.com/rack/rack/blob/2.2.4/lib/rack/mock.rb#L243) sets the cookie domain to `.example.com`, which is not accepted by the built-in `cgi` gem because it doesn't match [this regular expression](https://github.com/ruby/ruby/blob/master/lib/cgi/cookie.rb#L45).

Please let me know if you need any further information."
